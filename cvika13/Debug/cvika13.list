
cvika13.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019f28  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000e130  0801a0d8  0801a0d8  0001b0d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08028208  08028208  0002a090  2**0
                  CONTENTS
  4 .ARM          00000008  08028208  08028208  00029208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08028210  08028210  0002a090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08028210  08028210  00029210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08028214  08028214  00029214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000090  20000000  08028218  0002a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002a090  2**0
                  CONTENTS
 10 .bss          000110c4  20000090  20000090  0002a090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20011154  20011154  0002a090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002a090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00034fa7  00000000  00000000  0002a0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000086eb  00000000  00000000  0005f067  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000025d8  00000000  00000000  00067758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001e17  00000000  00000000  00069d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000377a0  00000000  00000000  0006bb47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003f778  00000000  00000000  000a32e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001021dc  00000000  00000000  000e2a5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001e4c3b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a6a8  00000000  00000000  001e4c80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000054  00000000  00000000  001ef328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000090 	.word	0x20000090
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801a0c0 	.word	0x0801a0c0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000094 	.word	0x20000094
 80001ec:	0801a0c0 	.word	0x0801a0c0

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005b0:	b480      	push	{r7}
 80005b2:	b085      	sub	sp, #20
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	60f8      	str	r0, [r7, #12]
 80005b8:	60b9      	str	r1, [r7, #8]
 80005ba:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	4a07      	ldr	r2, [pc, #28]	@ (80005dc <vApplicationGetIdleTaskMemory+0x2c>)
 80005c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005c2:	68bb      	ldr	r3, [r7, #8]
 80005c4:	4a06      	ldr	r2, [pc, #24]	@ (80005e0 <vApplicationGetIdleTaskMemory+0x30>)
 80005c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	2280      	movs	r2, #128	@ 0x80
 80005cc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ce:	bf00      	nop
 80005d0:	3714      	adds	r7, #20
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	200000ac 	.word	0x200000ac
 80005e0:	2000014c 	.word	0x2000014c

080005e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e4:	b5b0      	push	{r4, r5, r7, lr}
 80005e6:	b088      	sub	sp, #32
 80005e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ea:	f000 ffdf 	bl	80015ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ee:	f000 f81f 	bl	8000630 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f2:	f000 f8c5 	bl	8000780 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005f6:	f000 f899 	bl	800072c <MX_USART3_UART_Init>
  MX_RNG_Init();
 80005fa:	f000 f883 	bl	8000704 <MX_RNG_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 80005fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000628 <main+0x44>)
 8000600:	1d3c      	adds	r4, r7, #4
 8000602:	461d      	mov	r5, r3
 8000604:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000606:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000608:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800060c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	2100      	movs	r1, #0
 8000614:	4618      	mov	r0, r3
 8000616:	f004 fd85 	bl	8005124 <osThreadCreate>
 800061a:	4603      	mov	r3, r0
 800061c:	4a03      	ldr	r2, [pc, #12]	@ (800062c <main+0x48>)
 800061e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000620:	f004 fd69 	bl	80050f6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000624:	bf00      	nop
 8000626:	e7fd      	b.n	8000624 <main+0x40>
 8000628:	0801a0e4 	.word	0x0801a0e4
 800062c:	200003a4 	.word	0x200003a4

08000630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b094      	sub	sp, #80	@ 0x50
 8000634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000636:	f107 0320 	add.w	r3, r7, #32
 800063a:	2230      	movs	r2, #48	@ 0x30
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f018 fc1f 	bl	8018e82 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000644:	f107 030c 	add.w	r3, r7, #12
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000654:	2300      	movs	r3, #0
 8000656:	60bb      	str	r3, [r7, #8]
 8000658:	4b28      	ldr	r3, [pc, #160]	@ (80006fc <SystemClock_Config+0xcc>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800065c:	4a27      	ldr	r2, [pc, #156]	@ (80006fc <SystemClock_Config+0xcc>)
 800065e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000662:	6413      	str	r3, [r2, #64]	@ 0x40
 8000664:	4b25      	ldr	r3, [pc, #148]	@ (80006fc <SystemClock_Config+0xcc>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000668:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800066c:	60bb      	str	r3, [r7, #8]
 800066e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000670:	2300      	movs	r3, #0
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	4b22      	ldr	r3, [pc, #136]	@ (8000700 <SystemClock_Config+0xd0>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a21      	ldr	r2, [pc, #132]	@ (8000700 <SystemClock_Config+0xd0>)
 800067a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800067e:	6013      	str	r3, [r2, #0]
 8000680:	4b1f      	ldr	r3, [pc, #124]	@ (8000700 <SystemClock_Config+0xd0>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800068c:	2301      	movs	r3, #1
 800068e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000690:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000694:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000696:	2302      	movs	r3, #2
 8000698:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800069a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800069e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006a0:	2304      	movs	r3, #4
 80006a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006a4:	23a8      	movs	r3, #168	@ 0xa8
 80006a6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a8:	2302      	movs	r3, #2
 80006aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006ac:	2307      	movs	r3, #7
 80006ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b0:	f107 0320 	add.w	r3, r7, #32
 80006b4:	4618      	mov	r0, r3
 80006b6:	f002 fd09 	bl	80030cc <HAL_RCC_OscConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006c0:	f000 f95a 	bl	8000978 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c4:	230f      	movs	r3, #15
 80006c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c8:	2302      	movs	r3, #2
 80006ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006d0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	2105      	movs	r1, #5
 80006e2:	4618      	mov	r0, r3
 80006e4:	f002 ff6a 	bl	80035bc <HAL_RCC_ClockConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ee:	f000 f943 	bl	8000978 <Error_Handler>
  }
}
 80006f2:	bf00      	nop
 80006f4:	3750      	adds	r7, #80	@ 0x50
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40023800 	.word	0x40023800
 8000700:	40007000 	.word	0x40007000

08000704 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000708:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <MX_RNG_Init+0x20>)
 800070a:	4a07      	ldr	r2, [pc, #28]	@ (8000728 <MX_RNG_Init+0x24>)
 800070c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800070e:	4805      	ldr	r0, [pc, #20]	@ (8000724 <MX_RNG_Init+0x20>)
 8000710:	f003 f9a6 	bl	8003a60 <HAL_RNG_Init>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800071a:	f000 f92d 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	2000034c 	.word	0x2000034c
 8000728:	50060800 	.word	0x50060800

0800072c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000730:	4b11      	ldr	r3, [pc, #68]	@ (8000778 <MX_USART3_UART_Init+0x4c>)
 8000732:	4a12      	ldr	r2, [pc, #72]	@ (800077c <MX_USART3_UART_Init+0x50>)
 8000734:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000736:	4b10      	ldr	r3, [pc, #64]	@ (8000778 <MX_USART3_UART_Init+0x4c>)
 8000738:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800073c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800073e:	4b0e      	ldr	r3, [pc, #56]	@ (8000778 <MX_USART3_UART_Init+0x4c>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000744:	4b0c      	ldr	r3, [pc, #48]	@ (8000778 <MX_USART3_UART_Init+0x4c>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800074a:	4b0b      	ldr	r3, [pc, #44]	@ (8000778 <MX_USART3_UART_Init+0x4c>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000750:	4b09      	ldr	r3, [pc, #36]	@ (8000778 <MX_USART3_UART_Init+0x4c>)
 8000752:	220c      	movs	r2, #12
 8000754:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000756:	4b08      	ldr	r3, [pc, #32]	@ (8000778 <MX_USART3_UART_Init+0x4c>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800075c:	4b06      	ldr	r3, [pc, #24]	@ (8000778 <MX_USART3_UART_Init+0x4c>)
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000762:	4805      	ldr	r0, [pc, #20]	@ (8000778 <MX_USART3_UART_Init+0x4c>)
 8000764:	f003 fc9e 	bl	80040a4 <HAL_UART_Init>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800076e:	f000 f903 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	2000035c 	.word	0x2000035c
 800077c:	40004800 	.word	0x40004800

08000780 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b08c      	sub	sp, #48	@ 0x30
 8000784:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000786:	f107 031c 	add.w	r3, r7, #28
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]
 8000794:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	61bb      	str	r3, [r7, #24]
 800079a:	4b5b      	ldr	r3, [pc, #364]	@ (8000908 <MX_GPIO_Init+0x188>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	4a5a      	ldr	r2, [pc, #360]	@ (8000908 <MX_GPIO_Init+0x188>)
 80007a0:	f043 0304 	orr.w	r3, r3, #4
 80007a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a6:	4b58      	ldr	r3, [pc, #352]	@ (8000908 <MX_GPIO_Init+0x188>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	f003 0304 	and.w	r3, r3, #4
 80007ae:	61bb      	str	r3, [r7, #24]
 80007b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	617b      	str	r3, [r7, #20]
 80007b6:	4b54      	ldr	r3, [pc, #336]	@ (8000908 <MX_GPIO_Init+0x188>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	4a53      	ldr	r2, [pc, #332]	@ (8000908 <MX_GPIO_Init+0x188>)
 80007bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c2:	4b51      	ldr	r3, [pc, #324]	@ (8000908 <MX_GPIO_Init+0x188>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007ca:	617b      	str	r3, [r7, #20]
 80007cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	613b      	str	r3, [r7, #16]
 80007d2:	4b4d      	ldr	r3, [pc, #308]	@ (8000908 <MX_GPIO_Init+0x188>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	4a4c      	ldr	r2, [pc, #304]	@ (8000908 <MX_GPIO_Init+0x188>)
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007de:	4b4a      	ldr	r3, [pc, #296]	@ (8000908 <MX_GPIO_Init+0x188>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	613b      	str	r3, [r7, #16]
 80007e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	60fb      	str	r3, [r7, #12]
 80007ee:	4b46      	ldr	r3, [pc, #280]	@ (8000908 <MX_GPIO_Init+0x188>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	4a45      	ldr	r2, [pc, #276]	@ (8000908 <MX_GPIO_Init+0x188>)
 80007f4:	f043 0302 	orr.w	r3, r3, #2
 80007f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fa:	4b43      	ldr	r3, [pc, #268]	@ (8000908 <MX_GPIO_Init+0x188>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	f003 0302 	and.w	r3, r3, #2
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	60bb      	str	r3, [r7, #8]
 800080a:	4b3f      	ldr	r3, [pc, #252]	@ (8000908 <MX_GPIO_Init+0x188>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	4a3e      	ldr	r2, [pc, #248]	@ (8000908 <MX_GPIO_Init+0x188>)
 8000810:	f043 0308 	orr.w	r3, r3, #8
 8000814:	6313      	str	r3, [r2, #48]	@ 0x30
 8000816:	4b3c      	ldr	r3, [pc, #240]	@ (8000908 <MX_GPIO_Init+0x188>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	f003 0308 	and.w	r3, r3, #8
 800081e:	60bb      	str	r3, [r7, #8]
 8000820:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	4b38      	ldr	r3, [pc, #224]	@ (8000908 <MX_GPIO_Init+0x188>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	4a37      	ldr	r2, [pc, #220]	@ (8000908 <MX_GPIO_Init+0x188>)
 800082c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000830:	6313      	str	r3, [r2, #48]	@ 0x30
 8000832:	4b35      	ldr	r3, [pc, #212]	@ (8000908 <MX_GPIO_Init+0x188>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000844:	4831      	ldr	r0, [pc, #196]	@ (800090c <MX_GPIO_Init+0x18c>)
 8000846:	f002 fc27 	bl	8003098 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800084a:	2200      	movs	r2, #0
 800084c:	2140      	movs	r1, #64	@ 0x40
 800084e:	4830      	ldr	r0, [pc, #192]	@ (8000910 <MX_GPIO_Init+0x190>)
 8000850:	f002 fc22 	bl	8003098 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000854:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800085a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800085e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000864:	f107 031c 	add.w	r3, r7, #28
 8000868:	4619      	mov	r1, r3
 800086a:	482a      	ldr	r0, [pc, #168]	@ (8000914 <MX_GPIO_Init+0x194>)
 800086c:	f002 fa50 	bl	8002d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED3_Pin|LED2_Pin;
 8000870:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000876:	2301      	movs	r3, #1
 8000878:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087e:	2300      	movs	r3, #0
 8000880:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	4619      	mov	r1, r3
 8000888:	4820      	ldr	r0, [pc, #128]	@ (800090c <MX_GPIO_Init+0x18c>)
 800088a:	f002 fa41 	bl	8002d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800088e:	2340      	movs	r3, #64	@ 0x40
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000892:	2301      	movs	r3, #1
 8000894:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	2300      	movs	r3, #0
 800089c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800089e:	f107 031c 	add.w	r3, r7, #28
 80008a2:	4619      	mov	r1, r3
 80008a4:	481a      	ldr	r0, [pc, #104]	@ (8000910 <MX_GPIO_Init+0x190>)
 80008a6:	f002 fa33 	bl	8002d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008aa:	2380      	movs	r3, #128	@ 0x80
 80008ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ae:	2300      	movs	r3, #0
 80008b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	4619      	mov	r1, r3
 80008bc:	4814      	ldr	r0, [pc, #80]	@ (8000910 <MX_GPIO_Init+0x190>)
 80008be:	f002 fa27 	bl	8002d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80008c2:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80008c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c8:	2302      	movs	r3, #2
 80008ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d0:	2303      	movs	r3, #3
 80008d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008d4:	230a      	movs	r3, #10
 80008d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d8:	f107 031c 	add.w	r3, r7, #28
 80008dc:	4619      	mov	r1, r3
 80008de:	480e      	ldr	r0, [pc, #56]	@ (8000918 <MX_GPIO_Init+0x198>)
 80008e0:	f002 fa16 	bl	8002d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80008e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80008e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ea:	2300      	movs	r3, #0
 80008ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80008f2:	f107 031c 	add.w	r3, r7, #28
 80008f6:	4619      	mov	r1, r3
 80008f8:	4807      	ldr	r0, [pc, #28]	@ (8000918 <MX_GPIO_Init+0x198>)
 80008fa:	f002 fa09 	bl	8002d10 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008fe:	bf00      	nop
 8000900:	3730      	adds	r7, #48	@ 0x30
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40023800 	.word	0x40023800
 800090c:	40020400 	.word	0x40020400
 8000910:	40021800 	.word	0x40021800
 8000914:	40020800 	.word	0x40020800
 8000918:	40020000 	.word	0x40020000

0800091c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
	uint32_t rnd;
	HAL_RNG_GenerateRandomNumber(&hrng, &rnd);
 8000924:	f107 030c 	add.w	r3, r7, #12
 8000928:	4619      	mov	r1, r3
 800092a:	4809      	ldr	r0, [pc, #36]	@ (8000950 <StartDefaultTask+0x34>)
 800092c:	f003 f8c2 	bl	8003ab4 <HAL_RNG_GenerateRandomNumber>
	srand(rnd);
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	4618      	mov	r0, r3
 8000934:	f018 f8d8 	bl	8018ae8 <srand>
  MX_LWIP_Init();
 8000938:	f003 fe78 	bl	800462c <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  tcpecho_init();
 800093c:	f000 faa0 	bl	8000e80 <tcpecho_init>
  telnet_init();
 8000940:	f000 fcf0 	bl	8001324 <telnet_init>
  httpd_init();
 8000944:	f00a fe70 	bl	800b628 <httpd_init>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000948:	2001      	movs	r0, #1
 800094a:	f004 fc37 	bl	80051bc <osDelay>
 800094e:	e7fb      	b.n	8000948 <StartDefaultTask+0x2c>
 8000950:	2000034c 	.word	0x2000034c

08000954 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a04      	ldr	r2, [pc, #16]	@ (8000974 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d101      	bne.n	800096a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000966:	f000 fe43 	bl	80015f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800096a:	bf00      	nop
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40002000 	.word	0x40002000

08000978 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800097c:	b672      	cpsid	i
}
 800097e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000980:	bf00      	nop
 8000982:	e7fd      	b.n	8000980 <Error_Handler+0x8>

08000984 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	607b      	str	r3, [r7, #4]
 800098e:	4b12      	ldr	r3, [pc, #72]	@ (80009d8 <HAL_MspInit+0x54>)
 8000990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000992:	4a11      	ldr	r2, [pc, #68]	@ (80009d8 <HAL_MspInit+0x54>)
 8000994:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000998:	6453      	str	r3, [r2, #68]	@ 0x44
 800099a:	4b0f      	ldr	r3, [pc, #60]	@ (80009d8 <HAL_MspInit+0x54>)
 800099c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800099e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	603b      	str	r3, [r7, #0]
 80009aa:	4b0b      	ldr	r3, [pc, #44]	@ (80009d8 <HAL_MspInit+0x54>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ae:	4a0a      	ldr	r2, [pc, #40]	@ (80009d8 <HAL_MspInit+0x54>)
 80009b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80009b6:	4b08      	ldr	r3, [pc, #32]	@ (80009d8 <HAL_MspInit+0x54>)
 80009b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009be:	603b      	str	r3, [r7, #0]
 80009c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009c2:	2200      	movs	r2, #0
 80009c4:	210f      	movs	r1, #15
 80009c6:	f06f 0001 	mvn.w	r0, #1
 80009ca:	f000 ff0d 	bl	80017e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40023800 	.word	0x40023800

080009dc <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80009dc:	b480      	push	{r7}
 80009de:	b085      	sub	sp, #20
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a0b      	ldr	r2, [pc, #44]	@ (8000a18 <HAL_RNG_MspInit+0x3c>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d10d      	bne.n	8000a0a <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	4b0a      	ldr	r3, [pc, #40]	@ (8000a1c <HAL_RNG_MspInit+0x40>)
 80009f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009f6:	4a09      	ldr	r2, [pc, #36]	@ (8000a1c <HAL_RNG_MspInit+0x40>)
 80009f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009fc:	6353      	str	r3, [r2, #52]	@ 0x34
 80009fe:	4b07      	ldr	r3, [pc, #28]	@ (8000a1c <HAL_RNG_MspInit+0x40>)
 8000a00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8000a0a:	bf00      	nop
 8000a0c:	3714      	adds	r7, #20
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	50060800 	.word	0x50060800
 8000a1c:	40023800 	.word	0x40023800

08000a20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b08a      	sub	sp, #40	@ 0x28
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]
 8000a36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a19      	ldr	r2, [pc, #100]	@ (8000aa4 <HAL_UART_MspInit+0x84>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d12c      	bne.n	8000a9c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	613b      	str	r3, [r7, #16]
 8000a46:	4b18      	ldr	r3, [pc, #96]	@ (8000aa8 <HAL_UART_MspInit+0x88>)
 8000a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a4a:	4a17      	ldr	r2, [pc, #92]	@ (8000aa8 <HAL_UART_MspInit+0x88>)
 8000a4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a50:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a52:	4b15      	ldr	r3, [pc, #84]	@ (8000aa8 <HAL_UART_MspInit+0x88>)
 8000a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a56:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000a5a:	613b      	str	r3, [r7, #16]
 8000a5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60fb      	str	r3, [r7, #12]
 8000a62:	4b11      	ldr	r3, [pc, #68]	@ (8000aa8 <HAL_UART_MspInit+0x88>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a66:	4a10      	ldr	r2, [pc, #64]	@ (8000aa8 <HAL_UART_MspInit+0x88>)
 8000a68:	f043 0308 	orr.w	r3, r3, #8
 8000a6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa8 <HAL_UART_MspInit+0x88>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a72:	f003 0308 	and.w	r3, r3, #8
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a7a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a80:	2302      	movs	r3, #2
 8000a82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a88:	2303      	movs	r3, #3
 8000a8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a8c:	2307      	movs	r3, #7
 8000a8e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a90:	f107 0314 	add.w	r3, r7, #20
 8000a94:	4619      	mov	r1, r3
 8000a96:	4805      	ldr	r0, [pc, #20]	@ (8000aac <HAL_UART_MspInit+0x8c>)
 8000a98:	f002 f93a 	bl	8002d10 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000a9c:	bf00      	nop
 8000a9e:	3728      	adds	r7, #40	@ 0x28
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	40004800 	.word	0x40004800
 8000aa8:	40023800 	.word	0x40023800
 8000aac:	40020c00 	.word	0x40020c00

08000ab0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b08e      	sub	sp, #56	@ 0x38
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000abc:	2300      	movs	r3, #0
 8000abe:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	4b33      	ldr	r3, [pc, #204]	@ (8000b94 <HAL_InitTick+0xe4>)
 8000ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac8:	4a32      	ldr	r2, [pc, #200]	@ (8000b94 <HAL_InitTick+0xe4>)
 8000aca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ace:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ad0:	4b30      	ldr	r3, [pc, #192]	@ (8000b94 <HAL_InitTick+0xe4>)
 8000ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ad8:	60fb      	str	r3, [r7, #12]
 8000ada:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000adc:	f107 0210 	add.w	r2, r7, #16
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	4611      	mov	r1, r2
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f002 ff88 	bl	80039fc <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000aec:	6a3b      	ldr	r3, [r7, #32]
 8000aee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000af0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d103      	bne.n	8000afe <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000af6:	f002 ff59 	bl	80039ac <HAL_RCC_GetPCLK1Freq>
 8000afa:	6378      	str	r0, [r7, #52]	@ 0x34
 8000afc:	e004      	b.n	8000b08 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000afe:	f002 ff55 	bl	80039ac <HAL_RCC_GetPCLK1Freq>
 8000b02:	4603      	mov	r3, r0
 8000b04:	005b      	lsls	r3, r3, #1
 8000b06:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b0a:	4a23      	ldr	r2, [pc, #140]	@ (8000b98 <HAL_InitTick+0xe8>)
 8000b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b10:	0c9b      	lsrs	r3, r3, #18
 8000b12:	3b01      	subs	r3, #1
 8000b14:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000b16:	4b21      	ldr	r3, [pc, #132]	@ (8000b9c <HAL_InitTick+0xec>)
 8000b18:	4a21      	ldr	r2, [pc, #132]	@ (8000ba0 <HAL_InitTick+0xf0>)
 8000b1a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000b1c:	4b1f      	ldr	r3, [pc, #124]	@ (8000b9c <HAL_InitTick+0xec>)
 8000b1e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b22:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000b24:	4a1d      	ldr	r2, [pc, #116]	@ (8000b9c <HAL_InitTick+0xec>)
 8000b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b28:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000b2a:	4b1c      	ldr	r3, [pc, #112]	@ (8000b9c <HAL_InitTick+0xec>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b30:	4b1a      	ldr	r3, [pc, #104]	@ (8000b9c <HAL_InitTick+0xec>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b36:	4b19      	ldr	r3, [pc, #100]	@ (8000b9c <HAL_InitTick+0xec>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8000b3c:	4817      	ldr	r0, [pc, #92]	@ (8000b9c <HAL_InitTick+0xec>)
 8000b3e:	f003 f80f 	bl	8003b60 <HAL_TIM_Base_Init>
 8000b42:	4603      	mov	r3, r0
 8000b44:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000b48:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d11b      	bne.n	8000b88 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8000b50:	4812      	ldr	r0, [pc, #72]	@ (8000b9c <HAL_InitTick+0xec>)
 8000b52:	f003 f85f 	bl	8003c14 <HAL_TIM_Base_Start_IT>
 8000b56:	4603      	mov	r3, r0
 8000b58:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000b5c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d111      	bne.n	8000b88 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000b64:	202d      	movs	r0, #45	@ 0x2d
 8000b66:	f000 fe5b 	bl	8001820 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2b0f      	cmp	r3, #15
 8000b6e:	d808      	bhi.n	8000b82 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8000b70:	2200      	movs	r2, #0
 8000b72:	6879      	ldr	r1, [r7, #4]
 8000b74:	202d      	movs	r0, #45	@ 0x2d
 8000b76:	f000 fe37 	bl	80017e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ba4 <HAL_InitTick+0xf4>)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	6013      	str	r3, [r2, #0]
 8000b80:	e002      	b.n	8000b88 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000b82:	2301      	movs	r3, #1
 8000b84:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b88:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3738      	adds	r7, #56	@ 0x38
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40023800 	.word	0x40023800
 8000b98:	431bde83 	.word	0x431bde83
 8000b9c:	200003a8 	.word	0x200003a8
 8000ba0:	40002000 	.word	0x40002000
 8000ba4:	20000004 	.word	0x20000004

08000ba8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bac:	bf00      	nop
 8000bae:	e7fd      	b.n	8000bac <NMI_Handler+0x4>

08000bb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb4:	bf00      	nop
 8000bb6:	e7fd      	b.n	8000bb4 <HardFault_Handler+0x4>

08000bb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bbc:	bf00      	nop
 8000bbe:	e7fd      	b.n	8000bbc <MemManage_Handler+0x4>

08000bc0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bc4:	bf00      	nop
 8000bc6:	e7fd      	b.n	8000bc4 <BusFault_Handler+0x4>

08000bc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bcc:	bf00      	nop
 8000bce:	e7fd      	b.n	8000bcc <UsageFault_Handler+0x4>

08000bd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
	...

08000be0 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000be4:	4802      	ldr	r0, [pc, #8]	@ (8000bf0 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000be6:	f003 f885 	bl	8003cf4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	200003a8 	.word	0x200003a8

08000bf4 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000bf8:	4802      	ldr	r0, [pc, #8]	@ (8000c04 <ETH_IRQHandler+0x10>)
 8000bfa:	f001 f9ad 	bl	8001f58 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20005014 	.word	0x20005014

08000c08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  return 1;
 8000c0c:	2301      	movs	r3, #1
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <_kill>:

int _kill(int pid, int sig)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000c22:	4b05      	ldr	r3, [pc, #20]	@ (8000c38 <_kill+0x20>)
 8000c24:	2216      	movs	r2, #22
 8000c26:	601a      	str	r2, [r3, #0]
  return -1;
 8000c28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	20011144 	.word	0x20011144

08000c3c <_exit>:

void _exit (int status)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000c44:	f04f 31ff 	mov.w	r1, #4294967295
 8000c48:	6878      	ldr	r0, [r7, #4]
 8000c4a:	f7ff ffe5 	bl	8000c18 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000c4e:	bf00      	nop
 8000c50:	e7fd      	b.n	8000c4e <_exit+0x12>

08000c52 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b086      	sub	sp, #24
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	60f8      	str	r0, [r7, #12]
 8000c5a:	60b9      	str	r1, [r7, #8]
 8000c5c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c5e:	2300      	movs	r3, #0
 8000c60:	617b      	str	r3, [r7, #20]
 8000c62:	e00a      	b.n	8000c7a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c64:	f3af 8000 	nop.w
 8000c68:	4601      	mov	r1, r0
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	1c5a      	adds	r2, r3, #1
 8000c6e:	60ba      	str	r2, [r7, #8]
 8000c70:	b2ca      	uxtb	r2, r1
 8000c72:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	3301      	adds	r3, #1
 8000c78:	617b      	str	r3, [r7, #20]
 8000c7a:	697a      	ldr	r2, [r7, #20]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	429a      	cmp	r2, r3
 8000c80:	dbf0      	blt.n	8000c64 <_read+0x12>
  }

  return len;
 8000c82:	687b      	ldr	r3, [r7, #4]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3718      	adds	r7, #24
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b086      	sub	sp, #24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c98:	2300      	movs	r3, #0
 8000c9a:	617b      	str	r3, [r7, #20]
 8000c9c:	e009      	b.n	8000cb2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c9e:	68bb      	ldr	r3, [r7, #8]
 8000ca0:	1c5a      	adds	r2, r3, #1
 8000ca2:	60ba      	str	r2, [r7, #8]
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	617b      	str	r3, [r7, #20]
 8000cb2:	697a      	ldr	r2, [r7, #20]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	dbf1      	blt.n	8000c9e <_write+0x12>
  }
  return len;
 8000cba:	687b      	ldr	r3, [r7, #4]
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3718      	adds	r7, #24
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <_close>:

int _close(int file)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ccc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000cec:	605a      	str	r2, [r3, #4]
  return 0;
 8000cee:	2300      	movs	r3, #0
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <_isatty>:

int _isatty(int file)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d04:	2301      	movs	r3, #1
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	370c      	adds	r7, #12
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr

08000d12 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d12:	b480      	push	{r7}
 8000d14:	b085      	sub	sp, #20
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	60f8      	str	r0, [r7, #12]
 8000d1a:	60b9      	str	r1, [r7, #8]
 8000d1c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d1e:	2300      	movs	r3, #0
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3714      	adds	r7, #20
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b087      	sub	sp, #28
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d34:	4a14      	ldr	r2, [pc, #80]	@ (8000d88 <_sbrk+0x5c>)
 8000d36:	4b15      	ldr	r3, [pc, #84]	@ (8000d8c <_sbrk+0x60>)
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d40:	4b13      	ldr	r3, [pc, #76]	@ (8000d90 <_sbrk+0x64>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d102      	bne.n	8000d4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d48:	4b11      	ldr	r3, [pc, #68]	@ (8000d90 <_sbrk+0x64>)
 8000d4a:	4a12      	ldr	r2, [pc, #72]	@ (8000d94 <_sbrk+0x68>)
 8000d4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d4e:	4b10      	ldr	r3, [pc, #64]	@ (8000d90 <_sbrk+0x64>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4413      	add	r3, r2
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d205      	bcs.n	8000d68 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000d5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000d98 <_sbrk+0x6c>)
 8000d5e:	220c      	movs	r2, #12
 8000d60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d62:	f04f 33ff 	mov.w	r3, #4294967295
 8000d66:	e009      	b.n	8000d7c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d68:	4b09      	ldr	r3, [pc, #36]	@ (8000d90 <_sbrk+0x64>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d6e:	4b08      	ldr	r3, [pc, #32]	@ (8000d90 <_sbrk+0x64>)
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4413      	add	r3, r2
 8000d76:	4a06      	ldr	r2, [pc, #24]	@ (8000d90 <_sbrk+0x64>)
 8000d78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	371c      	adds	r7, #28
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	20030000 	.word	0x20030000
 8000d8c:	00000400 	.word	0x00000400
 8000d90:	200003f0 	.word	0x200003f0
 8000d94:	20011158 	.word	0x20011158
 8000d98:	20011144 	.word	0x20011144

08000d9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000da0:	4b06      	ldr	r3, [pc, #24]	@ (8000dbc <SystemInit+0x20>)
 8000da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000da6:	4a05      	ldr	r2, [pc, #20]	@ (8000dbc <SystemInit+0x20>)
 8000da8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <tcpecho_thread>:



/*-----------------------------------------------------------------------------------*/
static void tcpecho_thread(void *arg)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08a      	sub	sp, #40	@ 0x28
 8000dc4:	af02      	add	r7, sp, #8
 8000dc6:	6078      	str	r0, [r7, #4]
  u16_t len;
      
  LWIP_UNUSED_ARG(arg);

  /* Create a new connection identifier. */
  conn = netconn_new(NETCONN_TCP);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	2100      	movs	r1, #0
 8000dcc:	2010      	movs	r0, #16
 8000dce:	f007 f9b9 	bl	8008144 <netconn_new_with_proto_and_callback>
 8000dd2:	61f8      	str	r0, [r7, #28]
  
  if (conn!=NULL)
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d04e      	beq.n	8000e78 <tcpecho_thread+0xb8>
  {  
    /* Bind connection to well known port number 7. */
    err = netconn_bind(conn, NULL, 7);
 8000dda:	2207      	movs	r2, #7
 8000ddc:	2100      	movs	r1, #0
 8000dde:	69f8      	ldr	r0, [r7, #28]
 8000de0:	f007 fa6a 	bl	80082b8 <netconn_bind>
 8000de4:	4603      	mov	r3, r0
 8000de6:	76fb      	strb	r3, [r7, #27]
    
    if (err == ERR_OK)
 8000de8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d13f      	bne.n	8000e70 <tcpecho_thread+0xb0>
    {
      /* Tell connection to go into listening mode. */
      netconn_listen(conn);
 8000df0:	21ff      	movs	r1, #255	@ 0xff
 8000df2:	69f8      	ldr	r0, [r7, #28]
 8000df4:	f007 fad0 	bl	8008398 <netconn_listen_with_backlog>
    
      while (1) 
      {
        /* Grab new connection. */
         accept_err = netconn_accept(conn, &newconn);
 8000df8:	f107 0314 	add.w	r3, r7, #20
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	69f8      	ldr	r0, [r7, #28]
 8000e00:	f007 faf6 	bl	80083f0 <netconn_accept>
 8000e04:	4603      	mov	r3, r0
 8000e06:	76bb      	strb	r3, [r7, #26]
    
        /* Process the new connection. */
        if (accept_err == ERR_OK) 
 8000e08:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d1f3      	bne.n	8000df8 <tcpecho_thread+0x38>
        {

          while (netconn_recv(newconn, &buf) == ERR_OK) 
 8000e10:	e01b      	b.n	8000e4a <tcpecho_thread+0x8a>
          {
            do 
            {
              netbuf_data(buf, &data, &len);
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	f107 020a 	add.w	r2, r7, #10
 8000e18:	f107 010c 	add.w	r1, r7, #12
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f009 fbd7 	bl	800a5d0 <netbuf_data>
              netconn_write(newconn, data, len, NETCONN_COPY);
 8000e22:	6978      	ldr	r0, [r7, #20]
 8000e24:	68f9      	ldr	r1, [r7, #12]
 8000e26:	897b      	ldrh	r3, [r7, #10]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	9300      	str	r3, [sp, #0]
 8000e2e:	2301      	movs	r3, #1
 8000e30:	f007 fd60 	bl	80088f4 <netconn_write_partly>
          
            } 
            while (netbuf_next(buf) >= 0);
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	4618      	mov	r0, r3
 8000e38:	f009 fc14 	bl	800a664 <netbuf_next>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	dae7      	bge.n	8000e12 <tcpecho_thread+0x52>
          
            netbuf_delete(buf);
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	4618      	mov	r0, r3
 8000e46:	f009 fba3 	bl	800a590 <netbuf_delete>
          while (netconn_recv(newconn, &buf) == ERR_OK) 
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	f107 0210 	add.w	r2, r7, #16
 8000e50:	4611      	mov	r1, r2
 8000e52:	4618      	mov	r0, r3
 8000e54:	f007 fcd4 	bl	8008800 <netconn_recv>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d0d9      	beq.n	8000e12 <tcpecho_thread+0x52>
          }
        
          /* Close connection and discard connection identifier. */
          netconn_close(newconn);
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f007 fe49 	bl	8008af8 <netconn_close>
          netconn_delete(newconn);
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f007 fa09 	bl	8008280 <netconn_delete>
         accept_err = netconn_accept(conn, &newconn);
 8000e6e:	e7c3      	b.n	8000df8 <tcpecho_thread+0x38>
        }
      }
    }
    else
    {
      netconn_delete(newconn);
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	4618      	mov	r0, r3
 8000e74:	f007 fa04 	bl	8008280 <netconn_delete>
    }
  }
}
 8000e78:	bf00      	nop
 8000e7a:	3720      	adds	r7, #32
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <tcpecho_init>:
/*-----------------------------------------------------------------------------------*/

void tcpecho_init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af02      	add	r7, sp, #8
  sys_thread_new("tcpecho_thread", tcpecho_thread, NULL, DEFAULT_THREAD_STACKSIZE, TCPECHO_THREAD_PRIO);
 8000e86:	2304      	movs	r3, #4
 8000e88:	9300      	str	r3, [sp, #0]
 8000e8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e8e:	2200      	movs	r2, #0
 8000e90:	4903      	ldr	r1, [pc, #12]	@ (8000ea0 <tcpecho_init+0x20>)
 8000e92:	4804      	ldr	r0, [pc, #16]	@ (8000ea4 <tcpecho_init+0x24>)
 8000e94:	f017 fde4 	bl	8018a60 <sys_thread_new>
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	08000dc1 	.word	0x08000dc1
 8000ea4:	0801a100 	.word	0x0801a100

08000ea8 <http_client>:
#include "lwip/api.h"

#define TCPECHO_THREAD_PRIO  ( tskIDLE_PRIORITY + 4 )
#define CMD_BUFFER_LEN 256
static void http_client(char *s, uint16_t size)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08a      	sub	sp, #40	@ 0x28
 8000eac:	af02      	add	r7, sp, #8
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	807b      	strh	r3, [r7, #2]
	struct netconn *client;
	struct netbuf *buf;
	ip_addr_t ip;
	uint16_t len = 0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	83fb      	strh	r3, [r7, #30]
	IP_ADDR4(&ip, 147,229,144,124);
 8000eb8:	4b2a      	ldr	r3, [pc, #168]	@ (8000f64 <http_client+0xbc>)
 8000eba:	60fb      	str	r3, [r7, #12]
	const char *request = "GET /ip.php HTTP/1.1\r\n"
 8000ebc:	4b2a      	ldr	r3, [pc, #168]	@ (8000f68 <http_client+0xc0>)
 8000ebe:	61bb      	str	r3, [r7, #24]
			"Host: www.urel.feec.vutbr.cz\r\n"
			"Connection: close\r\n"
			"\r\n\r\n";
	client = netconn_new(NETCONN_TCP);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	2010      	movs	r0, #16
 8000ec6:	f007 f93d 	bl	8008144 <netconn_new_with_proto_and_callback>
 8000eca:	6178      	str	r0, [r7, #20]
	if (netconn_connect(client, &ip, 80) == ERR_OK) {
 8000ecc:	f107 030c 	add.w	r3, r7, #12
 8000ed0:	2250      	movs	r2, #80	@ 0x50
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	6978      	ldr	r0, [r7, #20]
 8000ed6:	f007 fa27 	bl	8008328 <netconn_connect>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d136      	bne.n	8000f4e <http_client+0xa6>
		netconn_write(client, request, strlen(request), NETCONN_COPY);
 8000ee0:	69b8      	ldr	r0, [r7, #24]
 8000ee2:	f7ff f98f 	bl	8000204 <strlen>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	2300      	movs	r3, #0
 8000eea:	9300      	str	r3, [sp, #0]
 8000eec:	2301      	movs	r3, #1
 8000eee:	69b9      	ldr	r1, [r7, #24]
 8000ef0:	6978      	ldr	r0, [r7, #20]
 8000ef2:	f007 fcff 	bl	80088f4 <netconn_write_partly>
		// Receive the HTTP response
		s[0] = 0;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2200      	movs	r2, #0
 8000efa:	701a      	strb	r2, [r3, #0]
		while (len < size && netconn_recv(client, &buf) == ERR_OK) {
 8000efc:	e019      	b.n	8000f32 <http_client+0x8a>
			len += netbuf_copy(buf, &s[len], size-len);
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	6818      	ldr	r0, [r3, #0]
 8000f02:	8bfb      	ldrh	r3, [r7, #30]
 8000f04:	687a      	ldr	r2, [r7, #4]
 8000f06:	18d1      	adds	r1, r2, r3
 8000f08:	887a      	ldrh	r2, [r7, #2]
 8000f0a:	8bfb      	ldrh	r3, [r7, #30]
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	b29a      	uxth	r2, r3
 8000f10:	2300      	movs	r3, #0
 8000f12:	f00c f9e3 	bl	800d2dc <pbuf_copy_partial>
 8000f16:	4603      	mov	r3, r0
 8000f18:	461a      	mov	r2, r3
 8000f1a:	8bfb      	ldrh	r3, [r7, #30]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	83fb      	strh	r3, [r7, #30]
			s[len] = 0;
 8000f20:	8bfb      	ldrh	r3, [r7, #30]
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	4413      	add	r3, r2
 8000f26:	2200      	movs	r2, #0
 8000f28:	701a      	strb	r2, [r3, #0]
			netbuf_delete(buf);
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f009 fb2f 	bl	800a590 <netbuf_delete>
		while (len < size && netconn_recv(client, &buf) == ERR_OK) {
 8000f32:	8bfa      	ldrh	r2, [r7, #30]
 8000f34:	887b      	ldrh	r3, [r7, #2]
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d20d      	bcs.n	8000f56 <http_client+0xae>
 8000f3a:	f107 0310 	add.w	r3, r7, #16
 8000f3e:	4619      	mov	r1, r3
 8000f40:	6978      	ldr	r0, [r7, #20]
 8000f42:	f007 fc5d 	bl	8008800 <netconn_recv>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d0d8      	beq.n	8000efe <http_client+0x56>
 8000f4c:	e003      	b.n	8000f56 <http_client+0xae>
		}
	} else {
		sprintf(s, "Chyba pripojeni\n");
 8000f4e:	4907      	ldr	r1, [pc, #28]	@ (8000f6c <http_client+0xc4>)
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f017 ff09 	bl	8018d68 <siprintf>
	}
	netconn_delete(client);
 8000f56:	6978      	ldr	r0, [r7, #20]
 8000f58:	f007 f992 	bl	8008280 <netconn_delete>
}
 8000f5c:	bf00      	nop
 8000f5e:	3720      	adds	r7, #32
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	7c90e593 	.word	0x7c90e593
 8000f68:	0801a110 	.word	0x0801a110
 8000f6c:	0801a15c 	.word	0x0801a15c

08000f70 <telnet_process_command>:

static void telnet_process_command(char *cmd, struct netconn *conn)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	f5ad 6da3 	sub.w	sp, sp, #1304	@ 0x518
 8000f76:	af02      	add	r7, sp, #8
 8000f78:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8000f7c:	f2a3 530c 	subw	r3, r3, #1292	@ 0x50c
 8000f80:	6018      	str	r0, [r3, #0]
 8000f82:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8000f86:	f5a3 63a2 	sub.w	r3, r3, #1296	@ 0x510
 8000f8a:	6019      	str	r1, [r3, #0]
	char s [CMD_BUFFER_LEN];
	char *token;
	char s2 [1024];
	token = strtok(cmd, " ");
 8000f8c:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8000f90:	f2a3 530c 	subw	r3, r3, #1292	@ 0x50c
 8000f94:	4987      	ldr	r1, [pc, #540]	@ (80011b4 <telnet_process_command+0x244>)
 8000f96:	6818      	ldr	r0, [r3, #0]
 8000f98:	f017 ffb6 	bl	8018f08 <strtok>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	f8c7 350c 	str.w	r3, [r7, #1292]	@ 0x50c
	if (strcasecmp(token, "HELLO") == 0) {
 8000fa2:	4985      	ldr	r1, [pc, #532]	@ (80011b8 <telnet_process_command+0x248>)
 8000fa4:	f8d7 050c 	ldr.w	r0, [r7, #1292]	@ 0x50c
 8000fa8:	f017 ff74 	bl	8018e94 <strcasecmp>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d116      	bne.n	8000fe0 <telnet_process_command+0x70>
		sprintf(token, "%s", cmd);
 8000fb2:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8000fb6:	f2a3 530c 	subw	r3, r3, #1292	@ 0x50c
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	497f      	ldr	r1, [pc, #508]	@ (80011bc <telnet_process_command+0x24c>)
 8000fbe:	f8d7 050c 	ldr.w	r0, [r7, #1292]	@ 0x50c
 8000fc2:	f017 fed1 	bl	8018d68 <siprintf>
		netconn_write(conn, "OK\n", strlen("OK\n"), NETCONN_COPY);
 8000fc6:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8000fca:	f5a3 60a2 	sub.w	r0, r3, #1296	@ 0x510
 8000fce:	2300      	movs	r3, #0
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	2203      	movs	r2, #3
 8000fd6:	497a      	ldr	r1, [pc, #488]	@ (80011c0 <telnet_process_command+0x250>)
 8000fd8:	6800      	ldr	r0, [r0, #0]
 8000fda:	f007 fc8b 	bl	80088f4 <netconn_write_partly>
				netconn_write(conn, token, strlen(token), NETCONN_COPY);
			}
		 */


}
 8000fde:	e0e3      	b.n	80011a8 <telnet_process_command+0x238>
	else if (strcasecmp(token, "LED1") == 0) {
 8000fe0:	4978      	ldr	r1, [pc, #480]	@ (80011c4 <telnet_process_command+0x254>)
 8000fe2:	f8d7 050c 	ldr.w	r0, [r7, #1292]	@ 0x50c
 8000fe6:	f017 ff55 	bl	8018e94 <strcasecmp>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d123      	bne.n	8001038 <telnet_process_command+0xc8>
		token = strtok(NULL, " ");
 8000ff0:	4970      	ldr	r1, [pc, #448]	@ (80011b4 <telnet_process_command+0x244>)
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	f017 ff88 	bl	8018f08 <strtok>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	f8c7 350c 	str.w	r3, [r7, #1292]	@ 0x50c
		if (strcasecmp(token, "ON") == 0) {
 8000ffe:	4972      	ldr	r1, [pc, #456]	@ (80011c8 <telnet_process_command+0x258>)
 8001000:	f8d7 050c 	ldr.w	r0, [r7, #1292]	@ 0x50c
 8001004:	f017 ff46 	bl	8018e94 <strcasecmp>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d105      	bne.n	800101a <telnet_process_command+0xaa>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin,1);
 800100e:	2201      	movs	r2, #1
 8001010:	2101      	movs	r1, #1
 8001012:	486e      	ldr	r0, [pc, #440]	@ (80011cc <telnet_process_command+0x25c>)
 8001014:	f002 f840 	bl	8003098 <HAL_GPIO_WritePin>
}
 8001018:	e0c6      	b.n	80011a8 <telnet_process_command+0x238>
		else if (strcasecmp(token, "OFF") == 0){
 800101a:	496d      	ldr	r1, [pc, #436]	@ (80011d0 <telnet_process_command+0x260>)
 800101c:	f8d7 050c 	ldr.w	r0, [r7, #1292]	@ 0x50c
 8001020:	f017 ff38 	bl	8018e94 <strcasecmp>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	f040 80be 	bne.w	80011a8 <telnet_process_command+0x238>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin,0);		}
 800102c:	2200      	movs	r2, #0
 800102e:	2101      	movs	r1, #1
 8001030:	4866      	ldr	r0, [pc, #408]	@ (80011cc <telnet_process_command+0x25c>)
 8001032:	f002 f831 	bl	8003098 <HAL_GPIO_WritePin>
}
 8001036:	e0b7      	b.n	80011a8 <telnet_process_command+0x238>
	else if (strcasecmp(token, "LED2") == 0) {
 8001038:	4966      	ldr	r1, [pc, #408]	@ (80011d4 <telnet_process_command+0x264>)
 800103a:	f8d7 050c 	ldr.w	r0, [r7, #1292]	@ 0x50c
 800103e:	f017 ff29 	bl	8018e94 <strcasecmp>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d123      	bne.n	8001090 <telnet_process_command+0x120>
		token = strtok(NULL, " ");
 8001048:	495a      	ldr	r1, [pc, #360]	@ (80011b4 <telnet_process_command+0x244>)
 800104a:	2000      	movs	r0, #0
 800104c:	f017 ff5c 	bl	8018f08 <strtok>
 8001050:	4603      	mov	r3, r0
 8001052:	f8c7 350c 	str.w	r3, [r7, #1292]	@ 0x50c
		if (strcasecmp(token, "ON") == 0) {
 8001056:	495c      	ldr	r1, [pc, #368]	@ (80011c8 <telnet_process_command+0x258>)
 8001058:	f8d7 050c 	ldr.w	r0, [r7, #1292]	@ 0x50c
 800105c:	f017 ff1a 	bl	8018e94 <strcasecmp>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d105      	bne.n	8001072 <telnet_process_command+0x102>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 8001066:	2201      	movs	r2, #1
 8001068:	2180      	movs	r1, #128	@ 0x80
 800106a:	4858      	ldr	r0, [pc, #352]	@ (80011cc <telnet_process_command+0x25c>)
 800106c:	f002 f814 	bl	8003098 <HAL_GPIO_WritePin>
}
 8001070:	e09a      	b.n	80011a8 <telnet_process_command+0x238>
		else if (strcasecmp(token, "OFF") == 0){
 8001072:	4957      	ldr	r1, [pc, #348]	@ (80011d0 <telnet_process_command+0x260>)
 8001074:	f8d7 050c 	ldr.w	r0, [r7, #1292]	@ 0x50c
 8001078:	f017 ff0c 	bl	8018e94 <strcasecmp>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	f040 8092 	bne.w	80011a8 <telnet_process_command+0x238>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin,0);
 8001084:	2200      	movs	r2, #0
 8001086:	2180      	movs	r1, #128	@ 0x80
 8001088:	4850      	ldr	r0, [pc, #320]	@ (80011cc <telnet_process_command+0x25c>)
 800108a:	f002 f805 	bl	8003098 <HAL_GPIO_WritePin>
}
 800108e:	e08b      	b.n	80011a8 <telnet_process_command+0x238>
	else if (strcasecmp(token, "LED3") == 0) {
 8001090:	4951      	ldr	r1, [pc, #324]	@ (80011d8 <telnet_process_command+0x268>)
 8001092:	f8d7 050c 	ldr.w	r0, [r7, #1292]	@ 0x50c
 8001096:	f017 fefd 	bl	8018e94 <strcasecmp>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d124      	bne.n	80010ea <telnet_process_command+0x17a>
		token = strtok(NULL, " ");
 80010a0:	4944      	ldr	r1, [pc, #272]	@ (80011b4 <telnet_process_command+0x244>)
 80010a2:	2000      	movs	r0, #0
 80010a4:	f017 ff30 	bl	8018f08 <strtok>
 80010a8:	4603      	mov	r3, r0
 80010aa:	f8c7 350c 	str.w	r3, [r7, #1292]	@ 0x50c
		if (strcasecmp(token, "ON") == 0) {
 80010ae:	4946      	ldr	r1, [pc, #280]	@ (80011c8 <telnet_process_command+0x258>)
 80010b0:	f8d7 050c 	ldr.w	r0, [r7, #1292]	@ 0x50c
 80010b4:	f017 feee 	bl	8018e94 <strcasecmp>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d106      	bne.n	80010cc <telnet_process_command+0x15c>
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 80010be:	2201      	movs	r2, #1
 80010c0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80010c4:	4841      	ldr	r0, [pc, #260]	@ (80011cc <telnet_process_command+0x25c>)
 80010c6:	f001 ffe7 	bl	8003098 <HAL_GPIO_WritePin>
}
 80010ca:	e06d      	b.n	80011a8 <telnet_process_command+0x238>
		else if (strcasecmp(token, "OFF") == 0){
 80010cc:	4940      	ldr	r1, [pc, #256]	@ (80011d0 <telnet_process_command+0x260>)
 80010ce:	f8d7 050c 	ldr.w	r0, [r7, #1292]	@ 0x50c
 80010d2:	f017 fedf 	bl	8018e94 <strcasecmp>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d165      	bne.n	80011a8 <telnet_process_command+0x238>
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin,0);;
 80010dc:	2200      	movs	r2, #0
 80010de:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80010e2:	483a      	ldr	r0, [pc, #232]	@ (80011cc <telnet_process_command+0x25c>)
 80010e4:	f001 ffd8 	bl	8003098 <HAL_GPIO_WritePin>
}
 80010e8:	e05e      	b.n	80011a8 <telnet_process_command+0x238>
	else if (strcasecmp(token, "STATUS") == 0) {
 80010ea:	493c      	ldr	r1, [pc, #240]	@ (80011dc <telnet_process_command+0x26c>)
 80010ec:	f8d7 050c 	ldr.w	r0, [r7, #1292]	@ 0x50c
 80010f0:	f017 fed0 	bl	8018e94 <strcasecmp>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d135      	bne.n	8001166 <telnet_process_command+0x1f6>
		uint8_t led1Status=HAL_GPIO_ReadPin(LED1_GPIO_Port, LED1_Pin);
 80010fa:	2101      	movs	r1, #1
 80010fc:	4833      	ldr	r0, [pc, #204]	@ (80011cc <telnet_process_command+0x25c>)
 80010fe:	f001 ffb3 	bl	8003068 <HAL_GPIO_ReadPin>
 8001102:	4603      	mov	r3, r0
 8001104:	f887 350b 	strb.w	r3, [r7, #1291]	@ 0x50b
		uint8_t led2Status=HAL_GPIO_ReadPin(LED2_GPIO_Port, LED2_Pin);
 8001108:	2180      	movs	r1, #128	@ 0x80
 800110a:	4830      	ldr	r0, [pc, #192]	@ (80011cc <telnet_process_command+0x25c>)
 800110c:	f001 ffac 	bl	8003068 <HAL_GPIO_ReadPin>
 8001110:	4603      	mov	r3, r0
 8001112:	f887 350a 	strb.w	r3, [r7, #1290]	@ 0x50a
		uint8_t led3Status=HAL_GPIO_ReadPin(LED3_GPIO_Port, LED3_Pin);
 8001116:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800111a:	482c      	ldr	r0, [pc, #176]	@ (80011cc <telnet_process_command+0x25c>)
 800111c:	f001 ffa4 	bl	8003068 <HAL_GPIO_ReadPin>
 8001120:	4603      	mov	r3, r0
 8001122:	f887 3509 	strb.w	r3, [r7, #1289]	@ 0x509
		sprintf(s,"LED1 status : %d\nLED2 status : %d\nLED3 status : %d\n",led1Status,led2Status,led3Status);
 8001126:	f897 250b 	ldrb.w	r2, [r7, #1291]	@ 0x50b
 800112a:	f897 150a 	ldrb.w	r1, [r7, #1290]	@ 0x50a
 800112e:	f897 3509 	ldrb.w	r3, [r7, #1289]	@ 0x509
 8001132:	f507 6081 	add.w	r0, r7, #1032	@ 0x408
 8001136:	9300      	str	r3, [sp, #0]
 8001138:	460b      	mov	r3, r1
 800113a:	4929      	ldr	r1, [pc, #164]	@ (80011e0 <telnet_process_command+0x270>)
 800113c:	f017 fe14 	bl	8018d68 <siprintf>
		netconn_write(conn, s, strlen(s), NETCONN_COPY);
 8001140:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff f85d 	bl	8000204 <strlen>
 800114a:	4602      	mov	r2, r0
 800114c:	f507 6181 	add.w	r1, r7, #1032	@ 0x408
 8001150:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8001154:	f5a3 60a2 	sub.w	r0, r3, #1296	@ 0x510
 8001158:	2300      	movs	r3, #0
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	2301      	movs	r3, #1
 800115e:	6800      	ldr	r0, [r0, #0]
 8001160:	f007 fbc8 	bl	80088f4 <netconn_write_partly>
}
 8001164:	e020      	b.n	80011a8 <telnet_process_command+0x238>
		else if (strcasecmp(token, "client") == 0) {
 8001166:	491f      	ldr	r1, [pc, #124]	@ (80011e4 <telnet_process_command+0x274>)
 8001168:	f8d7 050c 	ldr.w	r0, [r7, #1292]	@ 0x50c
 800116c:	f017 fe92 	bl	8018e94 <strcasecmp>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d118      	bne.n	80011a8 <telnet_process_command+0x238>
			http_client(s2,1024);
 8001176:	f107 0308 	add.w	r3, r7, #8
 800117a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff fe92 	bl	8000ea8 <http_client>
			netconn_write(conn, s2, strlen(s2), NETCONN_COPY);
 8001184:	f107 0308 	add.w	r3, r7, #8
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff f83b 	bl	8000204 <strlen>
 800118e:	4602      	mov	r2, r0
 8001190:	f107 0108 	add.w	r1, r7, #8
 8001194:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8001198:	f5a3 60a2 	sub.w	r0, r3, #1296	@ 0x510
 800119c:	2300      	movs	r3, #0
 800119e:	9300      	str	r3, [sp, #0]
 80011a0:	2301      	movs	r3, #1
 80011a2:	6800      	ldr	r0, [r0, #0]
 80011a4:	f007 fba6 	bl	80088f4 <netconn_write_partly>
}
 80011a8:	bf00      	nop
 80011aa:	f507 67a2 	add.w	r7, r7, #1296	@ 0x510
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	0801a170 	.word	0x0801a170
 80011b8:	0801a174 	.word	0x0801a174
 80011bc:	0801a17c 	.word	0x0801a17c
 80011c0:	0801a180 	.word	0x0801a180
 80011c4:	0801a184 	.word	0x0801a184
 80011c8:	0801a18c 	.word	0x0801a18c
 80011cc:	40020400 	.word	0x40020400
 80011d0:	0801a190 	.word	0x0801a190
 80011d4:	0801a194 	.word	0x0801a194
 80011d8:	0801a19c 	.word	0x0801a19c
 80011dc:	0801a1a4 	.word	0x0801a1a4
 80011e0:	0801a1ac 	.word	0x0801a1ac
 80011e4:	0801a1e0 	.word	0x0801a1e0

080011e8 <telnet_byte_available>:

static void telnet_byte_available(uint8_t c, struct netconn *conn)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	6039      	str	r1, [r7, #0]
 80011f2:	71fb      	strb	r3, [r7, #7]
	static uint16_t cnt;
	static char data[CMD_BUFFER_LEN];
	if (cnt < CMD_BUFFER_LEN && c >= 32 && c <= 127) data[cnt++] = c;
 80011f4:	4b15      	ldr	r3, [pc, #84]	@ (800124c <telnet_byte_available+0x64>)
 80011f6:	881b      	ldrh	r3, [r3, #0]
 80011f8:	2bff      	cmp	r3, #255	@ 0xff
 80011fa:	d810      	bhi.n	800121e <telnet_byte_available+0x36>
 80011fc:	79fb      	ldrb	r3, [r7, #7]
 80011fe:	2b1f      	cmp	r3, #31
 8001200:	d90d      	bls.n	800121e <telnet_byte_available+0x36>
 8001202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001206:	2b00      	cmp	r3, #0
 8001208:	db09      	blt.n	800121e <telnet_byte_available+0x36>
 800120a:	4b10      	ldr	r3, [pc, #64]	@ (800124c <telnet_byte_available+0x64>)
 800120c:	881b      	ldrh	r3, [r3, #0]
 800120e:	1c5a      	adds	r2, r3, #1
 8001210:	b291      	uxth	r1, r2
 8001212:	4a0e      	ldr	r2, [pc, #56]	@ (800124c <telnet_byte_available+0x64>)
 8001214:	8011      	strh	r1, [r2, #0]
 8001216:	4619      	mov	r1, r3
 8001218:	4a0d      	ldr	r2, [pc, #52]	@ (8001250 <telnet_byte_available+0x68>)
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	5453      	strb	r3, [r2, r1]
	if (c == '\n' || c == '\r') {
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	2b0a      	cmp	r3, #10
 8001222:	d002      	beq.n	800122a <telnet_byte_available+0x42>
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	2b0d      	cmp	r3, #13
 8001228:	d10c      	bne.n	8001244 <telnet_byte_available+0x5c>
		data[cnt] = '\0';
 800122a:	4b08      	ldr	r3, [pc, #32]	@ (800124c <telnet_byte_available+0x64>)
 800122c:	881b      	ldrh	r3, [r3, #0]
 800122e:	461a      	mov	r2, r3
 8001230:	4b07      	ldr	r3, [pc, #28]	@ (8001250 <telnet_byte_available+0x68>)
 8001232:	2100      	movs	r1, #0
 8001234:	5499      	strb	r1, [r3, r2]
		telnet_process_command(data, conn);
 8001236:	6839      	ldr	r1, [r7, #0]
 8001238:	4805      	ldr	r0, [pc, #20]	@ (8001250 <telnet_byte_available+0x68>)
 800123a:	f7ff fe99 	bl	8000f70 <telnet_process_command>
		cnt = 0;
 800123e:	4b03      	ldr	r3, [pc, #12]	@ (800124c <telnet_byte_available+0x64>)
 8001240:	2200      	movs	r2, #0
 8001242:	801a      	strh	r2, [r3, #0]
	}
}
 8001244:	bf00      	nop
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	200003f4 	.word	0x200003f4
 8001250:	200003f8 	.word	0x200003f8

08001254 <telnet_thread>:
/*-----------------------------------------------------------------------------------*/
static void telnet_thread(void *arg)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b088      	sub	sp, #32
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]


	LWIP_UNUSED_ARG(arg);

	/* Create a new connection identifier. */
	conn = netconn_new(NETCONN_TCP);
 800125c:	2200      	movs	r2, #0
 800125e:	2100      	movs	r1, #0
 8001260:	2010      	movs	r0, #16
 8001262:	f006 ff6f 	bl	8008144 <netconn_new_with_proto_and_callback>
 8001266:	61f8      	str	r0, [r7, #28]

	if (conn!=NULL)
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d055      	beq.n	800131a <telnet_thread+0xc6>
	{
		/* Bind connection to well known port number 7. */
		err = netconn_bind(conn, NULL, 23);
 800126e:	2217      	movs	r2, #23
 8001270:	2100      	movs	r1, #0
 8001272:	69f8      	ldr	r0, [r7, #28]
 8001274:	f007 f820 	bl	80082b8 <netconn_bind>
 8001278:	4603      	mov	r3, r0
 800127a:	76fb      	strb	r3, [r7, #27]

		if (err == ERR_OK)
 800127c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d146      	bne.n	8001312 <telnet_thread+0xbe>
		{
			/* Tell connection to go into listening mode. */
			netconn_listen(conn);
 8001284:	21ff      	movs	r1, #255	@ 0xff
 8001286:	69f8      	ldr	r0, [r7, #28]
 8001288:	f007 f886 	bl	8008398 <netconn_listen_with_backlog>

			while (1)
			{
				/* Grab new connection. */
				accept_err = netconn_accept(conn, &newconn);
 800128c:	f107 0314 	add.w	r3, r7, #20
 8001290:	4619      	mov	r1, r3
 8001292:	69f8      	ldr	r0, [r7, #28]
 8001294:	f007 f8ac 	bl	80083f0 <netconn_accept>
 8001298:	4603      	mov	r3, r0
 800129a:	76bb      	strb	r3, [r7, #26]

				/* Process the new connection. */
				if (accept_err == ERR_OK)
 800129c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d1f3      	bne.n	800128c <telnet_thread+0x38>
				{

					while (netconn_recv(newconn, &buf) == ERR_OK)
 80012a4:	e022      	b.n	80012ec <telnet_thread+0x98>
					{
						do
						{
							netbuf_data(buf, (void**)&data, &len);
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	f107 020a 	add.w	r2, r7, #10
 80012ac:	f107 010c 	add.w	r1, r7, #12
 80012b0:	4618      	mov	r0, r3
 80012b2:	f009 f98d 	bl	800a5d0 <netbuf_data>
							while (len--) telnet_byte_available(*data++, newconn);
 80012b6:	e008      	b.n	80012ca <telnet_thread+0x76>
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	1c5a      	adds	r2, r3, #1
 80012bc:	60fa      	str	r2, [r7, #12]
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	697a      	ldr	r2, [r7, #20]
 80012c2:	4611      	mov	r1, r2
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff ff8f 	bl	80011e8 <telnet_byte_available>
 80012ca:	897b      	ldrh	r3, [r7, #10]
 80012cc:	1e5a      	subs	r2, r3, #1
 80012ce:	b292      	uxth	r2, r2
 80012d0:	817a      	strh	r2, [r7, #10]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d1f0      	bne.n	80012b8 <telnet_thread+0x64>

						}
						while (netbuf_next(buf) >= 0);
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	4618      	mov	r0, r3
 80012da:	f009 f9c3 	bl	800a664 <netbuf_next>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	dae0      	bge.n	80012a6 <telnet_thread+0x52>

						netbuf_delete(buf);
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f009 f952 	bl	800a590 <netbuf_delete>
					while (netconn_recv(newconn, &buf) == ERR_OK)
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	f107 0210 	add.w	r2, r7, #16
 80012f2:	4611      	mov	r1, r2
 80012f4:	4618      	mov	r0, r3
 80012f6:	f007 fa83 	bl	8008800 <netconn_recv>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d0d2      	beq.n	80012a6 <telnet_thread+0x52>
					}

					/* Close connection and discard connection identifier. */
					netconn_close(newconn);
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	4618      	mov	r0, r3
 8001304:	f007 fbf8 	bl	8008af8 <netconn_close>
					netconn_delete(newconn);
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	4618      	mov	r0, r3
 800130c:	f006 ffb8 	bl	8008280 <netconn_delete>
				accept_err = netconn_accept(conn, &newconn);
 8001310:	e7bc      	b.n	800128c <telnet_thread+0x38>
				}
			}
		}
		else
		{
			netconn_delete(newconn);
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	4618      	mov	r0, r3
 8001316:	f006 ffb3 	bl	8008280 <netconn_delete>
		}
	}
}
 800131a:	bf00      	nop
 800131c:	3720      	adds	r7, #32
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
	...

08001324 <telnet_init>:
/*-----------------------------------------------------------------------------------*/

void telnet_init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af02      	add	r7, sp, #8
	sys_thread_new("telnet_thread", telnet_thread, NULL, DEFAULT_THREAD_STACKSIZE, TCPECHO_THREAD_PRIO);
 800132a:	2304      	movs	r3, #4
 800132c:	9300      	str	r3, [sp, #0]
 800132e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001332:	2200      	movs	r2, #0
 8001334:	4903      	ldr	r1, [pc, #12]	@ (8001344 <telnet_init+0x20>)
 8001336:	4804      	ldr	r0, [pc, #16]	@ (8001348 <telnet_init+0x24>)
 8001338:	f017 fb92 	bl	8018a60 <sys_thread_new>
}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	08001255 	.word	0x08001255
 8001348:	0801a1e8 	.word	0x0801a1e8

0800134c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800134c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001384 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001350:	f7ff fd24 	bl	8000d9c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001354:	480c      	ldr	r0, [pc, #48]	@ (8001388 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001356:	490d      	ldr	r1, [pc, #52]	@ (800138c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001358:	4a0d      	ldr	r2, [pc, #52]	@ (8001390 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800135a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800135c:	e002      	b.n	8001364 <LoopCopyDataInit>

0800135e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800135e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001360:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001362:	3304      	adds	r3, #4

08001364 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001364:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001366:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001368:	d3f9      	bcc.n	800135e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800136a:	4a0a      	ldr	r2, [pc, #40]	@ (8001394 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800136c:	4c0a      	ldr	r4, [pc, #40]	@ (8001398 <LoopFillZerobss+0x22>)
  movs r3, #0
 800136e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001370:	e001      	b.n	8001376 <LoopFillZerobss>

08001372 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001372:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001374:	3204      	adds	r2, #4

08001376 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001376:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001378:	d3fb      	bcc.n	8001372 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800137a:	f017 febd 	bl	80190f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800137e:	f7ff f931 	bl	80005e4 <main>
  bx  lr    
 8001382:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001384:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001388:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800138c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001390:	08028218 	.word	0x08028218
  ldr r2, =_sbss
 8001394:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001398:	20011154 	.word	0x20011154

0800139c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800139c:	e7fe      	b.n	800139c <ADC_IRQHandler>

0800139e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800139e:	b480      	push	{r7}
 80013a0:	b083      	sub	sp, #12
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
 80013a6:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d00b      	beq.n	80013c6 <LAN8742_RegisterBusIO+0x28>
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	68db      	ldr	r3, [r3, #12]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d007      	beq.n	80013c6 <LAN8742_RegisterBusIO+0x28>
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d003      	beq.n	80013c6 <LAN8742_RegisterBusIO+0x28>
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	691b      	ldr	r3, [r3, #16]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d102      	bne.n	80013cc <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80013c6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ca:	e014      	b.n	80013f6 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685a      	ldr	r2, [r3, #4]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	68da      	ldr	r2, [r3, #12]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	689a      	ldr	r2, [r3, #8]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	691a      	ldr	r2, [r3, #16]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr

08001402 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001402:	b580      	push	{r7, lr}
 8001404:	b086      	sub	sp, #24
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 800140a:	2300      	movs	r3, #0
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	2300      	movs	r3, #0
 8001410:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001412:	2300      	movs	r3, #0
 8001414:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d139      	bne.n	8001492 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d002      	beq.n	800142c <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2220      	movs	r2, #32
 8001430:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001432:	2300      	movs	r3, #0
 8001434:	617b      	str	r3, [r7, #20]
 8001436:	e01c      	b.n	8001472 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	695b      	ldr	r3, [r3, #20]
 800143c:	f107 020c 	add.w	r2, r7, #12
 8001440:	2112      	movs	r1, #18
 8001442:	6978      	ldr	r0, [r7, #20]
 8001444:	4798      	blx	r3
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	da03      	bge.n	8001454 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 800144c:	f06f 0304 	mvn.w	r3, #4
 8001450:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8001452:	e00b      	b.n	800146c <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f003 031f 	and.w	r3, r3, #31
 800145a:	697a      	ldr	r2, [r7, #20]
 800145c:	429a      	cmp	r2, r3
 800145e:	d105      	bne.n	800146c <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	697a      	ldr	r2, [r7, #20]
 8001464:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001466:	2300      	movs	r3, #0
 8001468:	613b      	str	r3, [r7, #16]
         break;
 800146a:	e005      	b.n	8001478 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	3301      	adds	r3, #1
 8001470:	617b      	str	r3, [r7, #20]
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	2b1f      	cmp	r3, #31
 8001476:	d9df      	bls.n	8001438 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2b1f      	cmp	r3, #31
 800147e:	d902      	bls.n	8001486 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001480:	f06f 0302 	mvn.w	r3, #2
 8001484:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d102      	bne.n	8001492 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2201      	movs	r2, #1
 8001490:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8001492:	693b      	ldr	r3, [r7, #16]
 }
 8001494:	4618      	mov	r0, r3
 8001496:	3718      	adds	r7, #24
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80014a4:	2300      	movs	r3, #0
 80014a6:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	695b      	ldr	r3, [r3, #20]
 80014ac:	687a      	ldr	r2, [r7, #4]
 80014ae:	6810      	ldr	r0, [r2, #0]
 80014b0:	f107 020c 	add.w	r2, r7, #12
 80014b4:	2101      	movs	r1, #1
 80014b6:	4798      	blx	r3
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	da02      	bge.n	80014c4 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80014be:	f06f 0304 	mvn.w	r3, #4
 80014c2:	e06e      	b.n	80015a2 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	695b      	ldr	r3, [r3, #20]
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	6810      	ldr	r0, [r2, #0]
 80014cc:	f107 020c 	add.w	r2, r7, #12
 80014d0:	2101      	movs	r1, #1
 80014d2:	4798      	blx	r3
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	da02      	bge.n	80014e0 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80014da:	f06f 0304 	mvn.w	r3, #4
 80014de:	e060      	b.n	80015a2 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f003 0304 	and.w	r3, r3, #4
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d101      	bne.n	80014ee <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e059      	b.n	80015a2 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	695b      	ldr	r3, [r3, #20]
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	6810      	ldr	r0, [r2, #0]
 80014f6:	f107 020c 	add.w	r2, r7, #12
 80014fa:	2100      	movs	r1, #0
 80014fc:	4798      	blx	r3
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	da02      	bge.n	800150a <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001504:	f06f 0304 	mvn.w	r3, #4
 8001508:	e04b      	b.n	80015a2 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001510:	2b00      	cmp	r3, #0
 8001512:	d11b      	bne.n	800154c <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d006      	beq.n	800152c <LAN8742_GetLinkState+0x90>
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001528:	2302      	movs	r3, #2
 800152a:	e03a      	b.n	80015a2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001536:	2303      	movs	r3, #3
 8001538:	e033      	b.n	80015a2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001544:	2304      	movs	r3, #4
 8001546:	e02c      	b.n	80015a2 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001548:	2305      	movs	r3, #5
 800154a:	e02a      	b.n	80015a2 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	695b      	ldr	r3, [r3, #20]
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	6810      	ldr	r0, [r2, #0]
 8001554:	f107 020c 	add.w	r2, r7, #12
 8001558:	211f      	movs	r1, #31
 800155a:	4798      	blx	r3
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	da02      	bge.n	8001568 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001562:	f06f 0304 	mvn.w	r3, #4
 8001566:	e01c      	b.n	80015a2 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d101      	bne.n	8001576 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001572:	2306      	movs	r3, #6
 8001574:	e015      	b.n	80015a2 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	f003 031c 	and.w	r3, r3, #28
 800157c:	2b18      	cmp	r3, #24
 800157e:	d101      	bne.n	8001584 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001580:	2302      	movs	r3, #2
 8001582:	e00e      	b.n	80015a2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f003 031c 	and.w	r3, r3, #28
 800158a:	2b08      	cmp	r3, #8
 800158c:	d101      	bne.n	8001592 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800158e:	2303      	movs	r3, #3
 8001590:	e007      	b.n	80015a2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	f003 031c 	and.w	r3, r3, #28
 8001598:	2b14      	cmp	r3, #20
 800159a:	d101      	bne.n	80015a0 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800159c:	2304      	movs	r3, #4
 800159e:	e000      	b.n	80015a2 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80015a0:	2305      	movs	r3, #5
    }
  }
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
	...

080015ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015b0:	4b0e      	ldr	r3, [pc, #56]	@ (80015ec <HAL_Init+0x40>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a0d      	ldr	r2, [pc, #52]	@ (80015ec <HAL_Init+0x40>)
 80015b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015bc:	4b0b      	ldr	r3, [pc, #44]	@ (80015ec <HAL_Init+0x40>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a0a      	ldr	r2, [pc, #40]	@ (80015ec <HAL_Init+0x40>)
 80015c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015c8:	4b08      	ldr	r3, [pc, #32]	@ (80015ec <HAL_Init+0x40>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a07      	ldr	r2, [pc, #28]	@ (80015ec <HAL_Init+0x40>)
 80015ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015d4:	2003      	movs	r0, #3
 80015d6:	f000 f8fc 	bl	80017d2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015da:	200f      	movs	r0, #15
 80015dc:	f7ff fa68 	bl	8000ab0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015e0:	f7ff f9d0 	bl	8000984 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40023c00 	.word	0x40023c00

080015f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015f4:	4b06      	ldr	r3, [pc, #24]	@ (8001610 <HAL_IncTick+0x20>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	461a      	mov	r2, r3
 80015fa:	4b06      	ldr	r3, [pc, #24]	@ (8001614 <HAL_IncTick+0x24>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4413      	add	r3, r2
 8001600:	4a04      	ldr	r2, [pc, #16]	@ (8001614 <HAL_IncTick+0x24>)
 8001602:	6013      	str	r3, [r2, #0]
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	20000008 	.word	0x20000008
 8001614:	200004f8 	.word	0x200004f8

08001618 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  return uwTick;
 800161c:	4b03      	ldr	r3, [pc, #12]	@ (800162c <HAL_GetTick+0x14>)
 800161e:	681b      	ldr	r3, [r3, #0]
}
 8001620:	4618      	mov	r0, r3
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	200004f8 	.word	0x200004f8

08001630 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001638:	f7ff ffee 	bl	8001618 <HAL_GetTick>
 800163c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001648:	d005      	beq.n	8001656 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800164a:	4b0a      	ldr	r3, [pc, #40]	@ (8001674 <HAL_Delay+0x44>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	461a      	mov	r2, r3
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	4413      	add	r3, r2
 8001654:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001656:	bf00      	nop
 8001658:	f7ff ffde 	bl	8001618 <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	68fa      	ldr	r2, [r7, #12]
 8001664:	429a      	cmp	r2, r3
 8001666:	d8f7      	bhi.n	8001658 <HAL_Delay+0x28>
  {
  }
}
 8001668:	bf00      	nop
 800166a:	bf00      	nop
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	20000008 	.word	0x20000008

08001678 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f003 0307 	and.w	r3, r3, #7
 8001686:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001688:	4b0c      	ldr	r3, [pc, #48]	@ (80016bc <__NVIC_SetPriorityGrouping+0x44>)
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800168e:	68ba      	ldr	r2, [r7, #8]
 8001690:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001694:	4013      	ands	r3, r2
 8001696:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016aa:	4a04      	ldr	r2, [pc, #16]	@ (80016bc <__NVIC_SetPriorityGrouping+0x44>)
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	60d3      	str	r3, [r2, #12]
}
 80016b0:	bf00      	nop
 80016b2:	3714      	adds	r7, #20
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	e000ed00 	.word	0xe000ed00

080016c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016c4:	4b04      	ldr	r3, [pc, #16]	@ (80016d8 <__NVIC_GetPriorityGrouping+0x18>)
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	0a1b      	lsrs	r3, r3, #8
 80016ca:	f003 0307 	and.w	r3, r3, #7
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	e000ed00 	.word	0xe000ed00

080016dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	db0b      	blt.n	8001706 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ee:	79fb      	ldrb	r3, [r7, #7]
 80016f0:	f003 021f 	and.w	r2, r3, #31
 80016f4:	4907      	ldr	r1, [pc, #28]	@ (8001714 <__NVIC_EnableIRQ+0x38>)
 80016f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fa:	095b      	lsrs	r3, r3, #5
 80016fc:	2001      	movs	r0, #1
 80016fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001706:	bf00      	nop
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	e000e100 	.word	0xe000e100

08001718 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	6039      	str	r1, [r7, #0]
 8001722:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001728:	2b00      	cmp	r3, #0
 800172a:	db0a      	blt.n	8001742 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	b2da      	uxtb	r2, r3
 8001730:	490c      	ldr	r1, [pc, #48]	@ (8001764 <__NVIC_SetPriority+0x4c>)
 8001732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001736:	0112      	lsls	r2, r2, #4
 8001738:	b2d2      	uxtb	r2, r2
 800173a:	440b      	add	r3, r1
 800173c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001740:	e00a      	b.n	8001758 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	b2da      	uxtb	r2, r3
 8001746:	4908      	ldr	r1, [pc, #32]	@ (8001768 <__NVIC_SetPriority+0x50>)
 8001748:	79fb      	ldrb	r3, [r7, #7]
 800174a:	f003 030f 	and.w	r3, r3, #15
 800174e:	3b04      	subs	r3, #4
 8001750:	0112      	lsls	r2, r2, #4
 8001752:	b2d2      	uxtb	r2, r2
 8001754:	440b      	add	r3, r1
 8001756:	761a      	strb	r2, [r3, #24]
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	e000e100 	.word	0xe000e100
 8001768:	e000ed00 	.word	0xe000ed00

0800176c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800176c:	b480      	push	{r7}
 800176e:	b089      	sub	sp, #36	@ 0x24
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	f1c3 0307 	rsb	r3, r3, #7
 8001786:	2b04      	cmp	r3, #4
 8001788:	bf28      	it	cs
 800178a:	2304      	movcs	r3, #4
 800178c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	3304      	adds	r3, #4
 8001792:	2b06      	cmp	r3, #6
 8001794:	d902      	bls.n	800179c <NVIC_EncodePriority+0x30>
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	3b03      	subs	r3, #3
 800179a:	e000      	b.n	800179e <NVIC_EncodePriority+0x32>
 800179c:	2300      	movs	r3, #0
 800179e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a0:	f04f 32ff 	mov.w	r2, #4294967295
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	43da      	mvns	r2, r3
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	401a      	ands	r2, r3
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017b4:	f04f 31ff 	mov.w	r1, #4294967295
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	fa01 f303 	lsl.w	r3, r1, r3
 80017be:	43d9      	mvns	r1, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c4:	4313      	orrs	r3, r2
         );
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3724      	adds	r7, #36	@ 0x24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b082      	sub	sp, #8
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f7ff ff4c 	bl	8001678 <__NVIC_SetPriorityGrouping>
}
 80017e0:	bf00      	nop
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b086      	sub	sp, #24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	60b9      	str	r1, [r7, #8]
 80017f2:	607a      	str	r2, [r7, #4]
 80017f4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017f6:	2300      	movs	r3, #0
 80017f8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017fa:	f7ff ff61 	bl	80016c0 <__NVIC_GetPriorityGrouping>
 80017fe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	68b9      	ldr	r1, [r7, #8]
 8001804:	6978      	ldr	r0, [r7, #20]
 8001806:	f7ff ffb1 	bl	800176c <NVIC_EncodePriority>
 800180a:	4602      	mov	r2, r0
 800180c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001810:	4611      	mov	r1, r2
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff ff80 	bl	8001718 <__NVIC_SetPriority>
}
 8001818:	bf00      	nop
 800181a:	3718      	adds	r7, #24
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800182a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff ff54 	bl	80016dc <__NVIC_EnableIRQ>
}
 8001834:	bf00      	nop
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}

0800183c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d101      	bne.n	800184e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e08a      	b.n	8001964 <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001854:	2b00      	cmp	r3, #0
 8001856:	d106      	bne.n	8001866 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2223      	movs	r2, #35	@ 0x23
 800185c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f003 f9f9 	bl	8004c58 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	60bb      	str	r3, [r7, #8]
 800186a:	4b40      	ldr	r3, [pc, #256]	@ (800196c <HAL_ETH_Init+0x130>)
 800186c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800186e:	4a3f      	ldr	r2, [pc, #252]	@ (800196c <HAL_ETH_Init+0x130>)
 8001870:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001874:	6453      	str	r3, [r2, #68]	@ 0x44
 8001876:	4b3d      	ldr	r3, [pc, #244]	@ (800196c <HAL_ETH_Init+0x130>)
 8001878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800187a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800187e:	60bb      	str	r3, [r7, #8]
 8001880:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001882:	4b3b      	ldr	r3, [pc, #236]	@ (8001970 <HAL_ETH_Init+0x134>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	4a3a      	ldr	r2, [pc, #232]	@ (8001970 <HAL_ETH_Init+0x134>)
 8001888:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800188c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800188e:	4b38      	ldr	r3, [pc, #224]	@ (8001970 <HAL_ETH_Init+0x134>)
 8001890:	685a      	ldr	r2, [r3, #4]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	4936      	ldr	r1, [pc, #216]	@ (8001970 <HAL_ETH_Init+0x134>)
 8001898:	4313      	orrs	r3, r2
 800189a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800189c:	4b34      	ldr	r3, [pc, #208]	@ (8001970 <HAL_ETH_Init+0x134>)
 800189e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	6812      	ldr	r2, [r2, #0]
 80018ae:	f043 0301 	orr.w	r3, r3, #1
 80018b2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80018b6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018b8:	f7ff feae 	bl	8001618 <HAL_GetTick>
 80018bc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80018be:	e011      	b.n	80018e4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80018c0:	f7ff feaa 	bl	8001618 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80018ce:	d909      	bls.n	80018e4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2204      	movs	r2, #4
 80018d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	22e0      	movs	r2, #224	@ 0xe0
 80018dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e03f      	b.n	8001964 <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d1e4      	bne.n	80018c0 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f000 ff4c 	bl	8002794 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f000 fff7 	bl	80028f0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f001 f84d 	bl	80029a2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	461a      	mov	r2, r3
 800190e:	2100      	movs	r1, #0
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f000 ffb5 	bl	8002880 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001924:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	6812      	ldr	r2, [r2, #0]
 8001932:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001936:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800193a:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800194e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2210      	movs	r2, #16
 800195e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001962:	2300      	movs	r3, #0
}
 8001964:	4618      	mov	r0, r3
 8001966:	3710      	adds	r7, #16
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40023800 	.word	0x40023800
 8001970:	40013800 	.word	0x40013800

08001974 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001982:	2b10      	cmp	r3, #16
 8001984:	d161      	bne.n	8001a4a <HAL_ETH_Start_IT+0xd6>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2223      	movs	r2, #35	@ 0x23
 800198a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2201      	movs	r2, #1
 8001992:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2204      	movs	r2, #4
 8001998:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f000 f9f4 	bl	8001d88 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80019a8:	2001      	movs	r0, #1
 80019aa:	f7ff fe41 	bl	8001630 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	6812      	ldr	r2, [r2, #0]
 80019c4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80019c8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80019cc:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	6812      	ldr	r2, [r2, #0]
 80019dc:	f043 0302 	orr.w	r3, r3, #2
 80019e0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80019e4:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f000 fd71 	bl	80024ce <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f042 0208 	orr.w	r2, r2, #8
 80019fa:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a04:	2001      	movs	r0, #1
 8001a06:	f7ff fe13 	bl	8001630 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	68fa      	ldr	r2, [r7, #12]
 8001a10:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f042 0204 	orr.w	r2, r2, #4
 8001a20:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a2a:	69db      	ldr	r3, [r3, #28]
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	6812      	ldr	r2, [r2, #0]
 8001a30:	f443 33d0 	orr.w	r3, r3, #106496	@ 0x1a000
 8001a34:	f043 03c1 	orr.w	r3, r3, #193	@ 0xc1
 8001a38:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001a3c:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2223      	movs	r2, #35	@ 0x23
 8001a42:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8001a46:	2300      	movs	r3, #0
 8001a48:	e000      	b.n	8001a4c <HAL_ETH_Start_IT+0xd8>
  }
  else
  {
    return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
  }
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3710      	adds	r7, #16
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001a62:	2b23      	cmp	r3, #35	@ 0x23
 8001a64:	d170      	bne.n	8001b48 <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2223      	movs	r2, #35	@ 0x23
 8001a6a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a76:	69db      	ldr	r3, [r3, #28]
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	6812      	ldr	r2, [r2, #0]
 8001a7c:	f423 33d0 	bic.w	r3, r3, #106496	@ 0x1a000
 8001a80:	f023 03c1 	bic.w	r3, r3, #193	@ 0xc1
 8001a84:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001a88:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	6812      	ldr	r2, [r2, #0]
 8001a98:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001a9c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001aa0:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	6812      	ldr	r2, [r2, #0]
 8001ab0:	f023 0302 	bic.w	r3, r3, #2
 8001ab4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001ab8:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f022 0204 	bic.w	r2, r2, #4
 8001ac8:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ad2:	2001      	movs	r0, #1
 8001ad4:	f7ff fdac 	bl	8001630 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f000 fcf4 	bl	80024ce <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f022 0208 	bic.w	r2, r2, #8
 8001af4:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001afe:	2001      	movs	r0, #1
 8001b00:	f7ff fd96 	bl	8001630 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	693a      	ldr	r2, [r7, #16]
 8001b0a:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	617b      	str	r3, [r7, #20]
 8001b10:	e00e      	b.n	8001b30 <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	697a      	ldr	r2, [r7, #20]
 8001b16:	3212      	adds	r2, #18
 8001b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b1c:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	617b      	str	r3, [r7, #20]
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	2b03      	cmp	r3, #3
 8001b34:	d9ed      	bls.n	8001b12 <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2210      	movs	r2, #16
 8001b40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8001b44:	2300      	movs	r3, #0
 8001b46:	e000      	b.n	8001b4a <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
  }
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3718      	adds	r7, #24
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b082      	sub	sp, #8
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
 8001b5a:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d109      	bne.n	8001b76 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b68:	f043 0201 	orr.w	r2, r3, #1
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e045      	b.n	8001c02 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001b7c:	2b23      	cmp	r3, #35	@ 0x23
 8001b7e:	d13f      	bne.n	8001c00 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001b88:	2201      	movs	r2, #1
 8001b8a:	6839      	ldr	r1, [r7, #0]
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f000 ff77 	bl	8002a80 <ETH_Prepare_Tx_Descriptors>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d009      	beq.n	8001bac <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b9e:	f043 0202 	orr.w	r2, r3, #2
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e02a      	b.n	8001c02 <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 8001bac:	f3bf 8f4f 	dsb	sy
}
 8001bb0:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bb6:	1c5a      	adds	r2, r3, #1
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	629a      	str	r2, [r3, #40]	@ 0x28
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bc0:	2b03      	cmp	r3, #3
 8001bc2:	d904      	bls.n	8001bce <HAL_ETH_Transmit_IT+0x7c>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bc8:	1f1a      	subs	r2, r3, #4
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bd6:	695b      	ldr	r3, [r3, #20]
 8001bd8:	f003 0304 	and.w	r3, r3, #4
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d00d      	beq.n	8001bfc <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001be8:	461a      	mov	r2, r3
 8001bea:	2304      	movs	r3, #4
 8001bec:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	e000      	b.n	8001c02 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
  }
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b088      	sub	sp, #32
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
 8001c12:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001c14:	2300      	movs	r3, #0
 8001c16:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d109      	bne.n	8001c36 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c28:	f043 0201 	orr.w	r2, r3, #1
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e0a4      	b.n	8001d80 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001c3c:	2b23      	cmp	r3, #35	@ 0x23
 8001c3e:	d001      	beq.n	8001c44 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e09d      	b.n	8001d80 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c48:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	69fa      	ldr	r2, [r7, #28]
 8001c4e:	3212      	adds	r2, #18
 8001c50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c54:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001c5a:	f1c3 0304 	rsb	r3, r3, #4
 8001c5e:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001c60:	e066      	b.n	8001d30 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d007      	beq.n	8001c7e <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	69da      	ldr	r2, [r3, #28]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	699a      	ldr	r2, [r3, #24]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d103      	bne.n	8001c92 <HAL_ETH_ReadData+0x88>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d03c      	beq.n	8001d0c <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d005      	beq.n	8001caa <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	0c1b      	lsrs	r3, r3, #16
 8001cb0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001cb4:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d005      	beq.n	8001cce <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	689a      	ldr	r2, [r3, #8]
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	f003 f98e 	bl	800500c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cf4:	1c5a      	adds	r2, r3, #1
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	441a      	add	r2, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	61fb      	str	r3, [r7, #28]
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	2b03      	cmp	r3, #3
 8001d16:	d902      	bls.n	8001d1e <HAL_ETH_ReadData+0x114>
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	3b04      	subs	r3, #4
 8001d1c:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	69fa      	ldr	r2, [r7, #28]
 8001d22:	3212      	adds	r2, #18
 8001d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d28:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	db06      	blt.n	8001d46 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001d38:	697a      	ldr	r2, [r7, #20]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d202      	bcs.n	8001d46 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8001d40:	7cfb      	ldrb	r3, [r7, #19]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d08d      	beq.n	8001c62 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	441a      	add	r2, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d002      	beq.n	8001d60 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 f814 	bl	8001d88 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	69fa      	ldr	r2, [r7, #28]
 8001d64:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8001d66:	7cfb      	ldrb	r3, [r7, #19]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d108      	bne.n	8001d7e <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	e000      	b.n	8001d80 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3720      	adds	r7, #32
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b088      	sub	sp, #32
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001d90:	2300      	movs	r3, #0
 8001d92:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8001d94:	2301      	movs	r3, #1
 8001d96:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001d9c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	69fa      	ldr	r2, [r7, #28]
 8001da2:	3212      	adds	r2, #18
 8001da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001da8:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001dae:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001db0:	e044      	b.n	8001e3c <ETH_UpdateDescriptor+0xb4>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	6a1b      	ldr	r3, [r3, #32]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d112      	bne.n	8001de0 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001dba:	f107 0308 	add.w	r3, r7, #8
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f003 f8f4 	bl	8004fac <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d102      	bne.n	8001dd0 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	74fb      	strb	r3, [r7, #19]
 8001dce:	e007      	b.n	8001de0 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	461a      	mov	r2, r3
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001de0:	7cfb      	ldrb	r3, [r7, #19]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d02a      	beq.n	8001e3c <ETH_UpdateDescriptor+0xb4>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d108      	bne.n	8001e00 <ETH_UpdateDescriptor+0x78>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	695b      	ldr	r3, [r3, #20]
 8001df2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001df6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dfa:	697a      	ldr	r2, [r7, #20]
 8001dfc:	6053      	str	r3, [r2, #4]
 8001dfe:	e005      	b.n	8001e0c <ETH_UpdateDescriptor+0x84>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	695b      	ldr	r3, [r3, #20]
 8001e04:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	61fb      	str	r3, [r7, #28]
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	2b03      	cmp	r3, #3
 8001e22:	d902      	bls.n	8001e2a <ETH_UpdateDescriptor+0xa2>
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	3b04      	subs	r3, #4
 8001e28:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	69fa      	ldr	r2, [r7, #28]
 8001e2e:	3212      	adds	r2, #18
 8001e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e34:	617b      	str	r3, [r7, #20]
      desccount--;
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	3b01      	subs	r3, #1
 8001e3a:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d002      	beq.n	8001e48 <ETH_UpdateDescriptor+0xc0>
 8001e42:	7cfb      	ldrb	r3, [r7, #19]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d1b4      	bne.n	8001db2 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d01a      	beq.n	8001e88 <ETH_UpdateDescriptor+0x100>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	3301      	adds	r3, #1
 8001e56:	f003 0303 	and.w	r3, r3, #3
 8001e5a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8001e5c:	f3bf 8f5f 	dmb	sy
}
 8001e60:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6919      	ldr	r1, [r3, #16]
 8001e66:	68fa      	ldr	r2, [r7, #12]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	4413      	add	r3, r2
 8001e6e:	00db      	lsls	r3, r3, #3
 8001e70:	18ca      	adds	r2, r1, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e7a:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	69fa      	ldr	r2, [r7, #28]
 8001e80:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8001e88:	bf00      	nop
 8001e8a:	3720      	adds	r7, #32
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b086      	sub	sp, #24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	3318      	adds	r3, #24
 8001e9c:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ea2:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ea8:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001eae:	e047      	b.n	8001f40 <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001eba:	68ba      	ldr	r2, [r7, #8]
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	3304      	adds	r3, #4
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	4413      	add	r3, r2
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d10a      	bne.n	8001ee0 <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	613b      	str	r3, [r7, #16]
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	2b03      	cmp	r3, #3
 8001ed4:	d902      	bls.n	8001edc <HAL_ETH_ReleaseTxPacket+0x4c>
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	3b04      	subs	r3, #4
 8001eda:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8001edc:	2300      	movs	r3, #0
 8001ede:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8001ee0:	7bbb      	ldrb	r3, [r7, #14]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d02c      	beq.n	8001f40 <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	68d9      	ldr	r1, [r3, #12]
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	4613      	mov	r3, r2
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	4413      	add	r3, r2
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	440b      	add	r3, r1
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	db1f      	blt.n	8001f3c <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001efc:	68ba      	ldr	r2, [r7, #8]
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	3304      	adds	r3, #4
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	4413      	add	r3, r2
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f003 f8bf 	bl	800508c <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001f0e:	68ba      	ldr	r2, [r7, #8]
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	3304      	adds	r3, #4
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	4413      	add	r3, r2
 8001f18:	2200      	movs	r2, #0
 8001f1a:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	613b      	str	r3, [r7, #16]
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	2b03      	cmp	r3, #3
 8001f26:	d902      	bls.n	8001f2e <HAL_ETH_ReleaseTxPacket+0x9e>
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	3b04      	subs	r3, #4
 8001f2c:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001f3a:	e001      	b.n	8001f40 <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d002      	beq.n	8001f4c <HAL_ETH_ReleaseTxPacket+0xbc>
 8001f46:	7bfb      	ldrb	r3, [r7, #15]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d1b1      	bne.n	8001eb0 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3718      	adds	r7, #24
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
	...

08001f58 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f66:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f70:	695b      	ldr	r3, [r3, #20]
 8001f72:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f7c:	69db      	ldr	r3, [r3, #28]
 8001f7e:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8001f80:	4b4b      	ldr	r3, [pc, #300]	@ (80020b0 <HAL_ETH_IRQHandler+0x158>)
 8001f82:	695b      	ldr	r3, [r3, #20]
 8001f84:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d00e      	beq.n	8001fae <HAL_ETH_IRQHandler+0x56>
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d009      	beq.n	8001fae <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	4b43      	ldr	r3, [pc, #268]	@ (80020b4 <HAL_ETH_IRQHandler+0x15c>)
 8001fa6:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f002 fb95 	bl	80046d8 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	f003 0301 	and.w	r3, r3, #1
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d00f      	beq.n	8001fd8 <HAL_ETH_IRQHandler+0x80>
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d00a      	beq.n	8001fd8 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fca:	461a      	mov	r2, r3
 8001fcc:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8001fd0:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f002 fb90 	bl	80046f8 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d042      	beq.n	8002068 <HAL_ETH_IRQHandler+0x110>
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d03d      	beq.n	8002068 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ff2:	f043 0208 	orr.w	r2, r3, #8
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d01a      	beq.n	800203c <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800200e:	695a      	ldr	r2, [r3, #20]
 8002010:	4b29      	ldr	r3, [pc, #164]	@ (80020b8 <HAL_ETH_IRQHandler+0x160>)
 8002012:	4013      	ands	r3, r2
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002022:	69db      	ldr	r3, [r3, #28]
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	6812      	ldr	r2, [r2, #0]
 8002028:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 800202c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002030:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	22e0      	movs	r2, #224	@ 0xe0
 8002036:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800203a:	e012      	b.n	8002062 <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002044:	695a      	ldr	r2, [r3, #20]
 8002046:	f248 6380 	movw	r3, #34432	@ 0x8680
 800204a:	4013      	ands	r3, r2
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800205a:	461a      	mov	r2, r3
 800205c:	f248 6380 	movw	r3, #34432	@ 0x8680
 8002060:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f002 fb58 	bl	8004718 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	f003 0308 	and.w	r3, r3, #8
 800206e:	2b00      	cmp	r3, #0
 8002070:	d00e      	beq.n	8002090 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002078:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f000 f81a 	bl	80020bc <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d006      	beq.n	80020a8 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 800209a:	4b05      	ldr	r3, [pc, #20]	@ (80020b0 <HAL_ETH_IRQHandler+0x158>)
 800209c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80020a0:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f000 f814 	bl	80020d0 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80020a8:	bf00      	nop
 80020aa:	3718      	adds	r7, #24
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	40013c00 	.word	0x40013c00
 80020b4:	00010040 	.word	0x00010040
 80020b8:	007e2000 	.word	0x007e2000

080020bc <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b086      	sub	sp, #24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	60b9      	str	r1, [r7, #8]
 80020ee:	607a      	str	r2, [r7, #4]
 80020f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	691b      	ldr	r3, [r3, #16]
 80020f8:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	f003 031c 	and.w	r3, r3, #28
 8002100:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	02db      	lsls	r3, r3, #11
 8002106:	b29b      	uxth	r3, r3
 8002108:	697a      	ldr	r2, [r7, #20]
 800210a:	4313      	orrs	r3, r2
 800210c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	019b      	lsls	r3, r3, #6
 8002112:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8002116:	697a      	ldr	r2, [r7, #20]
 8002118:	4313      	orrs	r3, r2
 800211a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	f023 0302 	bic.w	r3, r3, #2
 8002122:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	f043 0301 	orr.w	r3, r3, #1
 800212a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	697a      	ldr	r2, [r7, #20]
 8002132:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002134:	f7ff fa70 	bl	8001618 <HAL_GetTick>
 8002138:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800213a:	e00d      	b.n	8002158 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 800213c:	f7ff fa6c 	bl	8001618 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800214a:	d301      	bcc.n	8002150 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e010      	b.n	8002172 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1ec      	bne.n	800213c <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	695b      	ldr	r3, [r3, #20]
 8002168:	b29b      	uxth	r3, r3
 800216a:	461a      	mov	r2, r3
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3718      	adds	r7, #24
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	b086      	sub	sp, #24
 800217e:	af00      	add	r7, sp, #0
 8002180:	60f8      	str	r0, [r7, #12]
 8002182:	60b9      	str	r1, [r7, #8]
 8002184:	607a      	str	r2, [r7, #4]
 8002186:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	f003 031c 	and.w	r3, r3, #28
 8002196:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	02db      	lsls	r3, r3, #11
 800219c:	b29b      	uxth	r3, r3
 800219e:	697a      	ldr	r2, [r7, #20]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	019b      	lsls	r3, r3, #6
 80021a8:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80021ac:	697a      	ldr	r2, [r7, #20]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	f043 0302 	orr.w	r3, r3, #2
 80021b8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	f043 0301 	orr.w	r3, r3, #1
 80021c0:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	b29a      	uxth	r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	697a      	ldr	r2, [r7, #20]
 80021d2:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021d4:	f7ff fa20 	bl	8001618 <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80021da:	e00d      	b.n	80021f8 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80021dc:	f7ff fa1c 	bl	8001618 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021ea:	d301      	bcc.n	80021f0 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e009      	b.n	8002204 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1ec      	bne.n	80021dc <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8002202:	2300      	movs	r3, #0
}
 8002204:	4618      	mov	r0, r3
 8002206:	3718      	adds	r7, #24
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d101      	bne.n	8002220 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e0e6      	b.n	80023ee <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0310 	and.w	r3, r3, #16
 800222a:	2b00      	cmp	r3, #0
 800222c:	bf14      	ite	ne
 800222e:	2301      	movne	r3, #1
 8002230:	2300      	moveq	r3, #0
 8002232:	b2db      	uxtb	r3, r3
 8002234:	461a      	mov	r2, r3
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002254:	2b00      	cmp	r3, #0
 8002256:	bf0c      	ite	eq
 8002258:	2301      	moveq	r3, #1
 800225a:	2300      	movne	r3, #0
 800225c:	b2db      	uxtb	r3, r3
 800225e:	461a      	mov	r2, r3
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8002270:	2b00      	cmp	r3, #0
 8002272:	bf14      	ite	ne
 8002274:	2301      	movne	r3, #1
 8002276:	2300      	moveq	r3, #0
 8002278:	b2db      	uxtb	r3, r3
 800227a:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800228a:	2b00      	cmp	r3, #0
 800228c:	bf0c      	ite	eq
 800228e:	2301      	moveq	r3, #1
 8002290:	2300      	movne	r3, #0
 8002292:	b2db      	uxtb	r3, r3
 8002294:	461a      	mov	r2, r3
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	bf14      	ite	ne
 80022a8:	2301      	movne	r3, #1
 80022aa:	2300      	moveq	r3, #0
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	461a      	mov	r2, r3
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	bf0c      	ite	eq
 80022de:	2301      	moveq	r3, #1
 80022e0:	2300      	movne	r3, #0
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	461a      	mov	r2, r3
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	bf0c      	ite	eq
 80022f8:	2301      	moveq	r3, #1
 80022fa:	2300      	movne	r3, #0
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	461a      	mov	r2, r3
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800230e:	2b00      	cmp	r3, #0
 8002310:	bf14      	ite	ne
 8002312:	2301      	movne	r3, #1
 8002314:	2300      	moveq	r3, #0
 8002316:	b2db      	uxtb	r3, r3
 8002318:	461a      	mov	r2, r3
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002336:	2b00      	cmp	r3, #0
 8002338:	bf14      	ite	ne
 800233a:	2301      	movne	r3, #1
 800233c:	2300      	moveq	r3, #0
 800233e:	b2db      	uxtb	r3, r3
 8002340:	461a      	mov	r2, r3
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002350:	2b00      	cmp	r3, #0
 8002352:	bf14      	ite	ne
 8002354:	2301      	movne	r3, #1
 8002356:	2300      	moveq	r3, #0
 8002358:	b2db      	uxtb	r3, r3
 800235a:	461a      	mov	r2, r3
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	bf14      	ite	ne
 800236e:	2301      	movne	r3, #1
 8002370:	2300      	moveq	r3, #0
 8002372:	b2db      	uxtb	r3, r3
 8002374:	461a      	mov	r2, r3
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002386:	2b00      	cmp	r3, #0
 8002388:	bf0c      	ite	eq
 800238a:	2301      	moveq	r3, #1
 800238c:	2300      	movne	r3, #0
 800238e:	b2db      	uxtb	r3, r3
 8002390:	461a      	mov	r2, r3
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	699b      	ldr	r3, [r3, #24]
 800239e:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	0c1b      	lsrs	r3, r3, #16
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	699b      	ldr	r3, [r3, #24]
 80023ba:	f003 0304 	and.w	r3, r3, #4
 80023be:	2b00      	cmp	r3, #0
 80023c0:	bf14      	ite	ne
 80023c2:	2301      	movne	r3, #1
 80023c4:	2300      	moveq	r3, #0
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	461a      	mov	r2, r3
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80023da:	2b00      	cmp	r3, #0
 80023dc:	bf14      	ite	ne
 80023de:	2301      	movne	r3, #1
 80023e0:	2300      	moveq	r3, #0
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr

080023fa <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b082      	sub	sp, #8
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
 8002402:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d101      	bne.n	800240e <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e00b      	b.n	8002426 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002414:	2b10      	cmp	r3, #16
 8002416:	d105      	bne.n	8002424 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002418:	6839      	ldr	r1, [r7, #0]
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 f87c 	bl	8002518 <ETH_SetMACConfig>

    return HAL_OK;
 8002420:	2300      	movs	r3, #0
 8002422:	e000      	b.n	8002426 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
  }
}
 8002426:	4618      	mov	r0, r3
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
	...

08002430 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f023 031c 	bic.w	r3, r3, #28
 8002446:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002448:	f001 faa4 	bl	8003994 <HAL_RCC_GetHCLKFreq>
 800244c:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	4a14      	ldr	r2, [pc, #80]	@ (80024a4 <HAL_ETH_SetMDIOClockRange+0x74>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d804      	bhi.n	8002460 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	f043 0308 	orr.w	r3, r3, #8
 800245c:	60fb      	str	r3, [r7, #12]
 800245e:	e019      	b.n	8002494 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	4a11      	ldr	r2, [pc, #68]	@ (80024a8 <HAL_ETH_SetMDIOClockRange+0x78>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d204      	bcs.n	8002472 <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f043 030c 	orr.w	r3, r3, #12
 800246e:	60fb      	str	r3, [r7, #12]
 8002470:	e010      	b.n	8002494 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	4a0d      	ldr	r2, [pc, #52]	@ (80024ac <HAL_ETH_SetMDIOClockRange+0x7c>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d90c      	bls.n	8002494 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	4a0c      	ldr	r2, [pc, #48]	@ (80024b0 <HAL_ETH_SetMDIOClockRange+0x80>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d804      	bhi.n	800248c <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f043 0304 	orr.w	r3, r3, #4
 8002488:	60fb      	str	r3, [r7, #12]
 800248a:	e003      	b.n	8002494 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f043 0310 	orr.w	r3, r3, #16
 8002492:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	68fa      	ldr	r2, [r7, #12]
 800249a:	611a      	str	r2, [r3, #16]
}
 800249c:	bf00      	nop
 800249e:	3710      	adds	r7, #16
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	02160ebf 	.word	0x02160ebf
 80024a8:	03938700 	.word	0x03938700
 80024ac:	05f5e0ff 	.word	0x05f5e0ff
 80024b0:	08f0d17f 	.word	0x08f0d17f

080024b4 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr

080024ce <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b084      	sub	sp, #16
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80024d6:	2300      	movs	r3, #0
 80024d8:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024e2:	699b      	ldr	r3, [r3, #24]
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	6812      	ldr	r2, [r2, #0]
 80024e8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80024ec:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80024f0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024fe:	2001      	movs	r0, #1
 8002500:	f7ff f896 	bl	8001630 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800250e:	6193      	str	r3, [r2, #24]
}
 8002510:	bf00      	nop
 8002512:	3710      	adds	r7, #16
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}

08002518 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	4b53      	ldr	r3, [pc, #332]	@ (800267c <ETH_SetMACConfig+0x164>)
 800252e:	4013      	ands	r3, r2
 8002530:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	7b9b      	ldrb	r3, [r3, #14]
 8002536:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002538:	683a      	ldr	r2, [r7, #0]
 800253a:	7c12      	ldrb	r2, [r2, #16]
 800253c:	2a00      	cmp	r2, #0
 800253e:	d102      	bne.n	8002546 <ETH_SetMACConfig+0x2e>
 8002540:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002544:	e000      	b.n	8002548 <ETH_SetMACConfig+0x30>
 8002546:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002548:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800254a:	683a      	ldr	r2, [r7, #0]
 800254c:	7c52      	ldrb	r2, [r2, #17]
 800254e:	2a00      	cmp	r2, #0
 8002550:	d102      	bne.n	8002558 <ETH_SetMACConfig+0x40>
 8002552:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002556:	e000      	b.n	800255a <ETH_SetMACConfig+0x42>
 8002558:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800255a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002560:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	7fdb      	ldrb	r3, [r3, #31]
 8002566:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002568:	431a      	orrs	r2, r3
                        macconf->Speed |
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800256e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	7f92      	ldrb	r2, [r2, #30]
 8002574:	2a00      	cmp	r2, #0
 8002576:	d102      	bne.n	800257e <ETH_SetMACConfig+0x66>
 8002578:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800257c:	e000      	b.n	8002580 <ETH_SetMACConfig+0x68>
 800257e:	2200      	movs	r2, #0
                        macconf->Speed |
 8002580:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	7f1b      	ldrb	r3, [r3, #28]
 8002586:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002588:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800258e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	791b      	ldrb	r3, [r3, #4]
 8002594:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002596:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002598:	683a      	ldr	r2, [r7, #0]
 800259a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800259e:	2a00      	cmp	r2, #0
 80025a0:	d102      	bne.n	80025a8 <ETH_SetMACConfig+0x90>
 80025a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80025a6:	e000      	b.n	80025aa <ETH_SetMACConfig+0x92>
 80025a8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80025aa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	7bdb      	ldrb	r3, [r3, #15]
 80025b0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80025b2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80025b8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80025c0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80025c2:	4313      	orrs	r3, r2
 80025c4:	68fa      	ldr	r2, [r7, #12]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80025da:	2001      	movs	r0, #1
 80025dc:	f7ff f828 	bl	8001630 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	68fa      	ldr	r2, [r7, #12]
 80025e6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	699b      	ldr	r3, [r3, #24]
 80025ee:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80025f0:	68fa      	ldr	r2, [r7, #12]
 80025f2:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80025f6:	4013      	ands	r3, r2
 80025f8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025fe:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002600:	683a      	ldr	r2, [r7, #0]
 8002602:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002606:	2a00      	cmp	r2, #0
 8002608:	d101      	bne.n	800260e <ETH_SetMACConfig+0xf6>
 800260a:	2280      	movs	r2, #128	@ 0x80
 800260c:	e000      	b.n	8002610 <ETH_SetMACConfig+0xf8>
 800260e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002610:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002616:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002618:	683a      	ldr	r2, [r7, #0]
 800261a:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800261e:	2a01      	cmp	r2, #1
 8002620:	d101      	bne.n	8002626 <ETH_SetMACConfig+0x10e>
 8002622:	2208      	movs	r2, #8
 8002624:	e000      	b.n	8002628 <ETH_SetMACConfig+0x110>
 8002626:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002628:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002630:	2a01      	cmp	r2, #1
 8002632:	d101      	bne.n	8002638 <ETH_SetMACConfig+0x120>
 8002634:	2204      	movs	r2, #4
 8002636:	e000      	b.n	800263a <ETH_SetMACConfig+0x122>
 8002638:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800263a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800263c:	683a      	ldr	r2, [r7, #0]
 800263e:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8002642:	2a01      	cmp	r2, #1
 8002644:	d101      	bne.n	800264a <ETH_SetMACConfig+0x132>
 8002646:	2202      	movs	r2, #2
 8002648:	e000      	b.n	800264c <ETH_SetMACConfig+0x134>
 800264a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800264c:	4313      	orrs	r3, r2
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	4313      	orrs	r3, r2
 8002652:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	68fa      	ldr	r2, [r7, #12]
 800265a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	699b      	ldr	r3, [r3, #24]
 8002662:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002664:	2001      	movs	r0, #1
 8002666:	f7fe ffe3 	bl	8001630 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	619a      	str	r2, [r3, #24]
}
 8002672:	bf00      	nop
 8002674:	3710      	adds	r7, #16
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	fd20810f 	.word	0xfd20810f

08002680 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	4b3d      	ldr	r3, [pc, #244]	@ (8002790 <ETH_SetDMAConfig+0x110>)
 800269a:	4013      	ands	r3, r2
 800269c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	7b1b      	ldrb	r3, [r3, #12]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d102      	bne.n	80026ac <ETH_SetDMAConfig+0x2c>
 80026a6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80026aa:	e000      	b.n	80026ae <ETH_SetDMAConfig+0x2e>
 80026ac:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	7b5b      	ldrb	r3, [r3, #13]
 80026b2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80026b4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80026b6:	683a      	ldr	r2, [r7, #0]
 80026b8:	7f52      	ldrb	r2, [r2, #29]
 80026ba:	2a00      	cmp	r2, #0
 80026bc:	d102      	bne.n	80026c4 <ETH_SetDMAConfig+0x44>
 80026be:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80026c2:	e000      	b.n	80026c6 <ETH_SetDMAConfig+0x46>
 80026c4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80026c6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	7b9b      	ldrb	r3, [r3, #14]
 80026cc:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80026ce:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80026d4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	7f1b      	ldrb	r3, [r3, #28]
 80026da:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80026dc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	7f9b      	ldrb	r3, [r3, #30]
 80026e2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80026e4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80026ea:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80026f2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80026f4:	4313      	orrs	r3, r2
 80026f6:	68fa      	ldr	r2, [r7, #12]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002704:	461a      	mov	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002712:	699b      	ldr	r3, [r3, #24]
 8002714:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002716:	2001      	movs	r0, #1
 8002718:	f7fe ff8a 	bl	8001630 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002724:	461a      	mov	r2, r3
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	791b      	ldrb	r3, [r3, #4]
 800272e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002734:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800273a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002740:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002748:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800274a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002750:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002752:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002758:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	6812      	ldr	r2, [r2, #0]
 800275e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002762:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002766:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002774:	2001      	movs	r0, #1
 8002776:	f7fe ff5b 	bl	8001630 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002782:	461a      	mov	r2, r3
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6013      	str	r3, [r2, #0]
}
 8002788:	bf00      	nop
 800278a:	3710      	adds	r7, #16
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	f8de3f23 	.word	0xf8de3f23

08002794 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b0a6      	sub	sp, #152	@ 0x98
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800279c:	2301      	movs	r3, #1
 800279e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80027a2:	2301      	movs	r3, #1
 80027a4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80027a8:	2300      	movs	r3, #0
 80027aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80027ac:	2300      	movs	r3, #0
 80027ae:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80027b2:	2301      	movs	r3, #1
 80027b4:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80027b8:	2300      	movs	r3, #0
 80027ba:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80027be:	2301      	movs	r3, #1
 80027c0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80027c4:	2301      	movs	r3, #1
 80027c6:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80027ca:	2300      	movs	r3, #0
 80027cc:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80027d0:	2300      	movs	r3, #0
 80027d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80027d6:	2300      	movs	r3, #0
 80027d8:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80027da:	2300      	movs	r3, #0
 80027dc:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80027e0:	2300      	movs	r3, #0
 80027e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80027e4:	2300      	movs	r3, #0
 80027e6:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80027ea:	2300      	movs	r3, #0
 80027ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80027f0:	2300      	movs	r3, #0
 80027f2:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80027f6:	2300      	movs	r3, #0
 80027f8:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80027fc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002800:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002802:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002806:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002808:	2300      	movs	r3, #0
 800280a:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800280e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002812:	4619      	mov	r1, r3
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f7ff fe7f 	bl	8002518 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800281a:	2301      	movs	r3, #1
 800281c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800281e:	2301      	movs	r3, #1
 8002820:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002822:	2301      	movs	r3, #1
 8002824:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002828:	2301      	movs	r3, #1
 800282a:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800282c:	2300      	movs	r3, #0
 800282e:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002830:	2300      	movs	r3, #0
 8002832:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002836:	2300      	movs	r3, #0
 8002838:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800283c:	2300      	movs	r3, #0
 800283e:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002840:	2301      	movs	r3, #1
 8002842:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002846:	2301      	movs	r3, #1
 8002848:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800284a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800284e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002850:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002854:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002856:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800285a:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800285c:	2301      	movs	r3, #1
 800285e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002862:	2300      	movs	r3, #0
 8002864:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002866:	2300      	movs	r3, #0
 8002868:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800286a:	f107 0308 	add.w	r3, r7, #8
 800286e:	4619      	mov	r1, r3
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f7ff ff05 	bl	8002680 <ETH_SetDMAConfig>
}
 8002876:	bf00      	nop
 8002878:	3798      	adds	r7, #152	@ 0x98
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
	...

08002880 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002880:	b480      	push	{r7}
 8002882:	b087      	sub	sp, #28
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	3305      	adds	r3, #5
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	021b      	lsls	r3, r3, #8
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	3204      	adds	r2, #4
 8002898:	7812      	ldrb	r2, [r2, #0]
 800289a:	4313      	orrs	r3, r2
 800289c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800289e:	68ba      	ldr	r2, [r7, #8]
 80028a0:	4b11      	ldr	r3, [pc, #68]	@ (80028e8 <ETH_MACAddressConfig+0x68>)
 80028a2:	4413      	add	r3, r2
 80028a4:	461a      	mov	r2, r3
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	3303      	adds	r3, #3
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	061a      	lsls	r2, r3, #24
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	3302      	adds	r3, #2
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	041b      	lsls	r3, r3, #16
 80028ba:	431a      	orrs	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	3301      	adds	r3, #1
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	021b      	lsls	r3, r3, #8
 80028c4:	4313      	orrs	r3, r2
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	7812      	ldrb	r2, [r2, #0]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80028ce:	68ba      	ldr	r2, [r7, #8]
 80028d0:	4b06      	ldr	r3, [pc, #24]	@ (80028ec <ETH_MACAddressConfig+0x6c>)
 80028d2:	4413      	add	r3, r2
 80028d4:	461a      	mov	r2, r3
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	6013      	str	r3, [r2, #0]
}
 80028da:	bf00      	nop
 80028dc:	371c      	adds	r7, #28
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	40028040 	.word	0x40028040
 80028ec:	40028044 	.word	0x40028044

080028f0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80028f8:	2300      	movs	r3, #0
 80028fa:	60fb      	str	r3, [r7, #12]
 80028fc:	e03e      	b.n	800297c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	68d9      	ldr	r1, [r3, #12]
 8002902:	68fa      	ldr	r2, [r7, #12]
 8002904:	4613      	mov	r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	4413      	add	r3, r2
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	440b      	add	r3, r1
 800290e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	2200      	movs	r2, #0
 8002914:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	2200      	movs	r2, #0
 800291a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	2200      	movs	r2, #0
 8002920:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	2200      	movs	r2, #0
 8002926:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002928:	68b9      	ldr	r1, [r7, #8]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	3206      	adds	r2, #6
 8002930:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2b02      	cmp	r3, #2
 8002944:	d80c      	bhi.n	8002960 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	68d9      	ldr	r1, [r3, #12]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	1c5a      	adds	r2, r3, #1
 800294e:	4613      	mov	r3, r2
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	4413      	add	r3, r2
 8002954:	00db      	lsls	r3, r3, #3
 8002956:	440b      	add	r3, r1
 8002958:	461a      	mov	r2, r3
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	60da      	str	r2, [r3, #12]
 800295e:	e004      	b.n	800296a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	461a      	mov	r2, r3
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	3301      	adds	r3, #1
 800297a:	60fb      	str	r3, [r7, #12]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2b03      	cmp	r3, #3
 8002980:	d9bd      	bls.n	80028fe <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	68da      	ldr	r2, [r3, #12]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002994:	611a      	str	r2, [r3, #16]
}
 8002996:	bf00      	nop
 8002998:	3714      	adds	r7, #20
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr

080029a2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80029a2:	b480      	push	{r7}
 80029a4:	b085      	sub	sp, #20
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80029aa:	2300      	movs	r3, #0
 80029ac:	60fb      	str	r3, [r7, #12]
 80029ae:	e048      	b.n	8002a42 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6919      	ldr	r1, [r3, #16]
 80029b4:	68fa      	ldr	r2, [r7, #12]
 80029b6:	4613      	mov	r3, r2
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	4413      	add	r3, r2
 80029bc:	00db      	lsls	r3, r3, #3
 80029be:	440b      	add	r3, r1
 80029c0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	2200      	movs	r2, #0
 80029c6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	2200      	movs	r2, #0
 80029cc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	2200      	movs	r2, #0
 80029d2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	2200      	movs	r2, #0
 80029d8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	2200      	movs	r2, #0
 80029de:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	2200      	movs	r2, #0
 80029e4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80029ec:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002a06:	68b9      	ldr	r1, [r7, #8]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	3212      	adds	r2, #18
 8002a0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d80c      	bhi.n	8002a32 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6919      	ldr	r1, [r3, #16]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	1c5a      	adds	r2, r3, #1
 8002a20:	4613      	mov	r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	4413      	add	r3, r2
 8002a26:	00db      	lsls	r3, r3, #3
 8002a28:	440b      	add	r3, r1
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	60da      	str	r2, [r3, #12]
 8002a30:	e004      	b.n	8002a3c <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	461a      	mov	r2, r3
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	3301      	adds	r3, #1
 8002a40:	60fb      	str	r3, [r7, #12]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2b03      	cmp	r3, #3
 8002a46:	d9b3      	bls.n	80029b0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	691a      	ldr	r2, [r3, #16]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a72:	60da      	str	r2, [r3, #12]
}
 8002a74:	bf00      	nop
 8002a76:	3714      	adds	r7, #20
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b091      	sub	sp, #68	@ 0x44
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	3318      	adds	r3, #24
 8002a90:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002aa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002aaa:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002abe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002ac2:	d007      	beq.n	8002ad4 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002ac4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ac6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ac8:	3304      	adds	r3, #4
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	4413      	add	r3, r2
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	e115      	b.n	8002d04 <ETH_Prepare_Tx_Descriptors+0x284>
  }


  descnbr += 1U;
 8002ad8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ada:	3301      	adds	r3, #1
 8002adc:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002ade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ae6:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8002af0:	f023 031f 	bic.w	r3, r3, #31
 8002af4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002af6:	6852      	ldr	r2, [r2, #4]
 8002af8:	431a      	orrs	r2, r3
 8002afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002afc:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d008      	beq.n	8002b1c <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	431a      	orrs	r2, r3
 8002b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b1a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0320 	and.w	r3, r3, #32
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d008      	beq.n	8002b3a <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	431a      	orrs	r2, r3
 8002b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b38:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0304 	and.w	r3, r3, #4
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d005      	beq.n	8002b52 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b50:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b5c:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002b5e:	e084      	b.n	8002c6a <ETH_Prepare_Tx_Descriptors+0x1ea>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b6a:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d006      	beq.n	8002b80 <ETH_Prepare_Tx_Descriptors+0x100>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b7c:	601a      	str	r2, [r3, #0]
 8002b7e:	e005      	b.n	8002b8c <ETH_Prepare_Tx_Descriptors+0x10c>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b8a:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002b8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b8e:	3301      	adds	r3, #1
 8002b90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b94:	2b03      	cmp	r3, #3
 8002b96:	d902      	bls.n	8002b9e <ETH_Prepare_Tx_Descriptors+0x11e>
 8002b98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b9a:	3b04      	subs	r3, #4
 8002b9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002ba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ba6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002bb0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002bb4:	d007      	beq.n	8002bc6 <ETH_Prepare_Tx_Descriptors+0x146>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002bb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bba:	3304      	adds	r3, #4
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	4413      	add	r3, r2
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d029      	beq.n	8002c1a <ETH_Prepare_Tx_Descriptors+0x19a>
    {
      descidx = firstdescidx;
 8002bc6:	6a3b      	ldr	r3, [r7, #32]
 8002bc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bcc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002bce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bd2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002bd8:	e019      	b.n	8002c0e <ETH_Prepare_Tx_Descriptors+0x18e>
  __ASM volatile ("dmb 0xF":::"memory");
 8002bda:	f3bf 8f5f 	dmb	sy
}
 8002bde:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bea:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002bec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bee:	3301      	adds	r3, #1
 8002bf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002bf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bf4:	2b03      	cmp	r3, #3
 8002bf6:	d902      	bls.n	8002bfe <ETH_Prepare_Tx_Descriptors+0x17e>
 8002bf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bfa:	3b04      	subs	r3, #4
 8002bfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c00:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002c02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c06:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8002c08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c0e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002c10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d3e1      	bcc.n	8002bda <ETH_Prepare_Tx_Descriptors+0x15a>
      }

      return HAL_ETH_ERROR_BUSY;
 8002c16:	2302      	movs	r3, #2
 8002c18:	e074      	b.n	8002d04 <ETH_Prepare_Tx_Descriptors+0x284>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c24:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8002c26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c28:	3301      	adds	r3, #1
 8002c2a:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002c2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002c32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	461a      	mov	r2, r3
 8002c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c3a:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8002c44:	f023 031f 	bic.w	r3, r3, #31
 8002c48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c4a:	6852      	ldr	r2, [r2, #4]
 8002c4c:	431a      	orrs	r2, r3
 8002c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c50:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002c52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c54:	3301      	adds	r3, #1
 8002c56:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8002c58:	f3bf 8f5f 	dmb	sy
}
 8002c5c:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c68:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002c6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	f47f af76 	bne.w	8002b60 <ETH_Prepare_Tx_Descriptors+0xe0>
  }

  if (ItMode != ((uint32_t)RESET))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d006      	beq.n	8002c88 <ETH_Prepare_Tx_Descriptors+0x208>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c84:	601a      	str	r2, [r3, #0]
 8002c86:	e005      	b.n	8002c94 <ETH_Prepare_Tx_Descriptors+0x214>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c92:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c9e:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca2:	6a3a      	ldr	r2, [r7, #32]
 8002ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ca8:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8002caa:	f3bf 8f5f 	dmb	sy
}
 8002cae:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cba:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cbe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002cc0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002cc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cc4:	3304      	adds	r3, #4
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	440b      	add	r3, r1
 8002cca:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cce:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002cd0:	611a      	str	r2, [r3, #16]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002cd2:	f3ef 8310 	mrs	r3, PRIMASK
 8002cd6:	613b      	str	r3, [r7, #16]
  return(result);
 8002cd8:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8002cda:	61fb      	str	r3, [r7, #28]
 8002cdc:	2301      	movs	r3, #1
 8002cde:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	f383 8810 	msr	PRIMASK, r3
}
 8002ce6:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cee:	4413      	add	r3, r2
 8002cf0:	1c5a      	adds	r2, r3, #1
 8002cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf4:	629a      	str	r2, [r3, #40]	@ 0x28
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	f383 8810 	msr	PRIMASK, r3
}
 8002d00:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002d02:	2300      	movs	r3, #0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3744      	adds	r7, #68	@ 0x44
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b089      	sub	sp, #36	@ 0x24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d22:	2300      	movs	r3, #0
 8002d24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d26:	2300      	movs	r3, #0
 8002d28:	61fb      	str	r3, [r7, #28]
 8002d2a:	e177      	b.n	800301c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	fa02 f303 	lsl.w	r3, r2, r3
 8002d34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	697a      	ldr	r2, [r7, #20]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d40:	693a      	ldr	r2, [r7, #16]
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	f040 8166 	bne.w	8003016 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f003 0303 	and.w	r3, r3, #3
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d005      	beq.n	8002d62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d130      	bne.n	8002dc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	2203      	movs	r2, #3
 8002d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d72:	43db      	mvns	r3, r3
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	4013      	ands	r3, r2
 8002d78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	68da      	ldr	r2, [r3, #12]
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	fa02 f303 	lsl.w	r3, r2, r3
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d98:	2201      	movs	r2, #1
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	43db      	mvns	r3, r3
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	4013      	ands	r3, r2
 8002da6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	091b      	lsrs	r3, r3, #4
 8002dae:	f003 0201 	and.w	r2, r3, #1
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	fa02 f303 	lsl.w	r3, r2, r3
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f003 0303 	and.w	r3, r3, #3
 8002dcc:	2b03      	cmp	r3, #3
 8002dce:	d017      	beq.n	8002e00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	2203      	movs	r2, #3
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	43db      	mvns	r3, r3
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	4013      	ands	r3, r2
 8002de6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	689a      	ldr	r2, [r3, #8]
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f003 0303 	and.w	r3, r3, #3
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d123      	bne.n	8002e54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	08da      	lsrs	r2, r3, #3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	3208      	adds	r2, #8
 8002e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	f003 0307 	and.w	r3, r3, #7
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	220f      	movs	r2, #15
 8002e24:	fa02 f303 	lsl.w	r3, r2, r3
 8002e28:	43db      	mvns	r3, r3
 8002e2a:	69ba      	ldr	r2, [r7, #24]
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	691a      	ldr	r2, [r3, #16]
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	f003 0307 	and.w	r3, r3, #7
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	08da      	lsrs	r2, r3, #3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	3208      	adds	r2, #8
 8002e4e:	69b9      	ldr	r1, [r7, #24]
 8002e50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	2203      	movs	r2, #3
 8002e60:	fa02 f303 	lsl.w	r3, r2, r3
 8002e64:	43db      	mvns	r3, r3
 8002e66:	69ba      	ldr	r2, [r7, #24]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f003 0203 	and.w	r2, r3, #3
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	005b      	lsls	r3, r3, #1
 8002e78:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	f000 80c0 	beq.w	8003016 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e96:	2300      	movs	r3, #0
 8002e98:	60fb      	str	r3, [r7, #12]
 8002e9a:	4b66      	ldr	r3, [pc, #408]	@ (8003034 <HAL_GPIO_Init+0x324>)
 8002e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e9e:	4a65      	ldr	r2, [pc, #404]	@ (8003034 <HAL_GPIO_Init+0x324>)
 8002ea0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ea4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ea6:	4b63      	ldr	r3, [pc, #396]	@ (8003034 <HAL_GPIO_Init+0x324>)
 8002ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eaa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002eae:	60fb      	str	r3, [r7, #12]
 8002eb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002eb2:	4a61      	ldr	r2, [pc, #388]	@ (8003038 <HAL_GPIO_Init+0x328>)
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	089b      	lsrs	r3, r3, #2
 8002eb8:	3302      	adds	r3, #2
 8002eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	f003 0303 	and.w	r3, r3, #3
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	220f      	movs	r2, #15
 8002eca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ece:	43db      	mvns	r3, r3
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a58      	ldr	r2, [pc, #352]	@ (800303c <HAL_GPIO_Init+0x32c>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d037      	beq.n	8002f4e <HAL_GPIO_Init+0x23e>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a57      	ldr	r2, [pc, #348]	@ (8003040 <HAL_GPIO_Init+0x330>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d031      	beq.n	8002f4a <HAL_GPIO_Init+0x23a>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a56      	ldr	r2, [pc, #344]	@ (8003044 <HAL_GPIO_Init+0x334>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d02b      	beq.n	8002f46 <HAL_GPIO_Init+0x236>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a55      	ldr	r2, [pc, #340]	@ (8003048 <HAL_GPIO_Init+0x338>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d025      	beq.n	8002f42 <HAL_GPIO_Init+0x232>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a54      	ldr	r2, [pc, #336]	@ (800304c <HAL_GPIO_Init+0x33c>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d01f      	beq.n	8002f3e <HAL_GPIO_Init+0x22e>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a53      	ldr	r2, [pc, #332]	@ (8003050 <HAL_GPIO_Init+0x340>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d019      	beq.n	8002f3a <HAL_GPIO_Init+0x22a>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a52      	ldr	r2, [pc, #328]	@ (8003054 <HAL_GPIO_Init+0x344>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d013      	beq.n	8002f36 <HAL_GPIO_Init+0x226>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a51      	ldr	r2, [pc, #324]	@ (8003058 <HAL_GPIO_Init+0x348>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d00d      	beq.n	8002f32 <HAL_GPIO_Init+0x222>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a50      	ldr	r2, [pc, #320]	@ (800305c <HAL_GPIO_Init+0x34c>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d007      	beq.n	8002f2e <HAL_GPIO_Init+0x21e>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a4f      	ldr	r2, [pc, #316]	@ (8003060 <HAL_GPIO_Init+0x350>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d101      	bne.n	8002f2a <HAL_GPIO_Init+0x21a>
 8002f26:	2309      	movs	r3, #9
 8002f28:	e012      	b.n	8002f50 <HAL_GPIO_Init+0x240>
 8002f2a:	230a      	movs	r3, #10
 8002f2c:	e010      	b.n	8002f50 <HAL_GPIO_Init+0x240>
 8002f2e:	2308      	movs	r3, #8
 8002f30:	e00e      	b.n	8002f50 <HAL_GPIO_Init+0x240>
 8002f32:	2307      	movs	r3, #7
 8002f34:	e00c      	b.n	8002f50 <HAL_GPIO_Init+0x240>
 8002f36:	2306      	movs	r3, #6
 8002f38:	e00a      	b.n	8002f50 <HAL_GPIO_Init+0x240>
 8002f3a:	2305      	movs	r3, #5
 8002f3c:	e008      	b.n	8002f50 <HAL_GPIO_Init+0x240>
 8002f3e:	2304      	movs	r3, #4
 8002f40:	e006      	b.n	8002f50 <HAL_GPIO_Init+0x240>
 8002f42:	2303      	movs	r3, #3
 8002f44:	e004      	b.n	8002f50 <HAL_GPIO_Init+0x240>
 8002f46:	2302      	movs	r3, #2
 8002f48:	e002      	b.n	8002f50 <HAL_GPIO_Init+0x240>
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e000      	b.n	8002f50 <HAL_GPIO_Init+0x240>
 8002f4e:	2300      	movs	r3, #0
 8002f50:	69fa      	ldr	r2, [r7, #28]
 8002f52:	f002 0203 	and.w	r2, r2, #3
 8002f56:	0092      	lsls	r2, r2, #2
 8002f58:	4093      	lsls	r3, r2
 8002f5a:	69ba      	ldr	r2, [r7, #24]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f60:	4935      	ldr	r1, [pc, #212]	@ (8003038 <HAL_GPIO_Init+0x328>)
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	089b      	lsrs	r3, r3, #2
 8002f66:	3302      	adds	r3, #2
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f6e:	4b3d      	ldr	r3, [pc, #244]	@ (8003064 <HAL_GPIO_Init+0x354>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	43db      	mvns	r3, r3
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d003      	beq.n	8002f92 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002f8a:	69ba      	ldr	r2, [r7, #24]
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f92:	4a34      	ldr	r2, [pc, #208]	@ (8003064 <HAL_GPIO_Init+0x354>)
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f98:	4b32      	ldr	r3, [pc, #200]	@ (8003064 <HAL_GPIO_Init+0x354>)
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	43db      	mvns	r3, r3
 8002fa2:	69ba      	ldr	r2, [r7, #24]
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d003      	beq.n	8002fbc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fbc:	4a29      	ldr	r2, [pc, #164]	@ (8003064 <HAL_GPIO_Init+0x354>)
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fc2:	4b28      	ldr	r3, [pc, #160]	@ (8003064 <HAL_GPIO_Init+0x354>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	43db      	mvns	r3, r3
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	4013      	ands	r3, r2
 8002fd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d003      	beq.n	8002fe6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fe6:	4a1f      	ldr	r2, [pc, #124]	@ (8003064 <HAL_GPIO_Init+0x354>)
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fec:	4b1d      	ldr	r3, [pc, #116]	@ (8003064 <HAL_GPIO_Init+0x354>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	43db      	mvns	r3, r3
 8002ff6:	69ba      	ldr	r2, [r7, #24]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d003      	beq.n	8003010 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	4313      	orrs	r3, r2
 800300e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003010:	4a14      	ldr	r2, [pc, #80]	@ (8003064 <HAL_GPIO_Init+0x354>)
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	3301      	adds	r3, #1
 800301a:	61fb      	str	r3, [r7, #28]
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	2b0f      	cmp	r3, #15
 8003020:	f67f ae84 	bls.w	8002d2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003024:	bf00      	nop
 8003026:	bf00      	nop
 8003028:	3724      	adds	r7, #36	@ 0x24
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	40023800 	.word	0x40023800
 8003038:	40013800 	.word	0x40013800
 800303c:	40020000 	.word	0x40020000
 8003040:	40020400 	.word	0x40020400
 8003044:	40020800 	.word	0x40020800
 8003048:	40020c00 	.word	0x40020c00
 800304c:	40021000 	.word	0x40021000
 8003050:	40021400 	.word	0x40021400
 8003054:	40021800 	.word	0x40021800
 8003058:	40021c00 	.word	0x40021c00
 800305c:	40022000 	.word	0x40022000
 8003060:	40022400 	.word	0x40022400
 8003064:	40013c00 	.word	0x40013c00

08003068 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003068:	b480      	push	{r7}
 800306a:	b085      	sub	sp, #20
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	460b      	mov	r3, r1
 8003072:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	691a      	ldr	r2, [r3, #16]
 8003078:	887b      	ldrh	r3, [r7, #2]
 800307a:	4013      	ands	r3, r2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d002      	beq.n	8003086 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003080:	2301      	movs	r3, #1
 8003082:	73fb      	strb	r3, [r7, #15]
 8003084:	e001      	b.n	800308a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003086:	2300      	movs	r3, #0
 8003088:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800308a:	7bfb      	ldrb	r3, [r7, #15]
}
 800308c:	4618      	mov	r0, r3
 800308e:	3714      	adds	r7, #20
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	460b      	mov	r3, r1
 80030a2:	807b      	strh	r3, [r7, #2]
 80030a4:	4613      	mov	r3, r2
 80030a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030a8:	787b      	ldrb	r3, [r7, #1]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d003      	beq.n	80030b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030ae:	887a      	ldrh	r2, [r7, #2]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030b4:	e003      	b.n	80030be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030b6:	887b      	ldrh	r3, [r7, #2]
 80030b8:	041a      	lsls	r2, r3, #16
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	619a      	str	r2, [r3, #24]
}
 80030be:	bf00      	nop
 80030c0:	370c      	adds	r7, #12
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
	...

080030cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b086      	sub	sp, #24
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d101      	bne.n	80030de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e267      	b.n	80035ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d075      	beq.n	80031d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80030ea:	4b88      	ldr	r3, [pc, #544]	@ (800330c <HAL_RCC_OscConfig+0x240>)
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f003 030c 	and.w	r3, r3, #12
 80030f2:	2b04      	cmp	r3, #4
 80030f4:	d00c      	beq.n	8003110 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030f6:	4b85      	ldr	r3, [pc, #532]	@ (800330c <HAL_RCC_OscConfig+0x240>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80030fe:	2b08      	cmp	r3, #8
 8003100:	d112      	bne.n	8003128 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003102:	4b82      	ldr	r3, [pc, #520]	@ (800330c <HAL_RCC_OscConfig+0x240>)
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800310a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800310e:	d10b      	bne.n	8003128 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003110:	4b7e      	ldr	r3, [pc, #504]	@ (800330c <HAL_RCC_OscConfig+0x240>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003118:	2b00      	cmp	r3, #0
 800311a:	d05b      	beq.n	80031d4 <HAL_RCC_OscConfig+0x108>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d157      	bne.n	80031d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e242      	b.n	80035ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003130:	d106      	bne.n	8003140 <HAL_RCC_OscConfig+0x74>
 8003132:	4b76      	ldr	r3, [pc, #472]	@ (800330c <HAL_RCC_OscConfig+0x240>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a75      	ldr	r2, [pc, #468]	@ (800330c <HAL_RCC_OscConfig+0x240>)
 8003138:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800313c:	6013      	str	r3, [r2, #0]
 800313e:	e01d      	b.n	800317c <HAL_RCC_OscConfig+0xb0>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003148:	d10c      	bne.n	8003164 <HAL_RCC_OscConfig+0x98>
 800314a:	4b70      	ldr	r3, [pc, #448]	@ (800330c <HAL_RCC_OscConfig+0x240>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a6f      	ldr	r2, [pc, #444]	@ (800330c <HAL_RCC_OscConfig+0x240>)
 8003150:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003154:	6013      	str	r3, [r2, #0]
 8003156:	4b6d      	ldr	r3, [pc, #436]	@ (800330c <HAL_RCC_OscConfig+0x240>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a6c      	ldr	r2, [pc, #432]	@ (800330c <HAL_RCC_OscConfig+0x240>)
 800315c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003160:	6013      	str	r3, [r2, #0]
 8003162:	e00b      	b.n	800317c <HAL_RCC_OscConfig+0xb0>
 8003164:	4b69      	ldr	r3, [pc, #420]	@ (800330c <HAL_RCC_OscConfig+0x240>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a68      	ldr	r2, [pc, #416]	@ (800330c <HAL_RCC_OscConfig+0x240>)
 800316a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800316e:	6013      	str	r3, [r2, #0]
 8003170:	4b66      	ldr	r3, [pc, #408]	@ (800330c <HAL_RCC_OscConfig+0x240>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a65      	ldr	r2, [pc, #404]	@ (800330c <HAL_RCC_OscConfig+0x240>)
 8003176:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800317a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d013      	beq.n	80031ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003184:	f7fe fa48 	bl	8001618 <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800318c:	f7fe fa44 	bl	8001618 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b64      	cmp	r3, #100	@ 0x64
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e207      	b.n	80035ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800319e:	4b5b      	ldr	r3, [pc, #364]	@ (800330c <HAL_RCC_OscConfig+0x240>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d0f0      	beq.n	800318c <HAL_RCC_OscConfig+0xc0>
 80031aa:	e014      	b.n	80031d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ac:	f7fe fa34 	bl	8001618 <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031b4:	f7fe fa30 	bl	8001618 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b64      	cmp	r3, #100	@ 0x64
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e1f3      	b.n	80035ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031c6:	4b51      	ldr	r3, [pc, #324]	@ (800330c <HAL_RCC_OscConfig+0x240>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1f0      	bne.n	80031b4 <HAL_RCC_OscConfig+0xe8>
 80031d2:	e000      	b.n	80031d6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d063      	beq.n	80032aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80031e2:	4b4a      	ldr	r3, [pc, #296]	@ (800330c <HAL_RCC_OscConfig+0x240>)
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f003 030c 	and.w	r3, r3, #12
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d00b      	beq.n	8003206 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031ee:	4b47      	ldr	r3, [pc, #284]	@ (800330c <HAL_RCC_OscConfig+0x240>)
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80031f6:	2b08      	cmp	r3, #8
 80031f8:	d11c      	bne.n	8003234 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031fa:	4b44      	ldr	r3, [pc, #272]	@ (800330c <HAL_RCC_OscConfig+0x240>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d116      	bne.n	8003234 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003206:	4b41      	ldr	r3, [pc, #260]	@ (800330c <HAL_RCC_OscConfig+0x240>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d005      	beq.n	800321e <HAL_RCC_OscConfig+0x152>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d001      	beq.n	800321e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e1c7      	b.n	80035ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800321e:	4b3b      	ldr	r3, [pc, #236]	@ (800330c <HAL_RCC_OscConfig+0x240>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	4937      	ldr	r1, [pc, #220]	@ (800330c <HAL_RCC_OscConfig+0x240>)
 800322e:	4313      	orrs	r3, r2
 8003230:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003232:	e03a      	b.n	80032aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d020      	beq.n	800327e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800323c:	4b34      	ldr	r3, [pc, #208]	@ (8003310 <HAL_RCC_OscConfig+0x244>)
 800323e:	2201      	movs	r2, #1
 8003240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003242:	f7fe f9e9 	bl	8001618 <HAL_GetTick>
 8003246:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003248:	e008      	b.n	800325c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800324a:	f7fe f9e5 	bl	8001618 <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	2b02      	cmp	r3, #2
 8003256:	d901      	bls.n	800325c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e1a8      	b.n	80035ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800325c:	4b2b      	ldr	r3, [pc, #172]	@ (800330c <HAL_RCC_OscConfig+0x240>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0302 	and.w	r3, r3, #2
 8003264:	2b00      	cmp	r3, #0
 8003266:	d0f0      	beq.n	800324a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003268:	4b28      	ldr	r3, [pc, #160]	@ (800330c <HAL_RCC_OscConfig+0x240>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	691b      	ldr	r3, [r3, #16]
 8003274:	00db      	lsls	r3, r3, #3
 8003276:	4925      	ldr	r1, [pc, #148]	@ (800330c <HAL_RCC_OscConfig+0x240>)
 8003278:	4313      	orrs	r3, r2
 800327a:	600b      	str	r3, [r1, #0]
 800327c:	e015      	b.n	80032aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800327e:	4b24      	ldr	r3, [pc, #144]	@ (8003310 <HAL_RCC_OscConfig+0x244>)
 8003280:	2200      	movs	r2, #0
 8003282:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003284:	f7fe f9c8 	bl	8001618 <HAL_GetTick>
 8003288:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800328a:	e008      	b.n	800329e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800328c:	f7fe f9c4 	bl	8001618 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b02      	cmp	r3, #2
 8003298:	d901      	bls.n	800329e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e187      	b.n	80035ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800329e:	4b1b      	ldr	r3, [pc, #108]	@ (800330c <HAL_RCC_OscConfig+0x240>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1f0      	bne.n	800328c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0308 	and.w	r3, r3, #8
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d036      	beq.n	8003324 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d016      	beq.n	80032ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032be:	4b15      	ldr	r3, [pc, #84]	@ (8003314 <HAL_RCC_OscConfig+0x248>)
 80032c0:	2201      	movs	r2, #1
 80032c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c4:	f7fe f9a8 	bl	8001618 <HAL_GetTick>
 80032c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032ca:	e008      	b.n	80032de <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032cc:	f7fe f9a4 	bl	8001618 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e167      	b.n	80035ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032de:	4b0b      	ldr	r3, [pc, #44]	@ (800330c <HAL_RCC_OscConfig+0x240>)
 80032e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032e2:	f003 0302 	and.w	r3, r3, #2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d0f0      	beq.n	80032cc <HAL_RCC_OscConfig+0x200>
 80032ea:	e01b      	b.n	8003324 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032ec:	4b09      	ldr	r3, [pc, #36]	@ (8003314 <HAL_RCC_OscConfig+0x248>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032f2:	f7fe f991 	bl	8001618 <HAL_GetTick>
 80032f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032f8:	e00e      	b.n	8003318 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032fa:	f7fe f98d 	bl	8001618 <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	2b02      	cmp	r3, #2
 8003306:	d907      	bls.n	8003318 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e150      	b.n	80035ae <HAL_RCC_OscConfig+0x4e2>
 800330c:	40023800 	.word	0x40023800
 8003310:	42470000 	.word	0x42470000
 8003314:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003318:	4b88      	ldr	r3, [pc, #544]	@ (800353c <HAL_RCC_OscConfig+0x470>)
 800331a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800331c:	f003 0302 	and.w	r3, r3, #2
 8003320:	2b00      	cmp	r3, #0
 8003322:	d1ea      	bne.n	80032fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0304 	and.w	r3, r3, #4
 800332c:	2b00      	cmp	r3, #0
 800332e:	f000 8097 	beq.w	8003460 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003332:	2300      	movs	r3, #0
 8003334:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003336:	4b81      	ldr	r3, [pc, #516]	@ (800353c <HAL_RCC_OscConfig+0x470>)
 8003338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d10f      	bne.n	8003362 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003342:	2300      	movs	r3, #0
 8003344:	60bb      	str	r3, [r7, #8]
 8003346:	4b7d      	ldr	r3, [pc, #500]	@ (800353c <HAL_RCC_OscConfig+0x470>)
 8003348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334a:	4a7c      	ldr	r2, [pc, #496]	@ (800353c <HAL_RCC_OscConfig+0x470>)
 800334c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003350:	6413      	str	r3, [r2, #64]	@ 0x40
 8003352:	4b7a      	ldr	r3, [pc, #488]	@ (800353c <HAL_RCC_OscConfig+0x470>)
 8003354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003356:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800335a:	60bb      	str	r3, [r7, #8]
 800335c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800335e:	2301      	movs	r3, #1
 8003360:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003362:	4b77      	ldr	r3, [pc, #476]	@ (8003540 <HAL_RCC_OscConfig+0x474>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800336a:	2b00      	cmp	r3, #0
 800336c:	d118      	bne.n	80033a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800336e:	4b74      	ldr	r3, [pc, #464]	@ (8003540 <HAL_RCC_OscConfig+0x474>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a73      	ldr	r2, [pc, #460]	@ (8003540 <HAL_RCC_OscConfig+0x474>)
 8003374:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003378:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800337a:	f7fe f94d 	bl	8001618 <HAL_GetTick>
 800337e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003380:	e008      	b.n	8003394 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003382:	f7fe f949 	bl	8001618 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d901      	bls.n	8003394 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e10c      	b.n	80035ae <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003394:	4b6a      	ldr	r3, [pc, #424]	@ (8003540 <HAL_RCC_OscConfig+0x474>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800339c:	2b00      	cmp	r3, #0
 800339e:	d0f0      	beq.n	8003382 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d106      	bne.n	80033b6 <HAL_RCC_OscConfig+0x2ea>
 80033a8:	4b64      	ldr	r3, [pc, #400]	@ (800353c <HAL_RCC_OscConfig+0x470>)
 80033aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ac:	4a63      	ldr	r2, [pc, #396]	@ (800353c <HAL_RCC_OscConfig+0x470>)
 80033ae:	f043 0301 	orr.w	r3, r3, #1
 80033b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80033b4:	e01c      	b.n	80033f0 <HAL_RCC_OscConfig+0x324>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	2b05      	cmp	r3, #5
 80033bc:	d10c      	bne.n	80033d8 <HAL_RCC_OscConfig+0x30c>
 80033be:	4b5f      	ldr	r3, [pc, #380]	@ (800353c <HAL_RCC_OscConfig+0x470>)
 80033c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033c2:	4a5e      	ldr	r2, [pc, #376]	@ (800353c <HAL_RCC_OscConfig+0x470>)
 80033c4:	f043 0304 	orr.w	r3, r3, #4
 80033c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80033ca:	4b5c      	ldr	r3, [pc, #368]	@ (800353c <HAL_RCC_OscConfig+0x470>)
 80033cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ce:	4a5b      	ldr	r2, [pc, #364]	@ (800353c <HAL_RCC_OscConfig+0x470>)
 80033d0:	f043 0301 	orr.w	r3, r3, #1
 80033d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80033d6:	e00b      	b.n	80033f0 <HAL_RCC_OscConfig+0x324>
 80033d8:	4b58      	ldr	r3, [pc, #352]	@ (800353c <HAL_RCC_OscConfig+0x470>)
 80033da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033dc:	4a57      	ldr	r2, [pc, #348]	@ (800353c <HAL_RCC_OscConfig+0x470>)
 80033de:	f023 0301 	bic.w	r3, r3, #1
 80033e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80033e4:	4b55      	ldr	r3, [pc, #340]	@ (800353c <HAL_RCC_OscConfig+0x470>)
 80033e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033e8:	4a54      	ldr	r2, [pc, #336]	@ (800353c <HAL_RCC_OscConfig+0x470>)
 80033ea:	f023 0304 	bic.w	r3, r3, #4
 80033ee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d015      	beq.n	8003424 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033f8:	f7fe f90e 	bl	8001618 <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033fe:	e00a      	b.n	8003416 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003400:	f7fe f90a 	bl	8001618 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800340e:	4293      	cmp	r3, r2
 8003410:	d901      	bls.n	8003416 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e0cb      	b.n	80035ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003416:	4b49      	ldr	r3, [pc, #292]	@ (800353c <HAL_RCC_OscConfig+0x470>)
 8003418:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d0ee      	beq.n	8003400 <HAL_RCC_OscConfig+0x334>
 8003422:	e014      	b.n	800344e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003424:	f7fe f8f8 	bl	8001618 <HAL_GetTick>
 8003428:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800342a:	e00a      	b.n	8003442 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800342c:	f7fe f8f4 	bl	8001618 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	f241 3288 	movw	r2, #5000	@ 0x1388
 800343a:	4293      	cmp	r3, r2
 800343c:	d901      	bls.n	8003442 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e0b5      	b.n	80035ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003442:	4b3e      	ldr	r3, [pc, #248]	@ (800353c <HAL_RCC_OscConfig+0x470>)
 8003444:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1ee      	bne.n	800342c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800344e:	7dfb      	ldrb	r3, [r7, #23]
 8003450:	2b01      	cmp	r3, #1
 8003452:	d105      	bne.n	8003460 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003454:	4b39      	ldr	r3, [pc, #228]	@ (800353c <HAL_RCC_OscConfig+0x470>)
 8003456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003458:	4a38      	ldr	r2, [pc, #224]	@ (800353c <HAL_RCC_OscConfig+0x470>)
 800345a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800345e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	699b      	ldr	r3, [r3, #24]
 8003464:	2b00      	cmp	r3, #0
 8003466:	f000 80a1 	beq.w	80035ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800346a:	4b34      	ldr	r3, [pc, #208]	@ (800353c <HAL_RCC_OscConfig+0x470>)
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f003 030c 	and.w	r3, r3, #12
 8003472:	2b08      	cmp	r3, #8
 8003474:	d05c      	beq.n	8003530 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	2b02      	cmp	r3, #2
 800347c:	d141      	bne.n	8003502 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800347e:	4b31      	ldr	r3, [pc, #196]	@ (8003544 <HAL_RCC_OscConfig+0x478>)
 8003480:	2200      	movs	r2, #0
 8003482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003484:	f7fe f8c8 	bl	8001618 <HAL_GetTick>
 8003488:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800348a:	e008      	b.n	800349e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800348c:	f7fe f8c4 	bl	8001618 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b02      	cmp	r3, #2
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e087      	b.n	80035ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800349e:	4b27      	ldr	r3, [pc, #156]	@ (800353c <HAL_RCC_OscConfig+0x470>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1f0      	bne.n	800348c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	69da      	ldr	r2, [r3, #28]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	431a      	orrs	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b8:	019b      	lsls	r3, r3, #6
 80034ba:	431a      	orrs	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034c0:	085b      	lsrs	r3, r3, #1
 80034c2:	3b01      	subs	r3, #1
 80034c4:	041b      	lsls	r3, r3, #16
 80034c6:	431a      	orrs	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034cc:	061b      	lsls	r3, r3, #24
 80034ce:	491b      	ldr	r1, [pc, #108]	@ (800353c <HAL_RCC_OscConfig+0x470>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034d4:	4b1b      	ldr	r3, [pc, #108]	@ (8003544 <HAL_RCC_OscConfig+0x478>)
 80034d6:	2201      	movs	r2, #1
 80034d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034da:	f7fe f89d 	bl	8001618 <HAL_GetTick>
 80034de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034e0:	e008      	b.n	80034f4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034e2:	f7fe f899 	bl	8001618 <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d901      	bls.n	80034f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e05c      	b.n	80035ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034f4:	4b11      	ldr	r3, [pc, #68]	@ (800353c <HAL_RCC_OscConfig+0x470>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d0f0      	beq.n	80034e2 <HAL_RCC_OscConfig+0x416>
 8003500:	e054      	b.n	80035ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003502:	4b10      	ldr	r3, [pc, #64]	@ (8003544 <HAL_RCC_OscConfig+0x478>)
 8003504:	2200      	movs	r2, #0
 8003506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003508:	f7fe f886 	bl	8001618 <HAL_GetTick>
 800350c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800350e:	e008      	b.n	8003522 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003510:	f7fe f882 	bl	8001618 <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	2b02      	cmp	r3, #2
 800351c:	d901      	bls.n	8003522 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e045      	b.n	80035ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003522:	4b06      	ldr	r3, [pc, #24]	@ (800353c <HAL_RCC_OscConfig+0x470>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d1f0      	bne.n	8003510 <HAL_RCC_OscConfig+0x444>
 800352e:	e03d      	b.n	80035ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	699b      	ldr	r3, [r3, #24]
 8003534:	2b01      	cmp	r3, #1
 8003536:	d107      	bne.n	8003548 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e038      	b.n	80035ae <HAL_RCC_OscConfig+0x4e2>
 800353c:	40023800 	.word	0x40023800
 8003540:	40007000 	.word	0x40007000
 8003544:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003548:	4b1b      	ldr	r3, [pc, #108]	@ (80035b8 <HAL_RCC_OscConfig+0x4ec>)
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	699b      	ldr	r3, [r3, #24]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d028      	beq.n	80035a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003560:	429a      	cmp	r2, r3
 8003562:	d121      	bne.n	80035a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800356e:	429a      	cmp	r2, r3
 8003570:	d11a      	bne.n	80035a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003572:	68fa      	ldr	r2, [r7, #12]
 8003574:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003578:	4013      	ands	r3, r2
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800357e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003580:	4293      	cmp	r3, r2
 8003582:	d111      	bne.n	80035a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800358e:	085b      	lsrs	r3, r3, #1
 8003590:	3b01      	subs	r3, #1
 8003592:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003594:	429a      	cmp	r2, r3
 8003596:	d107      	bne.n	80035a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d001      	beq.n	80035ac <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e000      	b.n	80035ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3718      	adds	r7, #24
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	40023800 	.word	0x40023800

080035bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d101      	bne.n	80035d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e0cc      	b.n	800376a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035d0:	4b68      	ldr	r3, [pc, #416]	@ (8003774 <HAL_RCC_ClockConfig+0x1b8>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 030f 	and.w	r3, r3, #15
 80035d8:	683a      	ldr	r2, [r7, #0]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d90c      	bls.n	80035f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035de:	4b65      	ldr	r3, [pc, #404]	@ (8003774 <HAL_RCC_ClockConfig+0x1b8>)
 80035e0:	683a      	ldr	r2, [r7, #0]
 80035e2:	b2d2      	uxtb	r2, r2
 80035e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035e6:	4b63      	ldr	r3, [pc, #396]	@ (8003774 <HAL_RCC_ClockConfig+0x1b8>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 030f 	and.w	r3, r3, #15
 80035ee:	683a      	ldr	r2, [r7, #0]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d001      	beq.n	80035f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e0b8      	b.n	800376a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	2b00      	cmp	r3, #0
 8003602:	d020      	beq.n	8003646 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0304 	and.w	r3, r3, #4
 800360c:	2b00      	cmp	r3, #0
 800360e:	d005      	beq.n	800361c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003610:	4b59      	ldr	r3, [pc, #356]	@ (8003778 <HAL_RCC_ClockConfig+0x1bc>)
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	4a58      	ldr	r2, [pc, #352]	@ (8003778 <HAL_RCC_ClockConfig+0x1bc>)
 8003616:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800361a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0308 	and.w	r3, r3, #8
 8003624:	2b00      	cmp	r3, #0
 8003626:	d005      	beq.n	8003634 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003628:	4b53      	ldr	r3, [pc, #332]	@ (8003778 <HAL_RCC_ClockConfig+0x1bc>)
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	4a52      	ldr	r2, [pc, #328]	@ (8003778 <HAL_RCC_ClockConfig+0x1bc>)
 800362e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003632:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003634:	4b50      	ldr	r3, [pc, #320]	@ (8003778 <HAL_RCC_ClockConfig+0x1bc>)
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	494d      	ldr	r1, [pc, #308]	@ (8003778 <HAL_RCC_ClockConfig+0x1bc>)
 8003642:	4313      	orrs	r3, r2
 8003644:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	2b00      	cmp	r3, #0
 8003650:	d044      	beq.n	80036dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d107      	bne.n	800366a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800365a:	4b47      	ldr	r3, [pc, #284]	@ (8003778 <HAL_RCC_ClockConfig+0x1bc>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d119      	bne.n	800369a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e07f      	b.n	800376a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	2b02      	cmp	r3, #2
 8003670:	d003      	beq.n	800367a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003676:	2b03      	cmp	r3, #3
 8003678:	d107      	bne.n	800368a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800367a:	4b3f      	ldr	r3, [pc, #252]	@ (8003778 <HAL_RCC_ClockConfig+0x1bc>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d109      	bne.n	800369a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e06f      	b.n	800376a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800368a:	4b3b      	ldr	r3, [pc, #236]	@ (8003778 <HAL_RCC_ClockConfig+0x1bc>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0302 	and.w	r3, r3, #2
 8003692:	2b00      	cmp	r3, #0
 8003694:	d101      	bne.n	800369a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e067      	b.n	800376a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800369a:	4b37      	ldr	r3, [pc, #220]	@ (8003778 <HAL_RCC_ClockConfig+0x1bc>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f023 0203 	bic.w	r2, r3, #3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	4934      	ldr	r1, [pc, #208]	@ (8003778 <HAL_RCC_ClockConfig+0x1bc>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036ac:	f7fd ffb4 	bl	8001618 <HAL_GetTick>
 80036b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036b2:	e00a      	b.n	80036ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036b4:	f7fd ffb0 	bl	8001618 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e04f      	b.n	800376a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ca:	4b2b      	ldr	r3, [pc, #172]	@ (8003778 <HAL_RCC_ClockConfig+0x1bc>)
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f003 020c 	and.w	r2, r3, #12
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	429a      	cmp	r2, r3
 80036da:	d1eb      	bne.n	80036b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036dc:	4b25      	ldr	r3, [pc, #148]	@ (8003774 <HAL_RCC_ClockConfig+0x1b8>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 030f 	and.w	r3, r3, #15
 80036e4:	683a      	ldr	r2, [r7, #0]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d20c      	bcs.n	8003704 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ea:	4b22      	ldr	r3, [pc, #136]	@ (8003774 <HAL_RCC_ClockConfig+0x1b8>)
 80036ec:	683a      	ldr	r2, [r7, #0]
 80036ee:	b2d2      	uxtb	r2, r2
 80036f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036f2:	4b20      	ldr	r3, [pc, #128]	@ (8003774 <HAL_RCC_ClockConfig+0x1b8>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 030f 	and.w	r3, r3, #15
 80036fa:	683a      	ldr	r2, [r7, #0]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d001      	beq.n	8003704 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e032      	b.n	800376a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0304 	and.w	r3, r3, #4
 800370c:	2b00      	cmp	r3, #0
 800370e:	d008      	beq.n	8003722 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003710:	4b19      	ldr	r3, [pc, #100]	@ (8003778 <HAL_RCC_ClockConfig+0x1bc>)
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	4916      	ldr	r1, [pc, #88]	@ (8003778 <HAL_RCC_ClockConfig+0x1bc>)
 800371e:	4313      	orrs	r3, r2
 8003720:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0308 	and.w	r3, r3, #8
 800372a:	2b00      	cmp	r3, #0
 800372c:	d009      	beq.n	8003742 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800372e:	4b12      	ldr	r3, [pc, #72]	@ (8003778 <HAL_RCC_ClockConfig+0x1bc>)
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	00db      	lsls	r3, r3, #3
 800373c:	490e      	ldr	r1, [pc, #56]	@ (8003778 <HAL_RCC_ClockConfig+0x1bc>)
 800373e:	4313      	orrs	r3, r2
 8003740:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003742:	f000 f821 	bl	8003788 <HAL_RCC_GetSysClockFreq>
 8003746:	4602      	mov	r2, r0
 8003748:	4b0b      	ldr	r3, [pc, #44]	@ (8003778 <HAL_RCC_ClockConfig+0x1bc>)
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	091b      	lsrs	r3, r3, #4
 800374e:	f003 030f 	and.w	r3, r3, #15
 8003752:	490a      	ldr	r1, [pc, #40]	@ (800377c <HAL_RCC_ClockConfig+0x1c0>)
 8003754:	5ccb      	ldrb	r3, [r1, r3]
 8003756:	fa22 f303 	lsr.w	r3, r2, r3
 800375a:	4a09      	ldr	r2, [pc, #36]	@ (8003780 <HAL_RCC_ClockConfig+0x1c4>)
 800375c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800375e:	4b09      	ldr	r3, [pc, #36]	@ (8003784 <HAL_RCC_ClockConfig+0x1c8>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4618      	mov	r0, r3
 8003764:	f7fd f9a4 	bl	8000ab0 <HAL_InitTick>

  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3710      	adds	r7, #16
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	40023c00 	.word	0x40023c00
 8003778:	40023800 	.word	0x40023800
 800377c:	0801dd2c 	.word	0x0801dd2c
 8003780:	20000000 	.word	0x20000000
 8003784:	20000004 	.word	0x20000004

08003788 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003788:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800378c:	b094      	sub	sp, #80	@ 0x50
 800378e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003790:	2300      	movs	r3, #0
 8003792:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003794:	2300      	movs	r3, #0
 8003796:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003798:	2300      	movs	r3, #0
 800379a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800379c:	2300      	movs	r3, #0
 800379e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037a0:	4b79      	ldr	r3, [pc, #484]	@ (8003988 <HAL_RCC_GetSysClockFreq+0x200>)
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	f003 030c 	and.w	r3, r3, #12
 80037a8:	2b08      	cmp	r3, #8
 80037aa:	d00d      	beq.n	80037c8 <HAL_RCC_GetSysClockFreq+0x40>
 80037ac:	2b08      	cmp	r3, #8
 80037ae:	f200 80e1 	bhi.w	8003974 <HAL_RCC_GetSysClockFreq+0x1ec>
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d002      	beq.n	80037bc <HAL_RCC_GetSysClockFreq+0x34>
 80037b6:	2b04      	cmp	r3, #4
 80037b8:	d003      	beq.n	80037c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80037ba:	e0db      	b.n	8003974 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037bc:	4b73      	ldr	r3, [pc, #460]	@ (800398c <HAL_RCC_GetSysClockFreq+0x204>)
 80037be:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80037c0:	e0db      	b.n	800397a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037c2:	4b73      	ldr	r3, [pc, #460]	@ (8003990 <HAL_RCC_GetSysClockFreq+0x208>)
 80037c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80037c6:	e0d8      	b.n	800397a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037c8:	4b6f      	ldr	r3, [pc, #444]	@ (8003988 <HAL_RCC_GetSysClockFreq+0x200>)
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80037d0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037d2:	4b6d      	ldr	r3, [pc, #436]	@ (8003988 <HAL_RCC_GetSysClockFreq+0x200>)
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d063      	beq.n	80038a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037de:	4b6a      	ldr	r3, [pc, #424]	@ (8003988 <HAL_RCC_GetSysClockFreq+0x200>)
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	099b      	lsrs	r3, r3, #6
 80037e4:	2200      	movs	r2, #0
 80037e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80037e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80037ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80037f2:	2300      	movs	r3, #0
 80037f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80037f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80037fa:	4622      	mov	r2, r4
 80037fc:	462b      	mov	r3, r5
 80037fe:	f04f 0000 	mov.w	r0, #0
 8003802:	f04f 0100 	mov.w	r1, #0
 8003806:	0159      	lsls	r1, r3, #5
 8003808:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800380c:	0150      	lsls	r0, r2, #5
 800380e:	4602      	mov	r2, r0
 8003810:	460b      	mov	r3, r1
 8003812:	4621      	mov	r1, r4
 8003814:	1a51      	subs	r1, r2, r1
 8003816:	6139      	str	r1, [r7, #16]
 8003818:	4629      	mov	r1, r5
 800381a:	eb63 0301 	sbc.w	r3, r3, r1
 800381e:	617b      	str	r3, [r7, #20]
 8003820:	f04f 0200 	mov.w	r2, #0
 8003824:	f04f 0300 	mov.w	r3, #0
 8003828:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800382c:	4659      	mov	r1, fp
 800382e:	018b      	lsls	r3, r1, #6
 8003830:	4651      	mov	r1, sl
 8003832:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003836:	4651      	mov	r1, sl
 8003838:	018a      	lsls	r2, r1, #6
 800383a:	4651      	mov	r1, sl
 800383c:	ebb2 0801 	subs.w	r8, r2, r1
 8003840:	4659      	mov	r1, fp
 8003842:	eb63 0901 	sbc.w	r9, r3, r1
 8003846:	f04f 0200 	mov.w	r2, #0
 800384a:	f04f 0300 	mov.w	r3, #0
 800384e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003852:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003856:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800385a:	4690      	mov	r8, r2
 800385c:	4699      	mov	r9, r3
 800385e:	4623      	mov	r3, r4
 8003860:	eb18 0303 	adds.w	r3, r8, r3
 8003864:	60bb      	str	r3, [r7, #8]
 8003866:	462b      	mov	r3, r5
 8003868:	eb49 0303 	adc.w	r3, r9, r3
 800386c:	60fb      	str	r3, [r7, #12]
 800386e:	f04f 0200 	mov.w	r2, #0
 8003872:	f04f 0300 	mov.w	r3, #0
 8003876:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800387a:	4629      	mov	r1, r5
 800387c:	024b      	lsls	r3, r1, #9
 800387e:	4621      	mov	r1, r4
 8003880:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003884:	4621      	mov	r1, r4
 8003886:	024a      	lsls	r2, r1, #9
 8003888:	4610      	mov	r0, r2
 800388a:	4619      	mov	r1, r3
 800388c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800388e:	2200      	movs	r2, #0
 8003890:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003892:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003894:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003898:	f7fc fd12 	bl	80002c0 <__aeabi_uldivmod>
 800389c:	4602      	mov	r2, r0
 800389e:	460b      	mov	r3, r1
 80038a0:	4613      	mov	r3, r2
 80038a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038a4:	e058      	b.n	8003958 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038a6:	4b38      	ldr	r3, [pc, #224]	@ (8003988 <HAL_RCC_GetSysClockFreq+0x200>)
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	099b      	lsrs	r3, r3, #6
 80038ac:	2200      	movs	r2, #0
 80038ae:	4618      	mov	r0, r3
 80038b0:	4611      	mov	r1, r2
 80038b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80038b6:	623b      	str	r3, [r7, #32]
 80038b8:	2300      	movs	r3, #0
 80038ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80038bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80038c0:	4642      	mov	r2, r8
 80038c2:	464b      	mov	r3, r9
 80038c4:	f04f 0000 	mov.w	r0, #0
 80038c8:	f04f 0100 	mov.w	r1, #0
 80038cc:	0159      	lsls	r1, r3, #5
 80038ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038d2:	0150      	lsls	r0, r2, #5
 80038d4:	4602      	mov	r2, r0
 80038d6:	460b      	mov	r3, r1
 80038d8:	4641      	mov	r1, r8
 80038da:	ebb2 0a01 	subs.w	sl, r2, r1
 80038de:	4649      	mov	r1, r9
 80038e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80038e4:	f04f 0200 	mov.w	r2, #0
 80038e8:	f04f 0300 	mov.w	r3, #0
 80038ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80038f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80038f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80038f8:	ebb2 040a 	subs.w	r4, r2, sl
 80038fc:	eb63 050b 	sbc.w	r5, r3, fp
 8003900:	f04f 0200 	mov.w	r2, #0
 8003904:	f04f 0300 	mov.w	r3, #0
 8003908:	00eb      	lsls	r3, r5, #3
 800390a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800390e:	00e2      	lsls	r2, r4, #3
 8003910:	4614      	mov	r4, r2
 8003912:	461d      	mov	r5, r3
 8003914:	4643      	mov	r3, r8
 8003916:	18e3      	adds	r3, r4, r3
 8003918:	603b      	str	r3, [r7, #0]
 800391a:	464b      	mov	r3, r9
 800391c:	eb45 0303 	adc.w	r3, r5, r3
 8003920:	607b      	str	r3, [r7, #4]
 8003922:	f04f 0200 	mov.w	r2, #0
 8003926:	f04f 0300 	mov.w	r3, #0
 800392a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800392e:	4629      	mov	r1, r5
 8003930:	028b      	lsls	r3, r1, #10
 8003932:	4621      	mov	r1, r4
 8003934:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003938:	4621      	mov	r1, r4
 800393a:	028a      	lsls	r2, r1, #10
 800393c:	4610      	mov	r0, r2
 800393e:	4619      	mov	r1, r3
 8003940:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003942:	2200      	movs	r2, #0
 8003944:	61bb      	str	r3, [r7, #24]
 8003946:	61fa      	str	r2, [r7, #28]
 8003948:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800394c:	f7fc fcb8 	bl	80002c0 <__aeabi_uldivmod>
 8003950:	4602      	mov	r2, r0
 8003952:	460b      	mov	r3, r1
 8003954:	4613      	mov	r3, r2
 8003956:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003958:	4b0b      	ldr	r3, [pc, #44]	@ (8003988 <HAL_RCC_GetSysClockFreq+0x200>)
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	0c1b      	lsrs	r3, r3, #16
 800395e:	f003 0303 	and.w	r3, r3, #3
 8003962:	3301      	adds	r3, #1
 8003964:	005b      	lsls	r3, r3, #1
 8003966:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003968:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800396a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800396c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003970:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003972:	e002      	b.n	800397a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003974:	4b05      	ldr	r3, [pc, #20]	@ (800398c <HAL_RCC_GetSysClockFreq+0x204>)
 8003976:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003978:	bf00      	nop
    }
  }
  return sysclockfreq;
 800397a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800397c:	4618      	mov	r0, r3
 800397e:	3750      	adds	r7, #80	@ 0x50
 8003980:	46bd      	mov	sp, r7
 8003982:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003986:	bf00      	nop
 8003988:	40023800 	.word	0x40023800
 800398c:	00f42400 	.word	0x00f42400
 8003990:	007a1200 	.word	0x007a1200

08003994 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003994:	b480      	push	{r7}
 8003996:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003998:	4b03      	ldr	r3, [pc, #12]	@ (80039a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800399a:	681b      	ldr	r3, [r3, #0]
}
 800399c:	4618      	mov	r0, r3
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	20000000 	.word	0x20000000

080039ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80039b0:	f7ff fff0 	bl	8003994 <HAL_RCC_GetHCLKFreq>
 80039b4:	4602      	mov	r2, r0
 80039b6:	4b05      	ldr	r3, [pc, #20]	@ (80039cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	0a9b      	lsrs	r3, r3, #10
 80039bc:	f003 0307 	and.w	r3, r3, #7
 80039c0:	4903      	ldr	r1, [pc, #12]	@ (80039d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039c2:	5ccb      	ldrb	r3, [r1, r3]
 80039c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	40023800 	.word	0x40023800
 80039d0:	0801dd3c 	.word	0x0801dd3c

080039d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80039d8:	f7ff ffdc 	bl	8003994 <HAL_RCC_GetHCLKFreq>
 80039dc:	4602      	mov	r2, r0
 80039de:	4b05      	ldr	r3, [pc, #20]	@ (80039f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	0b5b      	lsrs	r3, r3, #13
 80039e4:	f003 0307 	and.w	r3, r3, #7
 80039e8:	4903      	ldr	r1, [pc, #12]	@ (80039f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039ea:	5ccb      	ldrb	r3, [r1, r3]
 80039ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	40023800 	.word	0x40023800
 80039f8:	0801dd3c 	.word	0x0801dd3c

080039fc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	220f      	movs	r2, #15
 8003a0a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003a0c:	4b12      	ldr	r3, [pc, #72]	@ (8003a58 <HAL_RCC_GetClockConfig+0x5c>)
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f003 0203 	and.w	r2, r3, #3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003a18:	4b0f      	ldr	r3, [pc, #60]	@ (8003a58 <HAL_RCC_GetClockConfig+0x5c>)
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003a24:	4b0c      	ldr	r3, [pc, #48]	@ (8003a58 <HAL_RCC_GetClockConfig+0x5c>)
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003a30:	4b09      	ldr	r3, [pc, #36]	@ (8003a58 <HAL_RCC_GetClockConfig+0x5c>)
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	08db      	lsrs	r3, r3, #3
 8003a36:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003a3e:	4b07      	ldr	r3, [pc, #28]	@ (8003a5c <HAL_RCC_GetClockConfig+0x60>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 020f 	and.w	r2, r3, #15
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	601a      	str	r2, [r3, #0]
}
 8003a4a:	bf00      	nop
 8003a4c:	370c      	adds	r7, #12
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	40023800 	.word	0x40023800
 8003a5c:	40023c00 	.word	0x40023c00

08003a60 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d101      	bne.n	8003a72 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e01c      	b.n	8003aac <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	795b      	ldrb	r3, [r3, #5]
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d105      	bne.n	8003a88 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f7fc ffaa 	bl	80009dc <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2202      	movs	r2, #2
 8003a8c:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f042 0204 	orr.w	r2, r2, #4
 8003a9c:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3708      	adds	r7, #8
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	791b      	ldrb	r3, [r3, #4]
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d101      	bne.n	8003ace <HAL_RNG_GenerateRandomNumber+0x1a>
 8003aca:	2302      	movs	r3, #2
 8003acc:	e044      	b.n	8003b58 <HAL_RNG_GenerateRandomNumber+0xa4>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	795b      	ldrb	r3, [r3, #5]
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d133      	bne.n	8003b46 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2202      	movs	r2, #2
 8003ae2:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003ae4:	f7fd fd98 	bl	8001618 <HAL_GetTick>
 8003ae8:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003aea:	e018      	b.n	8003b1e <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8003aec:	f7fd fd94 	bl	8001618 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d911      	bls.n	8003b1e <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f003 0301 	and.w	r3, r3, #1
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d00a      	beq.n	8003b1e <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2202      	movs	r2, #2
 8003b12:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e01c      	b.n	8003b58 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f003 0301 	and.w	r3, r3, #1
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d1df      	bne.n	8003aec <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	689a      	ldr	r2, [r3, #8]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	68da      	ldr	r2, [r3, #12]
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2201      	movs	r2, #1
 8003b42:	715a      	strb	r2, [r3, #5]
 8003b44:	e004      	b.n	8003b50 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2204      	movs	r2, #4
 8003b4a:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	711a      	strb	r2, [r3, #4]

  return status;
 8003b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3710      	adds	r7, #16
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d101      	bne.n	8003b72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e041      	b.n	8003bf6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d106      	bne.n	8003b8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 f839 	bl	8003bfe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2202      	movs	r2, #2
 8003b90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	3304      	adds	r3, #4
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	4610      	mov	r0, r2
 8003ba0:	f000 f9c0 	bl	8003f24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3708      	adds	r7, #8
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003bfe:	b480      	push	{r7}
 8003c00:	b083      	sub	sp, #12
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003c06:	bf00      	nop
 8003c08:	370c      	adds	r7, #12
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
	...

08003c14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d001      	beq.n	8003c2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e04e      	b.n	8003cca <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2202      	movs	r2, #2
 8003c30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68da      	ldr	r2, [r3, #12]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f042 0201 	orr.w	r2, r2, #1
 8003c42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a23      	ldr	r2, [pc, #140]	@ (8003cd8 <HAL_TIM_Base_Start_IT+0xc4>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d022      	beq.n	8003c94 <HAL_TIM_Base_Start_IT+0x80>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c56:	d01d      	beq.n	8003c94 <HAL_TIM_Base_Start_IT+0x80>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a1f      	ldr	r2, [pc, #124]	@ (8003cdc <HAL_TIM_Base_Start_IT+0xc8>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d018      	beq.n	8003c94 <HAL_TIM_Base_Start_IT+0x80>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a1e      	ldr	r2, [pc, #120]	@ (8003ce0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d013      	beq.n	8003c94 <HAL_TIM_Base_Start_IT+0x80>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a1c      	ldr	r2, [pc, #112]	@ (8003ce4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d00e      	beq.n	8003c94 <HAL_TIM_Base_Start_IT+0x80>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a1b      	ldr	r2, [pc, #108]	@ (8003ce8 <HAL_TIM_Base_Start_IT+0xd4>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d009      	beq.n	8003c94 <HAL_TIM_Base_Start_IT+0x80>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a19      	ldr	r2, [pc, #100]	@ (8003cec <HAL_TIM_Base_Start_IT+0xd8>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d004      	beq.n	8003c94 <HAL_TIM_Base_Start_IT+0x80>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a18      	ldr	r2, [pc, #96]	@ (8003cf0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d111      	bne.n	8003cb8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f003 0307 	and.w	r3, r3, #7
 8003c9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2b06      	cmp	r3, #6
 8003ca4:	d010      	beq.n	8003cc8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f042 0201 	orr.w	r2, r2, #1
 8003cb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cb6:	e007      	b.n	8003cc8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f042 0201 	orr.w	r2, r2, #1
 8003cc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3714      	adds	r7, #20
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	40010000 	.word	0x40010000
 8003cdc:	40000400 	.word	0x40000400
 8003ce0:	40000800 	.word	0x40000800
 8003ce4:	40000c00 	.word	0x40000c00
 8003ce8:	40010400 	.word	0x40010400
 8003cec:	40014000 	.word	0x40014000
 8003cf0:	40001800 	.word	0x40001800

08003cf4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	f003 0302 	and.w	r3, r3, #2
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d020      	beq.n	8003d58 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	f003 0302 	and.w	r3, r3, #2
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d01b      	beq.n	8003d58 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f06f 0202 	mvn.w	r2, #2
 8003d28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	699b      	ldr	r3, [r3, #24]
 8003d36:	f003 0303 	and.w	r3, r3, #3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d003      	beq.n	8003d46 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 f8d2 	bl	8003ee8 <HAL_TIM_IC_CaptureCallback>
 8003d44:	e005      	b.n	8003d52 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 f8c4 	bl	8003ed4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f000 f8d5 	bl	8003efc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	f003 0304 	and.w	r3, r3, #4
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d020      	beq.n	8003da4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f003 0304 	and.w	r3, r3, #4
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d01b      	beq.n	8003da4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f06f 0204 	mvn.w	r2, #4
 8003d74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2202      	movs	r2, #2
 8003d7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	699b      	ldr	r3, [r3, #24]
 8003d82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d003      	beq.n	8003d92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 f8ac 	bl	8003ee8 <HAL_TIM_IC_CaptureCallback>
 8003d90:	e005      	b.n	8003d9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 f89e 	bl	8003ed4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 f8af 	bl	8003efc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	f003 0308 	and.w	r3, r3, #8
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d020      	beq.n	8003df0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f003 0308 	and.w	r3, r3, #8
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d01b      	beq.n	8003df0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f06f 0208 	mvn.w	r2, #8
 8003dc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2204      	movs	r2, #4
 8003dc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	69db      	ldr	r3, [r3, #28]
 8003dce:	f003 0303 	and.w	r3, r3, #3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d003      	beq.n	8003dde <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 f886 	bl	8003ee8 <HAL_TIM_IC_CaptureCallback>
 8003ddc:	e005      	b.n	8003dea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 f878 	bl	8003ed4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f000 f889 	bl	8003efc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	f003 0310 	and.w	r3, r3, #16
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d020      	beq.n	8003e3c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f003 0310 	and.w	r3, r3, #16
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d01b      	beq.n	8003e3c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f06f 0210 	mvn.w	r2, #16
 8003e0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2208      	movs	r2, #8
 8003e12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	69db      	ldr	r3, [r3, #28]
 8003e1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d003      	beq.n	8003e2a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f000 f860 	bl	8003ee8 <HAL_TIM_IC_CaptureCallback>
 8003e28:	e005      	b.n	8003e36 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 f852 	bl	8003ed4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f000 f863 	bl	8003efc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	f003 0301 	and.w	r3, r3, #1
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00c      	beq.n	8003e60 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f003 0301 	and.w	r3, r3, #1
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d007      	beq.n	8003e60 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f06f 0201 	mvn.w	r2, #1
 8003e58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f7fc fd7a 	bl	8000954 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00c      	beq.n	8003e84 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d007      	beq.n	8003e84 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003e7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 f906 	bl	8004090 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00c      	beq.n	8003ea8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d007      	beq.n	8003ea8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f000 f834 	bl	8003f10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	f003 0320 	and.w	r3, r3, #32
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00c      	beq.n	8003ecc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f003 0320 	and.w	r3, r3, #32
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d007      	beq.n	8003ecc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f06f 0220 	mvn.w	r2, #32
 8003ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 f8d8 	bl	800407c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ecc:	bf00      	nop
 8003ece:	3710      	adds	r7, #16
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f18:	bf00      	nop
 8003f1a:	370c      	adds	r7, #12
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b085      	sub	sp, #20
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4a46      	ldr	r2, [pc, #280]	@ (8004050 <TIM_Base_SetConfig+0x12c>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d013      	beq.n	8003f64 <TIM_Base_SetConfig+0x40>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f42:	d00f      	beq.n	8003f64 <TIM_Base_SetConfig+0x40>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4a43      	ldr	r2, [pc, #268]	@ (8004054 <TIM_Base_SetConfig+0x130>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d00b      	beq.n	8003f64 <TIM_Base_SetConfig+0x40>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a42      	ldr	r2, [pc, #264]	@ (8004058 <TIM_Base_SetConfig+0x134>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d007      	beq.n	8003f64 <TIM_Base_SetConfig+0x40>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a41      	ldr	r2, [pc, #260]	@ (800405c <TIM_Base_SetConfig+0x138>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d003      	beq.n	8003f64 <TIM_Base_SetConfig+0x40>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a40      	ldr	r2, [pc, #256]	@ (8004060 <TIM_Base_SetConfig+0x13c>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d108      	bne.n	8003f76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a35      	ldr	r2, [pc, #212]	@ (8004050 <TIM_Base_SetConfig+0x12c>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d02b      	beq.n	8003fd6 <TIM_Base_SetConfig+0xb2>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f84:	d027      	beq.n	8003fd6 <TIM_Base_SetConfig+0xb2>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a32      	ldr	r2, [pc, #200]	@ (8004054 <TIM_Base_SetConfig+0x130>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d023      	beq.n	8003fd6 <TIM_Base_SetConfig+0xb2>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a31      	ldr	r2, [pc, #196]	@ (8004058 <TIM_Base_SetConfig+0x134>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d01f      	beq.n	8003fd6 <TIM_Base_SetConfig+0xb2>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a30      	ldr	r2, [pc, #192]	@ (800405c <TIM_Base_SetConfig+0x138>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d01b      	beq.n	8003fd6 <TIM_Base_SetConfig+0xb2>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a2f      	ldr	r2, [pc, #188]	@ (8004060 <TIM_Base_SetConfig+0x13c>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d017      	beq.n	8003fd6 <TIM_Base_SetConfig+0xb2>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a2e      	ldr	r2, [pc, #184]	@ (8004064 <TIM_Base_SetConfig+0x140>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d013      	beq.n	8003fd6 <TIM_Base_SetConfig+0xb2>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a2d      	ldr	r2, [pc, #180]	@ (8004068 <TIM_Base_SetConfig+0x144>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d00f      	beq.n	8003fd6 <TIM_Base_SetConfig+0xb2>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a2c      	ldr	r2, [pc, #176]	@ (800406c <TIM_Base_SetConfig+0x148>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d00b      	beq.n	8003fd6 <TIM_Base_SetConfig+0xb2>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a2b      	ldr	r2, [pc, #172]	@ (8004070 <TIM_Base_SetConfig+0x14c>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d007      	beq.n	8003fd6 <TIM_Base_SetConfig+0xb2>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a2a      	ldr	r2, [pc, #168]	@ (8004074 <TIM_Base_SetConfig+0x150>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d003      	beq.n	8003fd6 <TIM_Base_SetConfig+0xb2>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a29      	ldr	r2, [pc, #164]	@ (8004078 <TIM_Base_SetConfig+0x154>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d108      	bne.n	8003fe8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	68fa      	ldr	r2, [r7, #12]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	68fa      	ldr	r2, [r7, #12]
 8003ffa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	689a      	ldr	r2, [r3, #8]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4a10      	ldr	r2, [pc, #64]	@ (8004050 <TIM_Base_SetConfig+0x12c>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d003      	beq.n	800401c <TIM_Base_SetConfig+0xf8>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a12      	ldr	r2, [pc, #72]	@ (8004060 <TIM_Base_SetConfig+0x13c>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d103      	bne.n	8004024 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	691a      	ldr	r2, [r3, #16]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	f003 0301 	and.w	r3, r3, #1
 8004032:	2b01      	cmp	r3, #1
 8004034:	d105      	bne.n	8004042 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	f023 0201 	bic.w	r2, r3, #1
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	611a      	str	r2, [r3, #16]
  }
}
 8004042:	bf00      	nop
 8004044:	3714      	adds	r7, #20
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr
 800404e:	bf00      	nop
 8004050:	40010000 	.word	0x40010000
 8004054:	40000400 	.word	0x40000400
 8004058:	40000800 	.word	0x40000800
 800405c:	40000c00 	.word	0x40000c00
 8004060:	40010400 	.word	0x40010400
 8004064:	40014000 	.word	0x40014000
 8004068:	40014400 	.word	0x40014400
 800406c:	40014800 	.word	0x40014800
 8004070:	40001800 	.word	0x40001800
 8004074:	40001c00 	.word	0x40001c00
 8004078:	40002000 	.word	0x40002000

0800407c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004084:	bf00      	nop
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b082      	sub	sp, #8
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d101      	bne.n	80040b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e042      	b.n	800413c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d106      	bne.n	80040d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f7fc fca8 	bl	8000a20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2224      	movs	r2, #36	@ 0x24
 80040d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68da      	ldr	r2, [r3, #12]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80040e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f000 f82b 	bl	8004144 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	691a      	ldr	r2, [r3, #16]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80040fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	695a      	ldr	r2, [r3, #20]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800410c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68da      	ldr	r2, [r3, #12]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800411c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2220      	movs	r2, #32
 8004128:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2220      	movs	r2, #32
 8004130:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800413a:	2300      	movs	r3, #0
}
 800413c:	4618      	mov	r0, r3
 800413e:	3708      	adds	r7, #8
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004144:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004148:	b0c0      	sub	sp, #256	@ 0x100
 800414a:	af00      	add	r7, sp, #0
 800414c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800415c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004160:	68d9      	ldr	r1, [r3, #12]
 8004162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	ea40 0301 	orr.w	r3, r0, r1
 800416c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800416e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004172:	689a      	ldr	r2, [r3, #8]
 8004174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	431a      	orrs	r2, r3
 800417c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004180:	695b      	ldr	r3, [r3, #20]
 8004182:	431a      	orrs	r2, r3
 8004184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004188:	69db      	ldr	r3, [r3, #28]
 800418a:	4313      	orrs	r3, r2
 800418c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800419c:	f021 010c 	bic.w	r1, r1, #12
 80041a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80041aa:	430b      	orrs	r3, r1
 80041ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	695b      	ldr	r3, [r3, #20]
 80041b6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80041ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041be:	6999      	ldr	r1, [r3, #24]
 80041c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	ea40 0301 	orr.w	r3, r0, r1
 80041ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80041cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	4b8f      	ldr	r3, [pc, #572]	@ (8004410 <UART_SetConfig+0x2cc>)
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d005      	beq.n	80041e4 <UART_SetConfig+0xa0>
 80041d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	4b8d      	ldr	r3, [pc, #564]	@ (8004414 <UART_SetConfig+0x2d0>)
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d104      	bne.n	80041ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80041e4:	f7ff fbf6 	bl	80039d4 <HAL_RCC_GetPCLK2Freq>
 80041e8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80041ec:	e003      	b.n	80041f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80041ee:	f7ff fbdd 	bl	80039ac <HAL_RCC_GetPCLK1Freq>
 80041f2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041fa:	69db      	ldr	r3, [r3, #28]
 80041fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004200:	f040 810c 	bne.w	800441c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004204:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004208:	2200      	movs	r2, #0
 800420a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800420e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004212:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004216:	4622      	mov	r2, r4
 8004218:	462b      	mov	r3, r5
 800421a:	1891      	adds	r1, r2, r2
 800421c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800421e:	415b      	adcs	r3, r3
 8004220:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004222:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004226:	4621      	mov	r1, r4
 8004228:	eb12 0801 	adds.w	r8, r2, r1
 800422c:	4629      	mov	r1, r5
 800422e:	eb43 0901 	adc.w	r9, r3, r1
 8004232:	f04f 0200 	mov.w	r2, #0
 8004236:	f04f 0300 	mov.w	r3, #0
 800423a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800423e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004242:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004246:	4690      	mov	r8, r2
 8004248:	4699      	mov	r9, r3
 800424a:	4623      	mov	r3, r4
 800424c:	eb18 0303 	adds.w	r3, r8, r3
 8004250:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004254:	462b      	mov	r3, r5
 8004256:	eb49 0303 	adc.w	r3, r9, r3
 800425a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800425e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800426a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800426e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004272:	460b      	mov	r3, r1
 8004274:	18db      	adds	r3, r3, r3
 8004276:	653b      	str	r3, [r7, #80]	@ 0x50
 8004278:	4613      	mov	r3, r2
 800427a:	eb42 0303 	adc.w	r3, r2, r3
 800427e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004280:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004284:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004288:	f7fc f81a 	bl	80002c0 <__aeabi_uldivmod>
 800428c:	4602      	mov	r2, r0
 800428e:	460b      	mov	r3, r1
 8004290:	4b61      	ldr	r3, [pc, #388]	@ (8004418 <UART_SetConfig+0x2d4>)
 8004292:	fba3 2302 	umull	r2, r3, r3, r2
 8004296:	095b      	lsrs	r3, r3, #5
 8004298:	011c      	lsls	r4, r3, #4
 800429a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800429e:	2200      	movs	r2, #0
 80042a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80042a4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80042a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80042ac:	4642      	mov	r2, r8
 80042ae:	464b      	mov	r3, r9
 80042b0:	1891      	adds	r1, r2, r2
 80042b2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80042b4:	415b      	adcs	r3, r3
 80042b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80042bc:	4641      	mov	r1, r8
 80042be:	eb12 0a01 	adds.w	sl, r2, r1
 80042c2:	4649      	mov	r1, r9
 80042c4:	eb43 0b01 	adc.w	fp, r3, r1
 80042c8:	f04f 0200 	mov.w	r2, #0
 80042cc:	f04f 0300 	mov.w	r3, #0
 80042d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80042d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80042d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042dc:	4692      	mov	sl, r2
 80042de:	469b      	mov	fp, r3
 80042e0:	4643      	mov	r3, r8
 80042e2:	eb1a 0303 	adds.w	r3, sl, r3
 80042e6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80042ea:	464b      	mov	r3, r9
 80042ec:	eb4b 0303 	adc.w	r3, fp, r3
 80042f0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80042f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004300:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004304:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004308:	460b      	mov	r3, r1
 800430a:	18db      	adds	r3, r3, r3
 800430c:	643b      	str	r3, [r7, #64]	@ 0x40
 800430e:	4613      	mov	r3, r2
 8004310:	eb42 0303 	adc.w	r3, r2, r3
 8004314:	647b      	str	r3, [r7, #68]	@ 0x44
 8004316:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800431a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800431e:	f7fb ffcf 	bl	80002c0 <__aeabi_uldivmod>
 8004322:	4602      	mov	r2, r0
 8004324:	460b      	mov	r3, r1
 8004326:	4611      	mov	r1, r2
 8004328:	4b3b      	ldr	r3, [pc, #236]	@ (8004418 <UART_SetConfig+0x2d4>)
 800432a:	fba3 2301 	umull	r2, r3, r3, r1
 800432e:	095b      	lsrs	r3, r3, #5
 8004330:	2264      	movs	r2, #100	@ 0x64
 8004332:	fb02 f303 	mul.w	r3, r2, r3
 8004336:	1acb      	subs	r3, r1, r3
 8004338:	00db      	lsls	r3, r3, #3
 800433a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800433e:	4b36      	ldr	r3, [pc, #216]	@ (8004418 <UART_SetConfig+0x2d4>)
 8004340:	fba3 2302 	umull	r2, r3, r3, r2
 8004344:	095b      	lsrs	r3, r3, #5
 8004346:	005b      	lsls	r3, r3, #1
 8004348:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800434c:	441c      	add	r4, r3
 800434e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004352:	2200      	movs	r2, #0
 8004354:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004358:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800435c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004360:	4642      	mov	r2, r8
 8004362:	464b      	mov	r3, r9
 8004364:	1891      	adds	r1, r2, r2
 8004366:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004368:	415b      	adcs	r3, r3
 800436a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800436c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004370:	4641      	mov	r1, r8
 8004372:	1851      	adds	r1, r2, r1
 8004374:	6339      	str	r1, [r7, #48]	@ 0x30
 8004376:	4649      	mov	r1, r9
 8004378:	414b      	adcs	r3, r1
 800437a:	637b      	str	r3, [r7, #52]	@ 0x34
 800437c:	f04f 0200 	mov.w	r2, #0
 8004380:	f04f 0300 	mov.w	r3, #0
 8004384:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004388:	4659      	mov	r1, fp
 800438a:	00cb      	lsls	r3, r1, #3
 800438c:	4651      	mov	r1, sl
 800438e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004392:	4651      	mov	r1, sl
 8004394:	00ca      	lsls	r2, r1, #3
 8004396:	4610      	mov	r0, r2
 8004398:	4619      	mov	r1, r3
 800439a:	4603      	mov	r3, r0
 800439c:	4642      	mov	r2, r8
 800439e:	189b      	adds	r3, r3, r2
 80043a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80043a4:	464b      	mov	r3, r9
 80043a6:	460a      	mov	r2, r1
 80043a8:	eb42 0303 	adc.w	r3, r2, r3
 80043ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80043b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80043bc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80043c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80043c4:	460b      	mov	r3, r1
 80043c6:	18db      	adds	r3, r3, r3
 80043c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80043ca:	4613      	mov	r3, r2
 80043cc:	eb42 0303 	adc.w	r3, r2, r3
 80043d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80043d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80043da:	f7fb ff71 	bl	80002c0 <__aeabi_uldivmod>
 80043de:	4602      	mov	r2, r0
 80043e0:	460b      	mov	r3, r1
 80043e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004418 <UART_SetConfig+0x2d4>)
 80043e4:	fba3 1302 	umull	r1, r3, r3, r2
 80043e8:	095b      	lsrs	r3, r3, #5
 80043ea:	2164      	movs	r1, #100	@ 0x64
 80043ec:	fb01 f303 	mul.w	r3, r1, r3
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	00db      	lsls	r3, r3, #3
 80043f4:	3332      	adds	r3, #50	@ 0x32
 80043f6:	4a08      	ldr	r2, [pc, #32]	@ (8004418 <UART_SetConfig+0x2d4>)
 80043f8:	fba2 2303 	umull	r2, r3, r2, r3
 80043fc:	095b      	lsrs	r3, r3, #5
 80043fe:	f003 0207 	and.w	r2, r3, #7
 8004402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4422      	add	r2, r4
 800440a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800440c:	e106      	b.n	800461c <UART_SetConfig+0x4d8>
 800440e:	bf00      	nop
 8004410:	40011000 	.word	0x40011000
 8004414:	40011400 	.word	0x40011400
 8004418:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800441c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004420:	2200      	movs	r2, #0
 8004422:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004426:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800442a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800442e:	4642      	mov	r2, r8
 8004430:	464b      	mov	r3, r9
 8004432:	1891      	adds	r1, r2, r2
 8004434:	6239      	str	r1, [r7, #32]
 8004436:	415b      	adcs	r3, r3
 8004438:	627b      	str	r3, [r7, #36]	@ 0x24
 800443a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800443e:	4641      	mov	r1, r8
 8004440:	1854      	adds	r4, r2, r1
 8004442:	4649      	mov	r1, r9
 8004444:	eb43 0501 	adc.w	r5, r3, r1
 8004448:	f04f 0200 	mov.w	r2, #0
 800444c:	f04f 0300 	mov.w	r3, #0
 8004450:	00eb      	lsls	r3, r5, #3
 8004452:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004456:	00e2      	lsls	r2, r4, #3
 8004458:	4614      	mov	r4, r2
 800445a:	461d      	mov	r5, r3
 800445c:	4643      	mov	r3, r8
 800445e:	18e3      	adds	r3, r4, r3
 8004460:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004464:	464b      	mov	r3, r9
 8004466:	eb45 0303 	adc.w	r3, r5, r3
 800446a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800446e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800447a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800447e:	f04f 0200 	mov.w	r2, #0
 8004482:	f04f 0300 	mov.w	r3, #0
 8004486:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800448a:	4629      	mov	r1, r5
 800448c:	008b      	lsls	r3, r1, #2
 800448e:	4621      	mov	r1, r4
 8004490:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004494:	4621      	mov	r1, r4
 8004496:	008a      	lsls	r2, r1, #2
 8004498:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800449c:	f7fb ff10 	bl	80002c0 <__aeabi_uldivmod>
 80044a0:	4602      	mov	r2, r0
 80044a2:	460b      	mov	r3, r1
 80044a4:	4b60      	ldr	r3, [pc, #384]	@ (8004628 <UART_SetConfig+0x4e4>)
 80044a6:	fba3 2302 	umull	r2, r3, r3, r2
 80044aa:	095b      	lsrs	r3, r3, #5
 80044ac:	011c      	lsls	r4, r3, #4
 80044ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044b2:	2200      	movs	r2, #0
 80044b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80044b8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80044bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80044c0:	4642      	mov	r2, r8
 80044c2:	464b      	mov	r3, r9
 80044c4:	1891      	adds	r1, r2, r2
 80044c6:	61b9      	str	r1, [r7, #24]
 80044c8:	415b      	adcs	r3, r3
 80044ca:	61fb      	str	r3, [r7, #28]
 80044cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044d0:	4641      	mov	r1, r8
 80044d2:	1851      	adds	r1, r2, r1
 80044d4:	6139      	str	r1, [r7, #16]
 80044d6:	4649      	mov	r1, r9
 80044d8:	414b      	adcs	r3, r1
 80044da:	617b      	str	r3, [r7, #20]
 80044dc:	f04f 0200 	mov.w	r2, #0
 80044e0:	f04f 0300 	mov.w	r3, #0
 80044e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80044e8:	4659      	mov	r1, fp
 80044ea:	00cb      	lsls	r3, r1, #3
 80044ec:	4651      	mov	r1, sl
 80044ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044f2:	4651      	mov	r1, sl
 80044f4:	00ca      	lsls	r2, r1, #3
 80044f6:	4610      	mov	r0, r2
 80044f8:	4619      	mov	r1, r3
 80044fa:	4603      	mov	r3, r0
 80044fc:	4642      	mov	r2, r8
 80044fe:	189b      	adds	r3, r3, r2
 8004500:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004504:	464b      	mov	r3, r9
 8004506:	460a      	mov	r2, r1
 8004508:	eb42 0303 	adc.w	r3, r2, r3
 800450c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	67bb      	str	r3, [r7, #120]	@ 0x78
 800451a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800451c:	f04f 0200 	mov.w	r2, #0
 8004520:	f04f 0300 	mov.w	r3, #0
 8004524:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004528:	4649      	mov	r1, r9
 800452a:	008b      	lsls	r3, r1, #2
 800452c:	4641      	mov	r1, r8
 800452e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004532:	4641      	mov	r1, r8
 8004534:	008a      	lsls	r2, r1, #2
 8004536:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800453a:	f7fb fec1 	bl	80002c0 <__aeabi_uldivmod>
 800453e:	4602      	mov	r2, r0
 8004540:	460b      	mov	r3, r1
 8004542:	4611      	mov	r1, r2
 8004544:	4b38      	ldr	r3, [pc, #224]	@ (8004628 <UART_SetConfig+0x4e4>)
 8004546:	fba3 2301 	umull	r2, r3, r3, r1
 800454a:	095b      	lsrs	r3, r3, #5
 800454c:	2264      	movs	r2, #100	@ 0x64
 800454e:	fb02 f303 	mul.w	r3, r2, r3
 8004552:	1acb      	subs	r3, r1, r3
 8004554:	011b      	lsls	r3, r3, #4
 8004556:	3332      	adds	r3, #50	@ 0x32
 8004558:	4a33      	ldr	r2, [pc, #204]	@ (8004628 <UART_SetConfig+0x4e4>)
 800455a:	fba2 2303 	umull	r2, r3, r2, r3
 800455e:	095b      	lsrs	r3, r3, #5
 8004560:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004564:	441c      	add	r4, r3
 8004566:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800456a:	2200      	movs	r2, #0
 800456c:	673b      	str	r3, [r7, #112]	@ 0x70
 800456e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004570:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004574:	4642      	mov	r2, r8
 8004576:	464b      	mov	r3, r9
 8004578:	1891      	adds	r1, r2, r2
 800457a:	60b9      	str	r1, [r7, #8]
 800457c:	415b      	adcs	r3, r3
 800457e:	60fb      	str	r3, [r7, #12]
 8004580:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004584:	4641      	mov	r1, r8
 8004586:	1851      	adds	r1, r2, r1
 8004588:	6039      	str	r1, [r7, #0]
 800458a:	4649      	mov	r1, r9
 800458c:	414b      	adcs	r3, r1
 800458e:	607b      	str	r3, [r7, #4]
 8004590:	f04f 0200 	mov.w	r2, #0
 8004594:	f04f 0300 	mov.w	r3, #0
 8004598:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800459c:	4659      	mov	r1, fp
 800459e:	00cb      	lsls	r3, r1, #3
 80045a0:	4651      	mov	r1, sl
 80045a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045a6:	4651      	mov	r1, sl
 80045a8:	00ca      	lsls	r2, r1, #3
 80045aa:	4610      	mov	r0, r2
 80045ac:	4619      	mov	r1, r3
 80045ae:	4603      	mov	r3, r0
 80045b0:	4642      	mov	r2, r8
 80045b2:	189b      	adds	r3, r3, r2
 80045b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80045b6:	464b      	mov	r3, r9
 80045b8:	460a      	mov	r2, r1
 80045ba:	eb42 0303 	adc.w	r3, r2, r3
 80045be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80045c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	663b      	str	r3, [r7, #96]	@ 0x60
 80045ca:	667a      	str	r2, [r7, #100]	@ 0x64
 80045cc:	f04f 0200 	mov.w	r2, #0
 80045d0:	f04f 0300 	mov.w	r3, #0
 80045d4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80045d8:	4649      	mov	r1, r9
 80045da:	008b      	lsls	r3, r1, #2
 80045dc:	4641      	mov	r1, r8
 80045de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045e2:	4641      	mov	r1, r8
 80045e4:	008a      	lsls	r2, r1, #2
 80045e6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80045ea:	f7fb fe69 	bl	80002c0 <__aeabi_uldivmod>
 80045ee:	4602      	mov	r2, r0
 80045f0:	460b      	mov	r3, r1
 80045f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004628 <UART_SetConfig+0x4e4>)
 80045f4:	fba3 1302 	umull	r1, r3, r3, r2
 80045f8:	095b      	lsrs	r3, r3, #5
 80045fa:	2164      	movs	r1, #100	@ 0x64
 80045fc:	fb01 f303 	mul.w	r3, r1, r3
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	011b      	lsls	r3, r3, #4
 8004604:	3332      	adds	r3, #50	@ 0x32
 8004606:	4a08      	ldr	r2, [pc, #32]	@ (8004628 <UART_SetConfig+0x4e4>)
 8004608:	fba2 2303 	umull	r2, r3, r2, r3
 800460c:	095b      	lsrs	r3, r3, #5
 800460e:	f003 020f 	and.w	r2, r3, #15
 8004612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4422      	add	r2, r4
 800461a:	609a      	str	r2, [r3, #8]
}
 800461c:	bf00      	nop
 800461e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004622:	46bd      	mov	sp, r7
 8004624:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004628:	51eb851f 	.word	0x51eb851f

0800462c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800462c:	b5b0      	push	{r4, r5, r7, lr}
 800462e:	b08c      	sub	sp, #48	@ 0x30
 8004630:	af04      	add	r7, sp, #16
  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8004632:	2100      	movs	r1, #0
 8004634:	2000      	movs	r0, #0
 8004636:	f006 f9b3 	bl	800a9a0 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800463a:	4b1a      	ldr	r3, [pc, #104]	@ (80046a4 <MX_LWIP_Init+0x78>)
 800463c:	2200      	movs	r2, #0
 800463e:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8004640:	4b19      	ldr	r3, [pc, #100]	@ (80046a8 <MX_LWIP_Init+0x7c>)
 8004642:	2200      	movs	r2, #0
 8004644:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8004646:	4b19      	ldr	r3, [pc, #100]	@ (80046ac <MX_LWIP_Init+0x80>)
 8004648:	2200      	movs	r2, #0
 800464a:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800464c:	4b18      	ldr	r3, [pc, #96]	@ (80046b0 <MX_LWIP_Init+0x84>)
 800464e:	9302      	str	r3, [sp, #8]
 8004650:	4b18      	ldr	r3, [pc, #96]	@ (80046b4 <MX_LWIP_Init+0x88>)
 8004652:	9301      	str	r3, [sp, #4]
 8004654:	2300      	movs	r3, #0
 8004656:	9300      	str	r3, [sp, #0]
 8004658:	4b14      	ldr	r3, [pc, #80]	@ (80046ac <MX_LWIP_Init+0x80>)
 800465a:	4a13      	ldr	r2, [pc, #76]	@ (80046a8 <MX_LWIP_Init+0x7c>)
 800465c:	4911      	ldr	r1, [pc, #68]	@ (80046a4 <MX_LWIP_Init+0x78>)
 800465e:	4816      	ldr	r0, [pc, #88]	@ (80046b8 <MX_LWIP_Init+0x8c>)
 8004660:	f007 fdb8 	bl	800c1d4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004664:	4814      	ldr	r0, [pc, #80]	@ (80046b8 <MX_LWIP_Init+0x8c>)
 8004666:	f007 ff6f 	bl	800c548 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800466a:	4813      	ldr	r0, [pc, #76]	@ (80046b8 <MX_LWIP_Init+0x8c>)
 800466c:	f007 ff7c 	bl	800c568 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8004670:	4912      	ldr	r1, [pc, #72]	@ (80046bc <MX_LWIP_Init+0x90>)
 8004672:	4811      	ldr	r0, [pc, #68]	@ (80046b8 <MX_LWIP_Init+0x8c>)
 8004674:	f008 f87e 	bl	800c774 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8004678:	4b11      	ldr	r3, [pc, #68]	@ (80046c0 <MX_LWIP_Init+0x94>)
 800467a:	1d3c      	adds	r4, r7, #4
 800467c:	461d      	mov	r5, r3
 800467e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004680:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004682:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004686:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 800468a:	1d3b      	adds	r3, r7, #4
 800468c:	490a      	ldr	r1, [pc, #40]	@ (80046b8 <MX_LWIP_Init+0x8c>)
 800468e:	4618      	mov	r0, r3
 8004690:	f000 fd48 	bl	8005124 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8004694:	4808      	ldr	r0, [pc, #32]	@ (80046b8 <MX_LWIP_Init+0x8c>)
 8004696:	f010 fa4d 	bl	8014b34 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800469a:	bf00      	nop
 800469c:	3720      	adds	r7, #32
 800469e:	46bd      	mov	sp, r7
 80046a0:	bdb0      	pop	{r4, r5, r7, pc}
 80046a2:	bf00      	nop
 80046a4:	20000534 	.word	0x20000534
 80046a8:	20000538 	.word	0x20000538
 80046ac:	2000053c 	.word	0x2000053c
 80046b0:	0800a8b1 	.word	0x0800a8b1
 80046b4:	08004bad 	.word	0x08004bad
 80046b8:	200004fc 	.word	0x200004fc
 80046bc:	080046c5 	.word	0x080046c5
 80046c0:	0801a200 	.word	0x0801a200

080046c4 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80046cc:	bf00      	nop
 80046ce:	370c      	adds	r7, #12
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr

080046d8 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 80046e0:	4b04      	ldr	r3, [pc, #16]	@ (80046f4 <HAL_ETH_RxCpltCallback+0x1c>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4618      	mov	r0, r3
 80046e6:	f000 fe99 	bl	800541c <osSemaphoreRelease>
}
 80046ea:	bf00      	nop
 80046ec:	3708      	adds	r7, #8
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	2000500c 	.word	0x2000500c

080046f8 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8004700:	4b04      	ldr	r3, [pc, #16]	@ (8004714 <HAL_ETH_TxCpltCallback+0x1c>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4618      	mov	r0, r3
 8004706:	f000 fe89 	bl	800541c <osSemaphoreRelease>
}
 800470a:	bf00      	nop
 800470c:	3708      	adds	r7, #8
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	20005010 	.word	0x20005010

08004718 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f7fd fec7 	bl	80024b4 <HAL_ETH_GetDMAError>
 8004726:	4603      	mov	r3, r0
 8004728:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800472c:	2b80      	cmp	r3, #128	@ 0x80
 800472e:	d104      	bne.n	800473a <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8004730:	4b04      	ldr	r3, [pc, #16]	@ (8004744 <HAL_ETH_ErrorCallback+0x2c>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4618      	mov	r0, r3
 8004736:	f000 fe71 	bl	800541c <osSemaphoreRelease>
  }
}
 800473a:	bf00      	nop
 800473c:	3708      	adds	r7, #8
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	2000500c 	.word	0x2000500c

08004748 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004748:	b5b0      	push	{r4, r5, r7, lr}
 800474a:	b0ac      	sub	sp, #176	@ 0xb0
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8004750:	2300      	movs	r3, #0
 8004752:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
  uint32_t duplex, speed = 0;
 8004756:	2300      	movs	r3, #0
 8004758:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  int32_t PHYLinkState = 0;
 800475c:	2300      	movs	r3, #0
 800475e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  ETH_MACConfigTypeDef MACConf = {0};
 8004762:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004766:	2264      	movs	r2, #100	@ 0x64
 8004768:	2100      	movs	r1, #0
 800476a:	4618      	mov	r0, r3
 800476c:	f014 fb89 	bl	8018e82 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004770:	4b94      	ldr	r3, [pc, #592]	@ (80049c4 <low_level_init+0x27c>)
 8004772:	4a95      	ldr	r2, [pc, #596]	@ (80049c8 <low_level_init+0x280>)
 8004774:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8004776:	2300      	movs	r3, #0
 8004778:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  MACAddr[1] = 0x80;
 800477c:	2380      	movs	r3, #128	@ 0x80
 800477e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  MACAddr[2] = 0xE1;
 8004782:	23e1      	movs	r3, #225	@ 0xe1
 8004784:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  MACAddr[3] = 0xFE;
 8004788:	23fe      	movs	r3, #254	@ 0xfe
 800478a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  MACAddr[4] = 0xEC;
 800478e:	23ec      	movs	r3, #236	@ 0xec
 8004790:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  MACAddr[5] = 0x78;
 8004794:	2378      	movs	r3, #120	@ 0x78
 8004796:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  heth.Init.MACAddr = &MACAddr[0];
 800479a:	4a8a      	ldr	r2, [pc, #552]	@ (80049c4 <low_level_init+0x27c>)
 800479c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80047a0:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80047a2:	4b88      	ldr	r3, [pc, #544]	@ (80049c4 <low_level_init+0x27c>)
 80047a4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80047a8:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80047aa:	4b86      	ldr	r3, [pc, #536]	@ (80049c4 <low_level_init+0x27c>)
 80047ac:	4a87      	ldr	r2, [pc, #540]	@ (80049cc <low_level_init+0x284>)
 80047ae:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80047b0:	4b84      	ldr	r3, [pc, #528]	@ (80049c4 <low_level_init+0x27c>)
 80047b2:	4a87      	ldr	r2, [pc, #540]	@ (80049d0 <low_level_init+0x288>)
 80047b4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80047b6:	4b83      	ldr	r3, [pc, #524]	@ (80049c4 <low_level_init+0x27c>)
 80047b8:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80047bc:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80047be:	4881      	ldr	r0, [pc, #516]	@ (80049c4 <low_level_init+0x27c>)
 80047c0:	f7fd f83c 	bl	800183c <HAL_ETH_Init>
 80047c4:	4603      	mov	r3, r0
 80047c6:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80047ca:	2238      	movs	r2, #56	@ 0x38
 80047cc:	2100      	movs	r1, #0
 80047ce:	4881      	ldr	r0, [pc, #516]	@ (80049d4 <low_level_init+0x28c>)
 80047d0:	f014 fb57 	bl	8018e82 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80047d4:	4b7f      	ldr	r3, [pc, #508]	@ (80049d4 <low_level_init+0x28c>)
 80047d6:	2221      	movs	r2, #33	@ 0x21
 80047d8:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80047da:	4b7e      	ldr	r3, [pc, #504]	@ (80049d4 <low_level_init+0x28c>)
 80047dc:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80047e0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80047e2:	4b7c      	ldr	r3, [pc, #496]	@ (80049d4 <low_level_init+0x28c>)
 80047e4:	2200      	movs	r2, #0
 80047e6:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80047e8:	487b      	ldr	r0, [pc, #492]	@ (80049d8 <low_level_init+0x290>)
 80047ea:	f007 fbad 	bl	800bf48 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2206      	movs	r2, #6
 80047f2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80047f6:	4b73      	ldr	r3, [pc, #460]	@ (80049c4 <low_level_init+0x27c>)
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	781a      	ldrb	r2, [r3, #0]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004802:	4b70      	ldr	r3, [pc, #448]	@ (80049c4 <low_level_init+0x27c>)
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	785a      	ldrb	r2, [r3, #1]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800480e:	4b6d      	ldr	r3, [pc, #436]	@ (80049c4 <low_level_init+0x27c>)
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	789a      	ldrb	r2, [r3, #2]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800481a:	4b6a      	ldr	r3, [pc, #424]	@ (80049c4 <low_level_init+0x27c>)
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	78da      	ldrb	r2, [r3, #3]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004826:	4b67      	ldr	r3, [pc, #412]	@ (80049c4 <low_level_init+0x27c>)
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	791a      	ldrb	r2, [r3, #4]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004832:	4b64      	ldr	r3, [pc, #400]	@ (80049c4 <low_level_init+0x27c>)
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	795a      	ldrb	r2, [r3, #5]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8004844:	851a      	strh	r2, [r3, #40]	@ 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800484c:	f043 030a 	orr.w	r3, r3, #10
 8004850:	b2da      	uxtb	r2, r3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(RxSem);
 8004858:	2300      	movs	r3, #0
 800485a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800485c:	2300      	movs	r3, #0
 800485e:	633b      	str	r3, [r7, #48]	@ 0x30
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(RxSem), 1);
 8004860:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004864:	2101      	movs	r1, #1
 8004866:	4618      	mov	r0, r3
 8004868:	f000 fd58 	bl	800531c <osSemaphoreCreate>
 800486c:	4603      	mov	r3, r0
 800486e:	4a5b      	ldr	r2, [pc, #364]	@ (80049dc <low_level_init+0x294>)
 8004870:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  osSemaphoreDef(TxSem);
 8004872:	2300      	movs	r3, #0
 8004874:	627b      	str	r3, [r7, #36]	@ 0x24
 8004876:	2300      	movs	r3, #0
 8004878:	62bb      	str	r3, [r7, #40]	@ 0x28
  TxPktSemaphore = osSemaphoreCreate(osSemaphore(TxSem), 1);
 800487a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800487e:	2101      	movs	r1, #1
 8004880:	4618      	mov	r0, r3
 8004882:	f000 fd4b 	bl	800531c <osSemaphoreCreate>
 8004886:	4603      	mov	r3, r0
 8004888:	4a55      	ldr	r2, [pc, #340]	@ (80049e0 <low_level_init+0x298>)
 800488a:	6013      	str	r3, [r2, #0]

  /* Decrease the semaphore's initial count from 1 to 0 */
  osSemaphoreWait(RxPktSemaphore, 0);
 800488c:	4b53      	ldr	r3, [pc, #332]	@ (80049dc <low_level_init+0x294>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2100      	movs	r1, #0
 8004892:	4618      	mov	r0, r3
 8004894:	f000 fd74 	bl	8005380 <osSemaphoreWait>
  osSemaphoreWait(TxPktSemaphore, 0);
 8004898:	4b51      	ldr	r3, [pc, #324]	@ (80049e0 <low_level_init+0x298>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2100      	movs	r1, #0
 800489e:	4618      	mov	r0, r3
 80048a0:	f000 fd6e 	bl	8005380 <osSemaphoreWait>

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80048a4:	4b4f      	ldr	r3, [pc, #316]	@ (80049e4 <low_level_init+0x29c>)
 80048a6:	f107 0408 	add.w	r4, r7, #8
 80048aa:	461d      	mov	r5, r3
 80048ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80048ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80048b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80048b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 80048b8:	f107 0308 	add.w	r3, r7, #8
 80048bc:	6879      	ldr	r1, [r7, #4]
 80048be:	4618      	mov	r0, r3
 80048c0:	f000 fc30 	bl	8005124 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80048c4:	4948      	ldr	r1, [pc, #288]	@ (80049e8 <low_level_init+0x2a0>)
 80048c6:	4849      	ldr	r0, [pc, #292]	@ (80049ec <low_level_init+0x2a4>)
 80048c8:	f7fc fd69 	bl	800139e <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 80048cc:	4847      	ldr	r0, [pc, #284]	@ (80049ec <low_level_init+0x2a4>)
 80048ce:	f7fc fd98 	bl	8001402 <LAN8742_Init>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d006      	beq.n	80048e6 <low_level_init+0x19e>
  {
    netif_set_link_down(netif);
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f007 ff1b 	bl	800c714 <netif_set_link_down>
    netif_set_down(netif);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f007 feae 	bl	800c640 <netif_set_down>
 80048e4:	e06b      	b.n	80049be <low_level_init+0x276>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 80048e6:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d165      	bne.n	80049ba <low_level_init+0x272>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80048ee:	483f      	ldr	r0, [pc, #252]	@ (80049ec <low_level_init+0x2a4>)
 80048f0:	f7fc fdd4 	bl	800149c <LAN8742_GetLinkState>
 80048f4:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 80048f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	dc06      	bgt.n	800490e <low_level_init+0x1c6>
    {
      netif_set_link_down(netif);
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f007 ff07 	bl	800c714 <netif_set_link_down>
      netif_set_down(netif);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f007 fe9a 	bl	800c640 <netif_set_down>
 800490c:	e057      	b.n	80049be <low_level_init+0x276>
    }
    else
    {
      switch (PHYLinkState)
 800490e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004912:	3b02      	subs	r3, #2
 8004914:	2b03      	cmp	r3, #3
 8004916:	d82b      	bhi.n	8004970 <low_level_init+0x228>
 8004918:	a201      	add	r2, pc, #4	@ (adr r2, 8004920 <low_level_init+0x1d8>)
 800491a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800491e:	bf00      	nop
 8004920:	08004931 	.word	0x08004931
 8004924:	08004943 	.word	0x08004943
 8004928:	08004953 	.word	0x08004953
 800492c:	08004963 	.word	0x08004963
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8004930:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004934:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_100M;
 8004938:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800493c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        break;
 8004940:	e01f      	b.n	8004982 <low_level_init+0x23a>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8004942:	2300      	movs	r3, #0
 8004944:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_100M;
 8004948:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800494c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        break;
 8004950:	e017      	b.n	8004982 <low_level_init+0x23a>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8004952:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004956:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_10M;
 800495a:	2300      	movs	r3, #0
 800495c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        break;
 8004960:	e00f      	b.n	8004982 <low_level_init+0x23a>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8004962:	2300      	movs	r3, #0
 8004964:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_10M;
 8004968:	2300      	movs	r3, #0
 800496a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        break;
 800496e:	e008      	b.n	8004982 <low_level_init+0x23a>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 8004970:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004974:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_100M;
 8004978:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800497c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        break;
 8004980:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004982:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004986:	4619      	mov	r1, r3
 8004988:	480e      	ldr	r0, [pc, #56]	@ (80049c4 <low_level_init+0x27c>)
 800498a:	f7fd fc3f 	bl	800220c <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800498e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004992:	657b      	str	r3, [r7, #84]	@ 0x54
    MACConf.Speed = speed;
 8004994:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004998:	653b      	str	r3, [r7, #80]	@ 0x50
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800499a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800499e:	4619      	mov	r1, r3
 80049a0:	4808      	ldr	r0, [pc, #32]	@ (80049c4 <low_level_init+0x27c>)
 80049a2:	f7fd fd2a 	bl	80023fa <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 80049a6:	4807      	ldr	r0, [pc, #28]	@ (80049c4 <low_level_init+0x27c>)
 80049a8:	f7fc ffe4 	bl	8001974 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f007 fddb 	bl	800c568 <netif_set_up>
    netif_set_link_up(netif);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f007 fe76 	bl	800c6a4 <netif_set_link_up>
 80049b8:	e001      	b.n	80049be <low_level_init+0x276>
    }

  }
  else
  {
    Error_Handler();
 80049ba:	f7fb ffdd 	bl	8000978 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80049be:	37b0      	adds	r7, #176	@ 0xb0
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bdb0      	pop	{r4, r5, r7, pc}
 80049c4:	20005014 	.word	0x20005014
 80049c8:	40028000 	.word	0x40028000
 80049cc:	20004f6c 	.word	0x20004f6c
 80049d0:	20004ecc 	.word	0x20004ecc
 80049d4:	200050c4 	.word	0x200050c4
 80049d8:	0801dd44 	.word	0x0801dd44
 80049dc:	2000500c 	.word	0x2000500c
 80049e0:	20005010 	.word	0x20005010
 80049e4:	0801a224 	.word	0x0801a224
 80049e8:	2000000c 	.word	0x2000000c
 80049ec:	200050fc 	.word	0x200050fc

080049f0 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b092      	sub	sp, #72	@ 0x48
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80049fa:	2300      	movs	r3, #0
 80049fc:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 80049fe:	2300      	movs	r3, #0
 8004a00:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8004a02:	2300      	movs	r3, #0
 8004a04:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8004a08:	f107 030c 	add.w	r3, r7, #12
 8004a0c:	2230      	movs	r2, #48	@ 0x30
 8004a0e:	2100      	movs	r1, #0
 8004a10:	4618      	mov	r0, r3
 8004a12:	f014 fa36 	bl	8018e82 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8004a16:	f107 030c 	add.w	r3, r7, #12
 8004a1a:	2230      	movs	r2, #48	@ 0x30
 8004a1c:	2100      	movs	r1, #0
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f014 fa2f 	bl	8018e82 <memset>

  for(q = p; q != NULL; q = q->next)
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a28:	e045      	b.n	8004ab6 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8004a2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a2c:	2b03      	cmp	r3, #3
 8004a2e:	d902      	bls.n	8004a36 <low_level_output+0x46>
      return ERR_IF;
 8004a30:	f06f 030b 	mvn.w	r3, #11
 8004a34:	e06c      	b.n	8004b10 <low_level_output+0x120>

    Txbuffer[i].buffer = q->payload;
 8004a36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a38:	6859      	ldr	r1, [r3, #4]
 8004a3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	005b      	lsls	r3, r3, #1
 8004a40:	4413      	add	r3, r2
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	3348      	adds	r3, #72	@ 0x48
 8004a46:	443b      	add	r3, r7
 8004a48:	3b3c      	subs	r3, #60	@ 0x3c
 8004a4a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8004a4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a4e:	895b      	ldrh	r3, [r3, #10]
 8004a50:	4619      	mov	r1, r3
 8004a52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a54:	4613      	mov	r3, r2
 8004a56:	005b      	lsls	r3, r3, #1
 8004a58:	4413      	add	r3, r2
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	3348      	adds	r3, #72	@ 0x48
 8004a5e:	443b      	add	r3, r7
 8004a60:	3b38      	subs	r3, #56	@ 0x38
 8004a62:	6019      	str	r1, [r3, #0]

    if(i>0)
 8004a64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d011      	beq.n	8004a8e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8004a6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a6c:	1e5a      	subs	r2, r3, #1
 8004a6e:	f107 000c 	add.w	r0, r7, #12
 8004a72:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004a74:	460b      	mov	r3, r1
 8004a76:	005b      	lsls	r3, r3, #1
 8004a78:	440b      	add	r3, r1
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	18c1      	adds	r1, r0, r3
 8004a7e:	4613      	mov	r3, r2
 8004a80:	005b      	lsls	r3, r3, #1
 8004a82:	4413      	add	r3, r2
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	3348      	adds	r3, #72	@ 0x48
 8004a88:	443b      	add	r3, r7
 8004a8a:	3b34      	subs	r3, #52	@ 0x34
 8004a8c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8004a8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d109      	bne.n	8004aaa <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8004a96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a98:	4613      	mov	r3, r2
 8004a9a:	005b      	lsls	r3, r3, #1
 8004a9c:	4413      	add	r3, r2
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	3348      	adds	r3, #72	@ 0x48
 8004aa2:	443b      	add	r3, r7
 8004aa4:	3b34      	subs	r3, #52	@ 0x34
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	601a      	str	r2, [r3, #0]
    }

    i++;
 8004aaa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004aac:	3301      	adds	r3, #1
 8004aae:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8004ab0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ab6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d1b6      	bne.n	8004a2a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	891b      	ldrh	r3, [r3, #8]
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	4b15      	ldr	r3, [pc, #84]	@ (8004b18 <low_level_output+0x128>)
 8004ac4:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8004ac6:	4a14      	ldr	r2, [pc, #80]	@ (8004b18 <low_level_output+0x128>)
 8004ac8:	f107 030c 	add.w	r3, r7, #12
 8004acc:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8004ace:	4a12      	ldr	r2, [pc, #72]	@ (8004b18 <low_level_output+0x128>)
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 8004ad4:	6838      	ldr	r0, [r7, #0]
 8004ad6:	f008 faa1 	bl	800d01c <pbuf_ref>

  if (HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK) {
 8004ada:	490f      	ldr	r1, [pc, #60]	@ (8004b18 <low_level_output+0x128>)
 8004adc:	480f      	ldr	r0, [pc, #60]	@ (8004b1c <low_level_output+0x12c>)
 8004ade:	f7fd f838 	bl	8001b52 <HAL_ETH_Transmit_IT>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d10e      	bne.n	8004b06 <low_level_output+0x116>
    while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8004ae8:	bf00      	nop
 8004aea:	4b0d      	ldr	r3, [pc, #52]	@ (8004b20 <low_level_output+0x130>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f04f 31ff 	mov.w	r1, #4294967295
 8004af2:	4618      	mov	r0, r3
 8004af4:	f000 fc44 	bl	8005380 <osSemaphoreWait>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d1f5      	bne.n	8004aea <low_level_output+0xfa>

    {
    }

    HAL_ETH_ReleaseTxPacket(&heth);
 8004afe:	4807      	ldr	r0, [pc, #28]	@ (8004b1c <low_level_output+0x12c>)
 8004b00:	f7fd f9c6 	bl	8001e90 <HAL_ETH_ReleaseTxPacket>
 8004b04:	e002      	b.n	8004b0c <low_level_output+0x11c>
  } else {
    pbuf_free(p);
 8004b06:	6838      	ldr	r0, [r7, #0]
 8004b08:	f008 f9e2 	bl	800ced0 <pbuf_free>
  }

  return errval;
 8004b0c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3748      	adds	r7, #72	@ 0x48
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	200050c4 	.word	0x200050c4
 8004b1c:	20005014 	.word	0x20005014
 8004b20:	20005010 	.word	0x20005010

08004b24 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8004b30:	4b07      	ldr	r3, [pc, #28]	@ (8004b50 <low_level_input+0x2c>)
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d105      	bne.n	8004b44 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8004b38:	f107 030c 	add.w	r3, r7, #12
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	4805      	ldr	r0, [pc, #20]	@ (8004b54 <low_level_input+0x30>)
 8004b40:	f7fd f863 	bl	8001c0a <HAL_ETH_ReadData>
  }

  return p;
 8004b44:	68fb      	ldr	r3, [r7, #12]
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3710      	adds	r7, #16
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	20004ec8 	.word	0x20004ec8
 8004b54:	20005014 	.word	0x20005014

08004b58 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004b60:	2300      	movs	r3, #0
 8004b62:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004b68:	4b0f      	ldr	r3, [pc, #60]	@ (8004ba8 <ethernetif_input+0x50>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f04f 31ff 	mov.w	r1, #4294967295
 8004b70:	4618      	mov	r0, r3
 8004b72:	f000 fc05 	bl	8005380 <osSemaphoreWait>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d1f5      	bne.n	8004b68 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8004b7c:	68b8      	ldr	r0, [r7, #8]
 8004b7e:	f7ff ffd1 	bl	8004b24 <low_level_input>
 8004b82:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00a      	beq.n	8004ba0 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	68b9      	ldr	r1, [r7, #8]
 8004b90:	68f8      	ldr	r0, [r7, #12]
 8004b92:	4798      	blx	r3
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d002      	beq.n	8004ba0 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8004b9a:	68f8      	ldr	r0, [r7, #12]
 8004b9c:	f008 f998 	bl	800ced0 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d1ea      	bne.n	8004b7c <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004ba6:	e7df      	b.n	8004b68 <ethernetif_input+0x10>
 8004ba8:	2000500c 	.word	0x2000500c

08004bac <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d106      	bne.n	8004bc8 <ethernetif_init+0x1c>
 8004bba:	4b0e      	ldr	r3, [pc, #56]	@ (8004bf4 <ethernetif_init+0x48>)
 8004bbc:	f240 12ed 	movw	r2, #493	@ 0x1ed
 8004bc0:	490d      	ldr	r1, [pc, #52]	@ (8004bf8 <ethernetif_init+0x4c>)
 8004bc2:	480e      	ldr	r0, [pc, #56]	@ (8004bfc <ethernetif_init+0x50>)
 8004bc4:	f014 f8be 	bl	8018d44 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2273      	movs	r2, #115	@ 0x73
 8004bcc:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  netif->name[1] = IFNAME1;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2274      	movs	r2, #116	@ 0x74
 8004bd4:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4a09      	ldr	r2, [pc, #36]	@ (8004c00 <ethernetif_init+0x54>)
 8004bdc:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a08      	ldr	r2, [pc, #32]	@ (8004c04 <ethernetif_init+0x58>)
 8004be2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f7ff fdaf 	bl	8004748 <low_level_init>

  return ERR_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3708      	adds	r7, #8
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	0801a240 	.word	0x0801a240
 8004bf8:	0801a25c 	.word	0x0801a25c
 8004bfc:	0801a26c 	.word	0x0801a26c
 8004c00:	080169f5 	.word	0x080169f5
 8004c04:	080049f1 	.word	0x080049f1

08004c08 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8004c14:	68f9      	ldr	r1, [r7, #12]
 8004c16:	4809      	ldr	r0, [pc, #36]	@ (8004c3c <pbuf_free_custom+0x34>)
 8004c18:	f007 fa86 	bl	800c128 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8004c1c:	4b08      	ldr	r3, [pc, #32]	@ (8004c40 <pbuf_free_custom+0x38>)
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d107      	bne.n	8004c34 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8004c24:	4b06      	ldr	r3, [pc, #24]	@ (8004c40 <pbuf_free_custom+0x38>)
 8004c26:	2200      	movs	r2, #0
 8004c28:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8004c2a:	4b06      	ldr	r3, [pc, #24]	@ (8004c44 <pbuf_free_custom+0x3c>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f000 fbf4 	bl	800541c <osSemaphoreRelease>
  }
}
 8004c34:	bf00      	nop
 8004c36:	3710      	adds	r7, #16
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	0801dd44 	.word	0x0801dd44
 8004c40:	20004ec8 	.word	0x20004ec8
 8004c44:	2000500c 	.word	0x2000500c

08004c48 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004c4c:	f7fc fce4 	bl	8001618 <HAL_GetTick>
 8004c50:	4603      	mov	r3, r0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	bd80      	pop	{r7, pc}
	...

08004c58 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b08e      	sub	sp, #56	@ 0x38
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004c64:	2200      	movs	r2, #0
 8004c66:	601a      	str	r2, [r3, #0]
 8004c68:	605a      	str	r2, [r3, #4]
 8004c6a:	609a      	str	r2, [r3, #8]
 8004c6c:	60da      	str	r2, [r3, #12]
 8004c6e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a59      	ldr	r2, [pc, #356]	@ (8004ddc <HAL_ETH_MspInit+0x184>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	f040 80ac 	bne.w	8004dd4 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	623b      	str	r3, [r7, #32]
 8004c80:	4b57      	ldr	r3, [pc, #348]	@ (8004de0 <HAL_ETH_MspInit+0x188>)
 8004c82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c84:	4a56      	ldr	r2, [pc, #344]	@ (8004de0 <HAL_ETH_MspInit+0x188>)
 8004c86:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004c8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c8c:	4b54      	ldr	r3, [pc, #336]	@ (8004de0 <HAL_ETH_MspInit+0x188>)
 8004c8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c94:	623b      	str	r3, [r7, #32]
 8004c96:	6a3b      	ldr	r3, [r7, #32]
 8004c98:	2300      	movs	r3, #0
 8004c9a:	61fb      	str	r3, [r7, #28]
 8004c9c:	4b50      	ldr	r3, [pc, #320]	@ (8004de0 <HAL_ETH_MspInit+0x188>)
 8004c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ca0:	4a4f      	ldr	r2, [pc, #316]	@ (8004de0 <HAL_ETH_MspInit+0x188>)
 8004ca2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004ca6:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ca8:	4b4d      	ldr	r3, [pc, #308]	@ (8004de0 <HAL_ETH_MspInit+0x188>)
 8004caa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004cb0:	61fb      	str	r3, [r7, #28]
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	61bb      	str	r3, [r7, #24]
 8004cb8:	4b49      	ldr	r3, [pc, #292]	@ (8004de0 <HAL_ETH_MspInit+0x188>)
 8004cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cbc:	4a48      	ldr	r2, [pc, #288]	@ (8004de0 <HAL_ETH_MspInit+0x188>)
 8004cbe:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004cc2:	6313      	str	r3, [r2, #48]	@ 0x30
 8004cc4:	4b46      	ldr	r3, [pc, #280]	@ (8004de0 <HAL_ETH_MspInit+0x188>)
 8004cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cc8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ccc:	61bb      	str	r3, [r7, #24]
 8004cce:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	617b      	str	r3, [r7, #20]
 8004cd4:	4b42      	ldr	r3, [pc, #264]	@ (8004de0 <HAL_ETH_MspInit+0x188>)
 8004cd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cd8:	4a41      	ldr	r2, [pc, #260]	@ (8004de0 <HAL_ETH_MspInit+0x188>)
 8004cda:	f043 0304 	orr.w	r3, r3, #4
 8004cde:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ce0:	4b3f      	ldr	r3, [pc, #252]	@ (8004de0 <HAL_ETH_MspInit+0x188>)
 8004ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ce4:	f003 0304 	and.w	r3, r3, #4
 8004ce8:	617b      	str	r3, [r7, #20]
 8004cea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cec:	2300      	movs	r3, #0
 8004cee:	613b      	str	r3, [r7, #16]
 8004cf0:	4b3b      	ldr	r3, [pc, #236]	@ (8004de0 <HAL_ETH_MspInit+0x188>)
 8004cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cf4:	4a3a      	ldr	r2, [pc, #232]	@ (8004de0 <HAL_ETH_MspInit+0x188>)
 8004cf6:	f043 0301 	orr.w	r3, r3, #1
 8004cfa:	6313      	str	r3, [r2, #48]	@ 0x30
 8004cfc:	4b38      	ldr	r3, [pc, #224]	@ (8004de0 <HAL_ETH_MspInit+0x188>)
 8004cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d00:	f003 0301 	and.w	r3, r3, #1
 8004d04:	613b      	str	r3, [r7, #16]
 8004d06:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d08:	2300      	movs	r3, #0
 8004d0a:	60fb      	str	r3, [r7, #12]
 8004d0c:	4b34      	ldr	r3, [pc, #208]	@ (8004de0 <HAL_ETH_MspInit+0x188>)
 8004d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d10:	4a33      	ldr	r2, [pc, #204]	@ (8004de0 <HAL_ETH_MspInit+0x188>)
 8004d12:	f043 0302 	orr.w	r3, r3, #2
 8004d16:	6313      	str	r3, [r2, #48]	@ 0x30
 8004d18:	4b31      	ldr	r3, [pc, #196]	@ (8004de0 <HAL_ETH_MspInit+0x188>)
 8004d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d1c:	f003 0302 	and.w	r3, r3, #2
 8004d20:	60fb      	str	r3, [r7, #12]
 8004d22:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004d24:	2300      	movs	r3, #0
 8004d26:	60bb      	str	r3, [r7, #8]
 8004d28:	4b2d      	ldr	r3, [pc, #180]	@ (8004de0 <HAL_ETH_MspInit+0x188>)
 8004d2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d2c:	4a2c      	ldr	r2, [pc, #176]	@ (8004de0 <HAL_ETH_MspInit+0x188>)
 8004d2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d32:	6313      	str	r3, [r2, #48]	@ 0x30
 8004d34:	4b2a      	ldr	r3, [pc, #168]	@ (8004de0 <HAL_ETH_MspInit+0x188>)
 8004d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d3c:	60bb      	str	r3, [r7, #8]
 8004d3e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004d40:	2332      	movs	r3, #50	@ 0x32
 8004d42:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d44:	2302      	movs	r3, #2
 8004d46:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004d50:	230b      	movs	r3, #11
 8004d52:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d58:	4619      	mov	r1, r3
 8004d5a:	4822      	ldr	r0, [pc, #136]	@ (8004de4 <HAL_ETH_MspInit+0x18c>)
 8004d5c:	f7fd ffd8 	bl	8002d10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004d60:	2386      	movs	r3, #134	@ 0x86
 8004d62:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d64:	2302      	movs	r3, #2
 8004d66:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004d70:	230b      	movs	r3, #11
 8004d72:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d78:	4619      	mov	r1, r3
 8004d7a:	481b      	ldr	r0, [pc, #108]	@ (8004de8 <HAL_ETH_MspInit+0x190>)
 8004d7c:	f7fd ffc8 	bl	8002d10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8004d80:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004d84:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d86:	2302      	movs	r3, #2
 8004d88:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004d92:	230b      	movs	r3, #11
 8004d94:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8004d96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	4813      	ldr	r0, [pc, #76]	@ (8004dec <HAL_ETH_MspInit+0x194>)
 8004d9e:	f7fd ffb7 	bl	8002d10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8004da2:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8004da6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004da8:	2302      	movs	r3, #2
 8004daa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dac:	2300      	movs	r3, #0
 8004dae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004db0:	2303      	movs	r3, #3
 8004db2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004db4:	230b      	movs	r3, #11
 8004db6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004db8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	480c      	ldr	r0, [pc, #48]	@ (8004df0 <HAL_ETH_MspInit+0x198>)
 8004dc0:	f7fd ffa6 	bl	8002d10 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	2105      	movs	r1, #5
 8004dc8:	203d      	movs	r0, #61	@ 0x3d
 8004dca:	f7fc fd0d 	bl	80017e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8004dce:	203d      	movs	r0, #61	@ 0x3d
 8004dd0:	f7fc fd26 	bl	8001820 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004dd4:	bf00      	nop
 8004dd6:	3738      	adds	r7, #56	@ 0x38
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	40028000 	.word	0x40028000
 8004de0:	40023800 	.word	0x40023800
 8004de4:	40020800 	.word	0x40020800
 8004de8:	40020000 	.word	0x40020000
 8004dec:	40020400 	.word	0x40020400
 8004df0:	40021800 	.word	0x40021800

08004df4 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8004df8:	4802      	ldr	r0, [pc, #8]	@ (8004e04 <ETH_PHY_IO_Init+0x10>)
 8004dfa:	f7fd fb19 	bl	8002430 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	20005014 	.word	0x20005014

08004e08 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	af00      	add	r7, sp, #0
  return 0;
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	60b9      	str	r1, [r7, #8]
 8004e22:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	68ba      	ldr	r2, [r7, #8]
 8004e28:	68f9      	ldr	r1, [r7, #12]
 8004e2a:	4807      	ldr	r0, [pc, #28]	@ (8004e48 <ETH_PHY_IO_ReadReg+0x30>)
 8004e2c:	f7fd f95a 	bl	80020e4 <HAL_ETH_ReadPHYRegister>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d002      	beq.n	8004e3c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8004e36:	f04f 33ff 	mov.w	r3, #4294967295
 8004e3a:	e000      	b.n	8004e3e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3710      	adds	r7, #16
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	20005014 	.word	0x20005014

08004e4c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	68ba      	ldr	r2, [r7, #8]
 8004e5c:	68f9      	ldr	r1, [r7, #12]
 8004e5e:	4807      	ldr	r0, [pc, #28]	@ (8004e7c <ETH_PHY_IO_WriteReg+0x30>)
 8004e60:	f7fd f98b 	bl	800217a <HAL_ETH_WritePHYRegister>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d002      	beq.n	8004e70 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8004e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8004e6e:	e000      	b.n	8004e72 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3710      	adds	r7, #16
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	20005014 	.word	0x20005014

08004e80 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004e84:	f7fc fbc8 	bl	8001618 <HAL_GetTick>
 8004e88:	4603      	mov	r3, r0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	bd80      	pop	{r7, pc}
	...

08004e90 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b0a0      	sub	sp, #128	@ 0x80
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8004e98:	f107 0308 	add.w	r3, r7, #8
 8004e9c:	2264      	movs	r2, #100	@ 0x64
 8004e9e:	2100      	movs	r1, #0
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f013 ffee 	bl	8018e82 <memset>
  int32_t PHYLinkState = 0;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004eae:	2300      	movs	r3, #0
 8004eb0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004eba:	483a      	ldr	r0, [pc, #232]	@ (8004fa4 <ethernet_link_thread+0x114>)
 8004ebc:	f7fc faee 	bl	800149c <LAN8742_GetLinkState>
 8004ec0:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8004ec2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ec4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004ec8:	089b      	lsrs	r3, r3, #2
 8004eca:	f003 0301 	and.w	r3, r3, #1
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00c      	beq.n	8004eee <ethernet_link_thread+0x5e>
 8004ed4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	dc09      	bgt.n	8004eee <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8004eda:	4833      	ldr	r0, [pc, #204]	@ (8004fa8 <ethernet_link_thread+0x118>)
 8004edc:	f7fc fdba 	bl	8001a54 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8004ee0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004ee2:	f007 fbad 	bl	800c640 <netif_set_down>
    netif_set_link_down(netif);
 8004ee6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004ee8:	f007 fc14 	bl	800c714 <netif_set_link_down>
 8004eec:	e055      	b.n	8004f9a <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8004eee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ef0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004ef4:	f003 0304 	and.w	r3, r3, #4
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d14e      	bne.n	8004f9a <ethernet_link_thread+0x10a>
 8004efc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	dd4b      	ble.n	8004f9a <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8004f02:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004f04:	3b02      	subs	r3, #2
 8004f06:	2b03      	cmp	r3, #3
 8004f08:	d82a      	bhi.n	8004f60 <ethernet_link_thread+0xd0>
 8004f0a:	a201      	add	r2, pc, #4	@ (adr r2, 8004f10 <ethernet_link_thread+0x80>)
 8004f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f10:	08004f21 	.word	0x08004f21
 8004f14:	08004f33 	.word	0x08004f33
 8004f18:	08004f43 	.word	0x08004f43
 8004f1c:	08004f53 	.word	0x08004f53
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8004f20:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004f24:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8004f26:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004f2a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8004f30:	e017      	b.n	8004f62 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8004f32:	2300      	movs	r3, #0
 8004f34:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8004f36:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004f3a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8004f40:	e00f      	b.n	8004f62 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8004f42:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004f46:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8004f50:	e007      	b.n	8004f62 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8004f52:	2300      	movs	r3, #0
 8004f54:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8004f56:	2300      	movs	r3, #0
 8004f58:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8004f5e:	e000      	b.n	8004f62 <ethernet_link_thread+0xd2>
    default:
      break;
 8004f60:	bf00      	nop
    }

    if(linkchanged)
 8004f62:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d018      	beq.n	8004f9a <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004f68:	f107 0308 	add.w	r3, r7, #8
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	480e      	ldr	r0, [pc, #56]	@ (8004fa8 <ethernet_link_thread+0x118>)
 8004f70:	f7fd f94c 	bl	800220c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8004f74:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f76:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8004f78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f7a:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004f7c:	f107 0308 	add.w	r3, r7, #8
 8004f80:	4619      	mov	r1, r3
 8004f82:	4809      	ldr	r0, [pc, #36]	@ (8004fa8 <ethernet_link_thread+0x118>)
 8004f84:	f7fd fa39 	bl	80023fa <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8004f88:	4807      	ldr	r0, [pc, #28]	@ (8004fa8 <ethernet_link_thread+0x118>)
 8004f8a:	f7fc fcf3 	bl	8001974 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8004f8e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004f90:	f007 faea 	bl	800c568 <netif_set_up>
      netif_set_link_up(netif);
 8004f94:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004f96:	f007 fb85 	bl	800c6a4 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8004f9a:	2064      	movs	r0, #100	@ 0x64
 8004f9c:	f000 f90e 	bl	80051bc <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004fa0:	e78b      	b.n	8004eba <ethernet_link_thread+0x2a>
 8004fa2:	bf00      	nop
 8004fa4:	200050fc 	.word	0x200050fc
 8004fa8:	20005014 	.word	0x20005014

08004fac <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b086      	sub	sp, #24
 8004fb0:	af02      	add	r7, sp, #8
 8004fb2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8004fb4:	4812      	ldr	r0, [pc, #72]	@ (8005000 <HAL_ETH_RxAllocateCallback+0x54>)
 8004fb6:	f007 f843 	bl	800c040 <memp_malloc_pool>
 8004fba:	60f8      	str	r0, [r7, #12]
  if (p)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d014      	beq.n	8004fec <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f103 0220 	add.w	r2, r3, #32
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	4a0d      	ldr	r2, [pc, #52]	@ (8005004 <HAL_ETH_RxAllocateCallback+0x58>)
 8004fd0:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8004fda:	9201      	str	r2, [sp, #4]
 8004fdc:	9300      	str	r3, [sp, #0]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2241      	movs	r2, #65	@ 0x41
 8004fe2:	2100      	movs	r1, #0
 8004fe4:	2000      	movs	r0, #0
 8004fe6:	f007 fdb9 	bl	800cb5c <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8004fea:	e005      	b.n	8004ff8 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8004fec:	4b06      	ldr	r3, [pc, #24]	@ (8005008 <HAL_ETH_RxAllocateCallback+0x5c>)
 8004fee:	2201      	movs	r2, #1
 8004ff0:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	601a      	str	r2, [r3, #0]
}
 8004ff8:	bf00      	nop
 8004ffa:	3710      	adds	r7, #16
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	0801dd44 	.word	0x0801dd44
 8005004:	08004c09 	.word	0x08004c09
 8005008:	20004ec8 	.word	0x20004ec8

0800500c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800500c:	b480      	push	{r7}
 800500e:	b089      	sub	sp, #36	@ 0x24
 8005010:	af00      	add	r7, sp, #0
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	607a      	str	r2, [r7, #4]
 8005018:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8005022:	2300      	movs	r3, #0
 8005024:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	3b20      	subs	r3, #32
 800502a:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	2200      	movs	r2, #0
 8005030:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	2200      	movs	r2, #0
 8005036:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	887a      	ldrh	r2, [r7, #2]
 800503c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d103      	bne.n	800504e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	69fa      	ldr	r2, [r7, #28]
 800504a:	601a      	str	r2, [r3, #0]
 800504c:	e003      	b.n	8005056 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	69fa      	ldr	r2, [r7, #28]
 8005054:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	69fa      	ldr	r2, [r7, #28]
 800505a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	61fb      	str	r3, [r7, #28]
 8005062:	e009      	b.n	8005078 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	891a      	ldrh	r2, [r3, #8]
 8005068:	887b      	ldrh	r3, [r7, #2]
 800506a:	4413      	add	r3, r2
 800506c:	b29a      	uxth	r2, r3
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	61fb      	str	r3, [r7, #28]
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d1f2      	bne.n	8005064 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 800507e:	bf00      	nop
 8005080:	bf00      	nop
 8005082:	3724      	adds	r7, #36	@ 0x24
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b082      	sub	sp, #8
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f007 ff1b 	bl	800ced0 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800509a:	bf00      	nop
 800509c:	3708      	adds	r7, #8
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}

080050a2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80050a2:	b480      	push	{r7}
 80050a4:	b085      	sub	sp, #20
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	4603      	mov	r3, r0
 80050aa:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80050ac:	2300      	movs	r3, #0
 80050ae:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80050b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80050b4:	2b84      	cmp	r3, #132	@ 0x84
 80050b6:	d005      	beq.n	80050c4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80050b8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	4413      	add	r3, r2
 80050c0:	3303      	adds	r3, #3
 80050c2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80050c4:	68fb      	ldr	r3, [r7, #12]
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3714      	adds	r7, #20
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr

080050d2 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80050d2:	b480      	push	{r7}
 80050d4:	b083      	sub	sp, #12
 80050d6:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050d8:	f3ef 8305 	mrs	r3, IPSR
 80050dc:	607b      	str	r3, [r7, #4]
  return(result);
 80050de:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	bf14      	ite	ne
 80050e4:	2301      	movne	r3, #1
 80050e6:	2300      	moveq	r3, #0
 80050e8:	b2db      	uxtb	r3, r3
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	370c      	adds	r7, #12
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr

080050f6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80050f6:	b580      	push	{r7, lr}
 80050f8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80050fa:	f001 fd5f 	bl	8006bbc <vTaskStartScheduler>
  
  return osOK;
 80050fe:	2300      	movs	r3, #0
}
 8005100:	4618      	mov	r0, r3
 8005102:	bd80      	pop	{r7, pc}

08005104 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8005108:	f7ff ffe3 	bl	80050d2 <inHandlerMode>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d003      	beq.n	800511a <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8005112:	f001 fe79 	bl	8006e08 <xTaskGetTickCountFromISR>
 8005116:	4603      	mov	r3, r0
 8005118:	e002      	b.n	8005120 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800511a:	f001 fe65 	bl	8006de8 <xTaskGetTickCount>
 800511e:	4603      	mov	r3, r0
  }
}
 8005120:	4618      	mov	r0, r3
 8005122:	bd80      	pop	{r7, pc}

08005124 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005124:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005126:	b089      	sub	sp, #36	@ 0x24
 8005128:	af04      	add	r7, sp, #16
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	695b      	ldr	r3, [r3, #20]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d020      	beq.n	8005178 <osThreadCreate+0x54>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d01c      	beq.n	8005178 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	685c      	ldr	r4, [r3, #4]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	691e      	ldr	r6, [r3, #16]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005150:	4618      	mov	r0, r3
 8005152:	f7ff ffa6 	bl	80050a2 <makeFreeRtosPriority>
 8005156:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	695b      	ldr	r3, [r3, #20]
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005160:	9202      	str	r2, [sp, #8]
 8005162:	9301      	str	r3, [sp, #4]
 8005164:	9100      	str	r1, [sp, #0]
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	4632      	mov	r2, r6
 800516a:	4629      	mov	r1, r5
 800516c:	4620      	mov	r0, r4
 800516e:	f001 fb3f 	bl	80067f0 <xTaskCreateStatic>
 8005172:	4603      	mov	r3, r0
 8005174:	60fb      	str	r3, [r7, #12]
 8005176:	e01c      	b.n	80051b2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	685c      	ldr	r4, [r3, #4]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005184:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800518c:	4618      	mov	r0, r3
 800518e:	f7ff ff88 	bl	80050a2 <makeFreeRtosPriority>
 8005192:	4602      	mov	r2, r0
 8005194:	f107 030c 	add.w	r3, r7, #12
 8005198:	9301      	str	r3, [sp, #4]
 800519a:	9200      	str	r2, [sp, #0]
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	4632      	mov	r2, r6
 80051a0:	4629      	mov	r1, r5
 80051a2:	4620      	mov	r0, r4
 80051a4:	f001 fb84 	bl	80068b0 <xTaskCreate>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d001      	beq.n	80051b2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80051ae:	2300      	movs	r3, #0
 80051b0:	e000      	b.n	80051b4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80051b2:	68fb      	ldr	r3, [r7, #12]
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3714      	adds	r7, #20
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080051bc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d001      	beq.n	80051d2 <osDelay+0x16>
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	e000      	b.n	80051d4 <osDelay+0x18>
 80051d2:	2301      	movs	r3, #1
 80051d4:	4618      	mov	r0, r3
 80051d6:	f001 fcbb 	bl	8006b50 <vTaskDelay>
  
  return osOK;
 80051da:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3710      	adds	r7, #16
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b082      	sub	sp, #8
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d007      	beq.n	8005204 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	4619      	mov	r1, r3
 80051fa:	2001      	movs	r0, #1
 80051fc:	f000 fc85 	bl	8005b0a <xQueueCreateMutexStatic>
 8005200:	4603      	mov	r3, r0
 8005202:	e003      	b.n	800520c <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8005204:	2001      	movs	r0, #1
 8005206:	f000 fc68 	bl	8005ada <xQueueCreateMutex>
 800520a:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800520c:	4618      	mov	r0, r3
 800520e:	3708      	adds	r7, #8
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b084      	sub	sp, #16
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800521e:	2300      	movs	r3, #0
 8005220:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d101      	bne.n	800522c <osMutexWait+0x18>
    return osErrorParameter;
 8005228:	2380      	movs	r3, #128	@ 0x80
 800522a:	e03a      	b.n	80052a2 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800522c:	2300      	movs	r3, #0
 800522e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005236:	d103      	bne.n	8005240 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8005238:	f04f 33ff 	mov.w	r3, #4294967295
 800523c:	60fb      	str	r3, [r7, #12]
 800523e:	e009      	b.n	8005254 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d006      	beq.n	8005254 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d101      	bne.n	8005254 <osMutexWait+0x40>
      ticks = 1;
 8005250:	2301      	movs	r3, #1
 8005252:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005254:	f7ff ff3d 	bl	80050d2 <inHandlerMode>
 8005258:	4603      	mov	r3, r0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d017      	beq.n	800528e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800525e:	f107 0308 	add.w	r3, r7, #8
 8005262:	461a      	mov	r2, r3
 8005264:	2100      	movs	r1, #0
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f001 f88c 	bl	8006384 <xQueueReceiveFromISR>
 800526c:	4603      	mov	r3, r0
 800526e:	2b01      	cmp	r3, #1
 8005270:	d001      	beq.n	8005276 <osMutexWait+0x62>
      return osErrorOS;
 8005272:	23ff      	movs	r3, #255	@ 0xff
 8005274:	e015      	b.n	80052a2 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d011      	beq.n	80052a0 <osMutexWait+0x8c>
 800527c:	4b0b      	ldr	r3, [pc, #44]	@ (80052ac <osMutexWait+0x98>)
 800527e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005282:	601a      	str	r2, [r3, #0]
 8005284:	f3bf 8f4f 	dsb	sy
 8005288:	f3bf 8f6f 	isb	sy
 800528c:	e008      	b.n	80052a0 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800528e:	68f9      	ldr	r1, [r7, #12]
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f000 ff67 	bl	8006164 <xQueueSemaphoreTake>
 8005296:	4603      	mov	r3, r0
 8005298:	2b01      	cmp	r3, #1
 800529a:	d001      	beq.n	80052a0 <osMutexWait+0x8c>
    return osErrorOS;
 800529c:	23ff      	movs	r3, #255	@ 0xff
 800529e:	e000      	b.n	80052a2 <osMutexWait+0x8e>
  }
  
  return osOK;
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3710      	adds	r7, #16
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	e000ed04 	.word	0xe000ed04

080052b0 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80052b8:	2300      	movs	r3, #0
 80052ba:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80052bc:	2300      	movs	r3, #0
 80052be:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80052c0:	f7ff ff07 	bl	80050d2 <inHandlerMode>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d016      	beq.n	80052f8 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80052ca:	f107 0308 	add.w	r3, r7, #8
 80052ce:	4619      	mov	r1, r3
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f000 fdd5 	bl	8005e80 <xQueueGiveFromISR>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d001      	beq.n	80052e0 <osMutexRelease+0x30>
      return osErrorOS;
 80052dc:	23ff      	movs	r3, #255	@ 0xff
 80052de:	e017      	b.n	8005310 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d013      	beq.n	800530e <osMutexRelease+0x5e>
 80052e6:	4b0c      	ldr	r3, [pc, #48]	@ (8005318 <osMutexRelease+0x68>)
 80052e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052ec:	601a      	str	r2, [r3, #0]
 80052ee:	f3bf 8f4f 	dsb	sy
 80052f2:	f3bf 8f6f 	isb	sy
 80052f6:	e00a      	b.n	800530e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80052f8:	2300      	movs	r3, #0
 80052fa:	2200      	movs	r2, #0
 80052fc:	2100      	movs	r1, #0
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 fc1e 	bl	8005b40 <xQueueGenericSend>
 8005304:	4603      	mov	r3, r0
 8005306:	2b01      	cmp	r3, #1
 8005308:	d001      	beq.n	800530e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800530a:	23ff      	movs	r3, #255	@ 0xff
 800530c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800530e:	68fb      	ldr	r3, [r7, #12]
}
 8005310:	4618      	mov	r0, r3
 8005312:	3710      	adds	r7, #16
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}
 8005318:	e000ed04 	.word	0xe000ed04

0800531c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800531c:	b580      	push	{r7, lr}
 800531e:	b086      	sub	sp, #24
 8005320:	af02      	add	r7, sp, #8
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d00f      	beq.n	800534e <osSemaphoreCreate+0x32>
    if (count == 1) {
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	2b01      	cmp	r3, #1
 8005332:	d10a      	bne.n	800534a <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	2203      	movs	r2, #3
 800533a:	9200      	str	r2, [sp, #0]
 800533c:	2200      	movs	r2, #0
 800533e:	2100      	movs	r1, #0
 8005340:	2001      	movs	r0, #1
 8005342:	f000 fad9 	bl	80058f8 <xQueueGenericCreateStatic>
 8005346:	4603      	mov	r3, r0
 8005348:	e016      	b.n	8005378 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800534a:	2300      	movs	r3, #0
 800534c:	e014      	b.n	8005378 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	2b01      	cmp	r3, #1
 8005352:	d110      	bne.n	8005376 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8005354:	2203      	movs	r2, #3
 8005356:	2100      	movs	r1, #0
 8005358:	2001      	movs	r0, #1
 800535a:	f000 fb4a 	bl	80059f2 <xQueueGenericCreate>
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d005      	beq.n	8005372 <osSemaphoreCreate+0x56>
 8005366:	2300      	movs	r3, #0
 8005368:	2200      	movs	r2, #0
 800536a:	2100      	movs	r1, #0
 800536c:	68f8      	ldr	r0, [r7, #12]
 800536e:	f000 fbe7 	bl	8005b40 <xQueueGenericSend>
      return sema;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	e000      	b.n	8005378 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8005376:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8005378:	4618      	mov	r0, r3
 800537a:	3710      	adds	r7, #16
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800538a:	2300      	movs	r3, #0
 800538c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d101      	bne.n	8005398 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8005394:	2380      	movs	r3, #128	@ 0x80
 8005396:	e03a      	b.n	800540e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8005398:	2300      	movs	r3, #0
 800539a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053a2:	d103      	bne.n	80053ac <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80053a4:	f04f 33ff 	mov.w	r3, #4294967295
 80053a8:	60fb      	str	r3, [r7, #12]
 80053aa:	e009      	b.n	80053c0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d006      	beq.n	80053c0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d101      	bne.n	80053c0 <osSemaphoreWait+0x40>
      ticks = 1;
 80053bc:	2301      	movs	r3, #1
 80053be:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80053c0:	f7ff fe87 	bl	80050d2 <inHandlerMode>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d017      	beq.n	80053fa <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80053ca:	f107 0308 	add.w	r3, r7, #8
 80053ce:	461a      	mov	r2, r3
 80053d0:	2100      	movs	r1, #0
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 ffd6 	bl	8006384 <xQueueReceiveFromISR>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d001      	beq.n	80053e2 <osSemaphoreWait+0x62>
      return osErrorOS;
 80053de:	23ff      	movs	r3, #255	@ 0xff
 80053e0:	e015      	b.n	800540e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d011      	beq.n	800540c <osSemaphoreWait+0x8c>
 80053e8:	4b0b      	ldr	r3, [pc, #44]	@ (8005418 <osSemaphoreWait+0x98>)
 80053ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053ee:	601a      	str	r2, [r3, #0]
 80053f0:	f3bf 8f4f 	dsb	sy
 80053f4:	f3bf 8f6f 	isb	sy
 80053f8:	e008      	b.n	800540c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80053fa:	68f9      	ldr	r1, [r7, #12]
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f000 feb1 	bl	8006164 <xQueueSemaphoreTake>
 8005402:	4603      	mov	r3, r0
 8005404:	2b01      	cmp	r3, #1
 8005406:	d001      	beq.n	800540c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8005408:	23ff      	movs	r3, #255	@ 0xff
 800540a:	e000      	b.n	800540e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800540c:	2300      	movs	r3, #0
}
 800540e:	4618      	mov	r0, r3
 8005410:	3710      	adds	r7, #16
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	e000ed04 	.word	0xe000ed04

0800541c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005424:	2300      	movs	r3, #0
 8005426:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005428:	2300      	movs	r3, #0
 800542a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800542c:	f7ff fe51 	bl	80050d2 <inHandlerMode>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d016      	beq.n	8005464 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005436:	f107 0308 	add.w	r3, r7, #8
 800543a:	4619      	mov	r1, r3
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f000 fd1f 	bl	8005e80 <xQueueGiveFromISR>
 8005442:	4603      	mov	r3, r0
 8005444:	2b01      	cmp	r3, #1
 8005446:	d001      	beq.n	800544c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8005448:	23ff      	movs	r3, #255	@ 0xff
 800544a:	e017      	b.n	800547c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d013      	beq.n	800547a <osSemaphoreRelease+0x5e>
 8005452:	4b0c      	ldr	r3, [pc, #48]	@ (8005484 <osSemaphoreRelease+0x68>)
 8005454:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005458:	601a      	str	r2, [r3, #0]
 800545a:	f3bf 8f4f 	dsb	sy
 800545e:	f3bf 8f6f 	isb	sy
 8005462:	e00a      	b.n	800547a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8005464:	2300      	movs	r3, #0
 8005466:	2200      	movs	r2, #0
 8005468:	2100      	movs	r1, #0
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 fb68 	bl	8005b40 <xQueueGenericSend>
 8005470:	4603      	mov	r3, r0
 8005472:	2b01      	cmp	r3, #1
 8005474:	d001      	beq.n	800547a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8005476:	23ff      	movs	r3, #255	@ 0xff
 8005478:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800547a:	68fb      	ldr	r3, [r7, #12]
}
 800547c:	4618      	mov	r0, r3
 800547e:	3710      	adds	r7, #16
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}
 8005484:	e000ed04 	.word	0xe000ed04

08005488 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b082      	sub	sp, #8
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8005490:	f7ff fe1f 	bl	80050d2 <inHandlerMode>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d001      	beq.n	800549e <osSemaphoreDelete+0x16>
    return osErrorISR;
 800549a:	2382      	movs	r3, #130	@ 0x82
 800549c:	e003      	b.n	80054a6 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f001 f830 	bl	8006504 <vQueueDelete>

  return osOK; 
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3708      	adds	r7, #8
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}

080054ae <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80054ae:	b590      	push	{r4, r7, lr}
 80054b0:	b085      	sub	sp, #20
 80054b2:	af02      	add	r7, sp, #8
 80054b4:	6078      	str	r0, [r7, #4]
 80054b6:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d011      	beq.n	80054e4 <osMessageCreate+0x36>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d00d      	beq.n	80054e4 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6818      	ldr	r0, [r3, #0]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6859      	ldr	r1, [r3, #4]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	689a      	ldr	r2, [r3, #8]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	2400      	movs	r4, #0
 80054da:	9400      	str	r4, [sp, #0]
 80054dc:	f000 fa0c 	bl	80058f8 <xQueueGenericCreateStatic>
 80054e0:	4603      	mov	r3, r0
 80054e2:	e008      	b.n	80054f6 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6818      	ldr	r0, [r3, #0]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	4619      	mov	r1, r3
 80054f0:	f000 fa7f 	bl	80059f2 <xQueueGenericCreate>
 80054f4:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	370c      	adds	r7, #12
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd90      	pop	{r4, r7, pc}
	...

08005500 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b086      	sub	sp, #24
 8005504:	af00      	add	r7, sp, #0
 8005506:	60f8      	str	r0, [r7, #12]
 8005508:	60b9      	str	r1, [r7, #8]
 800550a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800550c:	2300      	movs	r3, #0
 800550e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d101      	bne.n	800551e <osMessagePut+0x1e>
    ticks = 1;
 800551a:	2301      	movs	r3, #1
 800551c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800551e:	f7ff fdd8 	bl	80050d2 <inHandlerMode>
 8005522:	4603      	mov	r3, r0
 8005524:	2b00      	cmp	r3, #0
 8005526:	d018      	beq.n	800555a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8005528:	f107 0210 	add.w	r2, r7, #16
 800552c:	f107 0108 	add.w	r1, r7, #8
 8005530:	2300      	movs	r3, #0
 8005532:	68f8      	ldr	r0, [r7, #12]
 8005534:	f000 fc06 	bl	8005d44 <xQueueGenericSendFromISR>
 8005538:	4603      	mov	r3, r0
 800553a:	2b01      	cmp	r3, #1
 800553c:	d001      	beq.n	8005542 <osMessagePut+0x42>
      return osErrorOS;
 800553e:	23ff      	movs	r3, #255	@ 0xff
 8005540:	e018      	b.n	8005574 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d014      	beq.n	8005572 <osMessagePut+0x72>
 8005548:	4b0c      	ldr	r3, [pc, #48]	@ (800557c <osMessagePut+0x7c>)
 800554a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800554e:	601a      	str	r2, [r3, #0]
 8005550:	f3bf 8f4f 	dsb	sy
 8005554:	f3bf 8f6f 	isb	sy
 8005558:	e00b      	b.n	8005572 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800555a:	f107 0108 	add.w	r1, r7, #8
 800555e:	2300      	movs	r3, #0
 8005560:	697a      	ldr	r2, [r7, #20]
 8005562:	68f8      	ldr	r0, [r7, #12]
 8005564:	f000 faec 	bl	8005b40 <xQueueGenericSend>
 8005568:	4603      	mov	r3, r0
 800556a:	2b01      	cmp	r3, #1
 800556c:	d001      	beq.n	8005572 <osMessagePut+0x72>
      return osErrorOS;
 800556e:	23ff      	movs	r3, #255	@ 0xff
 8005570:	e000      	b.n	8005574 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	3718      	adds	r7, #24
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}
 800557c:	e000ed04 	.word	0xe000ed04

08005580 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8005580:	b590      	push	{r4, r7, lr}
 8005582:	b08b      	sub	sp, #44	@ 0x2c
 8005584:	af00      	add	r7, sp, #0
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8005590:	2300      	movs	r3, #0
 8005592:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d10a      	bne.n	80055b0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800559a:	2380      	movs	r3, #128	@ 0x80
 800559c:	617b      	str	r3, [r7, #20]
    return event;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	461c      	mov	r4, r3
 80055a2:	f107 0314 	add.w	r3, r7, #20
 80055a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80055aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80055ae:	e054      	b.n	800565a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80055b0:	2300      	movs	r3, #0
 80055b2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80055b4:	2300      	movs	r3, #0
 80055b6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055be:	d103      	bne.n	80055c8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80055c0:	f04f 33ff 	mov.w	r3, #4294967295
 80055c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80055c6:	e009      	b.n	80055dc <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d006      	beq.n	80055dc <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 80055d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d101      	bne.n	80055dc <osMessageGet+0x5c>
      ticks = 1;
 80055d8:	2301      	movs	r3, #1
 80055da:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 80055dc:	f7ff fd79 	bl	80050d2 <inHandlerMode>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d01c      	beq.n	8005620 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80055e6:	f107 0220 	add.w	r2, r7, #32
 80055ea:	f107 0314 	add.w	r3, r7, #20
 80055ee:	3304      	adds	r3, #4
 80055f0:	4619      	mov	r1, r3
 80055f2:	68b8      	ldr	r0, [r7, #8]
 80055f4:	f000 fec6 	bl	8006384 <xQueueReceiveFromISR>
 80055f8:	4603      	mov	r3, r0
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d102      	bne.n	8005604 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80055fe:	2310      	movs	r3, #16
 8005600:	617b      	str	r3, [r7, #20]
 8005602:	e001      	b.n	8005608 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8005604:	2300      	movs	r3, #0
 8005606:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005608:	6a3b      	ldr	r3, [r7, #32]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d01d      	beq.n	800564a <osMessageGet+0xca>
 800560e:	4b15      	ldr	r3, [pc, #84]	@ (8005664 <osMessageGet+0xe4>)
 8005610:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005614:	601a      	str	r2, [r3, #0]
 8005616:	f3bf 8f4f 	dsb	sy
 800561a:	f3bf 8f6f 	isb	sy
 800561e:	e014      	b.n	800564a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8005620:	f107 0314 	add.w	r3, r7, #20
 8005624:	3304      	adds	r3, #4
 8005626:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005628:	4619      	mov	r1, r3
 800562a:	68b8      	ldr	r0, [r7, #8]
 800562c:	f000 fcb8 	bl	8005fa0 <xQueueReceive>
 8005630:	4603      	mov	r3, r0
 8005632:	2b01      	cmp	r3, #1
 8005634:	d102      	bne.n	800563c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8005636:	2310      	movs	r3, #16
 8005638:	617b      	str	r3, [r7, #20]
 800563a:	e006      	b.n	800564a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800563c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800563e:	2b00      	cmp	r3, #0
 8005640:	d101      	bne.n	8005646 <osMessageGet+0xc6>
 8005642:	2300      	movs	r3, #0
 8005644:	e000      	b.n	8005648 <osMessageGet+0xc8>
 8005646:	2340      	movs	r3, #64	@ 0x40
 8005648:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	461c      	mov	r4, r3
 800564e:	f107 0314 	add.w	r3, r7, #20
 8005652:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005656:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800565a:	68f8      	ldr	r0, [r7, #12]
 800565c:	372c      	adds	r7, #44	@ 0x2c
 800565e:	46bd      	mov	sp, r7
 8005660:	bd90      	pop	{r4, r7, pc}
 8005662:	bf00      	nop
 8005664:	e000ed04 	.word	0xe000ed04

08005668 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b082      	sub	sp, #8
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8005670:	f7ff fd2f 	bl	80050d2 <inHandlerMode>
 8005674:	4603      	mov	r3, r0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d004      	beq.n	8005684 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 ff23 	bl	80064c6 <uxQueueMessagesWaitingFromISR>
 8005680:	4603      	mov	r3, r0
 8005682:	e003      	b.n	800568c <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f000 feff 	bl	8006488 <uxQueueMessagesWaiting>
 800568a:	4603      	mov	r3, r0
  }
}
 800568c:	4618      	mov	r0, r3
 800568e:	3708      	adds	r7, #8
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}

08005694 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b082      	sub	sp, #8
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800569c:	f7ff fd19 	bl	80050d2 <inHandlerMode>
 80056a0:	4603      	mov	r3, r0
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d001      	beq.n	80056aa <osMessageDelete+0x16>
    return osErrorISR;
 80056a6:	2382      	movs	r3, #130	@ 0x82
 80056a8:	e003      	b.n	80056b2 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f000 ff2a 	bl	8006504 <vQueueDelete>

  return osOK; 
 80056b0:	2300      	movs	r3, #0
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3708      	adds	r7, #8
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}

080056ba <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80056ba:	b480      	push	{r7}
 80056bc:	b083      	sub	sp, #12
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f103 0208 	add.w	r2, r3, #8
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f04f 32ff 	mov.w	r2, #4294967295
 80056d2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f103 0208 	add.w	r2, r3, #8
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f103 0208 	add.w	r2, r3, #8
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80056ee:	bf00      	nop
 80056f0:	370c      	adds	r7, #12
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr

080056fa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80056fa:	b480      	push	{r7}
 80056fc:	b083      	sub	sp, #12
 80056fe:	af00      	add	r7, sp, #0
 8005700:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005708:	bf00      	nop
 800570a:	370c      	adds	r7, #12
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005714:	b480      	push	{r7}
 8005716:	b085      	sub	sp, #20
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	68fa      	ldr	r2, [r7, #12]
 8005728:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	689a      	ldr	r2, [r3, #8]
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	683a      	ldr	r2, [r7, #0]
 8005738:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	683a      	ldr	r2, [r7, #0]
 800573e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	1c5a      	adds	r2, r3, #1
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	601a      	str	r2, [r3, #0]
}
 8005750:	bf00      	nop
 8005752:	3714      	adds	r7, #20
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr

0800575c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800575c:	b480      	push	{r7}
 800575e:	b085      	sub	sp, #20
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005772:	d103      	bne.n	800577c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	691b      	ldr	r3, [r3, #16]
 8005778:	60fb      	str	r3, [r7, #12]
 800577a:	e00c      	b.n	8005796 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	3308      	adds	r3, #8
 8005780:	60fb      	str	r3, [r7, #12]
 8005782:	e002      	b.n	800578a <vListInsert+0x2e>
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	60fb      	str	r3, [r7, #12]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	68ba      	ldr	r2, [r7, #8]
 8005792:	429a      	cmp	r2, r3
 8005794:	d2f6      	bcs.n	8005784 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	685a      	ldr	r2, [r3, #4]
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	683a      	ldr	r2, [r7, #0]
 80057a4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	683a      	ldr	r2, [r7, #0]
 80057b0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	1c5a      	adds	r2, r3, #1
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	601a      	str	r2, [r3, #0]
}
 80057c2:	bf00      	nop
 80057c4:	3714      	adds	r7, #20
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr

080057ce <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80057ce:	b480      	push	{r7}
 80057d0:	b085      	sub	sp, #20
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	691b      	ldr	r3, [r3, #16]
 80057da:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	6892      	ldr	r2, [r2, #8]
 80057e4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	6852      	ldr	r2, [r2, #4]
 80057ee:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d103      	bne.n	8005802 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	689a      	ldr	r2, [r3, #8]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	1e5a      	subs	r2, r3, #1
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
}
 8005816:	4618      	mov	r0, r3
 8005818:	3714      	adds	r7, #20
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr
	...

08005824 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d10b      	bne.n	8005850 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800583c:	f383 8811 	msr	BASEPRI, r3
 8005840:	f3bf 8f6f 	isb	sy
 8005844:	f3bf 8f4f 	dsb	sy
 8005848:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800584a:	bf00      	nop
 800584c:	bf00      	nop
 800584e:	e7fd      	b.n	800584c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005850:	f002 f94a 	bl	8007ae8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800585c:	68f9      	ldr	r1, [r7, #12]
 800585e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005860:	fb01 f303 	mul.w	r3, r1, r3
 8005864:	441a      	add	r2, r3
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2200      	movs	r2, #0
 800586e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005880:	3b01      	subs	r3, #1
 8005882:	68f9      	ldr	r1, [r7, #12]
 8005884:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005886:	fb01 f303 	mul.w	r3, r1, r3
 800588a:	441a      	add	r2, r3
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	22ff      	movs	r2, #255	@ 0xff
 8005894:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	22ff      	movs	r2, #255	@ 0xff
 800589c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d114      	bne.n	80058d0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d01a      	beq.n	80058e4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	3310      	adds	r3, #16
 80058b2:	4618      	mov	r0, r3
 80058b4:	f001 fbfe 	bl	80070b4 <xTaskRemoveFromEventList>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d012      	beq.n	80058e4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80058be:	4b0d      	ldr	r3, [pc, #52]	@ (80058f4 <xQueueGenericReset+0xd0>)
 80058c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058c4:	601a      	str	r2, [r3, #0]
 80058c6:	f3bf 8f4f 	dsb	sy
 80058ca:	f3bf 8f6f 	isb	sy
 80058ce:	e009      	b.n	80058e4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	3310      	adds	r3, #16
 80058d4:	4618      	mov	r0, r3
 80058d6:	f7ff fef0 	bl	80056ba <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	3324      	adds	r3, #36	@ 0x24
 80058de:	4618      	mov	r0, r3
 80058e0:	f7ff feeb 	bl	80056ba <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80058e4:	f002 f932 	bl	8007b4c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80058e8:	2301      	movs	r3, #1
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3710      	adds	r7, #16
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	bf00      	nop
 80058f4:	e000ed04 	.word	0xe000ed04

080058f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b08e      	sub	sp, #56	@ 0x38
 80058fc:	af02      	add	r7, sp, #8
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	607a      	str	r2, [r7, #4]
 8005904:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d10b      	bne.n	8005924 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800590c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005910:	f383 8811 	msr	BASEPRI, r3
 8005914:	f3bf 8f6f 	isb	sy
 8005918:	f3bf 8f4f 	dsb	sy
 800591c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800591e:	bf00      	nop
 8005920:	bf00      	nop
 8005922:	e7fd      	b.n	8005920 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d10b      	bne.n	8005942 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800592a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800592e:	f383 8811 	msr	BASEPRI, r3
 8005932:	f3bf 8f6f 	isb	sy
 8005936:	f3bf 8f4f 	dsb	sy
 800593a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800593c:	bf00      	nop
 800593e:	bf00      	nop
 8005940:	e7fd      	b.n	800593e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d002      	beq.n	800594e <xQueueGenericCreateStatic+0x56>
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d001      	beq.n	8005952 <xQueueGenericCreateStatic+0x5a>
 800594e:	2301      	movs	r3, #1
 8005950:	e000      	b.n	8005954 <xQueueGenericCreateStatic+0x5c>
 8005952:	2300      	movs	r3, #0
 8005954:	2b00      	cmp	r3, #0
 8005956:	d10b      	bne.n	8005970 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005958:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800595c:	f383 8811 	msr	BASEPRI, r3
 8005960:	f3bf 8f6f 	isb	sy
 8005964:	f3bf 8f4f 	dsb	sy
 8005968:	623b      	str	r3, [r7, #32]
}
 800596a:	bf00      	nop
 800596c:	bf00      	nop
 800596e:	e7fd      	b.n	800596c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d102      	bne.n	800597c <xQueueGenericCreateStatic+0x84>
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d101      	bne.n	8005980 <xQueueGenericCreateStatic+0x88>
 800597c:	2301      	movs	r3, #1
 800597e:	e000      	b.n	8005982 <xQueueGenericCreateStatic+0x8a>
 8005980:	2300      	movs	r3, #0
 8005982:	2b00      	cmp	r3, #0
 8005984:	d10b      	bne.n	800599e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800598a:	f383 8811 	msr	BASEPRI, r3
 800598e:	f3bf 8f6f 	isb	sy
 8005992:	f3bf 8f4f 	dsb	sy
 8005996:	61fb      	str	r3, [r7, #28]
}
 8005998:	bf00      	nop
 800599a:	bf00      	nop
 800599c:	e7fd      	b.n	800599a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800599e:	2348      	movs	r3, #72	@ 0x48
 80059a0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	2b48      	cmp	r3, #72	@ 0x48
 80059a6:	d00b      	beq.n	80059c0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80059a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ac:	f383 8811 	msr	BASEPRI, r3
 80059b0:	f3bf 8f6f 	isb	sy
 80059b4:	f3bf 8f4f 	dsb	sy
 80059b8:	61bb      	str	r3, [r7, #24]
}
 80059ba:	bf00      	nop
 80059bc:	bf00      	nop
 80059be:	e7fd      	b.n	80059bc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80059c0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80059c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d00d      	beq.n	80059e8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80059cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80059d4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80059d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059da:	9300      	str	r3, [sp, #0]
 80059dc:	4613      	mov	r3, r2
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	68b9      	ldr	r1, [r7, #8]
 80059e2:	68f8      	ldr	r0, [r7, #12]
 80059e4:	f000 f840 	bl	8005a68 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80059e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3730      	adds	r7, #48	@ 0x30
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}

080059f2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80059f2:	b580      	push	{r7, lr}
 80059f4:	b08a      	sub	sp, #40	@ 0x28
 80059f6:	af02      	add	r7, sp, #8
 80059f8:	60f8      	str	r0, [r7, #12]
 80059fa:	60b9      	str	r1, [r7, #8]
 80059fc:	4613      	mov	r3, r2
 80059fe:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d10b      	bne.n	8005a1e <xQueueGenericCreate+0x2c>
	__asm volatile
 8005a06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a0a:	f383 8811 	msr	BASEPRI, r3
 8005a0e:	f3bf 8f6f 	isb	sy
 8005a12:	f3bf 8f4f 	dsb	sy
 8005a16:	613b      	str	r3, [r7, #16]
}
 8005a18:	bf00      	nop
 8005a1a:	bf00      	nop
 8005a1c:	e7fd      	b.n	8005a1a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	68ba      	ldr	r2, [r7, #8]
 8005a22:	fb02 f303 	mul.w	r3, r2, r3
 8005a26:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	3348      	adds	r3, #72	@ 0x48
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f002 f97d 	bl	8007d2c <pvPortMalloc>
 8005a32:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005a34:	69bb      	ldr	r3, [r7, #24]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d011      	beq.n	8005a5e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	3348      	adds	r3, #72	@ 0x48
 8005a42:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	2200      	movs	r2, #0
 8005a48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005a4c:	79fa      	ldrb	r2, [r7, #7]
 8005a4e:	69bb      	ldr	r3, [r7, #24]
 8005a50:	9300      	str	r3, [sp, #0]
 8005a52:	4613      	mov	r3, r2
 8005a54:	697a      	ldr	r2, [r7, #20]
 8005a56:	68b9      	ldr	r1, [r7, #8]
 8005a58:	68f8      	ldr	r0, [r7, #12]
 8005a5a:	f000 f805 	bl	8005a68 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005a5e:	69bb      	ldr	r3, [r7, #24]
	}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3720      	adds	r7, #32
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	607a      	str	r2, [r7, #4]
 8005a74:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d103      	bne.n	8005a84 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005a7c:	69bb      	ldr	r3, [r7, #24]
 8005a7e:	69ba      	ldr	r2, [r7, #24]
 8005a80:	601a      	str	r2, [r3, #0]
 8005a82:	e002      	b.n	8005a8a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005a84:	69bb      	ldr	r3, [r7, #24]
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005a8a:	69bb      	ldr	r3, [r7, #24]
 8005a8c:	68fa      	ldr	r2, [r7, #12]
 8005a8e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	68ba      	ldr	r2, [r7, #8]
 8005a94:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005a96:	2101      	movs	r1, #1
 8005a98:	69b8      	ldr	r0, [r7, #24]
 8005a9a:	f7ff fec3 	bl	8005824 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005a9e:	bf00      	nop
 8005aa0:	3710      	adds	r7, #16
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}

08005aa6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005aa6:	b580      	push	{r7, lr}
 8005aa8:	b082      	sub	sp, #8
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d00e      	beq.n	8005ad2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	2200      	movs	r2, #0
 8005aca:	2100      	movs	r1, #0
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f000 f837 	bl	8005b40 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005ad2:	bf00      	nop
 8005ad4:	3708      	adds	r7, #8
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}

08005ada <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005ada:	b580      	push	{r7, lr}
 8005adc:	b086      	sub	sp, #24
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	617b      	str	r3, [r7, #20]
 8005ae8:	2300      	movs	r3, #0
 8005aea:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005aec:	79fb      	ldrb	r3, [r7, #7]
 8005aee:	461a      	mov	r2, r3
 8005af0:	6939      	ldr	r1, [r7, #16]
 8005af2:	6978      	ldr	r0, [r7, #20]
 8005af4:	f7ff ff7d 	bl	80059f2 <xQueueGenericCreate>
 8005af8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005afa:	68f8      	ldr	r0, [r7, #12]
 8005afc:	f7ff ffd3 	bl	8005aa6 <prvInitialiseMutex>

		return xNewQueue;
 8005b00:	68fb      	ldr	r3, [r7, #12]
	}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3718      	adds	r7, #24
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}

08005b0a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005b0a:	b580      	push	{r7, lr}
 8005b0c:	b088      	sub	sp, #32
 8005b0e:	af02      	add	r7, sp, #8
 8005b10:	4603      	mov	r3, r0
 8005b12:	6039      	str	r1, [r7, #0]
 8005b14:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005b16:	2301      	movs	r3, #1
 8005b18:	617b      	str	r3, [r7, #20]
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005b1e:	79fb      	ldrb	r3, [r7, #7]
 8005b20:	9300      	str	r3, [sp, #0]
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	2200      	movs	r2, #0
 8005b26:	6939      	ldr	r1, [r7, #16]
 8005b28:	6978      	ldr	r0, [r7, #20]
 8005b2a:	f7ff fee5 	bl	80058f8 <xQueueGenericCreateStatic>
 8005b2e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005b30:	68f8      	ldr	r0, [r7, #12]
 8005b32:	f7ff ffb8 	bl	8005aa6 <prvInitialiseMutex>

		return xNewQueue;
 8005b36:	68fb      	ldr	r3, [r7, #12]
	}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3718      	adds	r7, #24
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b08e      	sub	sp, #56	@ 0x38
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	607a      	str	r2, [r7, #4]
 8005b4c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d10b      	bne.n	8005b74 <xQueueGenericSend+0x34>
	__asm volatile
 8005b5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b60:	f383 8811 	msr	BASEPRI, r3
 8005b64:	f3bf 8f6f 	isb	sy
 8005b68:	f3bf 8f4f 	dsb	sy
 8005b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005b6e:	bf00      	nop
 8005b70:	bf00      	nop
 8005b72:	e7fd      	b.n	8005b70 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d103      	bne.n	8005b82 <xQueueGenericSend+0x42>
 8005b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d101      	bne.n	8005b86 <xQueueGenericSend+0x46>
 8005b82:	2301      	movs	r3, #1
 8005b84:	e000      	b.n	8005b88 <xQueueGenericSend+0x48>
 8005b86:	2300      	movs	r3, #0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d10b      	bne.n	8005ba4 <xQueueGenericSend+0x64>
	__asm volatile
 8005b8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b90:	f383 8811 	msr	BASEPRI, r3
 8005b94:	f3bf 8f6f 	isb	sy
 8005b98:	f3bf 8f4f 	dsb	sy
 8005b9c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005b9e:	bf00      	nop
 8005ba0:	bf00      	nop
 8005ba2:	e7fd      	b.n	8005ba0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	2b02      	cmp	r3, #2
 8005ba8:	d103      	bne.n	8005bb2 <xQueueGenericSend+0x72>
 8005baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d101      	bne.n	8005bb6 <xQueueGenericSend+0x76>
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e000      	b.n	8005bb8 <xQueueGenericSend+0x78>
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d10b      	bne.n	8005bd4 <xQueueGenericSend+0x94>
	__asm volatile
 8005bbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bc0:	f383 8811 	msr	BASEPRI, r3
 8005bc4:	f3bf 8f6f 	isb	sy
 8005bc8:	f3bf 8f4f 	dsb	sy
 8005bcc:	623b      	str	r3, [r7, #32]
}
 8005bce:	bf00      	nop
 8005bd0:	bf00      	nop
 8005bd2:	e7fd      	b.n	8005bd0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005bd4:	f001 fc34 	bl	8007440 <xTaskGetSchedulerState>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d102      	bne.n	8005be4 <xQueueGenericSend+0xa4>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d101      	bne.n	8005be8 <xQueueGenericSend+0xa8>
 8005be4:	2301      	movs	r3, #1
 8005be6:	e000      	b.n	8005bea <xQueueGenericSend+0xaa>
 8005be8:	2300      	movs	r3, #0
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d10b      	bne.n	8005c06 <xQueueGenericSend+0xc6>
	__asm volatile
 8005bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bf2:	f383 8811 	msr	BASEPRI, r3
 8005bf6:	f3bf 8f6f 	isb	sy
 8005bfa:	f3bf 8f4f 	dsb	sy
 8005bfe:	61fb      	str	r3, [r7, #28]
}
 8005c00:	bf00      	nop
 8005c02:	bf00      	nop
 8005c04:	e7fd      	b.n	8005c02 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005c06:	f001 ff6f 	bl	8007ae8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d302      	bcc.n	8005c1c <xQueueGenericSend+0xdc>
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	2b02      	cmp	r3, #2
 8005c1a:	d129      	bne.n	8005c70 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005c1c:	683a      	ldr	r2, [r7, #0]
 8005c1e:	68b9      	ldr	r1, [r7, #8]
 8005c20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005c22:	f000 fcab 	bl	800657c <prvCopyDataToQueue>
 8005c26:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d010      	beq.n	8005c52 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c32:	3324      	adds	r3, #36	@ 0x24
 8005c34:	4618      	mov	r0, r3
 8005c36:	f001 fa3d 	bl	80070b4 <xTaskRemoveFromEventList>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d013      	beq.n	8005c68 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005c40:	4b3f      	ldr	r3, [pc, #252]	@ (8005d40 <xQueueGenericSend+0x200>)
 8005c42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c46:	601a      	str	r2, [r3, #0]
 8005c48:	f3bf 8f4f 	dsb	sy
 8005c4c:	f3bf 8f6f 	isb	sy
 8005c50:	e00a      	b.n	8005c68 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005c52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d007      	beq.n	8005c68 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005c58:	4b39      	ldr	r3, [pc, #228]	@ (8005d40 <xQueueGenericSend+0x200>)
 8005c5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c5e:	601a      	str	r2, [r3, #0]
 8005c60:	f3bf 8f4f 	dsb	sy
 8005c64:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005c68:	f001 ff70 	bl	8007b4c <vPortExitCritical>
				return pdPASS;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	e063      	b.n	8005d38 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d103      	bne.n	8005c7e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005c76:	f001 ff69 	bl	8007b4c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	e05c      	b.n	8005d38 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005c7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d106      	bne.n	8005c92 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c84:	f107 0314 	add.w	r3, r7, #20
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f001 fa77 	bl	800717c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c92:	f001 ff5b 	bl	8007b4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c96:	f000 fffb 	bl	8006c90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c9a:	f001 ff25 	bl	8007ae8 <vPortEnterCritical>
 8005c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ca0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005ca4:	b25b      	sxtb	r3, r3
 8005ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005caa:	d103      	bne.n	8005cb4 <xQueueGenericSend+0x174>
 8005cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cb6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005cba:	b25b      	sxtb	r3, r3
 8005cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cc0:	d103      	bne.n	8005cca <xQueueGenericSend+0x18a>
 8005cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005cca:	f001 ff3f 	bl	8007b4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005cce:	1d3a      	adds	r2, r7, #4
 8005cd0:	f107 0314 	add.w	r3, r7, #20
 8005cd4:	4611      	mov	r1, r2
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f001 fa66 	bl	80071a8 <xTaskCheckForTimeOut>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d124      	bne.n	8005d2c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005ce2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005ce4:	f000 fd42 	bl	800676c <prvIsQueueFull>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d018      	beq.n	8005d20 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cf0:	3310      	adds	r3, #16
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	4611      	mov	r1, r2
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f001 f9b6 	bl	8007068 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005cfc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005cfe:	f000 fccd 	bl	800669c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005d02:	f000 ffd3 	bl	8006cac <xTaskResumeAll>
 8005d06:	4603      	mov	r3, r0
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	f47f af7c 	bne.w	8005c06 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005d0e:	4b0c      	ldr	r3, [pc, #48]	@ (8005d40 <xQueueGenericSend+0x200>)
 8005d10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d14:	601a      	str	r2, [r3, #0]
 8005d16:	f3bf 8f4f 	dsb	sy
 8005d1a:	f3bf 8f6f 	isb	sy
 8005d1e:	e772      	b.n	8005c06 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005d20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005d22:	f000 fcbb 	bl	800669c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005d26:	f000 ffc1 	bl	8006cac <xTaskResumeAll>
 8005d2a:	e76c      	b.n	8005c06 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005d2c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005d2e:	f000 fcb5 	bl	800669c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005d32:	f000 ffbb 	bl	8006cac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005d36:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3738      	adds	r7, #56	@ 0x38
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}
 8005d40:	e000ed04 	.word	0xe000ed04

08005d44 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b090      	sub	sp, #64	@ 0x40
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	607a      	str	r2, [r7, #4]
 8005d50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005d56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d10b      	bne.n	8005d74 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005d5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d60:	f383 8811 	msr	BASEPRI, r3
 8005d64:	f3bf 8f6f 	isb	sy
 8005d68:	f3bf 8f4f 	dsb	sy
 8005d6c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005d6e:	bf00      	nop
 8005d70:	bf00      	nop
 8005d72:	e7fd      	b.n	8005d70 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d103      	bne.n	8005d82 <xQueueGenericSendFromISR+0x3e>
 8005d7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d101      	bne.n	8005d86 <xQueueGenericSendFromISR+0x42>
 8005d82:	2301      	movs	r3, #1
 8005d84:	e000      	b.n	8005d88 <xQueueGenericSendFromISR+0x44>
 8005d86:	2300      	movs	r3, #0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d10b      	bne.n	8005da4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005d8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d90:	f383 8811 	msr	BASEPRI, r3
 8005d94:	f3bf 8f6f 	isb	sy
 8005d98:	f3bf 8f4f 	dsb	sy
 8005d9c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005d9e:	bf00      	nop
 8005da0:	bf00      	nop
 8005da2:	e7fd      	b.n	8005da0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	d103      	bne.n	8005db2 <xQueueGenericSendFromISR+0x6e>
 8005daa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d101      	bne.n	8005db6 <xQueueGenericSendFromISR+0x72>
 8005db2:	2301      	movs	r3, #1
 8005db4:	e000      	b.n	8005db8 <xQueueGenericSendFromISR+0x74>
 8005db6:	2300      	movs	r3, #0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d10b      	bne.n	8005dd4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005dbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dc0:	f383 8811 	msr	BASEPRI, r3
 8005dc4:	f3bf 8f6f 	isb	sy
 8005dc8:	f3bf 8f4f 	dsb	sy
 8005dcc:	623b      	str	r3, [r7, #32]
}
 8005dce:	bf00      	nop
 8005dd0:	bf00      	nop
 8005dd2:	e7fd      	b.n	8005dd0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005dd4:	f001 ff68 	bl	8007ca8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005dd8:	f3ef 8211 	mrs	r2, BASEPRI
 8005ddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005de0:	f383 8811 	msr	BASEPRI, r3
 8005de4:	f3bf 8f6f 	isb	sy
 8005de8:	f3bf 8f4f 	dsb	sy
 8005dec:	61fa      	str	r2, [r7, #28]
 8005dee:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005df0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005df2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005df6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005df8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d302      	bcc.n	8005e06 <xQueueGenericSendFromISR+0xc2>
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	2b02      	cmp	r3, #2
 8005e04:	d12f      	bne.n	8005e66 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005e06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e08:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005e0c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005e16:	683a      	ldr	r2, [r7, #0]
 8005e18:	68b9      	ldr	r1, [r7, #8]
 8005e1a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005e1c:	f000 fbae 	bl	800657c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005e20:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e28:	d112      	bne.n	8005e50 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d016      	beq.n	8005e60 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e34:	3324      	adds	r3, #36	@ 0x24
 8005e36:	4618      	mov	r0, r3
 8005e38:	f001 f93c 	bl	80070b4 <xTaskRemoveFromEventList>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d00e      	beq.n	8005e60 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d00b      	beq.n	8005e60 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	601a      	str	r2, [r3, #0]
 8005e4e:	e007      	b.n	8005e60 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005e50:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005e54:	3301      	adds	r3, #1
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	b25a      	sxtb	r2, r3
 8005e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005e60:	2301      	movs	r3, #1
 8005e62:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005e64:	e001      	b.n	8005e6a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005e66:	2300      	movs	r3, #0
 8005e68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e6c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005e74:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005e76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3740      	adds	r7, #64	@ 0x40
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b08e      	sub	sp, #56	@ 0x38
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d10b      	bne.n	8005eac <xQueueGiveFromISR+0x2c>
	__asm volatile
 8005e94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e98:	f383 8811 	msr	BASEPRI, r3
 8005e9c:	f3bf 8f6f 	isb	sy
 8005ea0:	f3bf 8f4f 	dsb	sy
 8005ea4:	623b      	str	r3, [r7, #32]
}
 8005ea6:	bf00      	nop
 8005ea8:	bf00      	nop
 8005eaa:	e7fd      	b.n	8005ea8 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d00b      	beq.n	8005ecc <xQueueGiveFromISR+0x4c>
	__asm volatile
 8005eb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eb8:	f383 8811 	msr	BASEPRI, r3
 8005ebc:	f3bf 8f6f 	isb	sy
 8005ec0:	f3bf 8f4f 	dsb	sy
 8005ec4:	61fb      	str	r3, [r7, #28]
}
 8005ec6:	bf00      	nop
 8005ec8:	bf00      	nop
 8005eca:	e7fd      	b.n	8005ec8 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d103      	bne.n	8005edc <xQueueGiveFromISR+0x5c>
 8005ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d101      	bne.n	8005ee0 <xQueueGiveFromISR+0x60>
 8005edc:	2301      	movs	r3, #1
 8005ede:	e000      	b.n	8005ee2 <xQueueGiveFromISR+0x62>
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d10b      	bne.n	8005efe <xQueueGiveFromISR+0x7e>
	__asm volatile
 8005ee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eea:	f383 8811 	msr	BASEPRI, r3
 8005eee:	f3bf 8f6f 	isb	sy
 8005ef2:	f3bf 8f4f 	dsb	sy
 8005ef6:	61bb      	str	r3, [r7, #24]
}
 8005ef8:	bf00      	nop
 8005efa:	bf00      	nop
 8005efc:	e7fd      	b.n	8005efa <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005efe:	f001 fed3 	bl	8007ca8 <vPortValidateInterruptPriority>
	__asm volatile
 8005f02:	f3ef 8211 	mrs	r2, BASEPRI
 8005f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f0a:	f383 8811 	msr	BASEPRI, r3
 8005f0e:	f3bf 8f6f 	isb	sy
 8005f12:	f3bf 8f4f 	dsb	sy
 8005f16:	617a      	str	r2, [r7, #20]
 8005f18:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005f1a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f22:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d22b      	bcs.n	8005f86 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f30:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005f34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f3a:	1c5a      	adds	r2, r3, #1
 8005f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f3e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005f40:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f48:	d112      	bne.n	8005f70 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d016      	beq.n	8005f80 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f54:	3324      	adds	r3, #36	@ 0x24
 8005f56:	4618      	mov	r0, r3
 8005f58:	f001 f8ac 	bl	80070b4 <xTaskRemoveFromEventList>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d00e      	beq.n	8005f80 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d00b      	beq.n	8005f80 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	601a      	str	r2, [r3, #0]
 8005f6e:	e007      	b.n	8005f80 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005f70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f74:	3301      	adds	r3, #1
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	b25a      	sxtb	r2, r3
 8005f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005f80:	2301      	movs	r3, #1
 8005f82:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f84:	e001      	b.n	8005f8a <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005f86:	2300      	movs	r3, #0
 8005f88:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f8c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f383 8811 	msr	BASEPRI, r3
}
 8005f94:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005f96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3738      	adds	r7, #56	@ 0x38
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b08c      	sub	sp, #48	@ 0x30
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	60b9      	str	r1, [r7, #8]
 8005faa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005fac:	2300      	movs	r3, #0
 8005fae:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005fb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d10b      	bne.n	8005fd2 <xQueueReceive+0x32>
	__asm volatile
 8005fba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fbe:	f383 8811 	msr	BASEPRI, r3
 8005fc2:	f3bf 8f6f 	isb	sy
 8005fc6:	f3bf 8f4f 	dsb	sy
 8005fca:	623b      	str	r3, [r7, #32]
}
 8005fcc:	bf00      	nop
 8005fce:	bf00      	nop
 8005fd0:	e7fd      	b.n	8005fce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d103      	bne.n	8005fe0 <xQueueReceive+0x40>
 8005fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d101      	bne.n	8005fe4 <xQueueReceive+0x44>
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e000      	b.n	8005fe6 <xQueueReceive+0x46>
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d10b      	bne.n	8006002 <xQueueReceive+0x62>
	__asm volatile
 8005fea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fee:	f383 8811 	msr	BASEPRI, r3
 8005ff2:	f3bf 8f6f 	isb	sy
 8005ff6:	f3bf 8f4f 	dsb	sy
 8005ffa:	61fb      	str	r3, [r7, #28]
}
 8005ffc:	bf00      	nop
 8005ffe:	bf00      	nop
 8006000:	e7fd      	b.n	8005ffe <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006002:	f001 fa1d 	bl	8007440 <xTaskGetSchedulerState>
 8006006:	4603      	mov	r3, r0
 8006008:	2b00      	cmp	r3, #0
 800600a:	d102      	bne.n	8006012 <xQueueReceive+0x72>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d101      	bne.n	8006016 <xQueueReceive+0x76>
 8006012:	2301      	movs	r3, #1
 8006014:	e000      	b.n	8006018 <xQueueReceive+0x78>
 8006016:	2300      	movs	r3, #0
 8006018:	2b00      	cmp	r3, #0
 800601a:	d10b      	bne.n	8006034 <xQueueReceive+0x94>
	__asm volatile
 800601c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006020:	f383 8811 	msr	BASEPRI, r3
 8006024:	f3bf 8f6f 	isb	sy
 8006028:	f3bf 8f4f 	dsb	sy
 800602c:	61bb      	str	r3, [r7, #24]
}
 800602e:	bf00      	nop
 8006030:	bf00      	nop
 8006032:	e7fd      	b.n	8006030 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006034:	f001 fd58 	bl	8007ae8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800603a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800603c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800603e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006040:	2b00      	cmp	r3, #0
 8006042:	d01f      	beq.n	8006084 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006044:	68b9      	ldr	r1, [r7, #8]
 8006046:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006048:	f000 fb02 	bl	8006650 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800604c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800604e:	1e5a      	subs	r2, r3, #1
 8006050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006052:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006056:	691b      	ldr	r3, [r3, #16]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d00f      	beq.n	800607c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800605c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800605e:	3310      	adds	r3, #16
 8006060:	4618      	mov	r0, r3
 8006062:	f001 f827 	bl	80070b4 <xTaskRemoveFromEventList>
 8006066:	4603      	mov	r3, r0
 8006068:	2b00      	cmp	r3, #0
 800606a:	d007      	beq.n	800607c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800606c:	4b3c      	ldr	r3, [pc, #240]	@ (8006160 <xQueueReceive+0x1c0>)
 800606e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006072:	601a      	str	r2, [r3, #0]
 8006074:	f3bf 8f4f 	dsb	sy
 8006078:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800607c:	f001 fd66 	bl	8007b4c <vPortExitCritical>
				return pdPASS;
 8006080:	2301      	movs	r3, #1
 8006082:	e069      	b.n	8006158 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d103      	bne.n	8006092 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800608a:	f001 fd5f 	bl	8007b4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800608e:	2300      	movs	r3, #0
 8006090:	e062      	b.n	8006158 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006094:	2b00      	cmp	r3, #0
 8006096:	d106      	bne.n	80060a6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006098:	f107 0310 	add.w	r3, r7, #16
 800609c:	4618      	mov	r0, r3
 800609e:	f001 f86d 	bl	800717c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80060a2:	2301      	movs	r3, #1
 80060a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80060a6:	f001 fd51 	bl	8007b4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80060aa:	f000 fdf1 	bl	8006c90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80060ae:	f001 fd1b 	bl	8007ae8 <vPortEnterCritical>
 80060b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80060b8:	b25b      	sxtb	r3, r3
 80060ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060be:	d103      	bne.n	80060c8 <xQueueReceive+0x128>
 80060c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060c2:	2200      	movs	r2, #0
 80060c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80060c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80060ce:	b25b      	sxtb	r3, r3
 80060d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060d4:	d103      	bne.n	80060de <xQueueReceive+0x13e>
 80060d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060d8:	2200      	movs	r2, #0
 80060da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80060de:	f001 fd35 	bl	8007b4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80060e2:	1d3a      	adds	r2, r7, #4
 80060e4:	f107 0310 	add.w	r3, r7, #16
 80060e8:	4611      	mov	r1, r2
 80060ea:	4618      	mov	r0, r3
 80060ec:	f001 f85c 	bl	80071a8 <xTaskCheckForTimeOut>
 80060f0:	4603      	mov	r3, r0
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d123      	bne.n	800613e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80060f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80060f8:	f000 fb22 	bl	8006740 <prvIsQueueEmpty>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d017      	beq.n	8006132 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006104:	3324      	adds	r3, #36	@ 0x24
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	4611      	mov	r1, r2
 800610a:	4618      	mov	r0, r3
 800610c:	f000 ffac 	bl	8007068 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006110:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006112:	f000 fac3 	bl	800669c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006116:	f000 fdc9 	bl	8006cac <xTaskResumeAll>
 800611a:	4603      	mov	r3, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d189      	bne.n	8006034 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006120:	4b0f      	ldr	r3, [pc, #60]	@ (8006160 <xQueueReceive+0x1c0>)
 8006122:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006126:	601a      	str	r2, [r3, #0]
 8006128:	f3bf 8f4f 	dsb	sy
 800612c:	f3bf 8f6f 	isb	sy
 8006130:	e780      	b.n	8006034 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006132:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006134:	f000 fab2 	bl	800669c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006138:	f000 fdb8 	bl	8006cac <xTaskResumeAll>
 800613c:	e77a      	b.n	8006034 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800613e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006140:	f000 faac 	bl	800669c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006144:	f000 fdb2 	bl	8006cac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006148:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800614a:	f000 faf9 	bl	8006740 <prvIsQueueEmpty>
 800614e:	4603      	mov	r3, r0
 8006150:	2b00      	cmp	r3, #0
 8006152:	f43f af6f 	beq.w	8006034 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006156:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006158:	4618      	mov	r0, r3
 800615a:	3730      	adds	r7, #48	@ 0x30
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}
 8006160:	e000ed04 	.word	0xe000ed04

08006164 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b08e      	sub	sp, #56	@ 0x38
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800616e:	2300      	movs	r3, #0
 8006170:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006176:	2300      	movs	r3, #0
 8006178:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800617a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800617c:	2b00      	cmp	r3, #0
 800617e:	d10b      	bne.n	8006198 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8006180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006184:	f383 8811 	msr	BASEPRI, r3
 8006188:	f3bf 8f6f 	isb	sy
 800618c:	f3bf 8f4f 	dsb	sy
 8006190:	623b      	str	r3, [r7, #32]
}
 8006192:	bf00      	nop
 8006194:	bf00      	nop
 8006196:	e7fd      	b.n	8006194 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800619a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800619c:	2b00      	cmp	r3, #0
 800619e:	d00b      	beq.n	80061b8 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80061a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061a4:	f383 8811 	msr	BASEPRI, r3
 80061a8:	f3bf 8f6f 	isb	sy
 80061ac:	f3bf 8f4f 	dsb	sy
 80061b0:	61fb      	str	r3, [r7, #28]
}
 80061b2:	bf00      	nop
 80061b4:	bf00      	nop
 80061b6:	e7fd      	b.n	80061b4 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80061b8:	f001 f942 	bl	8007440 <xTaskGetSchedulerState>
 80061bc:	4603      	mov	r3, r0
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d102      	bne.n	80061c8 <xQueueSemaphoreTake+0x64>
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d101      	bne.n	80061cc <xQueueSemaphoreTake+0x68>
 80061c8:	2301      	movs	r3, #1
 80061ca:	e000      	b.n	80061ce <xQueueSemaphoreTake+0x6a>
 80061cc:	2300      	movs	r3, #0
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d10b      	bne.n	80061ea <xQueueSemaphoreTake+0x86>
	__asm volatile
 80061d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061d6:	f383 8811 	msr	BASEPRI, r3
 80061da:	f3bf 8f6f 	isb	sy
 80061de:	f3bf 8f4f 	dsb	sy
 80061e2:	61bb      	str	r3, [r7, #24]
}
 80061e4:	bf00      	nop
 80061e6:	bf00      	nop
 80061e8:	e7fd      	b.n	80061e6 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80061ea:	f001 fc7d 	bl	8007ae8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80061ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061f2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80061f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d024      	beq.n	8006244 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80061fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061fc:	1e5a      	subs	r2, r3, #1
 80061fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006200:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d104      	bne.n	8006214 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800620a:	f001 fac5 	bl	8007798 <pvTaskIncrementMutexHeldCount>
 800620e:	4602      	mov	r2, r0
 8006210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006212:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006216:	691b      	ldr	r3, [r3, #16]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d00f      	beq.n	800623c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800621c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800621e:	3310      	adds	r3, #16
 8006220:	4618      	mov	r0, r3
 8006222:	f000 ff47 	bl	80070b4 <xTaskRemoveFromEventList>
 8006226:	4603      	mov	r3, r0
 8006228:	2b00      	cmp	r3, #0
 800622a:	d007      	beq.n	800623c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800622c:	4b54      	ldr	r3, [pc, #336]	@ (8006380 <xQueueSemaphoreTake+0x21c>)
 800622e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006232:	601a      	str	r2, [r3, #0]
 8006234:	f3bf 8f4f 	dsb	sy
 8006238:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800623c:	f001 fc86 	bl	8007b4c <vPortExitCritical>
				return pdPASS;
 8006240:	2301      	movs	r3, #1
 8006242:	e098      	b.n	8006376 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d112      	bne.n	8006270 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800624a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800624c:	2b00      	cmp	r3, #0
 800624e:	d00b      	beq.n	8006268 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8006250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006254:	f383 8811 	msr	BASEPRI, r3
 8006258:	f3bf 8f6f 	isb	sy
 800625c:	f3bf 8f4f 	dsb	sy
 8006260:	617b      	str	r3, [r7, #20]
}
 8006262:	bf00      	nop
 8006264:	bf00      	nop
 8006266:	e7fd      	b.n	8006264 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006268:	f001 fc70 	bl	8007b4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800626c:	2300      	movs	r3, #0
 800626e:	e082      	b.n	8006376 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006270:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006272:	2b00      	cmp	r3, #0
 8006274:	d106      	bne.n	8006284 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006276:	f107 030c 	add.w	r3, r7, #12
 800627a:	4618      	mov	r0, r3
 800627c:	f000 ff7e 	bl	800717c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006280:	2301      	movs	r3, #1
 8006282:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006284:	f001 fc62 	bl	8007b4c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006288:	f000 fd02 	bl	8006c90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800628c:	f001 fc2c 	bl	8007ae8 <vPortEnterCritical>
 8006290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006292:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006296:	b25b      	sxtb	r3, r3
 8006298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800629c:	d103      	bne.n	80062a6 <xQueueSemaphoreTake+0x142>
 800629e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062a0:	2200      	movs	r2, #0
 80062a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80062a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062a8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80062ac:	b25b      	sxtb	r3, r3
 80062ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062b2:	d103      	bne.n	80062bc <xQueueSemaphoreTake+0x158>
 80062b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062b6:	2200      	movs	r2, #0
 80062b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80062bc:	f001 fc46 	bl	8007b4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80062c0:	463a      	mov	r2, r7
 80062c2:	f107 030c 	add.w	r3, r7, #12
 80062c6:	4611      	mov	r1, r2
 80062c8:	4618      	mov	r0, r3
 80062ca:	f000 ff6d 	bl	80071a8 <xTaskCheckForTimeOut>
 80062ce:	4603      	mov	r3, r0
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d132      	bne.n	800633a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80062d4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80062d6:	f000 fa33 	bl	8006740 <prvIsQueueEmpty>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d026      	beq.n	800632e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80062e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d109      	bne.n	80062fc <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80062e8:	f001 fbfe 	bl	8007ae8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80062ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	4618      	mov	r0, r3
 80062f2:	f001 f8c3 	bl	800747c <xTaskPriorityInherit>
 80062f6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80062f8:	f001 fc28 	bl	8007b4c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80062fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062fe:	3324      	adds	r3, #36	@ 0x24
 8006300:	683a      	ldr	r2, [r7, #0]
 8006302:	4611      	mov	r1, r2
 8006304:	4618      	mov	r0, r3
 8006306:	f000 feaf 	bl	8007068 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800630a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800630c:	f000 f9c6 	bl	800669c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006310:	f000 fccc 	bl	8006cac <xTaskResumeAll>
 8006314:	4603      	mov	r3, r0
 8006316:	2b00      	cmp	r3, #0
 8006318:	f47f af67 	bne.w	80061ea <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800631c:	4b18      	ldr	r3, [pc, #96]	@ (8006380 <xQueueSemaphoreTake+0x21c>)
 800631e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006322:	601a      	str	r2, [r3, #0]
 8006324:	f3bf 8f4f 	dsb	sy
 8006328:	f3bf 8f6f 	isb	sy
 800632c:	e75d      	b.n	80061ea <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800632e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006330:	f000 f9b4 	bl	800669c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006334:	f000 fcba 	bl	8006cac <xTaskResumeAll>
 8006338:	e757      	b.n	80061ea <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800633a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800633c:	f000 f9ae 	bl	800669c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006340:	f000 fcb4 	bl	8006cac <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006344:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006346:	f000 f9fb 	bl	8006740 <prvIsQueueEmpty>
 800634a:	4603      	mov	r3, r0
 800634c:	2b00      	cmp	r3, #0
 800634e:	f43f af4c 	beq.w	80061ea <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006354:	2b00      	cmp	r3, #0
 8006356:	d00d      	beq.n	8006374 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8006358:	f001 fbc6 	bl	8007ae8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800635c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800635e:	f000 f8f5 	bl	800654c <prvGetDisinheritPriorityAfterTimeout>
 8006362:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800636a:	4618      	mov	r0, r3
 800636c:	f001 f984 	bl	8007678 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006370:	f001 fbec 	bl	8007b4c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006374:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006376:	4618      	mov	r0, r3
 8006378:	3738      	adds	r7, #56	@ 0x38
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
 800637e:	bf00      	nop
 8006380:	e000ed04 	.word	0xe000ed04

08006384 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b08e      	sub	sp, #56	@ 0x38
 8006388:	af00      	add	r7, sp, #0
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	60b9      	str	r1, [r7, #8]
 800638e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006396:	2b00      	cmp	r3, #0
 8006398:	d10b      	bne.n	80063b2 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800639a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800639e:	f383 8811 	msr	BASEPRI, r3
 80063a2:	f3bf 8f6f 	isb	sy
 80063a6:	f3bf 8f4f 	dsb	sy
 80063aa:	623b      	str	r3, [r7, #32]
}
 80063ac:	bf00      	nop
 80063ae:	bf00      	nop
 80063b0:	e7fd      	b.n	80063ae <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d103      	bne.n	80063c0 <xQueueReceiveFromISR+0x3c>
 80063b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d101      	bne.n	80063c4 <xQueueReceiveFromISR+0x40>
 80063c0:	2301      	movs	r3, #1
 80063c2:	e000      	b.n	80063c6 <xQueueReceiveFromISR+0x42>
 80063c4:	2300      	movs	r3, #0
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d10b      	bne.n	80063e2 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80063ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063ce:	f383 8811 	msr	BASEPRI, r3
 80063d2:	f3bf 8f6f 	isb	sy
 80063d6:	f3bf 8f4f 	dsb	sy
 80063da:	61fb      	str	r3, [r7, #28]
}
 80063dc:	bf00      	nop
 80063de:	bf00      	nop
 80063e0:	e7fd      	b.n	80063de <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80063e2:	f001 fc61 	bl	8007ca8 <vPortValidateInterruptPriority>
	__asm volatile
 80063e6:	f3ef 8211 	mrs	r2, BASEPRI
 80063ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063ee:	f383 8811 	msr	BASEPRI, r3
 80063f2:	f3bf 8f6f 	isb	sy
 80063f6:	f3bf 8f4f 	dsb	sy
 80063fa:	61ba      	str	r2, [r7, #24]
 80063fc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80063fe:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006400:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006404:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006406:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800640a:	2b00      	cmp	r3, #0
 800640c:	d02f      	beq.n	800646e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800640e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006410:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006414:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006418:	68b9      	ldr	r1, [r7, #8]
 800641a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800641c:	f000 f918 	bl	8006650 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006422:	1e5a      	subs	r2, r3, #1
 8006424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006426:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006428:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800642c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006430:	d112      	bne.n	8006458 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006434:	691b      	ldr	r3, [r3, #16]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d016      	beq.n	8006468 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800643a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800643c:	3310      	adds	r3, #16
 800643e:	4618      	mov	r0, r3
 8006440:	f000 fe38 	bl	80070b4 <xTaskRemoveFromEventList>
 8006444:	4603      	mov	r3, r0
 8006446:	2b00      	cmp	r3, #0
 8006448:	d00e      	beq.n	8006468 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d00b      	beq.n	8006468 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	601a      	str	r2, [r3, #0]
 8006456:	e007      	b.n	8006468 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006458:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800645c:	3301      	adds	r3, #1
 800645e:	b2db      	uxtb	r3, r3
 8006460:	b25a      	sxtb	r2, r3
 8006462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006464:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8006468:	2301      	movs	r3, #1
 800646a:	637b      	str	r3, [r7, #52]	@ 0x34
 800646c:	e001      	b.n	8006472 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800646e:	2300      	movs	r3, #0
 8006470:	637b      	str	r3, [r7, #52]	@ 0x34
 8006472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006474:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	f383 8811 	msr	BASEPRI, r3
}
 800647c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800647e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006480:	4618      	mov	r0, r3
 8006482:	3738      	adds	r7, #56	@ 0x38
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}

08006488 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b084      	sub	sp, #16
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d10b      	bne.n	80064ae <uxQueueMessagesWaiting+0x26>
	__asm volatile
 8006496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800649a:	f383 8811 	msr	BASEPRI, r3
 800649e:	f3bf 8f6f 	isb	sy
 80064a2:	f3bf 8f4f 	dsb	sy
 80064a6:	60bb      	str	r3, [r7, #8]
}
 80064a8:	bf00      	nop
 80064aa:	bf00      	nop
 80064ac:	e7fd      	b.n	80064aa <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80064ae:	f001 fb1b 	bl	8007ae8 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064b6:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80064b8:	f001 fb48 	bl	8007b4c <vPortExitCritical>

	return uxReturn;
 80064bc:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80064be:	4618      	mov	r0, r3
 80064c0:	3710      	adds	r7, #16
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}

080064c6 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80064c6:	b480      	push	{r7}
 80064c8:	b087      	sub	sp, #28
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d10b      	bne.n	80064f0 <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 80064d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064dc:	f383 8811 	msr	BASEPRI, r3
 80064e0:	f3bf 8f6f 	isb	sy
 80064e4:	f3bf 8f4f 	dsb	sy
 80064e8:	60fb      	str	r3, [r7, #12]
}
 80064ea:	bf00      	nop
 80064ec:	bf00      	nop
 80064ee:	e7fd      	b.n	80064ec <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064f4:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80064f6:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80064f8:	4618      	mov	r0, r3
 80064fa:	371c      	adds	r7, #28
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d10b      	bne.n	800652e <vQueueDelete+0x2a>
	__asm volatile
 8006516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800651a:	f383 8811 	msr	BASEPRI, r3
 800651e:	f3bf 8f6f 	isb	sy
 8006522:	f3bf 8f4f 	dsb	sy
 8006526:	60bb      	str	r3, [r7, #8]
}
 8006528:	bf00      	nop
 800652a:	bf00      	nop
 800652c:	e7fd      	b.n	800652a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800652e:	68f8      	ldr	r0, [r7, #12]
 8006530:	f000 f934 	bl	800679c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800653a:	2b00      	cmp	r3, #0
 800653c:	d102      	bne.n	8006544 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800653e:	68f8      	ldr	r0, [r7, #12]
 8006540:	f001 fcc2 	bl	8007ec8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006544:	bf00      	nop
 8006546:	3710      	adds	r7, #16
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}

0800654c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800654c:	b480      	push	{r7}
 800654e:	b085      	sub	sp, #20
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006558:	2b00      	cmp	r3, #0
 800655a:	d006      	beq.n	800656a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f1c3 0307 	rsb	r3, r3, #7
 8006566:	60fb      	str	r3, [r7, #12]
 8006568:	e001      	b.n	800656e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800656a:	2300      	movs	r3, #0
 800656c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800656e:	68fb      	ldr	r3, [r7, #12]
	}
 8006570:	4618      	mov	r0, r3
 8006572:	3714      	adds	r7, #20
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr

0800657c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b086      	sub	sp, #24
 8006580:	af00      	add	r7, sp, #0
 8006582:	60f8      	str	r0, [r7, #12]
 8006584:	60b9      	str	r1, [r7, #8]
 8006586:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006588:	2300      	movs	r3, #0
 800658a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006590:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006596:	2b00      	cmp	r3, #0
 8006598:	d10d      	bne.n	80065b6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d14d      	bne.n	800663e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	4618      	mov	r0, r3
 80065a8:	f000 ffde 	bl	8007568 <xTaskPriorityDisinherit>
 80065ac:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2200      	movs	r2, #0
 80065b2:	609a      	str	r2, [r3, #8]
 80065b4:	e043      	b.n	800663e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d119      	bne.n	80065f0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6858      	ldr	r0, [r3, #4]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065c4:	461a      	mov	r2, r3
 80065c6:	68b9      	ldr	r1, [r7, #8]
 80065c8:	f012 fdbd 	bl	8019146 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	685a      	ldr	r2, [r3, #4]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065d4:	441a      	add	r2, r3
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	685a      	ldr	r2, [r3, #4]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d32b      	bcc.n	800663e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	605a      	str	r2, [r3, #4]
 80065ee:	e026      	b.n	800663e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	68d8      	ldr	r0, [r3, #12]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065f8:	461a      	mov	r2, r3
 80065fa:	68b9      	ldr	r1, [r7, #8]
 80065fc:	f012 fda3 	bl	8019146 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	68da      	ldr	r2, [r3, #12]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006608:	425b      	negs	r3, r3
 800660a:	441a      	add	r2, r3
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	68da      	ldr	r2, [r3, #12]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	429a      	cmp	r2, r3
 800661a:	d207      	bcs.n	800662c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	689a      	ldr	r2, [r3, #8]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006624:	425b      	negs	r3, r3
 8006626:	441a      	add	r2, r3
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2b02      	cmp	r3, #2
 8006630:	d105      	bne.n	800663e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d002      	beq.n	800663e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	3b01      	subs	r3, #1
 800663c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	1c5a      	adds	r2, r3, #1
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006646:	697b      	ldr	r3, [r7, #20]
}
 8006648:	4618      	mov	r0, r3
 800664a:	3718      	adds	r7, #24
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}

08006650 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b082      	sub	sp, #8
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800665e:	2b00      	cmp	r3, #0
 8006660:	d018      	beq.n	8006694 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	68da      	ldr	r2, [r3, #12]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800666a:	441a      	add	r2, r3
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	68da      	ldr	r2, [r3, #12]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	429a      	cmp	r2, r3
 800667a:	d303      	bcc.n	8006684 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	68d9      	ldr	r1, [r3, #12]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800668c:	461a      	mov	r2, r3
 800668e:	6838      	ldr	r0, [r7, #0]
 8006690:	f012 fd59 	bl	8019146 <memcpy>
	}
}
 8006694:	bf00      	nop
 8006696:	3708      	adds	r7, #8
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b084      	sub	sp, #16
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80066a4:	f001 fa20 	bl	8007ae8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80066ae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80066b0:	e011      	b.n	80066d6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d012      	beq.n	80066e0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	3324      	adds	r3, #36	@ 0x24
 80066be:	4618      	mov	r0, r3
 80066c0:	f000 fcf8 	bl	80070b4 <xTaskRemoveFromEventList>
 80066c4:	4603      	mov	r3, r0
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d001      	beq.n	80066ce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80066ca:	f000 fdd1 	bl	8007270 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80066ce:	7bfb      	ldrb	r3, [r7, #15]
 80066d0:	3b01      	subs	r3, #1
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80066d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	dce9      	bgt.n	80066b2 <prvUnlockQueue+0x16>
 80066de:	e000      	b.n	80066e2 <prvUnlockQueue+0x46>
					break;
 80066e0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	22ff      	movs	r2, #255	@ 0xff
 80066e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80066ea:	f001 fa2f 	bl	8007b4c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80066ee:	f001 f9fb 	bl	8007ae8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80066f8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80066fa:	e011      	b.n	8006720 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	691b      	ldr	r3, [r3, #16]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d012      	beq.n	800672a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	3310      	adds	r3, #16
 8006708:	4618      	mov	r0, r3
 800670a:	f000 fcd3 	bl	80070b4 <xTaskRemoveFromEventList>
 800670e:	4603      	mov	r3, r0
 8006710:	2b00      	cmp	r3, #0
 8006712:	d001      	beq.n	8006718 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006714:	f000 fdac 	bl	8007270 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006718:	7bbb      	ldrb	r3, [r7, #14]
 800671a:	3b01      	subs	r3, #1
 800671c:	b2db      	uxtb	r3, r3
 800671e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006720:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006724:	2b00      	cmp	r3, #0
 8006726:	dce9      	bgt.n	80066fc <prvUnlockQueue+0x60>
 8006728:	e000      	b.n	800672c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800672a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	22ff      	movs	r2, #255	@ 0xff
 8006730:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006734:	f001 fa0a 	bl	8007b4c <vPortExitCritical>
}
 8006738:	bf00      	nop
 800673a:	3710      	adds	r7, #16
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b084      	sub	sp, #16
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006748:	f001 f9ce 	bl	8007ae8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006750:	2b00      	cmp	r3, #0
 8006752:	d102      	bne.n	800675a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006754:	2301      	movs	r3, #1
 8006756:	60fb      	str	r3, [r7, #12]
 8006758:	e001      	b.n	800675e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800675a:	2300      	movs	r3, #0
 800675c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800675e:	f001 f9f5 	bl	8007b4c <vPortExitCritical>

	return xReturn;
 8006762:	68fb      	ldr	r3, [r7, #12]
}
 8006764:	4618      	mov	r0, r3
 8006766:	3710      	adds	r7, #16
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}

0800676c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b084      	sub	sp, #16
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006774:	f001 f9b8 	bl	8007ae8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006780:	429a      	cmp	r2, r3
 8006782:	d102      	bne.n	800678a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006784:	2301      	movs	r3, #1
 8006786:	60fb      	str	r3, [r7, #12]
 8006788:	e001      	b.n	800678e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800678a:	2300      	movs	r3, #0
 800678c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800678e:	f001 f9dd 	bl	8007b4c <vPortExitCritical>

	return xReturn;
 8006792:	68fb      	ldr	r3, [r7, #12]
}
 8006794:	4618      	mov	r0, r3
 8006796:	3710      	adds	r7, #16
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800679c:	b480      	push	{r7}
 800679e:	b085      	sub	sp, #20
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80067a4:	2300      	movs	r3, #0
 80067a6:	60fb      	str	r3, [r7, #12]
 80067a8:	e016      	b.n	80067d8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80067aa:	4a10      	ldr	r2, [pc, #64]	@ (80067ec <vQueueUnregisterQueue+0x50>)
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	00db      	lsls	r3, r3, #3
 80067b0:	4413      	add	r3, r2
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d10b      	bne.n	80067d2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80067ba:	4a0c      	ldr	r2, [pc, #48]	@ (80067ec <vQueueUnregisterQueue+0x50>)
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2100      	movs	r1, #0
 80067c0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80067c4:	4a09      	ldr	r2, [pc, #36]	@ (80067ec <vQueueUnregisterQueue+0x50>)
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	00db      	lsls	r3, r3, #3
 80067ca:	4413      	add	r3, r2
 80067cc:	2200      	movs	r2, #0
 80067ce:	605a      	str	r2, [r3, #4]
				break;
 80067d0:	e006      	b.n	80067e0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	3301      	adds	r3, #1
 80067d6:	60fb      	str	r3, [r7, #12]
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2b07      	cmp	r3, #7
 80067dc:	d9e5      	bls.n	80067aa <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80067de:	bf00      	nop
 80067e0:	bf00      	nop
 80067e2:	3714      	adds	r7, #20
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr
 80067ec:	2000511c 	.word	0x2000511c

080067f0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b08e      	sub	sp, #56	@ 0x38
 80067f4:	af04      	add	r7, sp, #16
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	607a      	str	r2, [r7, #4]
 80067fc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80067fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006800:	2b00      	cmp	r3, #0
 8006802:	d10b      	bne.n	800681c <xTaskCreateStatic+0x2c>
	__asm volatile
 8006804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006808:	f383 8811 	msr	BASEPRI, r3
 800680c:	f3bf 8f6f 	isb	sy
 8006810:	f3bf 8f4f 	dsb	sy
 8006814:	623b      	str	r3, [r7, #32]
}
 8006816:	bf00      	nop
 8006818:	bf00      	nop
 800681a:	e7fd      	b.n	8006818 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800681c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800681e:	2b00      	cmp	r3, #0
 8006820:	d10b      	bne.n	800683a <xTaskCreateStatic+0x4a>
	__asm volatile
 8006822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006826:	f383 8811 	msr	BASEPRI, r3
 800682a:	f3bf 8f6f 	isb	sy
 800682e:	f3bf 8f4f 	dsb	sy
 8006832:	61fb      	str	r3, [r7, #28]
}
 8006834:	bf00      	nop
 8006836:	bf00      	nop
 8006838:	e7fd      	b.n	8006836 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800683a:	23a0      	movs	r3, #160	@ 0xa0
 800683c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	2ba0      	cmp	r3, #160	@ 0xa0
 8006842:	d00b      	beq.n	800685c <xTaskCreateStatic+0x6c>
	__asm volatile
 8006844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006848:	f383 8811 	msr	BASEPRI, r3
 800684c:	f3bf 8f6f 	isb	sy
 8006850:	f3bf 8f4f 	dsb	sy
 8006854:	61bb      	str	r3, [r7, #24]
}
 8006856:	bf00      	nop
 8006858:	bf00      	nop
 800685a:	e7fd      	b.n	8006858 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800685c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800685e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006860:	2b00      	cmp	r3, #0
 8006862:	d01e      	beq.n	80068a2 <xTaskCreateStatic+0xb2>
 8006864:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006866:	2b00      	cmp	r3, #0
 8006868:	d01b      	beq.n	80068a2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800686a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800686c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800686e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006870:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006872:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006876:	2202      	movs	r2, #2
 8006878:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800687c:	2300      	movs	r3, #0
 800687e:	9303      	str	r3, [sp, #12]
 8006880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006882:	9302      	str	r3, [sp, #8]
 8006884:	f107 0314 	add.w	r3, r7, #20
 8006888:	9301      	str	r3, [sp, #4]
 800688a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800688c:	9300      	str	r3, [sp, #0]
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	68b9      	ldr	r1, [r7, #8]
 8006894:	68f8      	ldr	r0, [r7, #12]
 8006896:	f000 f851 	bl	800693c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800689a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800689c:	f000 f8ee 	bl	8006a7c <prvAddNewTaskToReadyList>
 80068a0:	e001      	b.n	80068a6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80068a2:	2300      	movs	r3, #0
 80068a4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80068a6:	697b      	ldr	r3, [r7, #20]
	}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3728      	adds	r7, #40	@ 0x28
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b08c      	sub	sp, #48	@ 0x30
 80068b4:	af04      	add	r7, sp, #16
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	60b9      	str	r1, [r7, #8]
 80068ba:	603b      	str	r3, [r7, #0]
 80068bc:	4613      	mov	r3, r2
 80068be:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80068c0:	88fb      	ldrh	r3, [r7, #6]
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	4618      	mov	r0, r3
 80068c6:	f001 fa31 	bl	8007d2c <pvPortMalloc>
 80068ca:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d00e      	beq.n	80068f0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80068d2:	20a0      	movs	r0, #160	@ 0xa0
 80068d4:	f001 fa2a 	bl	8007d2c <pvPortMalloc>
 80068d8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80068da:	69fb      	ldr	r3, [r7, #28]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d003      	beq.n	80068e8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80068e0:	69fb      	ldr	r3, [r7, #28]
 80068e2:	697a      	ldr	r2, [r7, #20]
 80068e4:	631a      	str	r2, [r3, #48]	@ 0x30
 80068e6:	e005      	b.n	80068f4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80068e8:	6978      	ldr	r0, [r7, #20]
 80068ea:	f001 faed 	bl	8007ec8 <vPortFree>
 80068ee:	e001      	b.n	80068f4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80068f0:	2300      	movs	r3, #0
 80068f2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80068f4:	69fb      	ldr	r3, [r7, #28]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d017      	beq.n	800692a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80068fa:	69fb      	ldr	r3, [r7, #28]
 80068fc:	2200      	movs	r2, #0
 80068fe:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006902:	88fa      	ldrh	r2, [r7, #6]
 8006904:	2300      	movs	r3, #0
 8006906:	9303      	str	r3, [sp, #12]
 8006908:	69fb      	ldr	r3, [r7, #28]
 800690a:	9302      	str	r3, [sp, #8]
 800690c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800690e:	9301      	str	r3, [sp, #4]
 8006910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006912:	9300      	str	r3, [sp, #0]
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	68b9      	ldr	r1, [r7, #8]
 8006918:	68f8      	ldr	r0, [r7, #12]
 800691a:	f000 f80f 	bl	800693c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800691e:	69f8      	ldr	r0, [r7, #28]
 8006920:	f000 f8ac 	bl	8006a7c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006924:	2301      	movs	r3, #1
 8006926:	61bb      	str	r3, [r7, #24]
 8006928:	e002      	b.n	8006930 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800692a:	f04f 33ff 	mov.w	r3, #4294967295
 800692e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006930:	69bb      	ldr	r3, [r7, #24]
	}
 8006932:	4618      	mov	r0, r3
 8006934:	3720      	adds	r7, #32
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
	...

0800693c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b088      	sub	sp, #32
 8006940:	af00      	add	r7, sp, #0
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	60b9      	str	r1, [r7, #8]
 8006946:	607a      	str	r2, [r7, #4]
 8006948:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800694a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800694c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006954:	3b01      	subs	r3, #1
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	4413      	add	r3, r2
 800695a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800695c:	69bb      	ldr	r3, [r7, #24]
 800695e:	f023 0307 	bic.w	r3, r3, #7
 8006962:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006964:	69bb      	ldr	r3, [r7, #24]
 8006966:	f003 0307 	and.w	r3, r3, #7
 800696a:	2b00      	cmp	r3, #0
 800696c:	d00b      	beq.n	8006986 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800696e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006972:	f383 8811 	msr	BASEPRI, r3
 8006976:	f3bf 8f6f 	isb	sy
 800697a:	f3bf 8f4f 	dsb	sy
 800697e:	617b      	str	r3, [r7, #20]
}
 8006980:	bf00      	nop
 8006982:	bf00      	nop
 8006984:	e7fd      	b.n	8006982 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d01f      	beq.n	80069cc <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800698c:	2300      	movs	r3, #0
 800698e:	61fb      	str	r3, [r7, #28]
 8006990:	e012      	b.n	80069b8 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006992:	68ba      	ldr	r2, [r7, #8]
 8006994:	69fb      	ldr	r3, [r7, #28]
 8006996:	4413      	add	r3, r2
 8006998:	7819      	ldrb	r1, [r3, #0]
 800699a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800699c:	69fb      	ldr	r3, [r7, #28]
 800699e:	4413      	add	r3, r2
 80069a0:	3334      	adds	r3, #52	@ 0x34
 80069a2:	460a      	mov	r2, r1
 80069a4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80069a6:	68ba      	ldr	r2, [r7, #8]
 80069a8:	69fb      	ldr	r3, [r7, #28]
 80069aa:	4413      	add	r3, r2
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d006      	beq.n	80069c0 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80069b2:	69fb      	ldr	r3, [r7, #28]
 80069b4:	3301      	adds	r3, #1
 80069b6:	61fb      	str	r3, [r7, #28]
 80069b8:	69fb      	ldr	r3, [r7, #28]
 80069ba:	2b0f      	cmp	r3, #15
 80069bc:	d9e9      	bls.n	8006992 <prvInitialiseNewTask+0x56>
 80069be:	e000      	b.n	80069c2 <prvInitialiseNewTask+0x86>
			{
				break;
 80069c0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80069c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069c4:	2200      	movs	r2, #0
 80069c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80069ca:	e003      	b.n	80069d4 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80069cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ce:	2200      	movs	r2, #0
 80069d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80069d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069d6:	2b06      	cmp	r3, #6
 80069d8:	d901      	bls.n	80069de <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80069da:	2306      	movs	r3, #6
 80069dc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80069de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80069e2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80069e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80069e8:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80069ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ec:	2200      	movs	r2, #0
 80069ee:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80069f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069f2:	3304      	adds	r3, #4
 80069f4:	4618      	mov	r0, r3
 80069f6:	f7fe fe80 	bl	80056fa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80069fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069fc:	3318      	adds	r3, #24
 80069fe:	4618      	mov	r0, r3
 8006a00:	f7fe fe7b 	bl	80056fa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a08:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a0c:	f1c3 0207 	rsb	r2, r3, #7
 8006a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a12:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a18:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a24:	2200      	movs	r2, #0
 8006a26:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a2c:	334c      	adds	r3, #76	@ 0x4c
 8006a2e:	224c      	movs	r2, #76	@ 0x4c
 8006a30:	2100      	movs	r1, #0
 8006a32:	4618      	mov	r0, r3
 8006a34:	f012 fa25 	bl	8018e82 <memset>
 8006a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a3a:	4a0d      	ldr	r2, [pc, #52]	@ (8006a70 <prvInitialiseNewTask+0x134>)
 8006a3c:	651a      	str	r2, [r3, #80]	@ 0x50
 8006a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a40:	4a0c      	ldr	r2, [pc, #48]	@ (8006a74 <prvInitialiseNewTask+0x138>)
 8006a42:	655a      	str	r2, [r3, #84]	@ 0x54
 8006a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a46:	4a0c      	ldr	r2, [pc, #48]	@ (8006a78 <prvInitialiseNewTask+0x13c>)
 8006a48:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006a4a:	683a      	ldr	r2, [r7, #0]
 8006a4c:	68f9      	ldr	r1, [r7, #12]
 8006a4e:	69b8      	ldr	r0, [r7, #24]
 8006a50:	f000 ff1c 	bl	800788c <pxPortInitialiseStack>
 8006a54:	4602      	mov	r2, r0
 8006a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a58:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006a5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d002      	beq.n	8006a66 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006a60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a66:	bf00      	nop
 8006a68:	3720      	adds	r7, #32
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}
 8006a6e:	bf00      	nop
 8006a70:	20011008 	.word	0x20011008
 8006a74:	20011070 	.word	0x20011070
 8006a78:	200110d8 	.word	0x200110d8

08006a7c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b082      	sub	sp, #8
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006a84:	f001 f830 	bl	8007ae8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006a88:	4b2a      	ldr	r3, [pc, #168]	@ (8006b34 <prvAddNewTaskToReadyList+0xb8>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	3301      	adds	r3, #1
 8006a8e:	4a29      	ldr	r2, [pc, #164]	@ (8006b34 <prvAddNewTaskToReadyList+0xb8>)
 8006a90:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006a92:	4b29      	ldr	r3, [pc, #164]	@ (8006b38 <prvAddNewTaskToReadyList+0xbc>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d109      	bne.n	8006aae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006a9a:	4a27      	ldr	r2, [pc, #156]	@ (8006b38 <prvAddNewTaskToReadyList+0xbc>)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006aa0:	4b24      	ldr	r3, [pc, #144]	@ (8006b34 <prvAddNewTaskToReadyList+0xb8>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d110      	bne.n	8006aca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006aa8:	f000 fc06 	bl	80072b8 <prvInitialiseTaskLists>
 8006aac:	e00d      	b.n	8006aca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006aae:	4b23      	ldr	r3, [pc, #140]	@ (8006b3c <prvAddNewTaskToReadyList+0xc0>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d109      	bne.n	8006aca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006ab6:	4b20      	ldr	r3, [pc, #128]	@ (8006b38 <prvAddNewTaskToReadyList+0xbc>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d802      	bhi.n	8006aca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006ac4:	4a1c      	ldr	r2, [pc, #112]	@ (8006b38 <prvAddNewTaskToReadyList+0xbc>)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006aca:	4b1d      	ldr	r3, [pc, #116]	@ (8006b40 <prvAddNewTaskToReadyList+0xc4>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	3301      	adds	r3, #1
 8006ad0:	4a1b      	ldr	r2, [pc, #108]	@ (8006b40 <prvAddNewTaskToReadyList+0xc4>)
 8006ad2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ad8:	2201      	movs	r2, #1
 8006ada:	409a      	lsls	r2, r3
 8006adc:	4b19      	ldr	r3, [pc, #100]	@ (8006b44 <prvAddNewTaskToReadyList+0xc8>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	4a18      	ldr	r2, [pc, #96]	@ (8006b44 <prvAddNewTaskToReadyList+0xc8>)
 8006ae4:	6013      	str	r3, [r2, #0]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006aea:	4613      	mov	r3, r2
 8006aec:	009b      	lsls	r3, r3, #2
 8006aee:	4413      	add	r3, r2
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	4a15      	ldr	r2, [pc, #84]	@ (8006b48 <prvAddNewTaskToReadyList+0xcc>)
 8006af4:	441a      	add	r2, r3
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	3304      	adds	r3, #4
 8006afa:	4619      	mov	r1, r3
 8006afc:	4610      	mov	r0, r2
 8006afe:	f7fe fe09 	bl	8005714 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006b02:	f001 f823 	bl	8007b4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006b06:	4b0d      	ldr	r3, [pc, #52]	@ (8006b3c <prvAddNewTaskToReadyList+0xc0>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d00e      	beq.n	8006b2c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006b0e:	4b0a      	ldr	r3, [pc, #40]	@ (8006b38 <prvAddNewTaskToReadyList+0xbc>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d207      	bcs.n	8006b2c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8006b4c <prvAddNewTaskToReadyList+0xd0>)
 8006b1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b22:	601a      	str	r2, [r3, #0]
 8006b24:	f3bf 8f4f 	dsb	sy
 8006b28:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b2c:	bf00      	nop
 8006b2e:	3708      	adds	r7, #8
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}
 8006b34:	2000525c 	.word	0x2000525c
 8006b38:	2000515c 	.word	0x2000515c
 8006b3c:	20005268 	.word	0x20005268
 8006b40:	20005278 	.word	0x20005278
 8006b44:	20005264 	.word	0x20005264
 8006b48:	20005160 	.word	0x20005160
 8006b4c:	e000ed04 	.word	0xe000ed04

08006b50 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b084      	sub	sp, #16
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d018      	beq.n	8006b94 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006b62:	4b14      	ldr	r3, [pc, #80]	@ (8006bb4 <vTaskDelay+0x64>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d00b      	beq.n	8006b82 <vTaskDelay+0x32>
	__asm volatile
 8006b6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b6e:	f383 8811 	msr	BASEPRI, r3
 8006b72:	f3bf 8f6f 	isb	sy
 8006b76:	f3bf 8f4f 	dsb	sy
 8006b7a:	60bb      	str	r3, [r7, #8]
}
 8006b7c:	bf00      	nop
 8006b7e:	bf00      	nop
 8006b80:	e7fd      	b.n	8006b7e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006b82:	f000 f885 	bl	8006c90 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006b86:	2100      	movs	r1, #0
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f000 fe19 	bl	80077c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006b8e:	f000 f88d 	bl	8006cac <xTaskResumeAll>
 8006b92:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d107      	bne.n	8006baa <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006b9a:	4b07      	ldr	r3, [pc, #28]	@ (8006bb8 <vTaskDelay+0x68>)
 8006b9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ba0:	601a      	str	r2, [r3, #0]
 8006ba2:	f3bf 8f4f 	dsb	sy
 8006ba6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006baa:	bf00      	nop
 8006bac:	3710      	adds	r7, #16
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	bf00      	nop
 8006bb4:	20005284 	.word	0x20005284
 8006bb8:	e000ed04 	.word	0xe000ed04

08006bbc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b08a      	sub	sp, #40	@ 0x28
 8006bc0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006bca:	463a      	mov	r2, r7
 8006bcc:	1d39      	adds	r1, r7, #4
 8006bce:	f107 0308 	add.w	r3, r7, #8
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f7f9 fcec 	bl	80005b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006bd8:	6839      	ldr	r1, [r7, #0]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	68ba      	ldr	r2, [r7, #8]
 8006bde:	9202      	str	r2, [sp, #8]
 8006be0:	9301      	str	r3, [sp, #4]
 8006be2:	2300      	movs	r3, #0
 8006be4:	9300      	str	r3, [sp, #0]
 8006be6:	2300      	movs	r3, #0
 8006be8:	460a      	mov	r2, r1
 8006bea:	4921      	ldr	r1, [pc, #132]	@ (8006c70 <vTaskStartScheduler+0xb4>)
 8006bec:	4821      	ldr	r0, [pc, #132]	@ (8006c74 <vTaskStartScheduler+0xb8>)
 8006bee:	f7ff fdff 	bl	80067f0 <xTaskCreateStatic>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	4a20      	ldr	r2, [pc, #128]	@ (8006c78 <vTaskStartScheduler+0xbc>)
 8006bf6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006bf8:	4b1f      	ldr	r3, [pc, #124]	@ (8006c78 <vTaskStartScheduler+0xbc>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d002      	beq.n	8006c06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006c00:	2301      	movs	r3, #1
 8006c02:	617b      	str	r3, [r7, #20]
 8006c04:	e001      	b.n	8006c0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006c06:	2300      	movs	r3, #0
 8006c08:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d11b      	bne.n	8006c48 <vTaskStartScheduler+0x8c>
	__asm volatile
 8006c10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c14:	f383 8811 	msr	BASEPRI, r3
 8006c18:	f3bf 8f6f 	isb	sy
 8006c1c:	f3bf 8f4f 	dsb	sy
 8006c20:	613b      	str	r3, [r7, #16]
}
 8006c22:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006c24:	4b15      	ldr	r3, [pc, #84]	@ (8006c7c <vTaskStartScheduler+0xc0>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	334c      	adds	r3, #76	@ 0x4c
 8006c2a:	4a15      	ldr	r2, [pc, #84]	@ (8006c80 <vTaskStartScheduler+0xc4>)
 8006c2c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006c2e:	4b15      	ldr	r3, [pc, #84]	@ (8006c84 <vTaskStartScheduler+0xc8>)
 8006c30:	f04f 32ff 	mov.w	r2, #4294967295
 8006c34:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006c36:	4b14      	ldr	r3, [pc, #80]	@ (8006c88 <vTaskStartScheduler+0xcc>)
 8006c38:	2201      	movs	r2, #1
 8006c3a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006c3c:	4b13      	ldr	r3, [pc, #76]	@ (8006c8c <vTaskStartScheduler+0xd0>)
 8006c3e:	2200      	movs	r2, #0
 8006c40:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006c42:	f000 fead 	bl	80079a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006c46:	e00f      	b.n	8006c68 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c4e:	d10b      	bne.n	8006c68 <vTaskStartScheduler+0xac>
	__asm volatile
 8006c50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c54:	f383 8811 	msr	BASEPRI, r3
 8006c58:	f3bf 8f6f 	isb	sy
 8006c5c:	f3bf 8f4f 	dsb	sy
 8006c60:	60fb      	str	r3, [r7, #12]
}
 8006c62:	bf00      	nop
 8006c64:	bf00      	nop
 8006c66:	e7fd      	b.n	8006c64 <vTaskStartScheduler+0xa8>
}
 8006c68:	bf00      	nop
 8006c6a:	3718      	adds	r7, #24
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}
 8006c70:	0801a294 	.word	0x0801a294
 8006c74:	08007289 	.word	0x08007289
 8006c78:	20005280 	.word	0x20005280
 8006c7c:	2000515c 	.word	0x2000515c
 8006c80:	20000040 	.word	0x20000040
 8006c84:	2000527c 	.word	0x2000527c
 8006c88:	20005268 	.word	0x20005268
 8006c8c:	20005260 	.word	0x20005260

08006c90 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006c90:	b480      	push	{r7}
 8006c92:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006c94:	4b04      	ldr	r3, [pc, #16]	@ (8006ca8 <vTaskSuspendAll+0x18>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	3301      	adds	r3, #1
 8006c9a:	4a03      	ldr	r2, [pc, #12]	@ (8006ca8 <vTaskSuspendAll+0x18>)
 8006c9c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006c9e:	bf00      	nop
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr
 8006ca8:	20005284 	.word	0x20005284

08006cac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b084      	sub	sp, #16
 8006cb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006cba:	4b42      	ldr	r3, [pc, #264]	@ (8006dc4 <xTaskResumeAll+0x118>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d10b      	bne.n	8006cda <xTaskResumeAll+0x2e>
	__asm volatile
 8006cc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cc6:	f383 8811 	msr	BASEPRI, r3
 8006cca:	f3bf 8f6f 	isb	sy
 8006cce:	f3bf 8f4f 	dsb	sy
 8006cd2:	603b      	str	r3, [r7, #0]
}
 8006cd4:	bf00      	nop
 8006cd6:	bf00      	nop
 8006cd8:	e7fd      	b.n	8006cd6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006cda:	f000 ff05 	bl	8007ae8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006cde:	4b39      	ldr	r3, [pc, #228]	@ (8006dc4 <xTaskResumeAll+0x118>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	3b01      	subs	r3, #1
 8006ce4:	4a37      	ldr	r2, [pc, #220]	@ (8006dc4 <xTaskResumeAll+0x118>)
 8006ce6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ce8:	4b36      	ldr	r3, [pc, #216]	@ (8006dc4 <xTaskResumeAll+0x118>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d161      	bne.n	8006db4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006cf0:	4b35      	ldr	r3, [pc, #212]	@ (8006dc8 <xTaskResumeAll+0x11c>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d05d      	beq.n	8006db4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006cf8:	e02e      	b.n	8006d58 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cfa:	4b34      	ldr	r3, [pc, #208]	@ (8006dcc <xTaskResumeAll+0x120>)
 8006cfc:	68db      	ldr	r3, [r3, #12]
 8006cfe:	68db      	ldr	r3, [r3, #12]
 8006d00:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	3318      	adds	r3, #24
 8006d06:	4618      	mov	r0, r3
 8006d08:	f7fe fd61 	bl	80057ce <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	3304      	adds	r3, #4
 8006d10:	4618      	mov	r0, r3
 8006d12:	f7fe fd5c 	bl	80057ce <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	409a      	lsls	r2, r3
 8006d1e:	4b2c      	ldr	r3, [pc, #176]	@ (8006dd0 <xTaskResumeAll+0x124>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4313      	orrs	r3, r2
 8006d24:	4a2a      	ldr	r2, [pc, #168]	@ (8006dd0 <xTaskResumeAll+0x124>)
 8006d26:	6013      	str	r3, [r2, #0]
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d2c:	4613      	mov	r3, r2
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	4413      	add	r3, r2
 8006d32:	009b      	lsls	r3, r3, #2
 8006d34:	4a27      	ldr	r2, [pc, #156]	@ (8006dd4 <xTaskResumeAll+0x128>)
 8006d36:	441a      	add	r2, r3
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	3304      	adds	r3, #4
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	4610      	mov	r0, r2
 8006d40:	f7fe fce8 	bl	8005714 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d48:	4b23      	ldr	r3, [pc, #140]	@ (8006dd8 <xTaskResumeAll+0x12c>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d302      	bcc.n	8006d58 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006d52:	4b22      	ldr	r3, [pc, #136]	@ (8006ddc <xTaskResumeAll+0x130>)
 8006d54:	2201      	movs	r2, #1
 8006d56:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d58:	4b1c      	ldr	r3, [pc, #112]	@ (8006dcc <xTaskResumeAll+0x120>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d1cc      	bne.n	8006cfa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d001      	beq.n	8006d6a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006d66:	f000 fb4b 	bl	8007400 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006d6a:	4b1d      	ldr	r3, [pc, #116]	@ (8006de0 <xTaskResumeAll+0x134>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d010      	beq.n	8006d98 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006d76:	f000 f859 	bl	8006e2c <xTaskIncrementTick>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d002      	beq.n	8006d86 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006d80:	4b16      	ldr	r3, [pc, #88]	@ (8006ddc <xTaskResumeAll+0x130>)
 8006d82:	2201      	movs	r2, #1
 8006d84:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	3b01      	subs	r3, #1
 8006d8a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d1f1      	bne.n	8006d76 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006d92:	4b13      	ldr	r3, [pc, #76]	@ (8006de0 <xTaskResumeAll+0x134>)
 8006d94:	2200      	movs	r2, #0
 8006d96:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006d98:	4b10      	ldr	r3, [pc, #64]	@ (8006ddc <xTaskResumeAll+0x130>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d009      	beq.n	8006db4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006da0:	2301      	movs	r3, #1
 8006da2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006da4:	4b0f      	ldr	r3, [pc, #60]	@ (8006de4 <xTaskResumeAll+0x138>)
 8006da6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006daa:	601a      	str	r2, [r3, #0]
 8006dac:	f3bf 8f4f 	dsb	sy
 8006db0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006db4:	f000 feca 	bl	8007b4c <vPortExitCritical>

	return xAlreadyYielded;
 8006db8:	68bb      	ldr	r3, [r7, #8]
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3710      	adds	r7, #16
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}
 8006dc2:	bf00      	nop
 8006dc4:	20005284 	.word	0x20005284
 8006dc8:	2000525c 	.word	0x2000525c
 8006dcc:	2000521c 	.word	0x2000521c
 8006dd0:	20005264 	.word	0x20005264
 8006dd4:	20005160 	.word	0x20005160
 8006dd8:	2000515c 	.word	0x2000515c
 8006ddc:	20005270 	.word	0x20005270
 8006de0:	2000526c 	.word	0x2000526c
 8006de4:	e000ed04 	.word	0xe000ed04

08006de8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006de8:	b480      	push	{r7}
 8006dea:	b083      	sub	sp, #12
 8006dec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006dee:	4b05      	ldr	r3, [pc, #20]	@ (8006e04 <xTaskGetTickCount+0x1c>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006df4:	687b      	ldr	r3, [r7, #4]
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	370c      	adds	r7, #12
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e00:	4770      	bx	lr
 8006e02:	bf00      	nop
 8006e04:	20005260 	.word	0x20005260

08006e08 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b082      	sub	sp, #8
 8006e0c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006e0e:	f000 ff4b 	bl	8007ca8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006e12:	2300      	movs	r3, #0
 8006e14:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8006e16:	4b04      	ldr	r3, [pc, #16]	@ (8006e28 <xTaskGetTickCountFromISR+0x20>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006e1c:	683b      	ldr	r3, [r7, #0]
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3708      	adds	r7, #8
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop
 8006e28:	20005260 	.word	0x20005260

08006e2c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b086      	sub	sp, #24
 8006e30:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006e32:	2300      	movs	r3, #0
 8006e34:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e36:	4b4f      	ldr	r3, [pc, #316]	@ (8006f74 <xTaskIncrementTick+0x148>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	f040 808f 	bne.w	8006f5e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006e40:	4b4d      	ldr	r3, [pc, #308]	@ (8006f78 <xTaskIncrementTick+0x14c>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	3301      	adds	r3, #1
 8006e46:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006e48:	4a4b      	ldr	r2, [pc, #300]	@ (8006f78 <xTaskIncrementTick+0x14c>)
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d121      	bne.n	8006e98 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006e54:	4b49      	ldr	r3, [pc, #292]	@ (8006f7c <xTaskIncrementTick+0x150>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d00b      	beq.n	8006e76 <xTaskIncrementTick+0x4a>
	__asm volatile
 8006e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e62:	f383 8811 	msr	BASEPRI, r3
 8006e66:	f3bf 8f6f 	isb	sy
 8006e6a:	f3bf 8f4f 	dsb	sy
 8006e6e:	603b      	str	r3, [r7, #0]
}
 8006e70:	bf00      	nop
 8006e72:	bf00      	nop
 8006e74:	e7fd      	b.n	8006e72 <xTaskIncrementTick+0x46>
 8006e76:	4b41      	ldr	r3, [pc, #260]	@ (8006f7c <xTaskIncrementTick+0x150>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	60fb      	str	r3, [r7, #12]
 8006e7c:	4b40      	ldr	r3, [pc, #256]	@ (8006f80 <xTaskIncrementTick+0x154>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a3e      	ldr	r2, [pc, #248]	@ (8006f7c <xTaskIncrementTick+0x150>)
 8006e82:	6013      	str	r3, [r2, #0]
 8006e84:	4a3e      	ldr	r2, [pc, #248]	@ (8006f80 <xTaskIncrementTick+0x154>)
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	6013      	str	r3, [r2, #0]
 8006e8a:	4b3e      	ldr	r3, [pc, #248]	@ (8006f84 <xTaskIncrementTick+0x158>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	3301      	adds	r3, #1
 8006e90:	4a3c      	ldr	r2, [pc, #240]	@ (8006f84 <xTaskIncrementTick+0x158>)
 8006e92:	6013      	str	r3, [r2, #0]
 8006e94:	f000 fab4 	bl	8007400 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006e98:	4b3b      	ldr	r3, [pc, #236]	@ (8006f88 <xTaskIncrementTick+0x15c>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	693a      	ldr	r2, [r7, #16]
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d348      	bcc.n	8006f34 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ea2:	4b36      	ldr	r3, [pc, #216]	@ (8006f7c <xTaskIncrementTick+0x150>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d104      	bne.n	8006eb6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006eac:	4b36      	ldr	r3, [pc, #216]	@ (8006f88 <xTaskIncrementTick+0x15c>)
 8006eae:	f04f 32ff 	mov.w	r2, #4294967295
 8006eb2:	601a      	str	r2, [r3, #0]
					break;
 8006eb4:	e03e      	b.n	8006f34 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006eb6:	4b31      	ldr	r3, [pc, #196]	@ (8006f7c <xTaskIncrementTick+0x150>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	68db      	ldr	r3, [r3, #12]
 8006ebe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006ec6:	693a      	ldr	r2, [r7, #16]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	d203      	bcs.n	8006ed6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006ece:	4a2e      	ldr	r2, [pc, #184]	@ (8006f88 <xTaskIncrementTick+0x15c>)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006ed4:	e02e      	b.n	8006f34 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	3304      	adds	r3, #4
 8006eda:	4618      	mov	r0, r3
 8006edc:	f7fe fc77 	bl	80057ce <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d004      	beq.n	8006ef2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	3318      	adds	r3, #24
 8006eec:	4618      	mov	r0, r3
 8006eee:	f7fe fc6e 	bl	80057ce <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	409a      	lsls	r2, r3
 8006efa:	4b24      	ldr	r3, [pc, #144]	@ (8006f8c <xTaskIncrementTick+0x160>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4313      	orrs	r3, r2
 8006f00:	4a22      	ldr	r2, [pc, #136]	@ (8006f8c <xTaskIncrementTick+0x160>)
 8006f02:	6013      	str	r3, [r2, #0]
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f08:	4613      	mov	r3, r2
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	4413      	add	r3, r2
 8006f0e:	009b      	lsls	r3, r3, #2
 8006f10:	4a1f      	ldr	r2, [pc, #124]	@ (8006f90 <xTaskIncrementTick+0x164>)
 8006f12:	441a      	add	r2, r3
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	3304      	adds	r3, #4
 8006f18:	4619      	mov	r1, r3
 8006f1a:	4610      	mov	r0, r2
 8006f1c:	f7fe fbfa 	bl	8005714 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f24:	4b1b      	ldr	r3, [pc, #108]	@ (8006f94 <xTaskIncrementTick+0x168>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d3b9      	bcc.n	8006ea2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f32:	e7b6      	b.n	8006ea2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006f34:	4b17      	ldr	r3, [pc, #92]	@ (8006f94 <xTaskIncrementTick+0x168>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f3a:	4915      	ldr	r1, [pc, #84]	@ (8006f90 <xTaskIncrementTick+0x164>)
 8006f3c:	4613      	mov	r3, r2
 8006f3e:	009b      	lsls	r3, r3, #2
 8006f40:	4413      	add	r3, r2
 8006f42:	009b      	lsls	r3, r3, #2
 8006f44:	440b      	add	r3, r1
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d901      	bls.n	8006f50 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006f50:	4b11      	ldr	r3, [pc, #68]	@ (8006f98 <xTaskIncrementTick+0x16c>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d007      	beq.n	8006f68 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	617b      	str	r3, [r7, #20]
 8006f5c:	e004      	b.n	8006f68 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006f5e:	4b0f      	ldr	r3, [pc, #60]	@ (8006f9c <xTaskIncrementTick+0x170>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	3301      	adds	r3, #1
 8006f64:	4a0d      	ldr	r2, [pc, #52]	@ (8006f9c <xTaskIncrementTick+0x170>)
 8006f66:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006f68:	697b      	ldr	r3, [r7, #20]
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3718      	adds	r7, #24
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}
 8006f72:	bf00      	nop
 8006f74:	20005284 	.word	0x20005284
 8006f78:	20005260 	.word	0x20005260
 8006f7c:	20005214 	.word	0x20005214
 8006f80:	20005218 	.word	0x20005218
 8006f84:	20005274 	.word	0x20005274
 8006f88:	2000527c 	.word	0x2000527c
 8006f8c:	20005264 	.word	0x20005264
 8006f90:	20005160 	.word	0x20005160
 8006f94:	2000515c 	.word	0x2000515c
 8006f98:	20005270 	.word	0x20005270
 8006f9c:	2000526c 	.word	0x2000526c

08006fa0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b087      	sub	sp, #28
 8006fa4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006fa6:	4b2a      	ldr	r3, [pc, #168]	@ (8007050 <vTaskSwitchContext+0xb0>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d003      	beq.n	8006fb6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006fae:	4b29      	ldr	r3, [pc, #164]	@ (8007054 <vTaskSwitchContext+0xb4>)
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006fb4:	e045      	b.n	8007042 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8006fb6:	4b27      	ldr	r3, [pc, #156]	@ (8007054 <vTaskSwitchContext+0xb4>)
 8006fb8:	2200      	movs	r2, #0
 8006fba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fbc:	4b26      	ldr	r3, [pc, #152]	@ (8007058 <vTaskSwitchContext+0xb8>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	fab3 f383 	clz	r3, r3
 8006fc8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006fca:	7afb      	ldrb	r3, [r7, #11]
 8006fcc:	f1c3 031f 	rsb	r3, r3, #31
 8006fd0:	617b      	str	r3, [r7, #20]
 8006fd2:	4922      	ldr	r1, [pc, #136]	@ (800705c <vTaskSwitchContext+0xbc>)
 8006fd4:	697a      	ldr	r2, [r7, #20]
 8006fd6:	4613      	mov	r3, r2
 8006fd8:	009b      	lsls	r3, r3, #2
 8006fda:	4413      	add	r3, r2
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	440b      	add	r3, r1
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d10b      	bne.n	8006ffe <vTaskSwitchContext+0x5e>
	__asm volatile
 8006fe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fea:	f383 8811 	msr	BASEPRI, r3
 8006fee:	f3bf 8f6f 	isb	sy
 8006ff2:	f3bf 8f4f 	dsb	sy
 8006ff6:	607b      	str	r3, [r7, #4]
}
 8006ff8:	bf00      	nop
 8006ffa:	bf00      	nop
 8006ffc:	e7fd      	b.n	8006ffa <vTaskSwitchContext+0x5a>
 8006ffe:	697a      	ldr	r2, [r7, #20]
 8007000:	4613      	mov	r3, r2
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	4413      	add	r3, r2
 8007006:	009b      	lsls	r3, r3, #2
 8007008:	4a14      	ldr	r2, [pc, #80]	@ (800705c <vTaskSwitchContext+0xbc>)
 800700a:	4413      	add	r3, r2
 800700c:	613b      	str	r3, [r7, #16]
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	685a      	ldr	r2, [r3, #4]
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	605a      	str	r2, [r3, #4]
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	685a      	ldr	r2, [r3, #4]
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	3308      	adds	r3, #8
 8007020:	429a      	cmp	r2, r3
 8007022:	d104      	bne.n	800702e <vTaskSwitchContext+0x8e>
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	685a      	ldr	r2, [r3, #4]
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	605a      	str	r2, [r3, #4]
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	4a0a      	ldr	r2, [pc, #40]	@ (8007060 <vTaskSwitchContext+0xc0>)
 8007036:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007038:	4b09      	ldr	r3, [pc, #36]	@ (8007060 <vTaskSwitchContext+0xc0>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	334c      	adds	r3, #76	@ 0x4c
 800703e:	4a09      	ldr	r2, [pc, #36]	@ (8007064 <vTaskSwitchContext+0xc4>)
 8007040:	6013      	str	r3, [r2, #0]
}
 8007042:	bf00      	nop
 8007044:	371c      	adds	r7, #28
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr
 800704e:	bf00      	nop
 8007050:	20005284 	.word	0x20005284
 8007054:	20005270 	.word	0x20005270
 8007058:	20005264 	.word	0x20005264
 800705c:	20005160 	.word	0x20005160
 8007060:	2000515c 	.word	0x2000515c
 8007064:	20000040 	.word	0x20000040

08007068 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b084      	sub	sp, #16
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d10b      	bne.n	8007090 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800707c:	f383 8811 	msr	BASEPRI, r3
 8007080:	f3bf 8f6f 	isb	sy
 8007084:	f3bf 8f4f 	dsb	sy
 8007088:	60fb      	str	r3, [r7, #12]
}
 800708a:	bf00      	nop
 800708c:	bf00      	nop
 800708e:	e7fd      	b.n	800708c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007090:	4b07      	ldr	r3, [pc, #28]	@ (80070b0 <vTaskPlaceOnEventList+0x48>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	3318      	adds	r3, #24
 8007096:	4619      	mov	r1, r3
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f7fe fb5f 	bl	800575c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800709e:	2101      	movs	r1, #1
 80070a0:	6838      	ldr	r0, [r7, #0]
 80070a2:	f000 fb8d 	bl	80077c0 <prvAddCurrentTaskToDelayedList>
}
 80070a6:	bf00      	nop
 80070a8:	3710      	adds	r7, #16
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}
 80070ae:	bf00      	nop
 80070b0:	2000515c 	.word	0x2000515c

080070b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b086      	sub	sp, #24
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	68db      	ldr	r3, [r3, #12]
 80070c0:	68db      	ldr	r3, [r3, #12]
 80070c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d10b      	bne.n	80070e2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80070ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070ce:	f383 8811 	msr	BASEPRI, r3
 80070d2:	f3bf 8f6f 	isb	sy
 80070d6:	f3bf 8f4f 	dsb	sy
 80070da:	60fb      	str	r3, [r7, #12]
}
 80070dc:	bf00      	nop
 80070de:	bf00      	nop
 80070e0:	e7fd      	b.n	80070de <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	3318      	adds	r3, #24
 80070e6:	4618      	mov	r0, r3
 80070e8:	f7fe fb71 	bl	80057ce <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070ec:	4b1d      	ldr	r3, [pc, #116]	@ (8007164 <xTaskRemoveFromEventList+0xb0>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d11c      	bne.n	800712e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	3304      	adds	r3, #4
 80070f8:	4618      	mov	r0, r3
 80070fa:	f7fe fb68 	bl	80057ce <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007102:	2201      	movs	r2, #1
 8007104:	409a      	lsls	r2, r3
 8007106:	4b18      	ldr	r3, [pc, #96]	@ (8007168 <xTaskRemoveFromEventList+0xb4>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4313      	orrs	r3, r2
 800710c:	4a16      	ldr	r2, [pc, #88]	@ (8007168 <xTaskRemoveFromEventList+0xb4>)
 800710e:	6013      	str	r3, [r2, #0]
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007114:	4613      	mov	r3, r2
 8007116:	009b      	lsls	r3, r3, #2
 8007118:	4413      	add	r3, r2
 800711a:	009b      	lsls	r3, r3, #2
 800711c:	4a13      	ldr	r2, [pc, #76]	@ (800716c <xTaskRemoveFromEventList+0xb8>)
 800711e:	441a      	add	r2, r3
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	3304      	adds	r3, #4
 8007124:	4619      	mov	r1, r3
 8007126:	4610      	mov	r0, r2
 8007128:	f7fe faf4 	bl	8005714 <vListInsertEnd>
 800712c:	e005      	b.n	800713a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	3318      	adds	r3, #24
 8007132:	4619      	mov	r1, r3
 8007134:	480e      	ldr	r0, [pc, #56]	@ (8007170 <xTaskRemoveFromEventList+0xbc>)
 8007136:	f7fe faed 	bl	8005714 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800713e:	4b0d      	ldr	r3, [pc, #52]	@ (8007174 <xTaskRemoveFromEventList+0xc0>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007144:	429a      	cmp	r2, r3
 8007146:	d905      	bls.n	8007154 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007148:	2301      	movs	r3, #1
 800714a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800714c:	4b0a      	ldr	r3, [pc, #40]	@ (8007178 <xTaskRemoveFromEventList+0xc4>)
 800714e:	2201      	movs	r2, #1
 8007150:	601a      	str	r2, [r3, #0]
 8007152:	e001      	b.n	8007158 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007154:	2300      	movs	r3, #0
 8007156:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007158:	697b      	ldr	r3, [r7, #20]
}
 800715a:	4618      	mov	r0, r3
 800715c:	3718      	adds	r7, #24
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}
 8007162:	bf00      	nop
 8007164:	20005284 	.word	0x20005284
 8007168:	20005264 	.word	0x20005264
 800716c:	20005160 	.word	0x20005160
 8007170:	2000521c 	.word	0x2000521c
 8007174:	2000515c 	.word	0x2000515c
 8007178:	20005270 	.word	0x20005270

0800717c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800717c:	b480      	push	{r7}
 800717e:	b083      	sub	sp, #12
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007184:	4b06      	ldr	r3, [pc, #24]	@ (80071a0 <vTaskInternalSetTimeOutState+0x24>)
 8007186:	681a      	ldr	r2, [r3, #0]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800718c:	4b05      	ldr	r3, [pc, #20]	@ (80071a4 <vTaskInternalSetTimeOutState+0x28>)
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	605a      	str	r2, [r3, #4]
}
 8007194:	bf00      	nop
 8007196:	370c      	adds	r7, #12
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr
 80071a0:	20005274 	.word	0x20005274
 80071a4:	20005260 	.word	0x20005260

080071a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b088      	sub	sp, #32
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
 80071b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d10b      	bne.n	80071d0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80071b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071bc:	f383 8811 	msr	BASEPRI, r3
 80071c0:	f3bf 8f6f 	isb	sy
 80071c4:	f3bf 8f4f 	dsb	sy
 80071c8:	613b      	str	r3, [r7, #16]
}
 80071ca:	bf00      	nop
 80071cc:	bf00      	nop
 80071ce:	e7fd      	b.n	80071cc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d10b      	bne.n	80071ee <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80071d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071da:	f383 8811 	msr	BASEPRI, r3
 80071de:	f3bf 8f6f 	isb	sy
 80071e2:	f3bf 8f4f 	dsb	sy
 80071e6:	60fb      	str	r3, [r7, #12]
}
 80071e8:	bf00      	nop
 80071ea:	bf00      	nop
 80071ec:	e7fd      	b.n	80071ea <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80071ee:	f000 fc7b 	bl	8007ae8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80071f2:	4b1d      	ldr	r3, [pc, #116]	@ (8007268 <xTaskCheckForTimeOut+0xc0>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	69ba      	ldr	r2, [r7, #24]
 80071fe:	1ad3      	subs	r3, r2, r3
 8007200:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800720a:	d102      	bne.n	8007212 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800720c:	2300      	movs	r3, #0
 800720e:	61fb      	str	r3, [r7, #28]
 8007210:	e023      	b.n	800725a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	4b15      	ldr	r3, [pc, #84]	@ (800726c <xTaskCheckForTimeOut+0xc4>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	429a      	cmp	r2, r3
 800721c:	d007      	beq.n	800722e <xTaskCheckForTimeOut+0x86>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	69ba      	ldr	r2, [r7, #24]
 8007224:	429a      	cmp	r2, r3
 8007226:	d302      	bcc.n	800722e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007228:	2301      	movs	r3, #1
 800722a:	61fb      	str	r3, [r7, #28]
 800722c:	e015      	b.n	800725a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	697a      	ldr	r2, [r7, #20]
 8007234:	429a      	cmp	r2, r3
 8007236:	d20b      	bcs.n	8007250 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	1ad2      	subs	r2, r2, r3
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f7ff ff99 	bl	800717c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800724a:	2300      	movs	r3, #0
 800724c:	61fb      	str	r3, [r7, #28]
 800724e:	e004      	b.n	800725a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	2200      	movs	r2, #0
 8007254:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007256:	2301      	movs	r3, #1
 8007258:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800725a:	f000 fc77 	bl	8007b4c <vPortExitCritical>

	return xReturn;
 800725e:	69fb      	ldr	r3, [r7, #28]
}
 8007260:	4618      	mov	r0, r3
 8007262:	3720      	adds	r7, #32
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}
 8007268:	20005260 	.word	0x20005260
 800726c:	20005274 	.word	0x20005274

08007270 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007270:	b480      	push	{r7}
 8007272:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007274:	4b03      	ldr	r3, [pc, #12]	@ (8007284 <vTaskMissedYield+0x14>)
 8007276:	2201      	movs	r2, #1
 8007278:	601a      	str	r2, [r3, #0]
}
 800727a:	bf00      	nop
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr
 8007284:	20005270 	.word	0x20005270

08007288 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b082      	sub	sp, #8
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007290:	f000 f852 	bl	8007338 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007294:	4b06      	ldr	r3, [pc, #24]	@ (80072b0 <prvIdleTask+0x28>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	2b01      	cmp	r3, #1
 800729a:	d9f9      	bls.n	8007290 <prvIdleTask+0x8>
			{
				taskYIELD();
 800729c:	4b05      	ldr	r3, [pc, #20]	@ (80072b4 <prvIdleTask+0x2c>)
 800729e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072a2:	601a      	str	r2, [r3, #0]
 80072a4:	f3bf 8f4f 	dsb	sy
 80072a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80072ac:	e7f0      	b.n	8007290 <prvIdleTask+0x8>
 80072ae:	bf00      	nop
 80072b0:	20005160 	.word	0x20005160
 80072b4:	e000ed04 	.word	0xe000ed04

080072b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b082      	sub	sp, #8
 80072bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80072be:	2300      	movs	r3, #0
 80072c0:	607b      	str	r3, [r7, #4]
 80072c2:	e00c      	b.n	80072de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80072c4:	687a      	ldr	r2, [r7, #4]
 80072c6:	4613      	mov	r3, r2
 80072c8:	009b      	lsls	r3, r3, #2
 80072ca:	4413      	add	r3, r2
 80072cc:	009b      	lsls	r3, r3, #2
 80072ce:	4a12      	ldr	r2, [pc, #72]	@ (8007318 <prvInitialiseTaskLists+0x60>)
 80072d0:	4413      	add	r3, r2
 80072d2:	4618      	mov	r0, r3
 80072d4:	f7fe f9f1 	bl	80056ba <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	3301      	adds	r3, #1
 80072dc:	607b      	str	r3, [r7, #4]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2b06      	cmp	r3, #6
 80072e2:	d9ef      	bls.n	80072c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80072e4:	480d      	ldr	r0, [pc, #52]	@ (800731c <prvInitialiseTaskLists+0x64>)
 80072e6:	f7fe f9e8 	bl	80056ba <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80072ea:	480d      	ldr	r0, [pc, #52]	@ (8007320 <prvInitialiseTaskLists+0x68>)
 80072ec:	f7fe f9e5 	bl	80056ba <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80072f0:	480c      	ldr	r0, [pc, #48]	@ (8007324 <prvInitialiseTaskLists+0x6c>)
 80072f2:	f7fe f9e2 	bl	80056ba <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80072f6:	480c      	ldr	r0, [pc, #48]	@ (8007328 <prvInitialiseTaskLists+0x70>)
 80072f8:	f7fe f9df 	bl	80056ba <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80072fc:	480b      	ldr	r0, [pc, #44]	@ (800732c <prvInitialiseTaskLists+0x74>)
 80072fe:	f7fe f9dc 	bl	80056ba <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007302:	4b0b      	ldr	r3, [pc, #44]	@ (8007330 <prvInitialiseTaskLists+0x78>)
 8007304:	4a05      	ldr	r2, [pc, #20]	@ (800731c <prvInitialiseTaskLists+0x64>)
 8007306:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007308:	4b0a      	ldr	r3, [pc, #40]	@ (8007334 <prvInitialiseTaskLists+0x7c>)
 800730a:	4a05      	ldr	r2, [pc, #20]	@ (8007320 <prvInitialiseTaskLists+0x68>)
 800730c:	601a      	str	r2, [r3, #0]
}
 800730e:	bf00      	nop
 8007310:	3708      	adds	r7, #8
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
 8007316:	bf00      	nop
 8007318:	20005160 	.word	0x20005160
 800731c:	200051ec 	.word	0x200051ec
 8007320:	20005200 	.word	0x20005200
 8007324:	2000521c 	.word	0x2000521c
 8007328:	20005230 	.word	0x20005230
 800732c:	20005248 	.word	0x20005248
 8007330:	20005214 	.word	0x20005214
 8007334:	20005218 	.word	0x20005218

08007338 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b082      	sub	sp, #8
 800733c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800733e:	e019      	b.n	8007374 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007340:	f000 fbd2 	bl	8007ae8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007344:	4b10      	ldr	r3, [pc, #64]	@ (8007388 <prvCheckTasksWaitingTermination+0x50>)
 8007346:	68db      	ldr	r3, [r3, #12]
 8007348:	68db      	ldr	r3, [r3, #12]
 800734a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	3304      	adds	r3, #4
 8007350:	4618      	mov	r0, r3
 8007352:	f7fe fa3c 	bl	80057ce <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007356:	4b0d      	ldr	r3, [pc, #52]	@ (800738c <prvCheckTasksWaitingTermination+0x54>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	3b01      	subs	r3, #1
 800735c:	4a0b      	ldr	r2, [pc, #44]	@ (800738c <prvCheckTasksWaitingTermination+0x54>)
 800735e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007360:	4b0b      	ldr	r3, [pc, #44]	@ (8007390 <prvCheckTasksWaitingTermination+0x58>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	3b01      	subs	r3, #1
 8007366:	4a0a      	ldr	r2, [pc, #40]	@ (8007390 <prvCheckTasksWaitingTermination+0x58>)
 8007368:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800736a:	f000 fbef 	bl	8007b4c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f000 f810 	bl	8007394 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007374:	4b06      	ldr	r3, [pc, #24]	@ (8007390 <prvCheckTasksWaitingTermination+0x58>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d1e1      	bne.n	8007340 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800737c:	bf00      	nop
 800737e:	bf00      	nop
 8007380:	3708      	adds	r7, #8
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
 8007386:	bf00      	nop
 8007388:	20005230 	.word	0x20005230
 800738c:	2000525c 	.word	0x2000525c
 8007390:	20005244 	.word	0x20005244

08007394 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	334c      	adds	r3, #76	@ 0x4c
 80073a0:	4618      	mov	r0, r3
 80073a2:	f011 fe1d 	bl	8018fe0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d108      	bne.n	80073c2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073b4:	4618      	mov	r0, r3
 80073b6:	f000 fd87 	bl	8007ec8 <vPortFree>
				vPortFree( pxTCB );
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 fd84 	bl	8007ec8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80073c0:	e019      	b.n	80073f6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d103      	bne.n	80073d4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f000 fd7b 	bl	8007ec8 <vPortFree>
	}
 80073d2:	e010      	b.n	80073f6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80073da:	2b02      	cmp	r3, #2
 80073dc:	d00b      	beq.n	80073f6 <prvDeleteTCB+0x62>
	__asm volatile
 80073de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073e2:	f383 8811 	msr	BASEPRI, r3
 80073e6:	f3bf 8f6f 	isb	sy
 80073ea:	f3bf 8f4f 	dsb	sy
 80073ee:	60fb      	str	r3, [r7, #12]
}
 80073f0:	bf00      	nop
 80073f2:	bf00      	nop
 80073f4:	e7fd      	b.n	80073f2 <prvDeleteTCB+0x5e>
	}
 80073f6:	bf00      	nop
 80073f8:	3710      	adds	r7, #16
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
	...

08007400 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007400:	b480      	push	{r7}
 8007402:	b083      	sub	sp, #12
 8007404:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007406:	4b0c      	ldr	r3, [pc, #48]	@ (8007438 <prvResetNextTaskUnblockTime+0x38>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d104      	bne.n	800741a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007410:	4b0a      	ldr	r3, [pc, #40]	@ (800743c <prvResetNextTaskUnblockTime+0x3c>)
 8007412:	f04f 32ff 	mov.w	r2, #4294967295
 8007416:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007418:	e008      	b.n	800742c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800741a:	4b07      	ldr	r3, [pc, #28]	@ (8007438 <prvResetNextTaskUnblockTime+0x38>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	68db      	ldr	r3, [r3, #12]
 8007420:	68db      	ldr	r3, [r3, #12]
 8007422:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	4a04      	ldr	r2, [pc, #16]	@ (800743c <prvResetNextTaskUnblockTime+0x3c>)
 800742a:	6013      	str	r3, [r2, #0]
}
 800742c:	bf00      	nop
 800742e:	370c      	adds	r7, #12
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr
 8007438:	20005214 	.word	0x20005214
 800743c:	2000527c 	.word	0x2000527c

08007440 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007440:	b480      	push	{r7}
 8007442:	b083      	sub	sp, #12
 8007444:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007446:	4b0b      	ldr	r3, [pc, #44]	@ (8007474 <xTaskGetSchedulerState+0x34>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d102      	bne.n	8007454 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800744e:	2301      	movs	r3, #1
 8007450:	607b      	str	r3, [r7, #4]
 8007452:	e008      	b.n	8007466 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007454:	4b08      	ldr	r3, [pc, #32]	@ (8007478 <xTaskGetSchedulerState+0x38>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d102      	bne.n	8007462 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800745c:	2302      	movs	r3, #2
 800745e:	607b      	str	r3, [r7, #4]
 8007460:	e001      	b.n	8007466 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007462:	2300      	movs	r3, #0
 8007464:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007466:	687b      	ldr	r3, [r7, #4]
	}
 8007468:	4618      	mov	r0, r3
 800746a:	370c      	adds	r7, #12
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr
 8007474:	20005268 	.word	0x20005268
 8007478:	20005284 	.word	0x20005284

0800747c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800747c:	b580      	push	{r7, lr}
 800747e:	b084      	sub	sp, #16
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007488:	2300      	movs	r3, #0
 800748a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d05e      	beq.n	8007550 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007496:	4b31      	ldr	r3, [pc, #196]	@ (800755c <xTaskPriorityInherit+0xe0>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800749c:	429a      	cmp	r2, r3
 800749e:	d24e      	bcs.n	800753e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	699b      	ldr	r3, [r3, #24]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	db06      	blt.n	80074b6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074a8:	4b2c      	ldr	r3, [pc, #176]	@ (800755c <xTaskPriorityInherit+0xe0>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074ae:	f1c3 0207 	rsb	r2, r3, #7
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	6959      	ldr	r1, [r3, #20]
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074be:	4613      	mov	r3, r2
 80074c0:	009b      	lsls	r3, r3, #2
 80074c2:	4413      	add	r3, r2
 80074c4:	009b      	lsls	r3, r3, #2
 80074c6:	4a26      	ldr	r2, [pc, #152]	@ (8007560 <xTaskPriorityInherit+0xe4>)
 80074c8:	4413      	add	r3, r2
 80074ca:	4299      	cmp	r1, r3
 80074cc:	d12f      	bne.n	800752e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	3304      	adds	r3, #4
 80074d2:	4618      	mov	r0, r3
 80074d4:	f7fe f97b 	bl	80057ce <uxListRemove>
 80074d8:	4603      	mov	r3, r0
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d10a      	bne.n	80074f4 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074e2:	2201      	movs	r2, #1
 80074e4:	fa02 f303 	lsl.w	r3, r2, r3
 80074e8:	43da      	mvns	r2, r3
 80074ea:	4b1e      	ldr	r3, [pc, #120]	@ (8007564 <xTaskPriorityInherit+0xe8>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4013      	ands	r3, r2
 80074f0:	4a1c      	ldr	r2, [pc, #112]	@ (8007564 <xTaskPriorityInherit+0xe8>)
 80074f2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80074f4:	4b19      	ldr	r3, [pc, #100]	@ (800755c <xTaskPriorityInherit+0xe0>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007502:	2201      	movs	r2, #1
 8007504:	409a      	lsls	r2, r3
 8007506:	4b17      	ldr	r3, [pc, #92]	@ (8007564 <xTaskPriorityInherit+0xe8>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4313      	orrs	r3, r2
 800750c:	4a15      	ldr	r2, [pc, #84]	@ (8007564 <xTaskPriorityInherit+0xe8>)
 800750e:	6013      	str	r3, [r2, #0]
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007514:	4613      	mov	r3, r2
 8007516:	009b      	lsls	r3, r3, #2
 8007518:	4413      	add	r3, r2
 800751a:	009b      	lsls	r3, r3, #2
 800751c:	4a10      	ldr	r2, [pc, #64]	@ (8007560 <xTaskPriorityInherit+0xe4>)
 800751e:	441a      	add	r2, r3
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	3304      	adds	r3, #4
 8007524:	4619      	mov	r1, r3
 8007526:	4610      	mov	r0, r2
 8007528:	f7fe f8f4 	bl	8005714 <vListInsertEnd>
 800752c:	e004      	b.n	8007538 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800752e:	4b0b      	ldr	r3, [pc, #44]	@ (800755c <xTaskPriorityInherit+0xe0>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007538:	2301      	movs	r3, #1
 800753a:	60fb      	str	r3, [r7, #12]
 800753c:	e008      	b.n	8007550 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007542:	4b06      	ldr	r3, [pc, #24]	@ (800755c <xTaskPriorityInherit+0xe0>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007548:	429a      	cmp	r2, r3
 800754a:	d201      	bcs.n	8007550 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800754c:	2301      	movs	r3, #1
 800754e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007550:	68fb      	ldr	r3, [r7, #12]
	}
 8007552:	4618      	mov	r0, r3
 8007554:	3710      	adds	r7, #16
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}
 800755a:	bf00      	nop
 800755c:	2000515c 	.word	0x2000515c
 8007560:	20005160 	.word	0x20005160
 8007564:	20005264 	.word	0x20005264

08007568 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007568:	b580      	push	{r7, lr}
 800756a:	b086      	sub	sp, #24
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007574:	2300      	movs	r3, #0
 8007576:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d070      	beq.n	8007660 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800757e:	4b3b      	ldr	r3, [pc, #236]	@ (800766c <xTaskPriorityDisinherit+0x104>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	693a      	ldr	r2, [r7, #16]
 8007584:	429a      	cmp	r2, r3
 8007586:	d00b      	beq.n	80075a0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007588:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800758c:	f383 8811 	msr	BASEPRI, r3
 8007590:	f3bf 8f6f 	isb	sy
 8007594:	f3bf 8f4f 	dsb	sy
 8007598:	60fb      	str	r3, [r7, #12]
}
 800759a:	bf00      	nop
 800759c:	bf00      	nop
 800759e:	e7fd      	b.n	800759c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d10b      	bne.n	80075c0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80075a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075ac:	f383 8811 	msr	BASEPRI, r3
 80075b0:	f3bf 8f6f 	isb	sy
 80075b4:	f3bf 8f4f 	dsb	sy
 80075b8:	60bb      	str	r3, [r7, #8]
}
 80075ba:	bf00      	nop
 80075bc:	bf00      	nop
 80075be:	e7fd      	b.n	80075bc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075c4:	1e5a      	subs	r2, r3, #1
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075d2:	429a      	cmp	r2, r3
 80075d4:	d044      	beq.n	8007660 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d140      	bne.n	8007660 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	3304      	adds	r3, #4
 80075e2:	4618      	mov	r0, r3
 80075e4:	f7fe f8f3 	bl	80057ce <uxListRemove>
 80075e8:	4603      	mov	r3, r0
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d115      	bne.n	800761a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075f2:	491f      	ldr	r1, [pc, #124]	@ (8007670 <xTaskPriorityDisinherit+0x108>)
 80075f4:	4613      	mov	r3, r2
 80075f6:	009b      	lsls	r3, r3, #2
 80075f8:	4413      	add	r3, r2
 80075fa:	009b      	lsls	r3, r3, #2
 80075fc:	440b      	add	r3, r1
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d10a      	bne.n	800761a <xTaskPriorityDisinherit+0xb2>
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007608:	2201      	movs	r2, #1
 800760a:	fa02 f303 	lsl.w	r3, r2, r3
 800760e:	43da      	mvns	r2, r3
 8007610:	4b18      	ldr	r3, [pc, #96]	@ (8007674 <xTaskPriorityDisinherit+0x10c>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4013      	ands	r3, r2
 8007616:	4a17      	ldr	r2, [pc, #92]	@ (8007674 <xTaskPriorityDisinherit+0x10c>)
 8007618:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007626:	f1c3 0207 	rsb	r2, r3, #7
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007632:	2201      	movs	r2, #1
 8007634:	409a      	lsls	r2, r3
 8007636:	4b0f      	ldr	r3, [pc, #60]	@ (8007674 <xTaskPriorityDisinherit+0x10c>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4313      	orrs	r3, r2
 800763c:	4a0d      	ldr	r2, [pc, #52]	@ (8007674 <xTaskPriorityDisinherit+0x10c>)
 800763e:	6013      	str	r3, [r2, #0]
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007644:	4613      	mov	r3, r2
 8007646:	009b      	lsls	r3, r3, #2
 8007648:	4413      	add	r3, r2
 800764a:	009b      	lsls	r3, r3, #2
 800764c:	4a08      	ldr	r2, [pc, #32]	@ (8007670 <xTaskPriorityDisinherit+0x108>)
 800764e:	441a      	add	r2, r3
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	3304      	adds	r3, #4
 8007654:	4619      	mov	r1, r3
 8007656:	4610      	mov	r0, r2
 8007658:	f7fe f85c 	bl	8005714 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800765c:	2301      	movs	r3, #1
 800765e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007660:	697b      	ldr	r3, [r7, #20]
	}
 8007662:	4618      	mov	r0, r3
 8007664:	3718      	adds	r7, #24
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}
 800766a:	bf00      	nop
 800766c:	2000515c 	.word	0x2000515c
 8007670:	20005160 	.word	0x20005160
 8007674:	20005264 	.word	0x20005264

08007678 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007678:	b580      	push	{r7, lr}
 800767a:	b088      	sub	sp, #32
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007686:	2301      	movs	r3, #1
 8007688:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d079      	beq.n	8007784 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007690:	69bb      	ldr	r3, [r7, #24]
 8007692:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007694:	2b00      	cmp	r3, #0
 8007696:	d10b      	bne.n	80076b0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8007698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800769c:	f383 8811 	msr	BASEPRI, r3
 80076a0:	f3bf 8f6f 	isb	sy
 80076a4:	f3bf 8f4f 	dsb	sy
 80076a8:	60fb      	str	r3, [r7, #12]
}
 80076aa:	bf00      	nop
 80076ac:	bf00      	nop
 80076ae:	e7fd      	b.n	80076ac <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80076b0:	69bb      	ldr	r3, [r7, #24]
 80076b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076b4:	683a      	ldr	r2, [r7, #0]
 80076b6:	429a      	cmp	r2, r3
 80076b8:	d902      	bls.n	80076c0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	61fb      	str	r3, [r7, #28]
 80076be:	e002      	b.n	80076c6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80076c0:	69bb      	ldr	r3, [r7, #24]
 80076c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076c4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80076c6:	69bb      	ldr	r3, [r7, #24]
 80076c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076ca:	69fa      	ldr	r2, [r7, #28]
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d059      	beq.n	8007784 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80076d0:	69bb      	ldr	r3, [r7, #24]
 80076d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076d4:	697a      	ldr	r2, [r7, #20]
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d154      	bne.n	8007784 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80076da:	4b2c      	ldr	r3, [pc, #176]	@ (800778c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	69ba      	ldr	r2, [r7, #24]
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d10b      	bne.n	80076fc <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80076e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076e8:	f383 8811 	msr	BASEPRI, r3
 80076ec:	f3bf 8f6f 	isb	sy
 80076f0:	f3bf 8f4f 	dsb	sy
 80076f4:	60bb      	str	r3, [r7, #8]
}
 80076f6:	bf00      	nop
 80076f8:	bf00      	nop
 80076fa:	e7fd      	b.n	80076f8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80076fc:	69bb      	ldr	r3, [r7, #24]
 80076fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007700:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007702:	69bb      	ldr	r3, [r7, #24]
 8007704:	69fa      	ldr	r2, [r7, #28]
 8007706:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007708:	69bb      	ldr	r3, [r7, #24]
 800770a:	699b      	ldr	r3, [r3, #24]
 800770c:	2b00      	cmp	r3, #0
 800770e:	db04      	blt.n	800771a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007710:	69fb      	ldr	r3, [r7, #28]
 8007712:	f1c3 0207 	rsb	r2, r3, #7
 8007716:	69bb      	ldr	r3, [r7, #24]
 8007718:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800771a:	69bb      	ldr	r3, [r7, #24]
 800771c:	6959      	ldr	r1, [r3, #20]
 800771e:	693a      	ldr	r2, [r7, #16]
 8007720:	4613      	mov	r3, r2
 8007722:	009b      	lsls	r3, r3, #2
 8007724:	4413      	add	r3, r2
 8007726:	009b      	lsls	r3, r3, #2
 8007728:	4a19      	ldr	r2, [pc, #100]	@ (8007790 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800772a:	4413      	add	r3, r2
 800772c:	4299      	cmp	r1, r3
 800772e:	d129      	bne.n	8007784 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007730:	69bb      	ldr	r3, [r7, #24]
 8007732:	3304      	adds	r3, #4
 8007734:	4618      	mov	r0, r3
 8007736:	f7fe f84a 	bl	80057ce <uxListRemove>
 800773a:	4603      	mov	r3, r0
 800773c:	2b00      	cmp	r3, #0
 800773e:	d10a      	bne.n	8007756 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007740:	69bb      	ldr	r3, [r7, #24]
 8007742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007744:	2201      	movs	r2, #1
 8007746:	fa02 f303 	lsl.w	r3, r2, r3
 800774a:	43da      	mvns	r2, r3
 800774c:	4b11      	ldr	r3, [pc, #68]	@ (8007794 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4013      	ands	r3, r2
 8007752:	4a10      	ldr	r2, [pc, #64]	@ (8007794 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8007754:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007756:	69bb      	ldr	r3, [r7, #24]
 8007758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800775a:	2201      	movs	r2, #1
 800775c:	409a      	lsls	r2, r3
 800775e:	4b0d      	ldr	r3, [pc, #52]	@ (8007794 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4313      	orrs	r3, r2
 8007764:	4a0b      	ldr	r2, [pc, #44]	@ (8007794 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8007766:	6013      	str	r3, [r2, #0]
 8007768:	69bb      	ldr	r3, [r7, #24]
 800776a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800776c:	4613      	mov	r3, r2
 800776e:	009b      	lsls	r3, r3, #2
 8007770:	4413      	add	r3, r2
 8007772:	009b      	lsls	r3, r3, #2
 8007774:	4a06      	ldr	r2, [pc, #24]	@ (8007790 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007776:	441a      	add	r2, r3
 8007778:	69bb      	ldr	r3, [r7, #24]
 800777a:	3304      	adds	r3, #4
 800777c:	4619      	mov	r1, r3
 800777e:	4610      	mov	r0, r2
 8007780:	f7fd ffc8 	bl	8005714 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007784:	bf00      	nop
 8007786:	3720      	adds	r7, #32
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}
 800778c:	2000515c 	.word	0x2000515c
 8007790:	20005160 	.word	0x20005160
 8007794:	20005264 	.word	0x20005264

08007798 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007798:	b480      	push	{r7}
 800779a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800779c:	4b07      	ldr	r3, [pc, #28]	@ (80077bc <pvTaskIncrementMutexHeldCount+0x24>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d004      	beq.n	80077ae <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80077a4:	4b05      	ldr	r3, [pc, #20]	@ (80077bc <pvTaskIncrementMutexHeldCount+0x24>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80077aa:	3201      	adds	r2, #1
 80077ac:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 80077ae:	4b03      	ldr	r3, [pc, #12]	@ (80077bc <pvTaskIncrementMutexHeldCount+0x24>)
 80077b0:	681b      	ldr	r3, [r3, #0]
	}
 80077b2:	4618      	mov	r0, r3
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr
 80077bc:	2000515c 	.word	0x2000515c

080077c0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b084      	sub	sp, #16
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80077ca:	4b29      	ldr	r3, [pc, #164]	@ (8007870 <prvAddCurrentTaskToDelayedList+0xb0>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077d0:	4b28      	ldr	r3, [pc, #160]	@ (8007874 <prvAddCurrentTaskToDelayedList+0xb4>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	3304      	adds	r3, #4
 80077d6:	4618      	mov	r0, r3
 80077d8:	f7fd fff9 	bl	80057ce <uxListRemove>
 80077dc:	4603      	mov	r3, r0
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d10b      	bne.n	80077fa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80077e2:	4b24      	ldr	r3, [pc, #144]	@ (8007874 <prvAddCurrentTaskToDelayedList+0xb4>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077e8:	2201      	movs	r2, #1
 80077ea:	fa02 f303 	lsl.w	r3, r2, r3
 80077ee:	43da      	mvns	r2, r3
 80077f0:	4b21      	ldr	r3, [pc, #132]	@ (8007878 <prvAddCurrentTaskToDelayedList+0xb8>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4013      	ands	r3, r2
 80077f6:	4a20      	ldr	r2, [pc, #128]	@ (8007878 <prvAddCurrentTaskToDelayedList+0xb8>)
 80077f8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007800:	d10a      	bne.n	8007818 <prvAddCurrentTaskToDelayedList+0x58>
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d007      	beq.n	8007818 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007808:	4b1a      	ldr	r3, [pc, #104]	@ (8007874 <prvAddCurrentTaskToDelayedList+0xb4>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	3304      	adds	r3, #4
 800780e:	4619      	mov	r1, r3
 8007810:	481a      	ldr	r0, [pc, #104]	@ (800787c <prvAddCurrentTaskToDelayedList+0xbc>)
 8007812:	f7fd ff7f 	bl	8005714 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007816:	e026      	b.n	8007866 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007818:	68fa      	ldr	r2, [r7, #12]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	4413      	add	r3, r2
 800781e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007820:	4b14      	ldr	r3, [pc, #80]	@ (8007874 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	68ba      	ldr	r2, [r7, #8]
 8007826:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007828:	68ba      	ldr	r2, [r7, #8]
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	429a      	cmp	r2, r3
 800782e:	d209      	bcs.n	8007844 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007830:	4b13      	ldr	r3, [pc, #76]	@ (8007880 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007832:	681a      	ldr	r2, [r3, #0]
 8007834:	4b0f      	ldr	r3, [pc, #60]	@ (8007874 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	3304      	adds	r3, #4
 800783a:	4619      	mov	r1, r3
 800783c:	4610      	mov	r0, r2
 800783e:	f7fd ff8d 	bl	800575c <vListInsert>
}
 8007842:	e010      	b.n	8007866 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007844:	4b0f      	ldr	r3, [pc, #60]	@ (8007884 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007846:	681a      	ldr	r2, [r3, #0]
 8007848:	4b0a      	ldr	r3, [pc, #40]	@ (8007874 <prvAddCurrentTaskToDelayedList+0xb4>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	3304      	adds	r3, #4
 800784e:	4619      	mov	r1, r3
 8007850:	4610      	mov	r0, r2
 8007852:	f7fd ff83 	bl	800575c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007856:	4b0c      	ldr	r3, [pc, #48]	@ (8007888 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	68ba      	ldr	r2, [r7, #8]
 800785c:	429a      	cmp	r2, r3
 800785e:	d202      	bcs.n	8007866 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007860:	4a09      	ldr	r2, [pc, #36]	@ (8007888 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	6013      	str	r3, [r2, #0]
}
 8007866:	bf00      	nop
 8007868:	3710      	adds	r7, #16
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
 800786e:	bf00      	nop
 8007870:	20005260 	.word	0x20005260
 8007874:	2000515c 	.word	0x2000515c
 8007878:	20005264 	.word	0x20005264
 800787c:	20005248 	.word	0x20005248
 8007880:	20005218 	.word	0x20005218
 8007884:	20005214 	.word	0x20005214
 8007888:	2000527c 	.word	0x2000527c

0800788c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800788c:	b480      	push	{r7}
 800788e:	b085      	sub	sp, #20
 8007890:	af00      	add	r7, sp, #0
 8007892:	60f8      	str	r0, [r7, #12]
 8007894:	60b9      	str	r1, [r7, #8]
 8007896:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	3b04      	subs	r3, #4
 800789c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80078a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	3b04      	subs	r3, #4
 80078aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	f023 0201 	bic.w	r2, r3, #1
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	3b04      	subs	r3, #4
 80078ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80078bc:	4a0c      	ldr	r2, [pc, #48]	@ (80078f0 <pxPortInitialiseStack+0x64>)
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	3b14      	subs	r3, #20
 80078c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80078c8:	687a      	ldr	r2, [r7, #4]
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	3b04      	subs	r3, #4
 80078d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f06f 0202 	mvn.w	r2, #2
 80078da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	3b20      	subs	r3, #32
 80078e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80078e2:	68fb      	ldr	r3, [r7, #12]
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3714      	adds	r7, #20
 80078e8:	46bd      	mov	sp, r7
 80078ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ee:	4770      	bx	lr
 80078f0:	080078f5 	.word	0x080078f5

080078f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80078f4:	b480      	push	{r7}
 80078f6:	b085      	sub	sp, #20
 80078f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80078fa:	2300      	movs	r3, #0
 80078fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80078fe:	4b13      	ldr	r3, [pc, #76]	@ (800794c <prvTaskExitError+0x58>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007906:	d00b      	beq.n	8007920 <prvTaskExitError+0x2c>
	__asm volatile
 8007908:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800790c:	f383 8811 	msr	BASEPRI, r3
 8007910:	f3bf 8f6f 	isb	sy
 8007914:	f3bf 8f4f 	dsb	sy
 8007918:	60fb      	str	r3, [r7, #12]
}
 800791a:	bf00      	nop
 800791c:	bf00      	nop
 800791e:	e7fd      	b.n	800791c <prvTaskExitError+0x28>
	__asm volatile
 8007920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007924:	f383 8811 	msr	BASEPRI, r3
 8007928:	f3bf 8f6f 	isb	sy
 800792c:	f3bf 8f4f 	dsb	sy
 8007930:	60bb      	str	r3, [r7, #8]
}
 8007932:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007934:	bf00      	nop
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d0fc      	beq.n	8007936 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800793c:	bf00      	nop
 800793e:	bf00      	nop
 8007940:	3714      	adds	r7, #20
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr
 800794a:	bf00      	nop
 800794c:	20000020 	.word	0x20000020

08007950 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007950:	4b07      	ldr	r3, [pc, #28]	@ (8007970 <pxCurrentTCBConst2>)
 8007952:	6819      	ldr	r1, [r3, #0]
 8007954:	6808      	ldr	r0, [r1, #0]
 8007956:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800795a:	f380 8809 	msr	PSP, r0
 800795e:	f3bf 8f6f 	isb	sy
 8007962:	f04f 0000 	mov.w	r0, #0
 8007966:	f380 8811 	msr	BASEPRI, r0
 800796a:	4770      	bx	lr
 800796c:	f3af 8000 	nop.w

08007970 <pxCurrentTCBConst2>:
 8007970:	2000515c 	.word	0x2000515c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007974:	bf00      	nop
 8007976:	bf00      	nop

08007978 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007978:	4808      	ldr	r0, [pc, #32]	@ (800799c <prvPortStartFirstTask+0x24>)
 800797a:	6800      	ldr	r0, [r0, #0]
 800797c:	6800      	ldr	r0, [r0, #0]
 800797e:	f380 8808 	msr	MSP, r0
 8007982:	f04f 0000 	mov.w	r0, #0
 8007986:	f380 8814 	msr	CONTROL, r0
 800798a:	b662      	cpsie	i
 800798c:	b661      	cpsie	f
 800798e:	f3bf 8f4f 	dsb	sy
 8007992:	f3bf 8f6f 	isb	sy
 8007996:	df00      	svc	0
 8007998:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800799a:	bf00      	nop
 800799c:	e000ed08 	.word	0xe000ed08

080079a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b086      	sub	sp, #24
 80079a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80079a6:	4b47      	ldr	r3, [pc, #284]	@ (8007ac4 <xPortStartScheduler+0x124>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a47      	ldr	r2, [pc, #284]	@ (8007ac8 <xPortStartScheduler+0x128>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d10b      	bne.n	80079c8 <xPortStartScheduler+0x28>
	__asm volatile
 80079b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079b4:	f383 8811 	msr	BASEPRI, r3
 80079b8:	f3bf 8f6f 	isb	sy
 80079bc:	f3bf 8f4f 	dsb	sy
 80079c0:	613b      	str	r3, [r7, #16]
}
 80079c2:	bf00      	nop
 80079c4:	bf00      	nop
 80079c6:	e7fd      	b.n	80079c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80079c8:	4b3e      	ldr	r3, [pc, #248]	@ (8007ac4 <xPortStartScheduler+0x124>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a3f      	ldr	r2, [pc, #252]	@ (8007acc <xPortStartScheduler+0x12c>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d10b      	bne.n	80079ea <xPortStartScheduler+0x4a>
	__asm volatile
 80079d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079d6:	f383 8811 	msr	BASEPRI, r3
 80079da:	f3bf 8f6f 	isb	sy
 80079de:	f3bf 8f4f 	dsb	sy
 80079e2:	60fb      	str	r3, [r7, #12]
}
 80079e4:	bf00      	nop
 80079e6:	bf00      	nop
 80079e8:	e7fd      	b.n	80079e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80079ea:	4b39      	ldr	r3, [pc, #228]	@ (8007ad0 <xPortStartScheduler+0x130>)
 80079ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	781b      	ldrb	r3, [r3, #0]
 80079f2:	b2db      	uxtb	r3, r3
 80079f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	22ff      	movs	r2, #255	@ 0xff
 80079fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	b2db      	uxtb	r3, r3
 8007a02:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007a04:	78fb      	ldrb	r3, [r7, #3]
 8007a06:	b2db      	uxtb	r3, r3
 8007a08:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007a0c:	b2da      	uxtb	r2, r3
 8007a0e:	4b31      	ldr	r3, [pc, #196]	@ (8007ad4 <xPortStartScheduler+0x134>)
 8007a10:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007a12:	4b31      	ldr	r3, [pc, #196]	@ (8007ad8 <xPortStartScheduler+0x138>)
 8007a14:	2207      	movs	r2, #7
 8007a16:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a18:	e009      	b.n	8007a2e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8007a1a:	4b2f      	ldr	r3, [pc, #188]	@ (8007ad8 <xPortStartScheduler+0x138>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	3b01      	subs	r3, #1
 8007a20:	4a2d      	ldr	r2, [pc, #180]	@ (8007ad8 <xPortStartScheduler+0x138>)
 8007a22:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007a24:	78fb      	ldrb	r3, [r7, #3]
 8007a26:	b2db      	uxtb	r3, r3
 8007a28:	005b      	lsls	r3, r3, #1
 8007a2a:	b2db      	uxtb	r3, r3
 8007a2c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a2e:	78fb      	ldrb	r3, [r7, #3]
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a36:	2b80      	cmp	r3, #128	@ 0x80
 8007a38:	d0ef      	beq.n	8007a1a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007a3a:	4b27      	ldr	r3, [pc, #156]	@ (8007ad8 <xPortStartScheduler+0x138>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f1c3 0307 	rsb	r3, r3, #7
 8007a42:	2b04      	cmp	r3, #4
 8007a44:	d00b      	beq.n	8007a5e <xPortStartScheduler+0xbe>
	__asm volatile
 8007a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a4a:	f383 8811 	msr	BASEPRI, r3
 8007a4e:	f3bf 8f6f 	isb	sy
 8007a52:	f3bf 8f4f 	dsb	sy
 8007a56:	60bb      	str	r3, [r7, #8]
}
 8007a58:	bf00      	nop
 8007a5a:	bf00      	nop
 8007a5c:	e7fd      	b.n	8007a5a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007a5e:	4b1e      	ldr	r3, [pc, #120]	@ (8007ad8 <xPortStartScheduler+0x138>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	021b      	lsls	r3, r3, #8
 8007a64:	4a1c      	ldr	r2, [pc, #112]	@ (8007ad8 <xPortStartScheduler+0x138>)
 8007a66:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007a68:	4b1b      	ldr	r3, [pc, #108]	@ (8007ad8 <xPortStartScheduler+0x138>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007a70:	4a19      	ldr	r2, [pc, #100]	@ (8007ad8 <xPortStartScheduler+0x138>)
 8007a72:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	b2da      	uxtb	r2, r3
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007a7c:	4b17      	ldr	r3, [pc, #92]	@ (8007adc <xPortStartScheduler+0x13c>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a16      	ldr	r2, [pc, #88]	@ (8007adc <xPortStartScheduler+0x13c>)
 8007a82:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007a86:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007a88:	4b14      	ldr	r3, [pc, #80]	@ (8007adc <xPortStartScheduler+0x13c>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a13      	ldr	r2, [pc, #76]	@ (8007adc <xPortStartScheduler+0x13c>)
 8007a8e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007a92:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007a94:	f000 f8da 	bl	8007c4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007a98:	4b11      	ldr	r3, [pc, #68]	@ (8007ae0 <xPortStartScheduler+0x140>)
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007a9e:	f000 f8f9 	bl	8007c94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007aa2:	4b10      	ldr	r3, [pc, #64]	@ (8007ae4 <xPortStartScheduler+0x144>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a0f      	ldr	r2, [pc, #60]	@ (8007ae4 <xPortStartScheduler+0x144>)
 8007aa8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007aac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007aae:	f7ff ff63 	bl	8007978 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007ab2:	f7ff fa75 	bl	8006fa0 <vTaskSwitchContext>
	prvTaskExitError();
 8007ab6:	f7ff ff1d 	bl	80078f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007aba:	2300      	movs	r3, #0
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3718      	adds	r7, #24
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}
 8007ac4:	e000ed00 	.word	0xe000ed00
 8007ac8:	410fc271 	.word	0x410fc271
 8007acc:	410fc270 	.word	0x410fc270
 8007ad0:	e000e400 	.word	0xe000e400
 8007ad4:	20005288 	.word	0x20005288
 8007ad8:	2000528c 	.word	0x2000528c
 8007adc:	e000ed20 	.word	0xe000ed20
 8007ae0:	20000020 	.word	0x20000020
 8007ae4:	e000ef34 	.word	0xe000ef34

08007ae8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b083      	sub	sp, #12
 8007aec:	af00      	add	r7, sp, #0
	__asm volatile
 8007aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007af2:	f383 8811 	msr	BASEPRI, r3
 8007af6:	f3bf 8f6f 	isb	sy
 8007afa:	f3bf 8f4f 	dsb	sy
 8007afe:	607b      	str	r3, [r7, #4]
}
 8007b00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007b02:	4b10      	ldr	r3, [pc, #64]	@ (8007b44 <vPortEnterCritical+0x5c>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	3301      	adds	r3, #1
 8007b08:	4a0e      	ldr	r2, [pc, #56]	@ (8007b44 <vPortEnterCritical+0x5c>)
 8007b0a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007b0c:	4b0d      	ldr	r3, [pc, #52]	@ (8007b44 <vPortEnterCritical+0x5c>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d110      	bne.n	8007b36 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007b14:	4b0c      	ldr	r3, [pc, #48]	@ (8007b48 <vPortEnterCritical+0x60>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	b2db      	uxtb	r3, r3
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d00b      	beq.n	8007b36 <vPortEnterCritical+0x4e>
	__asm volatile
 8007b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b22:	f383 8811 	msr	BASEPRI, r3
 8007b26:	f3bf 8f6f 	isb	sy
 8007b2a:	f3bf 8f4f 	dsb	sy
 8007b2e:	603b      	str	r3, [r7, #0]
}
 8007b30:	bf00      	nop
 8007b32:	bf00      	nop
 8007b34:	e7fd      	b.n	8007b32 <vPortEnterCritical+0x4a>
	}
}
 8007b36:	bf00      	nop
 8007b38:	370c      	adds	r7, #12
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr
 8007b42:	bf00      	nop
 8007b44:	20000020 	.word	0x20000020
 8007b48:	e000ed04 	.word	0xe000ed04

08007b4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b083      	sub	sp, #12
 8007b50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007b52:	4b12      	ldr	r3, [pc, #72]	@ (8007b9c <vPortExitCritical+0x50>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d10b      	bne.n	8007b72 <vPortExitCritical+0x26>
	__asm volatile
 8007b5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b5e:	f383 8811 	msr	BASEPRI, r3
 8007b62:	f3bf 8f6f 	isb	sy
 8007b66:	f3bf 8f4f 	dsb	sy
 8007b6a:	607b      	str	r3, [r7, #4]
}
 8007b6c:	bf00      	nop
 8007b6e:	bf00      	nop
 8007b70:	e7fd      	b.n	8007b6e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007b72:	4b0a      	ldr	r3, [pc, #40]	@ (8007b9c <vPortExitCritical+0x50>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	3b01      	subs	r3, #1
 8007b78:	4a08      	ldr	r2, [pc, #32]	@ (8007b9c <vPortExitCritical+0x50>)
 8007b7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007b7c:	4b07      	ldr	r3, [pc, #28]	@ (8007b9c <vPortExitCritical+0x50>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d105      	bne.n	8007b90 <vPortExitCritical+0x44>
 8007b84:	2300      	movs	r3, #0
 8007b86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	f383 8811 	msr	BASEPRI, r3
}
 8007b8e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007b90:	bf00      	nop
 8007b92:	370c      	adds	r7, #12
 8007b94:	46bd      	mov	sp, r7
 8007b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9a:	4770      	bx	lr
 8007b9c:	20000020 	.word	0x20000020

08007ba0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007ba0:	f3ef 8009 	mrs	r0, PSP
 8007ba4:	f3bf 8f6f 	isb	sy
 8007ba8:	4b15      	ldr	r3, [pc, #84]	@ (8007c00 <pxCurrentTCBConst>)
 8007baa:	681a      	ldr	r2, [r3, #0]
 8007bac:	f01e 0f10 	tst.w	lr, #16
 8007bb0:	bf08      	it	eq
 8007bb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007bb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bba:	6010      	str	r0, [r2, #0]
 8007bbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007bc0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007bc4:	f380 8811 	msr	BASEPRI, r0
 8007bc8:	f3bf 8f4f 	dsb	sy
 8007bcc:	f3bf 8f6f 	isb	sy
 8007bd0:	f7ff f9e6 	bl	8006fa0 <vTaskSwitchContext>
 8007bd4:	f04f 0000 	mov.w	r0, #0
 8007bd8:	f380 8811 	msr	BASEPRI, r0
 8007bdc:	bc09      	pop	{r0, r3}
 8007bde:	6819      	ldr	r1, [r3, #0]
 8007be0:	6808      	ldr	r0, [r1, #0]
 8007be2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007be6:	f01e 0f10 	tst.w	lr, #16
 8007bea:	bf08      	it	eq
 8007bec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007bf0:	f380 8809 	msr	PSP, r0
 8007bf4:	f3bf 8f6f 	isb	sy
 8007bf8:	4770      	bx	lr
 8007bfa:	bf00      	nop
 8007bfc:	f3af 8000 	nop.w

08007c00 <pxCurrentTCBConst>:
 8007c00:	2000515c 	.word	0x2000515c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007c04:	bf00      	nop
 8007c06:	bf00      	nop

08007c08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b082      	sub	sp, #8
 8007c0c:	af00      	add	r7, sp, #0
	__asm volatile
 8007c0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c12:	f383 8811 	msr	BASEPRI, r3
 8007c16:	f3bf 8f6f 	isb	sy
 8007c1a:	f3bf 8f4f 	dsb	sy
 8007c1e:	607b      	str	r3, [r7, #4]
}
 8007c20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007c22:	f7ff f903 	bl	8006e2c <xTaskIncrementTick>
 8007c26:	4603      	mov	r3, r0
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d003      	beq.n	8007c34 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007c2c:	4b06      	ldr	r3, [pc, #24]	@ (8007c48 <SysTick_Handler+0x40>)
 8007c2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c32:	601a      	str	r2, [r3, #0]
 8007c34:	2300      	movs	r3, #0
 8007c36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	f383 8811 	msr	BASEPRI, r3
}
 8007c3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007c40:	bf00      	nop
 8007c42:	3708      	adds	r7, #8
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}
 8007c48:	e000ed04 	.word	0xe000ed04

08007c4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007c50:	4b0b      	ldr	r3, [pc, #44]	@ (8007c80 <vPortSetupTimerInterrupt+0x34>)
 8007c52:	2200      	movs	r2, #0
 8007c54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007c56:	4b0b      	ldr	r3, [pc, #44]	@ (8007c84 <vPortSetupTimerInterrupt+0x38>)
 8007c58:	2200      	movs	r2, #0
 8007c5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8007c88 <vPortSetupTimerInterrupt+0x3c>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a0a      	ldr	r2, [pc, #40]	@ (8007c8c <vPortSetupTimerInterrupt+0x40>)
 8007c62:	fba2 2303 	umull	r2, r3, r2, r3
 8007c66:	099b      	lsrs	r3, r3, #6
 8007c68:	4a09      	ldr	r2, [pc, #36]	@ (8007c90 <vPortSetupTimerInterrupt+0x44>)
 8007c6a:	3b01      	subs	r3, #1
 8007c6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007c6e:	4b04      	ldr	r3, [pc, #16]	@ (8007c80 <vPortSetupTimerInterrupt+0x34>)
 8007c70:	2207      	movs	r2, #7
 8007c72:	601a      	str	r2, [r3, #0]
}
 8007c74:	bf00      	nop
 8007c76:	46bd      	mov	sp, r7
 8007c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7c:	4770      	bx	lr
 8007c7e:	bf00      	nop
 8007c80:	e000e010 	.word	0xe000e010
 8007c84:	e000e018 	.word	0xe000e018
 8007c88:	20000000 	.word	0x20000000
 8007c8c:	10624dd3 	.word	0x10624dd3
 8007c90:	e000e014 	.word	0xe000e014

08007c94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007c94:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007ca4 <vPortEnableVFP+0x10>
 8007c98:	6801      	ldr	r1, [r0, #0]
 8007c9a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007c9e:	6001      	str	r1, [r0, #0]
 8007ca0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007ca2:	bf00      	nop
 8007ca4:	e000ed88 	.word	0xe000ed88

08007ca8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007ca8:	b480      	push	{r7}
 8007caa:	b085      	sub	sp, #20
 8007cac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007cae:	f3ef 8305 	mrs	r3, IPSR
 8007cb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	2b0f      	cmp	r3, #15
 8007cb8:	d915      	bls.n	8007ce6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007cba:	4a18      	ldr	r2, [pc, #96]	@ (8007d1c <vPortValidateInterruptPriority+0x74>)
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	4413      	add	r3, r2
 8007cc0:	781b      	ldrb	r3, [r3, #0]
 8007cc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007cc4:	4b16      	ldr	r3, [pc, #88]	@ (8007d20 <vPortValidateInterruptPriority+0x78>)
 8007cc6:	781b      	ldrb	r3, [r3, #0]
 8007cc8:	7afa      	ldrb	r2, [r7, #11]
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	d20b      	bcs.n	8007ce6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cd2:	f383 8811 	msr	BASEPRI, r3
 8007cd6:	f3bf 8f6f 	isb	sy
 8007cda:	f3bf 8f4f 	dsb	sy
 8007cde:	607b      	str	r3, [r7, #4]
}
 8007ce0:	bf00      	nop
 8007ce2:	bf00      	nop
 8007ce4:	e7fd      	b.n	8007ce2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007ce6:	4b0f      	ldr	r3, [pc, #60]	@ (8007d24 <vPortValidateInterruptPriority+0x7c>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007cee:	4b0e      	ldr	r3, [pc, #56]	@ (8007d28 <vPortValidateInterruptPriority+0x80>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	d90b      	bls.n	8007d0e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cfa:	f383 8811 	msr	BASEPRI, r3
 8007cfe:	f3bf 8f6f 	isb	sy
 8007d02:	f3bf 8f4f 	dsb	sy
 8007d06:	603b      	str	r3, [r7, #0]
}
 8007d08:	bf00      	nop
 8007d0a:	bf00      	nop
 8007d0c:	e7fd      	b.n	8007d0a <vPortValidateInterruptPriority+0x62>
	}
 8007d0e:	bf00      	nop
 8007d10:	3714      	adds	r7, #20
 8007d12:	46bd      	mov	sp, r7
 8007d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d18:	4770      	bx	lr
 8007d1a:	bf00      	nop
 8007d1c:	e000e3f0 	.word	0xe000e3f0
 8007d20:	20005288 	.word	0x20005288
 8007d24:	e000ed0c 	.word	0xe000ed0c
 8007d28:	2000528c 	.word	0x2000528c

08007d2c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b08a      	sub	sp, #40	@ 0x28
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007d34:	2300      	movs	r3, #0
 8007d36:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007d38:	f7fe ffaa 	bl	8006c90 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007d3c:	4b5c      	ldr	r3, [pc, #368]	@ (8007eb0 <pvPortMalloc+0x184>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d101      	bne.n	8007d48 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007d44:	f000 f924 	bl	8007f90 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007d48:	4b5a      	ldr	r3, [pc, #360]	@ (8007eb4 <pvPortMalloc+0x188>)
 8007d4a:	681a      	ldr	r2, [r3, #0]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	4013      	ands	r3, r2
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	f040 8095 	bne.w	8007e80 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d01e      	beq.n	8007d9a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007d5c:	2208      	movs	r2, #8
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	4413      	add	r3, r2
 8007d62:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f003 0307 	and.w	r3, r3, #7
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d015      	beq.n	8007d9a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f023 0307 	bic.w	r3, r3, #7
 8007d74:	3308      	adds	r3, #8
 8007d76:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f003 0307 	and.w	r3, r3, #7
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d00b      	beq.n	8007d9a <pvPortMalloc+0x6e>
	__asm volatile
 8007d82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d86:	f383 8811 	msr	BASEPRI, r3
 8007d8a:	f3bf 8f6f 	isb	sy
 8007d8e:	f3bf 8f4f 	dsb	sy
 8007d92:	617b      	str	r3, [r7, #20]
}
 8007d94:	bf00      	nop
 8007d96:	bf00      	nop
 8007d98:	e7fd      	b.n	8007d96 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d06f      	beq.n	8007e80 <pvPortMalloc+0x154>
 8007da0:	4b45      	ldr	r3, [pc, #276]	@ (8007eb8 <pvPortMalloc+0x18c>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	687a      	ldr	r2, [r7, #4]
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d86a      	bhi.n	8007e80 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007daa:	4b44      	ldr	r3, [pc, #272]	@ (8007ebc <pvPortMalloc+0x190>)
 8007dac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007dae:	4b43      	ldr	r3, [pc, #268]	@ (8007ebc <pvPortMalloc+0x190>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007db4:	e004      	b.n	8007dc0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007db8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	687a      	ldr	r2, [r7, #4]
 8007dc6:	429a      	cmp	r2, r3
 8007dc8:	d903      	bls.n	8007dd2 <pvPortMalloc+0xa6>
 8007dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d1f1      	bne.n	8007db6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007dd2:	4b37      	ldr	r3, [pc, #220]	@ (8007eb0 <pvPortMalloc+0x184>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007dd8:	429a      	cmp	r2, r3
 8007dda:	d051      	beq.n	8007e80 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007ddc:	6a3b      	ldr	r3, [r7, #32]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	2208      	movs	r2, #8
 8007de2:	4413      	add	r3, r2
 8007de4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007de8:	681a      	ldr	r2, [r3, #0]
 8007dea:	6a3b      	ldr	r3, [r7, #32]
 8007dec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007df0:	685a      	ldr	r2, [r3, #4]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	1ad2      	subs	r2, r2, r3
 8007df6:	2308      	movs	r3, #8
 8007df8:	005b      	lsls	r3, r3, #1
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	d920      	bls.n	8007e40 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007dfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	4413      	add	r3, r2
 8007e04:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e06:	69bb      	ldr	r3, [r7, #24]
 8007e08:	f003 0307 	and.w	r3, r3, #7
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d00b      	beq.n	8007e28 <pvPortMalloc+0xfc>
	__asm volatile
 8007e10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e14:	f383 8811 	msr	BASEPRI, r3
 8007e18:	f3bf 8f6f 	isb	sy
 8007e1c:	f3bf 8f4f 	dsb	sy
 8007e20:	613b      	str	r3, [r7, #16]
}
 8007e22:	bf00      	nop
 8007e24:	bf00      	nop
 8007e26:	e7fd      	b.n	8007e24 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e2a:	685a      	ldr	r2, [r3, #4]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	1ad2      	subs	r2, r2, r3
 8007e30:	69bb      	ldr	r3, [r7, #24]
 8007e32:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e36:	687a      	ldr	r2, [r7, #4]
 8007e38:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007e3a:	69b8      	ldr	r0, [r7, #24]
 8007e3c:	f000 f90a 	bl	8008054 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007e40:	4b1d      	ldr	r3, [pc, #116]	@ (8007eb8 <pvPortMalloc+0x18c>)
 8007e42:	681a      	ldr	r2, [r3, #0]
 8007e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	1ad3      	subs	r3, r2, r3
 8007e4a:	4a1b      	ldr	r2, [pc, #108]	@ (8007eb8 <pvPortMalloc+0x18c>)
 8007e4c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007e4e:	4b1a      	ldr	r3, [pc, #104]	@ (8007eb8 <pvPortMalloc+0x18c>)
 8007e50:	681a      	ldr	r2, [r3, #0]
 8007e52:	4b1b      	ldr	r3, [pc, #108]	@ (8007ec0 <pvPortMalloc+0x194>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d203      	bcs.n	8007e62 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007e5a:	4b17      	ldr	r3, [pc, #92]	@ (8007eb8 <pvPortMalloc+0x18c>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a18      	ldr	r2, [pc, #96]	@ (8007ec0 <pvPortMalloc+0x194>)
 8007e60:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e64:	685a      	ldr	r2, [r3, #4]
 8007e66:	4b13      	ldr	r3, [pc, #76]	@ (8007eb4 <pvPortMalloc+0x188>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	431a      	orrs	r2, r3
 8007e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e6e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e72:	2200      	movs	r2, #0
 8007e74:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007e76:	4b13      	ldr	r3, [pc, #76]	@ (8007ec4 <pvPortMalloc+0x198>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	3301      	adds	r3, #1
 8007e7c:	4a11      	ldr	r2, [pc, #68]	@ (8007ec4 <pvPortMalloc+0x198>)
 8007e7e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007e80:	f7fe ff14 	bl	8006cac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e84:	69fb      	ldr	r3, [r7, #28]
 8007e86:	f003 0307 	and.w	r3, r3, #7
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d00b      	beq.n	8007ea6 <pvPortMalloc+0x17a>
	__asm volatile
 8007e8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e92:	f383 8811 	msr	BASEPRI, r3
 8007e96:	f3bf 8f6f 	isb	sy
 8007e9a:	f3bf 8f4f 	dsb	sy
 8007e9e:	60fb      	str	r3, [r7, #12]
}
 8007ea0:	bf00      	nop
 8007ea2:	bf00      	nop
 8007ea4:	e7fd      	b.n	8007ea2 <pvPortMalloc+0x176>
	return pvReturn;
 8007ea6:	69fb      	ldr	r3, [r7, #28]
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3728      	adds	r7, #40	@ 0x28
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}
 8007eb0:	2000d298 	.word	0x2000d298
 8007eb4:	2000d2ac 	.word	0x2000d2ac
 8007eb8:	2000d29c 	.word	0x2000d29c
 8007ebc:	2000d290 	.word	0x2000d290
 8007ec0:	2000d2a0 	.word	0x2000d2a0
 8007ec4:	2000d2a4 	.word	0x2000d2a4

08007ec8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b086      	sub	sp, #24
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d04f      	beq.n	8007f7a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007eda:	2308      	movs	r3, #8
 8007edc:	425b      	negs	r3, r3
 8007ede:	697a      	ldr	r2, [r7, #20]
 8007ee0:	4413      	add	r3, r2
 8007ee2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	685a      	ldr	r2, [r3, #4]
 8007eec:	4b25      	ldr	r3, [pc, #148]	@ (8007f84 <vPortFree+0xbc>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4013      	ands	r3, r2
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d10b      	bne.n	8007f0e <vPortFree+0x46>
	__asm volatile
 8007ef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007efa:	f383 8811 	msr	BASEPRI, r3
 8007efe:	f3bf 8f6f 	isb	sy
 8007f02:	f3bf 8f4f 	dsb	sy
 8007f06:	60fb      	str	r3, [r7, #12]
}
 8007f08:	bf00      	nop
 8007f0a:	bf00      	nop
 8007f0c:	e7fd      	b.n	8007f0a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d00b      	beq.n	8007f2e <vPortFree+0x66>
	__asm volatile
 8007f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f1a:	f383 8811 	msr	BASEPRI, r3
 8007f1e:	f3bf 8f6f 	isb	sy
 8007f22:	f3bf 8f4f 	dsb	sy
 8007f26:	60bb      	str	r3, [r7, #8]
}
 8007f28:	bf00      	nop
 8007f2a:	bf00      	nop
 8007f2c:	e7fd      	b.n	8007f2a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	685a      	ldr	r2, [r3, #4]
 8007f32:	4b14      	ldr	r3, [pc, #80]	@ (8007f84 <vPortFree+0xbc>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4013      	ands	r3, r2
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d01e      	beq.n	8007f7a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d11a      	bne.n	8007f7a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	685a      	ldr	r2, [r3, #4]
 8007f48:	4b0e      	ldr	r3, [pc, #56]	@ (8007f84 <vPortFree+0xbc>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	43db      	mvns	r3, r3
 8007f4e:	401a      	ands	r2, r3
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007f54:	f7fe fe9c 	bl	8006c90 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	685a      	ldr	r2, [r3, #4]
 8007f5c:	4b0a      	ldr	r3, [pc, #40]	@ (8007f88 <vPortFree+0xc0>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4413      	add	r3, r2
 8007f62:	4a09      	ldr	r2, [pc, #36]	@ (8007f88 <vPortFree+0xc0>)
 8007f64:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007f66:	6938      	ldr	r0, [r7, #16]
 8007f68:	f000 f874 	bl	8008054 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007f6c:	4b07      	ldr	r3, [pc, #28]	@ (8007f8c <vPortFree+0xc4>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	3301      	adds	r3, #1
 8007f72:	4a06      	ldr	r2, [pc, #24]	@ (8007f8c <vPortFree+0xc4>)
 8007f74:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007f76:	f7fe fe99 	bl	8006cac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007f7a:	bf00      	nop
 8007f7c:	3718      	adds	r7, #24
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}
 8007f82:	bf00      	nop
 8007f84:	2000d2ac 	.word	0x2000d2ac
 8007f88:	2000d29c 	.word	0x2000d29c
 8007f8c:	2000d2a8 	.word	0x2000d2a8

08007f90 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007f90:	b480      	push	{r7}
 8007f92:	b085      	sub	sp, #20
 8007f94:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007f96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007f9a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007f9c:	4b27      	ldr	r3, [pc, #156]	@ (800803c <prvHeapInit+0xac>)
 8007f9e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	f003 0307 	and.w	r3, r3, #7
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d00c      	beq.n	8007fc4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	3307      	adds	r3, #7
 8007fae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f023 0307 	bic.w	r3, r3, #7
 8007fb6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007fb8:	68ba      	ldr	r2, [r7, #8]
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	1ad3      	subs	r3, r2, r3
 8007fbe:	4a1f      	ldr	r2, [pc, #124]	@ (800803c <prvHeapInit+0xac>)
 8007fc0:	4413      	add	r3, r2
 8007fc2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007fc8:	4a1d      	ldr	r2, [pc, #116]	@ (8008040 <prvHeapInit+0xb0>)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007fce:	4b1c      	ldr	r3, [pc, #112]	@ (8008040 <prvHeapInit+0xb0>)
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	68ba      	ldr	r2, [r7, #8]
 8007fd8:	4413      	add	r3, r2
 8007fda:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007fdc:	2208      	movs	r2, #8
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	1a9b      	subs	r3, r3, r2
 8007fe2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	f023 0307 	bic.w	r3, r3, #7
 8007fea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	4a15      	ldr	r2, [pc, #84]	@ (8008044 <prvHeapInit+0xb4>)
 8007ff0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007ff2:	4b14      	ldr	r3, [pc, #80]	@ (8008044 <prvHeapInit+0xb4>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007ffa:	4b12      	ldr	r3, [pc, #72]	@ (8008044 <prvHeapInit+0xb4>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	2200      	movs	r2, #0
 8008000:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	68fa      	ldr	r2, [r7, #12]
 800800a:	1ad2      	subs	r2, r2, r3
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008010:	4b0c      	ldr	r3, [pc, #48]	@ (8008044 <prvHeapInit+0xb4>)
 8008012:	681a      	ldr	r2, [r3, #0]
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	4a0a      	ldr	r2, [pc, #40]	@ (8008048 <prvHeapInit+0xb8>)
 800801e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	685b      	ldr	r3, [r3, #4]
 8008024:	4a09      	ldr	r2, [pc, #36]	@ (800804c <prvHeapInit+0xbc>)
 8008026:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008028:	4b09      	ldr	r3, [pc, #36]	@ (8008050 <prvHeapInit+0xc0>)
 800802a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800802e:	601a      	str	r2, [r3, #0]
}
 8008030:	bf00      	nop
 8008032:	3714      	adds	r7, #20
 8008034:	46bd      	mov	sp, r7
 8008036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803a:	4770      	bx	lr
 800803c:	20005290 	.word	0x20005290
 8008040:	2000d290 	.word	0x2000d290
 8008044:	2000d298 	.word	0x2000d298
 8008048:	2000d2a0 	.word	0x2000d2a0
 800804c:	2000d29c 	.word	0x2000d29c
 8008050:	2000d2ac 	.word	0x2000d2ac

08008054 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008054:	b480      	push	{r7}
 8008056:	b085      	sub	sp, #20
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800805c:	4b28      	ldr	r3, [pc, #160]	@ (8008100 <prvInsertBlockIntoFreeList+0xac>)
 800805e:	60fb      	str	r3, [r7, #12]
 8008060:	e002      	b.n	8008068 <prvInsertBlockIntoFreeList+0x14>
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	60fb      	str	r3, [r7, #12]
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	687a      	ldr	r2, [r7, #4]
 800806e:	429a      	cmp	r2, r3
 8008070:	d8f7      	bhi.n	8008062 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	685b      	ldr	r3, [r3, #4]
 800807a:	68ba      	ldr	r2, [r7, #8]
 800807c:	4413      	add	r3, r2
 800807e:	687a      	ldr	r2, [r7, #4]
 8008080:	429a      	cmp	r2, r3
 8008082:	d108      	bne.n	8008096 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	685a      	ldr	r2, [r3, #4]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	441a      	add	r2, r3
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	68ba      	ldr	r2, [r7, #8]
 80080a0:	441a      	add	r2, r3
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	429a      	cmp	r2, r3
 80080a8:	d118      	bne.n	80080dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681a      	ldr	r2, [r3, #0]
 80080ae:	4b15      	ldr	r3, [pc, #84]	@ (8008104 <prvInsertBlockIntoFreeList+0xb0>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	429a      	cmp	r2, r3
 80080b4:	d00d      	beq.n	80080d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	685a      	ldr	r2, [r3, #4]
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	441a      	add	r2, r3
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	681a      	ldr	r2, [r3, #0]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	601a      	str	r2, [r3, #0]
 80080d0:	e008      	b.n	80080e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80080d2:	4b0c      	ldr	r3, [pc, #48]	@ (8008104 <prvInsertBlockIntoFreeList+0xb0>)
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	601a      	str	r2, [r3, #0]
 80080da:	e003      	b.n	80080e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681a      	ldr	r2, [r3, #0]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80080e4:	68fa      	ldr	r2, [r7, #12]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	429a      	cmp	r2, r3
 80080ea:	d002      	beq.n	80080f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	687a      	ldr	r2, [r7, #4]
 80080f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80080f2:	bf00      	nop
 80080f4:	3714      	adds	r7, #20
 80080f6:	46bd      	mov	sp, r7
 80080f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fc:	4770      	bx	lr
 80080fe:	bf00      	nop
 8008100:	2000d290 	.word	0x2000d290
 8008104:	2000d298 	.word	0x2000d298

08008108 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b084      	sub	sp, #16
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	330c      	adds	r3, #12
 8008118:	461a      	mov	r2, r3
 800811a:	6839      	ldr	r1, [r7, #0]
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f002 fc29 	bl	800a974 <tcpip_send_msg_wait_sem>
 8008122:	4603      	mov	r3, r0
 8008124:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8008126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d103      	bne.n	8008136 <netconn_apimsg+0x2e>
    return apimsg->err;
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8008134:	e001      	b.n	800813a <netconn_apimsg+0x32>
  }
  return err;
 8008136:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800813a:	4618      	mov	r0, r3
 800813c:	3710      	adds	r7, #16
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}
	...

08008144 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b08c      	sub	sp, #48	@ 0x30
 8008148:	af00      	add	r7, sp, #0
 800814a:	4603      	mov	r3, r0
 800814c:	603a      	str	r2, [r7, #0]
 800814e:	71fb      	strb	r3, [r7, #7]
 8008150:	460b      	mov	r3, r1
 8008152:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8008154:	79fb      	ldrb	r3, [r7, #7]
 8008156:	6839      	ldr	r1, [r7, #0]
 8008158:	4618      	mov	r0, r3
 800815a:	f001 f95b 	bl	8009414 <netconn_alloc>
 800815e:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (conn != NULL) {
 8008160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008162:	2b00      	cmp	r3, #0
 8008164:	d054      	beq.n	8008210 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8008166:	79bb      	ldrb	r3, [r7, #6]
 8008168:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800816a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800816c:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800816e:	f107 0308 	add.w	r3, r7, #8
 8008172:	4619      	mov	r1, r3
 8008174:	4829      	ldr	r0, [pc, #164]	@ (800821c <netconn_new_with_proto_and_callback+0xd8>)
 8008176:	f7ff ffc7 	bl	8008108 <netconn_apimsg>
 800817a:	4603      	mov	r3, r0
 800817c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (err != ERR_OK) {
 8008180:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8008184:	2b00      	cmp	r3, #0
 8008186:	d043      	beq.n	8008210 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8008188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800818a:	685b      	ldr	r3, [r3, #4]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d005      	beq.n	800819c <netconn_new_with_proto_and_callback+0x58>
 8008190:	4b23      	ldr	r3, [pc, #140]	@ (8008220 <netconn_new_with_proto_and_callback+0xdc>)
 8008192:	22a3      	movs	r2, #163	@ 0xa3
 8008194:	4923      	ldr	r1, [pc, #140]	@ (8008224 <netconn_new_with_proto_and_callback+0xe0>)
 8008196:	4824      	ldr	r0, [pc, #144]	@ (8008228 <netconn_new_with_proto_and_callback+0xe4>)
 8008198:	f010 fdd4 	bl	8018d44 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800819c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800819e:	3310      	adds	r3, #16
 80081a0:	4618      	mov	r0, r3
 80081a2:	f010 fb68 	bl	8018876 <sys_mbox_valid>
 80081a6:	4603      	mov	r3, r0
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d105      	bne.n	80081b8 <netconn_new_with_proto_and_callback+0x74>
 80081ac:	4b1c      	ldr	r3, [pc, #112]	@ (8008220 <netconn_new_with_proto_and_callback+0xdc>)
 80081ae:	22a4      	movs	r2, #164	@ 0xa4
 80081b0:	491e      	ldr	r1, [pc, #120]	@ (800822c <netconn_new_with_proto_and_callback+0xe8>)
 80081b2:	481d      	ldr	r0, [pc, #116]	@ (8008228 <netconn_new_with_proto_and_callback+0xe4>)
 80081b4:	f010 fdc6 	bl	8018d44 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 80081b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081ba:	3314      	adds	r3, #20
 80081bc:	4618      	mov	r0, r3
 80081be:	f010 fb5a 	bl	8018876 <sys_mbox_valid>
 80081c2:	4603      	mov	r3, r0
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d005      	beq.n	80081d4 <netconn_new_with_proto_and_callback+0x90>
 80081c8:	4b15      	ldr	r3, [pc, #84]	@ (8008220 <netconn_new_with_proto_and_callback+0xdc>)
 80081ca:	22a6      	movs	r2, #166	@ 0xa6
 80081cc:	4918      	ldr	r1, [pc, #96]	@ (8008230 <netconn_new_with_proto_and_callback+0xec>)
 80081ce:	4816      	ldr	r0, [pc, #88]	@ (8008228 <netconn_new_with_proto_and_callback+0xe4>)
 80081d0:	f010 fdb8 	bl	8018d44 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 80081d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081d6:	330c      	adds	r3, #12
 80081d8:	4618      	mov	r0, r3
 80081da:	f010 fbdd 	bl	8018998 <sys_sem_valid>
 80081de:	4603      	mov	r3, r0
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d105      	bne.n	80081f0 <netconn_new_with_proto_and_callback+0xac>
 80081e4:	4b0e      	ldr	r3, [pc, #56]	@ (8008220 <netconn_new_with_proto_and_callback+0xdc>)
 80081e6:	22a9      	movs	r2, #169	@ 0xa9
 80081e8:	4912      	ldr	r1, [pc, #72]	@ (8008234 <netconn_new_with_proto_and_callback+0xf0>)
 80081ea:	480f      	ldr	r0, [pc, #60]	@ (8008228 <netconn_new_with_proto_and_callback+0xe4>)
 80081ec:	f010 fdaa 	bl	8018d44 <iprintf>
      sys_sem_free(&conn->op_completed);
 80081f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081f2:	330c      	adds	r3, #12
 80081f4:	4618      	mov	r0, r3
 80081f6:	f010 fbc2 	bl	801897e <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 80081fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081fc:	3310      	adds	r3, #16
 80081fe:	4618      	mov	r0, r3
 8008200:	f010 fab2 	bl	8018768 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8008204:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008206:	2007      	movs	r0, #7
 8008208:	f003 ffb2 	bl	800c170 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800820c:	2300      	movs	r3, #0
 800820e:	e000      	b.n	8008212 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8008210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8008212:	4618      	mov	r0, r3
 8008214:	3730      	adds	r7, #48	@ 0x30
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}
 800821a:	bf00      	nop
 800821c:	080093e9 	.word	0x080093e9
 8008220:	0801a29c 	.word	0x0801a29c
 8008224:	0801a2d0 	.word	0x0801a2d0
 8008228:	0801a2f4 	.word	0x0801a2f4
 800822c:	0801a31c 	.word	0x0801a31c
 8008230:	0801a334 	.word	0x0801a334
 8008234:	0801a358 	.word	0x0801a358

08008238 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b08c      	sub	sp, #48	@ 0x30
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d101      	bne.n	800824a <netconn_prepare_delete+0x12>
    return ERR_OK;
 8008246:	2300      	movs	r3, #0
 8008248:	e014      	b.n	8008274 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800824e:	2329      	movs	r3, #41	@ 0x29
 8008250:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8008252:	f107 030c 	add.w	r3, r7, #12
 8008256:	4619      	mov	r1, r3
 8008258:	4808      	ldr	r0, [pc, #32]	@ (800827c <netconn_prepare_delete+0x44>)
 800825a:	f7ff ff55 	bl	8008108 <netconn_apimsg>
 800825e:	4603      	mov	r3, r0
 8008260:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8008264:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8008268:	2b00      	cmp	r3, #0
 800826a:	d002      	beq.n	8008272 <netconn_prepare_delete+0x3a>
    return err;
 800826c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8008270:	e000      	b.n	8008274 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8008272:	2300      	movs	r3, #0
}
 8008274:	4618      	mov	r0, r3
 8008276:	3730      	adds	r7, #48	@ 0x30
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}
 800827c:	08009955 	.word	0x08009955

08008280 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b084      	sub	sp, #16
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d101      	bne.n	8008292 <netconn_delete+0x12>
    return ERR_OK;
 800828e:	2300      	movs	r3, #0
 8008290:	e00d      	b.n	80082ae <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f7ff ffd0 	bl	8008238 <netconn_prepare_delete>
 8008298:	4603      	mov	r3, r0
 800829a:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800829c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d102      	bne.n	80082aa <netconn_delete+0x2a>
    netconn_free(conn);
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f001 f923 	bl	80094f0 <netconn_free>
  }
  return err;
 80082aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3710      	adds	r7, #16
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}
	...

080082b8 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b08e      	sub	sp, #56	@ 0x38
 80082bc:	af00      	add	r7, sp, #0
 80082be:	60f8      	str	r0, [r7, #12]
 80082c0:	60b9      	str	r1, [r7, #8]
 80082c2:	4613      	mov	r3, r2
 80082c4:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d109      	bne.n	80082e0 <netconn_bind+0x28>
 80082cc:	4b11      	ldr	r3, [pc, #68]	@ (8008314 <netconn_bind+0x5c>)
 80082ce:	f44f 729c 	mov.w	r2, #312	@ 0x138
 80082d2:	4911      	ldr	r1, [pc, #68]	@ (8008318 <netconn_bind+0x60>)
 80082d4:	4811      	ldr	r0, [pc, #68]	@ (800831c <netconn_bind+0x64>)
 80082d6:	f010 fd35 	bl	8018d44 <iprintf>
 80082da:	f06f 030f 	mvn.w	r3, #15
 80082de:	e015      	b.n	800830c <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d101      	bne.n	80082ea <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 80082e6:	4b0e      	ldr	r3, [pc, #56]	@ (8008320 <netconn_bind+0x68>)
 80082e8:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 80082f2:	88fb      	ldrh	r3, [r7, #6]
 80082f4:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 80082f6:	f107 0314 	add.w	r3, r7, #20
 80082fa:	4619      	mov	r1, r3
 80082fc:	4809      	ldr	r0, [pc, #36]	@ (8008324 <netconn_bind+0x6c>)
 80082fe:	f7ff ff03 	bl	8008108 <netconn_apimsg>
 8008302:	4603      	mov	r3, r0
 8008304:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8008308:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800830c:	4618      	mov	r0, r3
 800830e:	3738      	adds	r7, #56	@ 0x38
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}
 8008314:	0801a29c 	.word	0x0801a29c
 8008318:	0801a3d4 	.word	0x0801a3d4
 800831c:	0801a2f4 	.word	0x0801a2f4
 8008320:	08027fac 	.word	0x08027fac
 8008324:	08009b1d 	.word	0x08009b1d

08008328 <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b08e      	sub	sp, #56	@ 0x38
 800832c:	af00      	add	r7, sp, #0
 800832e:	60f8      	str	r0, [r7, #12]
 8008330:	60b9      	str	r1, [r7, #8]
 8008332:	4613      	mov	r3, r2
 8008334:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d109      	bne.n	8008350 <netconn_connect+0x28>
 800833c:	4b11      	ldr	r3, [pc, #68]	@ (8008384 <netconn_connect+0x5c>)
 800833e:	f44f 72bf 	mov.w	r2, #382	@ 0x17e
 8008342:	4911      	ldr	r1, [pc, #68]	@ (8008388 <netconn_connect+0x60>)
 8008344:	4811      	ldr	r0, [pc, #68]	@ (800838c <netconn_connect+0x64>)
 8008346:	f010 fcfd 	bl	8018d44 <iprintf>
 800834a:	f06f 030f 	mvn.w	r3, #15
 800834e:	e015      	b.n	800837c <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d101      	bne.n	800835a <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 8008356:	4b0e      	ldr	r3, [pc, #56]	@ (8008390 <netconn_connect+0x68>)
 8008358:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8008362:	88fb      	ldrh	r3, [r7, #6]
 8008364:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 8008366:	f107 0314 	add.w	r3, r7, #20
 800836a:	4619      	mov	r1, r3
 800836c:	4809      	ldr	r0, [pc, #36]	@ (8008394 <netconn_connect+0x6c>)
 800836e:	f7ff fecb 	bl	8008108 <netconn_apimsg>
 8008372:	4603      	mov	r3, r0
 8008374:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8008378:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800837c:	4618      	mov	r0, r3
 800837e:	3738      	adds	r7, #56	@ 0x38
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}
 8008384:	0801a29c 	.word	0x0801a29c
 8008388:	0801a410 	.word	0x0801a410
 800838c:	0801a2f4 	.word	0x0801a2f4
 8008390:	08027fac 	.word	0x08027fac
 8008394:	08009cb1 	.word	0x08009cb1

08008398 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b08c      	sub	sp, #48	@ 0x30
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
 80083a0:	460b      	mov	r3, r1
 80083a2:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d109      	bne.n	80083be <netconn_listen_with_backlog+0x26>
 80083aa:	4b0d      	ldr	r3, [pc, #52]	@ (80083e0 <netconn_listen_with_backlog+0x48>)
 80083ac:	f240 12bb 	movw	r2, #443	@ 0x1bb
 80083b0:	490c      	ldr	r1, [pc, #48]	@ (80083e4 <netconn_listen_with_backlog+0x4c>)
 80083b2:	480d      	ldr	r0, [pc, #52]	@ (80083e8 <netconn_listen_with_backlog+0x50>)
 80083b4:	f010 fcc6 	bl	8018d44 <iprintf>
 80083b8:	f06f 030f 	mvn.w	r3, #15
 80083bc:	e00c      	b.n	80083d8 <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 80083c2:	f107 030c 	add.w	r3, r7, #12
 80083c6:	4619      	mov	r1, r3
 80083c8:	4808      	ldr	r0, [pc, #32]	@ (80083ec <netconn_listen_with_backlog+0x54>)
 80083ca:	f7ff fe9d 	bl	8008108 <netconn_apimsg>
 80083ce:	4603      	mov	r3, r0
 80083d0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 80083d4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3730      	adds	r7, #48	@ 0x30
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}
 80083e0:	0801a29c 	.word	0x0801a29c
 80083e4:	0801a454 	.word	0x0801a454
 80083e8:	0801a2f4 	.word	0x0801a2f4
 80083ec:	08009e2d 	.word	0x08009e2d

080083f0 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b086      	sub	sp, #24
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d109      	bne.n	8008414 <netconn_accept+0x24>
 8008400:	4b3d      	ldr	r3, [pc, #244]	@ (80084f8 <netconn_accept+0x108>)
 8008402:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8008406:	493d      	ldr	r1, [pc, #244]	@ (80084fc <netconn_accept+0x10c>)
 8008408:	483d      	ldr	r0, [pc, #244]	@ (8008500 <netconn_accept+0x110>)
 800840a:	f010 fc9b 	bl	8018d44 <iprintf>
 800840e:	f06f 030f 	mvn.w	r3, #15
 8008412:	e06c      	b.n	80084ee <netconn_accept+0xfe>
  *new_conn = NULL;
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	2200      	movs	r2, #0
 8008418:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d109      	bne.n	8008434 <netconn_accept+0x44>
 8008420:	4b35      	ldr	r3, [pc, #212]	@ (80084f8 <netconn_accept+0x108>)
 8008422:	f240 12e3 	movw	r2, #483	@ 0x1e3
 8008426:	4937      	ldr	r1, [pc, #220]	@ (8008504 <netconn_accept+0x114>)
 8008428:	4835      	ldr	r0, [pc, #212]	@ (8008500 <netconn_accept+0x110>)
 800842a:	f010 fc8b 	bl	8018d44 <iprintf>
 800842e:	f06f 030f 	mvn.w	r3, #15
 8008432:	e05c      	b.n	80084ee <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f000 fb6c 	bl	8008b12 <netconn_err>
 800843a:	4603      	mov	r3, r0
 800843c:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 800843e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d002      	beq.n	800844c <netconn_accept+0x5c>
    /* return pending error */
    return err;
 8008446:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800844a:	e050      	b.n	80084ee <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	3314      	adds	r3, #20
 8008450:	4618      	mov	r0, r3
 8008452:	f010 fa10 	bl	8018876 <sys_mbox_valid>
 8008456:	4603      	mov	r3, r0
 8008458:	2b00      	cmp	r3, #0
 800845a:	d005      	beq.n	8008468 <netconn_accept+0x78>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	7f1b      	ldrb	r3, [r3, #28]
 8008460:	f003 0301 	and.w	r3, r3, #1
 8008464:	2b00      	cmp	r3, #0
 8008466:	d002      	beq.n	800846e <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 8008468:	f06f 030e 	mvn.w	r3, #14
 800846c:	e03f      	b.n	80084ee <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	7f1b      	ldrb	r3, [r3, #28]
 8008472:	f003 0302 	and.w	r3, r3, #2
 8008476:	2b00      	cmp	r3, #0
 8008478:	d00e      	beq.n	8008498 <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	3314      	adds	r3, #20
 800847e:	f107 020c 	add.w	r2, r7, #12
 8008482:	4611      	mov	r1, r2
 8008484:	4618      	mov	r0, r3
 8008486:	f010 f9da 	bl	801883e <sys_arch_mbox_tryfetch>
 800848a:	4603      	mov	r3, r0
 800848c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008490:	d10a      	bne.n	80084a8 <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 8008492:	f06f 0306 	mvn.w	r3, #6
 8008496:	e02a      	b.n	80084ee <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	3314      	adds	r3, #20
 800849c:	f107 010c 	add.w	r1, r7, #12
 80084a0:	2200      	movs	r2, #0
 80084a2:	4618      	mov	r0, r3
 80084a4:	f010 f98c 	bl	80187c0 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d005      	beq.n	80084bc <netconn_accept+0xcc>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084b4:	2200      	movs	r2, #0
 80084b6:	2101      	movs	r1, #1
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	f107 0213 	add.w	r2, r7, #19
 80084c2:	4611      	mov	r1, r2
 80084c4:	4618      	mov	r0, r3
 80084c6:	f000 fb75 	bl	8008bb4 <lwip_netconn_is_err_msg>
 80084ca:	4603      	mov	r3, r0
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d002      	beq.n	80084d6 <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 80084d0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80084d4:	e00b      	b.n	80084ee <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d102      	bne.n	80084e2 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 80084dc:	f06f 030e 	mvn.w	r3, #14
 80084e0:	e005      	b.n	80084ee <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	697a      	ldr	r2, [r7, #20]
 80084ea:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 80084ec:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3718      	adds	r7, #24
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}
 80084f6:	bf00      	nop
 80084f8:	0801a29c 	.word	0x0801a29c
 80084fc:	0801a474 	.word	0x0801a474
 8008500:	0801a2f4 	.word	0x0801a2f4
 8008504:	0801a494 	.word	0x0801a494

08008508 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b088      	sub	sp, #32
 800850c:	af00      	add	r7, sp, #0
 800850e:	60f8      	str	r0, [r7, #12]
 8008510:	60b9      	str	r1, [r7, #8]
 8008512:	4613      	mov	r3, r2
 8008514:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 8008516:	2300      	movs	r3, #0
 8008518:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d109      	bne.n	8008534 <netconn_recv_data+0x2c>
 8008520:	4b58      	ldr	r3, [pc, #352]	@ (8008684 <netconn_recv_data+0x17c>)
 8008522:	f44f 7212 	mov.w	r2, #584	@ 0x248
 8008526:	4958      	ldr	r1, [pc, #352]	@ (8008688 <netconn_recv_data+0x180>)
 8008528:	4858      	ldr	r0, [pc, #352]	@ (800868c <netconn_recv_data+0x184>)
 800852a:	f010 fc0b 	bl	8018d44 <iprintf>
 800852e:	f06f 030f 	mvn.w	r3, #15
 8008532:	e0a2      	b.n	800867a <netconn_recv_data+0x172>
  *new_buf = NULL;
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	2200      	movs	r2, #0
 8008538:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d109      	bne.n	8008554 <netconn_recv_data+0x4c>
 8008540:	4b50      	ldr	r3, [pc, #320]	@ (8008684 <netconn_recv_data+0x17c>)
 8008542:	f240 224a 	movw	r2, #586	@ 0x24a
 8008546:	4952      	ldr	r1, [pc, #328]	@ (8008690 <netconn_recv_data+0x188>)
 8008548:	4850      	ldr	r0, [pc, #320]	@ (800868c <netconn_recv_data+0x184>)
 800854a:	f010 fbfb 	bl	8018d44 <iprintf>
 800854e:	f06f 030f 	mvn.w	r3, #15
 8008552:	e092      	b.n	800867a <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	3310      	adds	r3, #16
 8008558:	4618      	mov	r0, r3
 800855a:	f010 f98c 	bl	8018876 <sys_mbox_valid>
 800855e:	4603      	mov	r3, r0
 8008560:	2b00      	cmp	r3, #0
 8008562:	d10e      	bne.n	8008582 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8008564:	68f8      	ldr	r0, [r7, #12]
 8008566:	f000 fad4 	bl	8008b12 <netconn_err>
 800856a:	4603      	mov	r3, r0
 800856c:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800856e:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d002      	beq.n	800857c <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 8008576:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800857a:	e07e      	b.n	800867a <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800857c:	f06f 030a 	mvn.w	r3, #10
 8008580:	e07b      	b.n	800867a <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	7f1b      	ldrb	r3, [r3, #28]
 8008586:	f003 0302 	and.w	r3, r3, #2
 800858a:	2b00      	cmp	r3, #0
 800858c:	d10f      	bne.n	80085ae <netconn_recv_data+0xa6>
 800858e:	79fb      	ldrb	r3, [r7, #7]
 8008590:	f003 0304 	and.w	r3, r3, #4
 8008594:	2b00      	cmp	r3, #0
 8008596:	d10a      	bne.n	80085ae <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	7f1b      	ldrb	r3, [r3, #28]
 800859c:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d104      	bne.n	80085ae <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d023      	beq.n	80085f6 <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	3310      	adds	r3, #16
 80085b2:	f107 0218 	add.w	r2, r7, #24
 80085b6:	4611      	mov	r1, r2
 80085b8:	4618      	mov	r0, r3
 80085ba:	f010 f940 	bl	801883e <sys_arch_mbox_tryfetch>
 80085be:	4603      	mov	r3, r0
 80085c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085c4:	d11f      	bne.n	8008606 <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 80085c6:	68f8      	ldr	r0, [r7, #12]
 80085c8:	f000 faa3 	bl	8008b12 <netconn_err>
 80085cc:	4603      	mov	r3, r0
 80085ce:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 80085d0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d002      	beq.n	80085de <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 80085d8:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80085dc:	e04d      	b.n	800867a <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	7f1b      	ldrb	r3, [r3, #28]
 80085e2:	f003 0301 	and.w	r3, r3, #1
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d002      	beq.n	80085f0 <netconn_recv_data+0xe8>
        return ERR_CONN;
 80085ea:	f06f 030a 	mvn.w	r3, #10
 80085ee:	e044      	b.n	800867a <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 80085f0:	f06f 0306 	mvn.w	r3, #6
 80085f4:	e041      	b.n	800867a <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	3310      	adds	r3, #16
 80085fa:	f107 0118 	add.w	r1, r7, #24
 80085fe:	2200      	movs	r2, #0
 8008600:	4618      	mov	r0, r3
 8008602:	f010 f8dd 	bl	80187c0 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	781b      	ldrb	r3, [r3, #0]
 800860a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800860e:	2b10      	cmp	r3, #16
 8008610:	d117      	bne.n	8008642 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8008612:	69bb      	ldr	r3, [r7, #24]
 8008614:	f107 0217 	add.w	r2, r7, #23
 8008618:	4611      	mov	r1, r2
 800861a:	4618      	mov	r0, r3
 800861c:	f000 faca 	bl	8008bb4 <lwip_netconn_is_err_msg>
 8008620:	4603      	mov	r3, r0
 8008622:	2b00      	cmp	r3, #0
 8008624:	d009      	beq.n	800863a <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 8008626:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800862a:	f113 0f0f 	cmn.w	r3, #15
 800862e:	d101      	bne.n	8008634 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8008630:	2300      	movs	r3, #0
 8008632:	e022      	b.n	800867a <netconn_recv_data+0x172>
      }
      return err;
 8008634:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008638:	e01f      	b.n	800867a <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800863a:	69bb      	ldr	r3, [r7, #24]
 800863c:	891b      	ldrh	r3, [r3, #8]
 800863e:	83fb      	strh	r3, [r7, #30]
 8008640:	e00d      	b.n	800865e <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8008642:	69bb      	ldr	r3, [r7, #24]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d106      	bne.n	8008656 <netconn_recv_data+0x14e>
 8008648:	4b0e      	ldr	r3, [pc, #56]	@ (8008684 <netconn_recv_data+0x17c>)
 800864a:	f240 2291 	movw	r2, #657	@ 0x291
 800864e:	4911      	ldr	r1, [pc, #68]	@ (8008694 <netconn_recv_data+0x18c>)
 8008650:	480e      	ldr	r0, [pc, #56]	@ (800868c <netconn_recv_data+0x184>)
 8008652:	f010 fb77 	bl	8018d44 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8008656:	69bb      	ldr	r3, [r7, #24]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	891b      	ldrh	r3, [r3, #8]
 800865c:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008662:	2b00      	cmp	r3, #0
 8008664:	d005      	beq.n	8008672 <netconn_recv_data+0x16a>
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800866a:	8bfa      	ldrh	r2, [r7, #30]
 800866c:	2101      	movs	r1, #1
 800866e:	68f8      	ldr	r0, [r7, #12]
 8008670:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8008672:	69ba      	ldr	r2, [r7, #24]
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8008678:	2300      	movs	r3, #0
}
 800867a:	4618      	mov	r0, r3
 800867c:	3720      	adds	r7, #32
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}
 8008682:	bf00      	nop
 8008684:	0801a29c 	.word	0x0801a29c
 8008688:	0801a4b4 	.word	0x0801a4b4
 800868c:	0801a2f4 	.word	0x0801a2f4
 8008690:	0801a4d4 	.word	0x0801a4d4
 8008694:	0801a4f0 	.word	0x0801a4f0

08008698 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b084      	sub	sp, #16
 800869c:	af00      	add	r7, sp, #0
 800869e:	60f8      	str	r0, [r7, #12]
 80086a0:	60b9      	str	r1, [r7, #8]
 80086a2:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d005      	beq.n	80086b6 <netconn_tcp_recvd_msg+0x1e>
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	781b      	ldrb	r3, [r3, #0]
 80086ae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80086b2:	2b10      	cmp	r3, #16
 80086b4:	d009      	beq.n	80086ca <netconn_tcp_recvd_msg+0x32>
 80086b6:	4b0c      	ldr	r3, [pc, #48]	@ (80086e8 <netconn_tcp_recvd_msg+0x50>)
 80086b8:	f240 22a7 	movw	r2, #679	@ 0x2a7
 80086bc:	490b      	ldr	r1, [pc, #44]	@ (80086ec <netconn_tcp_recvd_msg+0x54>)
 80086be:	480c      	ldr	r0, [pc, #48]	@ (80086f0 <netconn_tcp_recvd_msg+0x58>)
 80086c0:	f010 fb40 	bl	8018d44 <iprintf>
 80086c4:	f06f 030f 	mvn.w	r3, #15
 80086c8:	e00a      	b.n	80086e0 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	68fa      	ldr	r2, [r7, #12]
 80086ce:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	68ba      	ldr	r2, [r7, #8]
 80086d4:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 80086d6:	6879      	ldr	r1, [r7, #4]
 80086d8:	4806      	ldr	r0, [pc, #24]	@ (80086f4 <netconn_tcp_recvd_msg+0x5c>)
 80086da:	f7ff fd15 	bl	8008108 <netconn_apimsg>
 80086de:	4603      	mov	r3, r0
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3710      	adds	r7, #16
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}
 80086e8:	0801a29c 	.word	0x0801a29c
 80086ec:	0801a4fc 	.word	0x0801a4fc
 80086f0:	0801a2f4 	.word	0x0801a2f4
 80086f4:	08009f5d 	.word	0x08009f5d

080086f8 <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b090      	sub	sp, #64	@ 0x40
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	60f8      	str	r0, [r7, #12]
 8008700:	60b9      	str	r1, [r7, #8]
 8008702:	4613      	mov	r3, r2
 8008704:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	3310      	adds	r3, #16
 800870a:	4618      	mov	r0, r3
 800870c:	f010 f8b3 	bl	8018876 <sys_mbox_valid>
 8008710:	4603      	mov	r3, r0
 8008712:	2b00      	cmp	r3, #0
 8008714:	d102      	bne.n	800871c <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 8008716:	f06f 030a 	mvn.w	r3, #10
 800871a:	e06d      	b.n	80087f8 <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	7f1b      	ldrb	r3, [r3, #28]
 8008720:	b25b      	sxtb	r3, r3
 8008722:	2b00      	cmp	r3, #0
 8008724:	da07      	bge.n	8008736 <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	7f1b      	ldrb	r3, [r3, #28]
 800872a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800872e:	b2da      	uxtb	r2, r3
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8008734:	e039      	b.n	80087aa <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8008736:	79fb      	ldrb	r3, [r7, #7]
 8008738:	461a      	mov	r2, r3
 800873a:	68b9      	ldr	r1, [r7, #8]
 800873c:	68f8      	ldr	r0, [r7, #12]
 800873e:	f7ff fee3 	bl	8008508 <netconn_recv_data>
 8008742:	4603      	mov	r3, r0
 8008744:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (err != ERR_OK) {
 8008748:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800874c:	2b00      	cmp	r3, #0
 800874e:	d002      	beq.n	8008756 <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8008750:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8008754:	e050      	b.n	80087f8 <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800875c:	79fb      	ldrb	r3, [r7, #7]
 800875e:	f003 0308 	and.w	r3, r3, #8
 8008762:	2b00      	cmp	r3, #0
 8008764:	d10e      	bne.n	8008784 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 8008766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008768:	2b00      	cmp	r3, #0
 800876a:	d002      	beq.n	8008772 <netconn_recv_data_tcp+0x7a>
 800876c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800876e:	891b      	ldrh	r3, [r3, #8]
 8008770:	e000      	b.n	8008774 <netconn_recv_data_tcp+0x7c>
 8008772:	2301      	movs	r3, #1
 8008774:	86fb      	strh	r3, [r7, #54]	@ 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8008776:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008778:	f107 0214 	add.w	r2, r7, #20
 800877c:	4619      	mov	r1, r3
 800877e:	68f8      	ldr	r0, [r7, #12]
 8008780:	f7ff ff8a 	bl	8008698 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8008784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008786:	2b00      	cmp	r3, #0
 8008788:	d134      	bne.n	80087f4 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800878a:	79fb      	ldrb	r3, [r7, #7]
 800878c:	f003 0310 	and.w	r3, r3, #16
 8008790:	2b00      	cmp	r3, #0
 8008792:	d009      	beq.n	80087a8 <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	7f1b      	ldrb	r3, [r3, #28]
 8008798:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800879c:	b2da      	uxtb	r2, r3
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 80087a2:	f06f 0306 	mvn.w	r3, #6
 80087a6:	e027      	b.n	80087f8 <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 80087a8:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d005      	beq.n	80087be <netconn_recv_data_tcp+0xc6>
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087b6:	2200      	movs	r2, #0
 80087b8:	2101      	movs	r1, #1
 80087ba:	68f8      	ldr	r0, [r7, #12]
 80087bc:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	685b      	ldr	r3, [r3, #4]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d10f      	bne.n	80087e6 <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 80087c6:	68f8      	ldr	r0, [r7, #12]
 80087c8:	f000 f9a3 	bl	8008b12 <netconn_err>
 80087cc:	4603      	mov	r3, r0
 80087ce:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if (err != ERR_OK) {
 80087d2:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d002      	beq.n	80087e0 <netconn_recv_data_tcp+0xe8>
          return err;
 80087da:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80087de:	e00b      	b.n	80087f8 <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 80087e0:	f06f 030d 	mvn.w	r3, #13
 80087e4:	e008      	b.n	80087f8 <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 80087e6:	2101      	movs	r1, #1
 80087e8:	68f8      	ldr	r0, [r7, #12]
 80087ea:	f000 f955 	bl	8008a98 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 80087ee:	f06f 030e 	mvn.w	r3, #14
 80087f2:	e001      	b.n	80087f8 <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 80087f4:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3740      	adds	r7, #64	@ 0x40
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}

08008800 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b086      	sub	sp, #24
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800880a:	2300      	movs	r3, #0
 800880c:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d109      	bne.n	8008828 <netconn_recv+0x28>
 8008814:	4b32      	ldr	r3, [pc, #200]	@ (80088e0 <netconn_recv+0xe0>)
 8008816:	f240 3263 	movw	r2, #867	@ 0x363
 800881a:	4932      	ldr	r1, [pc, #200]	@ (80088e4 <netconn_recv+0xe4>)
 800881c:	4832      	ldr	r0, [pc, #200]	@ (80088e8 <netconn_recv+0xe8>)
 800881e:	f010 fa91 	bl	8018d44 <iprintf>
 8008822:	f06f 030f 	mvn.w	r3, #15
 8008826:	e056      	b.n	80088d6 <netconn_recv+0xd6>
  *new_buf = NULL;
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	2200      	movs	r2, #0
 800882c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d109      	bne.n	8008848 <netconn_recv+0x48>
 8008834:	4b2a      	ldr	r3, [pc, #168]	@ (80088e0 <netconn_recv+0xe0>)
 8008836:	f240 3265 	movw	r2, #869	@ 0x365
 800883a:	492c      	ldr	r1, [pc, #176]	@ (80088ec <netconn_recv+0xec>)
 800883c:	482a      	ldr	r0, [pc, #168]	@ (80088e8 <netconn_recv+0xe8>)
 800883e:	f010 fa81 	bl	8018d44 <iprintf>
 8008842:	f06f 030f 	mvn.w	r3, #15
 8008846:	e046      	b.n	80088d6 <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	781b      	ldrb	r3, [r3, #0]
 800884c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008850:	2b10      	cmp	r3, #16
 8008852:	d13a      	bne.n	80088ca <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8008854:	2300      	movs	r3, #0
 8008856:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8008858:	2006      	movs	r0, #6
 800885a:	f003 fc13 	bl	800c084 <memp_malloc>
 800885e:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d102      	bne.n	800886c <netconn_recv+0x6c>
      return ERR_MEM;
 8008866:	f04f 33ff 	mov.w	r3, #4294967295
 800886a:	e034      	b.n	80088d6 <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 800886c:	f107 030c 	add.w	r3, r7, #12
 8008870:	2200      	movs	r2, #0
 8008872:	4619      	mov	r1, r3
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f7ff ff3f 	bl	80086f8 <netconn_recv_data_tcp>
 800887a:	4603      	mov	r3, r0
 800887c:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800887e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d006      	beq.n	8008894 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 8008886:	6979      	ldr	r1, [r7, #20]
 8008888:	2006      	movs	r0, #6
 800888a:	f003 fc71 	bl	800c170 <memp_free>
      return err;
 800888e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008892:	e020      	b.n	80088d6 <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d106      	bne.n	80088a8 <netconn_recv+0xa8>
 800889a:	4b11      	ldr	r3, [pc, #68]	@ (80088e0 <netconn_recv+0xe0>)
 800889c:	f240 3279 	movw	r2, #889	@ 0x379
 80088a0:	4913      	ldr	r1, [pc, #76]	@ (80088f0 <netconn_recv+0xf0>)
 80088a2:	4811      	ldr	r0, [pc, #68]	@ (80088e8 <netconn_recv+0xe8>)
 80088a4:	f010 fa4e 	bl	8018d44 <iprintf>

    buf->p = p;
 80088a8:	68fa      	ldr	r2, [r7, #12]
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 80088ae:	68fa      	ldr	r2, [r7, #12]
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	2200      	movs	r2, #0
 80088b8:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	2200      	movs	r2, #0
 80088be:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	697a      	ldr	r2, [r7, #20]
 80088c4:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 80088c6:	2300      	movs	r3, #0
 80088c8:	e005      	b.n	80088d6 <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 80088ca:	2200      	movs	r2, #0
 80088cc:	6839      	ldr	r1, [r7, #0]
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f7ff fe1a 	bl	8008508 <netconn_recv_data>
 80088d4:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3718      	adds	r7, #24
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}
 80088de:	bf00      	nop
 80088e0:	0801a29c 	.word	0x0801a29c
 80088e4:	0801a4b4 	.word	0x0801a4b4
 80088e8:	0801a2f4 	.word	0x0801a2f4
 80088ec:	0801a4d4 	.word	0x0801a4d4
 80088f0:	0801a54c 	.word	0x0801a54c

080088f4 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b088      	sub	sp, #32
 80088f8:	af02      	add	r7, sp, #8
 80088fa:	60f8      	str	r0, [r7, #12]
 80088fc:	60b9      	str	r1, [r7, #8]
 80088fe:	607a      	str	r2, [r7, #4]
 8008900:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	613b      	str	r3, [r7, #16]
  vector.len = size;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800890a:	78fa      	ldrb	r2, [r7, #3]
 800890c:	f107 0110 	add.w	r1, r7, #16
 8008910:	6a3b      	ldr	r3, [r7, #32]
 8008912:	9300      	str	r3, [sp, #0]
 8008914:	4613      	mov	r3, r2
 8008916:	2201      	movs	r2, #1
 8008918:	68f8      	ldr	r0, [r7, #12]
 800891a:	f000 f805 	bl	8008928 <netconn_write_vectors_partly>
 800891e:	4603      	mov	r3, r0
}
 8008920:	4618      	mov	r0, r3
 8008922:	3718      	adds	r7, #24
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}

08008928 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b092      	sub	sp, #72	@ 0x48
 800892c:	af00      	add	r7, sp, #0
 800892e:	60f8      	str	r0, [r7, #12]
 8008930:	60b9      	str	r1, [r7, #8]
 8008932:	4611      	mov	r1, r2
 8008934:	461a      	mov	r2, r3
 8008936:	460b      	mov	r3, r1
 8008938:	80fb      	strh	r3, [r7, #6]
 800893a:	4613      	mov	r3, r2
 800893c:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d109      	bne.n	8008958 <netconn_write_vectors_partly+0x30>
 8008944:	4b4e      	ldr	r3, [pc, #312]	@ (8008a80 <netconn_write_vectors_partly+0x158>)
 8008946:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800894a:	494e      	ldr	r1, [pc, #312]	@ (8008a84 <netconn_write_vectors_partly+0x15c>)
 800894c:	484e      	ldr	r0, [pc, #312]	@ (8008a88 <netconn_write_vectors_partly+0x160>)
 800894e:	f010 f9f9 	bl	8018d44 <iprintf>
 8008952:	f06f 030f 	mvn.w	r3, #15
 8008956:	e08e      	b.n	8008a76 <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	781b      	ldrb	r3, [r3, #0]
 800895c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008960:	2b10      	cmp	r3, #16
 8008962:	d009      	beq.n	8008978 <netconn_write_vectors_partly+0x50>
 8008964:	4b46      	ldr	r3, [pc, #280]	@ (8008a80 <netconn_write_vectors_partly+0x158>)
 8008966:	f240 32ef 	movw	r2, #1007	@ 0x3ef
 800896a:	4948      	ldr	r1, [pc, #288]	@ (8008a8c <netconn_write_vectors_partly+0x164>)
 800896c:	4846      	ldr	r0, [pc, #280]	@ (8008a88 <netconn_write_vectors_partly+0x160>)
 800896e:	f010 f9e9 	bl	8018d44 <iprintf>
 8008972:	f06f 0305 	mvn.w	r3, #5
 8008976:	e07e      	b.n	8008a76 <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	7f1b      	ldrb	r3, [r3, #28]
 800897c:	f003 0302 	and.w	r3, r3, #2
 8008980:	2b00      	cmp	r3, #0
 8008982:	d104      	bne.n	800898e <netconn_write_vectors_partly+0x66>
 8008984:	797b      	ldrb	r3, [r7, #5]
 8008986:	f003 0304 	and.w	r3, r3, #4
 800898a:	2b00      	cmp	r3, #0
 800898c:	d001      	beq.n	8008992 <netconn_write_vectors_partly+0x6a>
 800898e:	2301      	movs	r3, #1
 8008990:	e000      	b.n	8008994 <netconn_write_vectors_partly+0x6c>
 8008992:	2300      	movs	r3, #0
 8008994:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8008998:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800899c:	2b00      	cmp	r3, #0
 800899e:	d005      	beq.n	80089ac <netconn_write_vectors_partly+0x84>
 80089a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d102      	bne.n	80089ac <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 80089a6:	f06f 0305 	mvn.w	r3, #5
 80089aa:	e064      	b.n	8008a76 <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 80089ac:	2300      	movs	r3, #0
 80089ae:	647b      	str	r3, [r7, #68]	@ 0x44
  for (i = 0; i < vectorcnt; i++) {
 80089b0:	2300      	movs	r3, #0
 80089b2:	643b      	str	r3, [r7, #64]	@ 0x40
 80089b4:	e015      	b.n	80089e2 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 80089b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80089b8:	00db      	lsls	r3, r3, #3
 80089ba:	68ba      	ldr	r2, [r7, #8]
 80089bc:	4413      	add	r3, r2
 80089be:	685b      	ldr	r3, [r3, #4]
 80089c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80089c2:	4413      	add	r3, r2
 80089c4:	647b      	str	r3, [r7, #68]	@ 0x44
    if (size < vectors[i].len) {
 80089c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80089c8:	00db      	lsls	r3, r3, #3
 80089ca:	68ba      	ldr	r2, [r7, #8]
 80089cc:	4413      	add	r3, r2
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80089d2:	429a      	cmp	r2, r3
 80089d4:	d202      	bcs.n	80089dc <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 80089d6:	f06f 0305 	mvn.w	r3, #5
 80089da:	e04c      	b.n	8008a76 <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 80089dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80089de:	3301      	adds	r3, #1
 80089e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80089e2:	88fb      	ldrh	r3, [r7, #6]
 80089e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80089e6:	429a      	cmp	r2, r3
 80089e8:	dbe5      	blt.n	80089b6 <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 80089ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d101      	bne.n	80089f4 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 80089f0:	2300      	movs	r3, #0
 80089f2:	e040      	b.n	8008a76 <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 80089f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	da0a      	bge.n	8008a10 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 80089fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d102      	bne.n	8008a06 <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 8008a00:	f06f 0305 	mvn.w	r3, #5
 8008a04:	e037      	b.n	8008a76 <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 8008a06:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8008a0a:	63bb      	str	r3, [r7, #56]	@ 0x38
    size = (size_t)limited;
 8008a0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a0e:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8008a18:	88fb      	ldrh	r3, [r7, #6]
 8008a1a:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	627b      	str	r3, [r7, #36]	@ 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8008a20:	797b      	ldrb	r3, [r7, #5]
 8008a22:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8008a26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a28:	62bb      	str	r3, [r7, #40]	@ 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8008a2e:	f107 0314 	add.w	r3, r7, #20
 8008a32:	4619      	mov	r1, r3
 8008a34:	4816      	ldr	r0, [pc, #88]	@ (8008a90 <netconn_write_vectors_partly+0x168>)
 8008a36:	f7ff fb67 	bl	8008108 <netconn_apimsg>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (err == ERR_OK) {
 8008a40:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d114      	bne.n	8008a72 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 8008a48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d002      	beq.n	8008a54 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8008a4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a52:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8008a54:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d10a      	bne.n	8008a72 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8008a5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008a60:	429a      	cmp	r2, r3
 8008a62:	d006      	beq.n	8008a72 <netconn_write_vectors_partly+0x14a>
 8008a64:	4b06      	ldr	r3, [pc, #24]	@ (8008a80 <netconn_write_vectors_partly+0x158>)
 8008a66:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8008a6a:	490a      	ldr	r1, [pc, #40]	@ (8008a94 <netconn_write_vectors_partly+0x16c>)
 8008a6c:	4806      	ldr	r0, [pc, #24]	@ (8008a88 <netconn_write_vectors_partly+0x160>)
 8008a6e:	f010 f969 	bl	8018d44 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8008a72:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3748      	adds	r7, #72	@ 0x48
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}
 8008a7e:	bf00      	nop
 8008a80:	0801a29c 	.word	0x0801a29c
 8008a84:	0801a574 	.word	0x0801a574
 8008a88:	0801a2f4 	.word	0x0801a2f4
 8008a8c:	0801a590 	.word	0x0801a590
 8008a90:	0800a361 	.word	0x0800a361
 8008a94:	0801a5b4 	.word	0x0801a5b4

08008a98 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b08c      	sub	sp, #48	@ 0x30
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
 8008aa0:	460b      	mov	r3, r1
 8008aa2:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d109      	bne.n	8008abe <netconn_close_shutdown+0x26>
 8008aaa:	4b0f      	ldr	r3, [pc, #60]	@ (8008ae8 <netconn_close_shutdown+0x50>)
 8008aac:	f240 4247 	movw	r2, #1095	@ 0x447
 8008ab0:	490e      	ldr	r1, [pc, #56]	@ (8008aec <netconn_close_shutdown+0x54>)
 8008ab2:	480f      	ldr	r0, [pc, #60]	@ (8008af0 <netconn_close_shutdown+0x58>)
 8008ab4:	f010 f946 	bl	8018d44 <iprintf>
 8008ab8:	f06f 030f 	mvn.w	r3, #15
 8008abc:	e010      	b.n	8008ae0 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8008ac2:	78fb      	ldrb	r3, [r7, #3]
 8008ac4:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8008ac6:	2329      	movs	r3, #41	@ 0x29
 8008ac8:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8008aca:	f107 030c 	add.w	r3, r7, #12
 8008ace:	4619      	mov	r1, r3
 8008ad0:	4808      	ldr	r0, [pc, #32]	@ (8008af4 <netconn_close_shutdown+0x5c>)
 8008ad2:	f7ff fb19 	bl	8008108 <netconn_apimsg>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008adc:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3730      	adds	r7, #48	@ 0x30
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}
 8008ae8:	0801a29c 	.word	0x0801a29c
 8008aec:	0801a5d8 	.word	0x0801a5d8
 8008af0:	0801a2f4 	.word	0x0801a2f4
 8008af4:	0800a479 	.word	0x0800a479

08008af8 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b082      	sub	sp, #8
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8008b00:	2103      	movs	r1, #3
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f7ff ffc8 	bl	8008a98 <netconn_close_shutdown>
 8008b08:	4603      	mov	r3, r0
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	3708      	adds	r7, #8
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}

08008b12 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8008b12:	b580      	push	{r7, lr}
 8008b14:	b084      	sub	sp, #16
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d101      	bne.n	8008b24 <netconn_err+0x12>
    return ERR_OK;
 8008b20:	2300      	movs	r3, #0
 8008b22:	e00d      	b.n	8008b40 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8008b24:	f00f ffc2 	bl	8018aac <sys_arch_protect>
 8008b28:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	7a1b      	ldrb	r3, [r3, #8]
 8008b2e:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2200      	movs	r2, #0
 8008b34:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8008b36:	68f8      	ldr	r0, [r7, #12]
 8008b38:	f00f ffc6 	bl	8018ac8 <sys_arch_unprotect>
  return err;
 8008b3c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	3710      	adds	r7, #16
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}

08008b48 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b082      	sub	sp, #8
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	4603      	mov	r3, r0
 8008b50:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8008b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b56:	f113 0f0d 	cmn.w	r3, #13
 8008b5a:	d009      	beq.n	8008b70 <lwip_netconn_err_to_msg+0x28>
 8008b5c:	f113 0f0d 	cmn.w	r3, #13
 8008b60:	dc0c      	bgt.n	8008b7c <lwip_netconn_err_to_msg+0x34>
 8008b62:	f113 0f0f 	cmn.w	r3, #15
 8008b66:	d007      	beq.n	8008b78 <lwip_netconn_err_to_msg+0x30>
 8008b68:	f113 0f0e 	cmn.w	r3, #14
 8008b6c:	d002      	beq.n	8008b74 <lwip_netconn_err_to_msg+0x2c>
 8008b6e:	e005      	b.n	8008b7c <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8008b70:	4b0a      	ldr	r3, [pc, #40]	@ (8008b9c <lwip_netconn_err_to_msg+0x54>)
 8008b72:	e00e      	b.n	8008b92 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8008b74:	4b0a      	ldr	r3, [pc, #40]	@ (8008ba0 <lwip_netconn_err_to_msg+0x58>)
 8008b76:	e00c      	b.n	8008b92 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8008b78:	4b0a      	ldr	r3, [pc, #40]	@ (8008ba4 <lwip_netconn_err_to_msg+0x5c>)
 8008b7a:	e00a      	b.n	8008b92 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8008b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d005      	beq.n	8008b90 <lwip_netconn_err_to_msg+0x48>
 8008b84:	4b08      	ldr	r3, [pc, #32]	@ (8008ba8 <lwip_netconn_err_to_msg+0x60>)
 8008b86:	227d      	movs	r2, #125	@ 0x7d
 8008b88:	4908      	ldr	r1, [pc, #32]	@ (8008bac <lwip_netconn_err_to_msg+0x64>)
 8008b8a:	4809      	ldr	r0, [pc, #36]	@ (8008bb0 <lwip_netconn_err_to_msg+0x68>)
 8008b8c:	f010 f8da 	bl	8018d44 <iprintf>
      return NULL;
 8008b90:	2300      	movs	r3, #0
  }
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3708      	adds	r7, #8
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}
 8008b9a:	bf00      	nop
 8008b9c:	0801dd50 	.word	0x0801dd50
 8008ba0:	0801dd51 	.word	0x0801dd51
 8008ba4:	0801dd52 	.word	0x0801dd52
 8008ba8:	0801a5f4 	.word	0x0801a5f4
 8008bac:	0801a628 	.word	0x0801a628
 8008bb0:	0801a638 	.word	0x0801a638

08008bb4 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b082      	sub	sp, #8
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
 8008bbc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d105      	bne.n	8008bd0 <lwip_netconn_is_err_msg+0x1c>
 8008bc4:	4b12      	ldr	r3, [pc, #72]	@ (8008c10 <lwip_netconn_is_err_msg+0x5c>)
 8008bc6:	2285      	movs	r2, #133	@ 0x85
 8008bc8:	4912      	ldr	r1, [pc, #72]	@ (8008c14 <lwip_netconn_is_err_msg+0x60>)
 8008bca:	4813      	ldr	r0, [pc, #76]	@ (8008c18 <lwip_netconn_is_err_msg+0x64>)
 8008bcc:	f010 f8ba 	bl	8018d44 <iprintf>

  if (msg == &netconn_aborted) {
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	4a12      	ldr	r2, [pc, #72]	@ (8008c1c <lwip_netconn_is_err_msg+0x68>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d104      	bne.n	8008be2 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	22f3      	movs	r2, #243	@ 0xf3
 8008bdc:	701a      	strb	r2, [r3, #0]
    return 1;
 8008bde:	2301      	movs	r3, #1
 8008be0:	e012      	b.n	8008c08 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	4a0e      	ldr	r2, [pc, #56]	@ (8008c20 <lwip_netconn_is_err_msg+0x6c>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d104      	bne.n	8008bf4 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	22f2      	movs	r2, #242	@ 0xf2
 8008bee:	701a      	strb	r2, [r3, #0]
    return 1;
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	e009      	b.n	8008c08 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	4a0b      	ldr	r2, [pc, #44]	@ (8008c24 <lwip_netconn_is_err_msg+0x70>)
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d104      	bne.n	8008c06 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	22f1      	movs	r2, #241	@ 0xf1
 8008c00:	701a      	strb	r2, [r3, #0]
    return 1;
 8008c02:	2301      	movs	r3, #1
 8008c04:	e000      	b.n	8008c08 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8008c06:	2300      	movs	r3, #0
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3708      	adds	r7, #8
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}
 8008c10:	0801a5f4 	.word	0x0801a5f4
 8008c14:	0801a660 	.word	0x0801a660
 8008c18:	0801a638 	.word	0x0801a638
 8008c1c:	0801dd50 	.word	0x0801dd50
 8008c20:	0801dd51 	.word	0x0801dd51
 8008c24:	0801dd52 	.word	0x0801dd52

08008c28 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b088      	sub	sp, #32
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	60f8      	str	r0, [r7, #12]
 8008c30:	60b9      	str	r1, [r7, #8]
 8008c32:	607a      	str	r2, [r7, #4]
 8008c34:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d105      	bne.n	8008c48 <recv_udp+0x20>
 8008c3c:	4b34      	ldr	r3, [pc, #208]	@ (8008d10 <recv_udp+0xe8>)
 8008c3e:	22e5      	movs	r2, #229	@ 0xe5
 8008c40:	4934      	ldr	r1, [pc, #208]	@ (8008d14 <recv_udp+0xec>)
 8008c42:	4835      	ldr	r0, [pc, #212]	@ (8008d18 <recv_udp+0xf0>)
 8008c44:	f010 f87e 	bl	8018d44 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d105      	bne.n	8008c5a <recv_udp+0x32>
 8008c4e:	4b30      	ldr	r3, [pc, #192]	@ (8008d10 <recv_udp+0xe8>)
 8008c50:	22e6      	movs	r2, #230	@ 0xe6
 8008c52:	4932      	ldr	r1, [pc, #200]	@ (8008d1c <recv_udp+0xf4>)
 8008c54:	4830      	ldr	r0, [pc, #192]	@ (8008d18 <recv_udp+0xf0>)
 8008c56:	f010 f875 	bl	8018d44 <iprintf>
  conn = (struct netconn *)arg;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8008c5e:	69fb      	ldr	r3, [r7, #28]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d103      	bne.n	8008c6c <recv_udp+0x44>
    pbuf_free(p);
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f004 f933 	bl	800ced0 <pbuf_free>
    return;
 8008c6a:	e04d      	b.n	8008d08 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8008c6c:	69fb      	ldr	r3, [r7, #28]
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	68ba      	ldr	r2, [r7, #8]
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d005      	beq.n	8008c82 <recv_udp+0x5a>
 8008c76:	4b26      	ldr	r3, [pc, #152]	@ (8008d10 <recv_udp+0xe8>)
 8008c78:	22ee      	movs	r2, #238	@ 0xee
 8008c7a:	4929      	ldr	r1, [pc, #164]	@ (8008d20 <recv_udp+0xf8>)
 8008c7c:	4826      	ldr	r0, [pc, #152]	@ (8008d18 <recv_udp+0xf0>)
 8008c7e:	f010 f861 	bl	8018d44 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8008c82:	69fb      	ldr	r3, [r7, #28]
 8008c84:	3310      	adds	r3, #16
 8008c86:	4618      	mov	r0, r3
 8008c88:	f00f fdf5 	bl	8018876 <sys_mbox_valid>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d103      	bne.n	8008c9a <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f004 f91c 	bl	800ced0 <pbuf_free>
    return;
 8008c98:	e036      	b.n	8008d08 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8008c9a:	2006      	movs	r0, #6
 8008c9c:	f003 f9f2 	bl	800c084 <memp_malloc>
 8008ca0:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8008ca2:	69bb      	ldr	r3, [r7, #24]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d103      	bne.n	8008cb0 <recv_udp+0x88>
    pbuf_free(p);
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f004 f911 	bl	800ced0 <pbuf_free>
    return;
 8008cae:	e02b      	b.n	8008d08 <recv_udp+0xe0>
  } else {
    buf->p = p;
 8008cb0:	69bb      	ldr	r3, [r7, #24]
 8008cb2:	687a      	ldr	r2, [r7, #4]
 8008cb4:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8008cb6:	69bb      	ldr	r3, [r7, #24]
 8008cb8:	687a      	ldr	r2, [r7, #4]
 8008cba:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d002      	beq.n	8008cc8 <recv_udp+0xa0>
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	e000      	b.n	8008cca <recv_udp+0xa2>
 8008cc8:	2300      	movs	r3, #0
 8008cca:	69ba      	ldr	r2, [r7, #24]
 8008ccc:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8008cce:	69bb      	ldr	r3, [r7, #24]
 8008cd0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8008cd2:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	891b      	ldrh	r3, [r3, #8]
 8008cd8:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8008cda:	69fb      	ldr	r3, [r7, #28]
 8008cdc:	3310      	adds	r3, #16
 8008cde:	69b9      	ldr	r1, [r7, #24]
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f00f fd53 	bl	801878c <sys_mbox_trypost>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d003      	beq.n	8008cf4 <recv_udp+0xcc>
    netbuf_delete(buf);
 8008cec:	69b8      	ldr	r0, [r7, #24]
 8008cee:	f001 fc4f 	bl	800a590 <netbuf_delete>
    return;
 8008cf2:	e009      	b.n	8008d08 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8008cf4:	69fb      	ldr	r3, [r7, #28]
 8008cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d005      	beq.n	8008d08 <recv_udp+0xe0>
 8008cfc:	69fb      	ldr	r3, [r7, #28]
 8008cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d00:	8afa      	ldrh	r2, [r7, #22]
 8008d02:	2100      	movs	r1, #0
 8008d04:	69f8      	ldr	r0, [r7, #28]
 8008d06:	4798      	blx	r3
  }
}
 8008d08:	3720      	adds	r7, #32
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}
 8008d0e:	bf00      	nop
 8008d10:	0801a5f4 	.word	0x0801a5f4
 8008d14:	0801a66c 	.word	0x0801a66c
 8008d18:	0801a638 	.word	0x0801a638
 8008d1c:	0801a690 	.word	0x0801a690
 8008d20:	0801a6b0 	.word	0x0801a6b0

08008d24 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b088      	sub	sp, #32
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	60f8      	str	r0, [r7, #12]
 8008d2c:	60b9      	str	r1, [r7, #8]
 8008d2e:	607a      	str	r2, [r7, #4]
 8008d30:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d106      	bne.n	8008d46 <recv_tcp+0x22>
 8008d38:	4b36      	ldr	r3, [pc, #216]	@ (8008e14 <recv_tcp+0xf0>)
 8008d3a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8008d3e:	4936      	ldr	r1, [pc, #216]	@ (8008e18 <recv_tcp+0xf4>)
 8008d40:	4836      	ldr	r0, [pc, #216]	@ (8008e1c <recv_tcp+0xf8>)
 8008d42:	f00f ffff 	bl	8018d44 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d106      	bne.n	8008d5a <recv_tcp+0x36>
 8008d4c:	4b31      	ldr	r3, [pc, #196]	@ (8008e14 <recv_tcp+0xf0>)
 8008d4e:	f240 122d 	movw	r2, #301	@ 0x12d
 8008d52:	4933      	ldr	r1, [pc, #204]	@ (8008e20 <recv_tcp+0xfc>)
 8008d54:	4831      	ldr	r0, [pc, #196]	@ (8008e1c <recv_tcp+0xf8>)
 8008d56:	f00f fff5 	bl	8018d44 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8008d5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d006      	beq.n	8008d70 <recv_tcp+0x4c>
 8008d62:	4b2c      	ldr	r3, [pc, #176]	@ (8008e14 <recv_tcp+0xf0>)
 8008d64:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 8008d68:	492e      	ldr	r1, [pc, #184]	@ (8008e24 <recv_tcp+0x100>)
 8008d6a:	482c      	ldr	r0, [pc, #176]	@ (8008e1c <recv_tcp+0xf8>)
 8008d6c:	f00f ffea 	bl	8018d44 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d102      	bne.n	8008d80 <recv_tcp+0x5c>
    return ERR_VAL;
 8008d7a:	f06f 0305 	mvn.w	r3, #5
 8008d7e:	e045      	b.n	8008e0c <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	68ba      	ldr	r2, [r7, #8]
 8008d86:	429a      	cmp	r2, r3
 8008d88:	d006      	beq.n	8008d98 <recv_tcp+0x74>
 8008d8a:	4b22      	ldr	r3, [pc, #136]	@ (8008e14 <recv_tcp+0xf0>)
 8008d8c:	f240 1235 	movw	r2, #309	@ 0x135
 8008d90:	4925      	ldr	r1, [pc, #148]	@ (8008e28 <recv_tcp+0x104>)
 8008d92:	4822      	ldr	r0, [pc, #136]	@ (8008e1c <recv_tcp+0xf8>)
 8008d94:	f00f ffd6 	bl	8018d44 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8008d98:	697b      	ldr	r3, [r7, #20]
 8008d9a:	3310      	adds	r3, #16
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f00f fd6a 	bl	8018876 <sys_mbox_valid>
 8008da2:	4603      	mov	r3, r0
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d10d      	bne.n	8008dc4 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d008      	beq.n	8008dc0 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	891b      	ldrh	r3, [r3, #8]
 8008db2:	4619      	mov	r1, r3
 8008db4:	68b8      	ldr	r0, [r7, #8]
 8008db6:	f005 f865 	bl	800de84 <tcp_recved>
      pbuf_free(p);
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f004 f888 	bl	800ced0 <pbuf_free>
    }
    return ERR_OK;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	e023      	b.n	8008e0c <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d005      	beq.n	8008dd6 <recv_tcp+0xb2>
    msg = p;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	891b      	ldrh	r3, [r3, #8]
 8008dd2:	83fb      	strh	r3, [r7, #30]
 8008dd4:	e003      	b.n	8008dde <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8008dd6:	4b15      	ldr	r3, [pc, #84]	@ (8008e2c <recv_tcp+0x108>)
 8008dd8:	61bb      	str	r3, [r7, #24]
    len = 0;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	3310      	adds	r3, #16
 8008de2:	69b9      	ldr	r1, [r7, #24]
 8008de4:	4618      	mov	r0, r3
 8008de6:	f00f fcd1 	bl	801878c <sys_mbox_trypost>
 8008dea:	4603      	mov	r3, r0
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d002      	beq.n	8008df6 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8008df0:	f04f 33ff 	mov.w	r3, #4294967295
 8008df4:	e00a      	b.n	8008e0c <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d005      	beq.n	8008e0a <recv_tcp+0xe6>
 8008dfe:	697b      	ldr	r3, [r7, #20]
 8008e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e02:	8bfa      	ldrh	r2, [r7, #30]
 8008e04:	2100      	movs	r1, #0
 8008e06:	6978      	ldr	r0, [r7, #20]
 8008e08:	4798      	blx	r3
  }

  return ERR_OK;
 8008e0a:	2300      	movs	r3, #0
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3720      	adds	r7, #32
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}
 8008e14:	0801a5f4 	.word	0x0801a5f4
 8008e18:	0801a6d0 	.word	0x0801a6d0
 8008e1c:	0801a638 	.word	0x0801a638
 8008e20:	0801a6f4 	.word	0x0801a6f4
 8008e24:	0801a714 	.word	0x0801a714
 8008e28:	0801a72c 	.word	0x0801a72c
 8008e2c:	0801dd52 	.word	0x0801dd52

08008e30 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b084      	sub	sp, #16
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
 8008e38:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d106      	bne.n	8008e52 <poll_tcp+0x22>
 8008e44:	4b29      	ldr	r3, [pc, #164]	@ (8008eec <poll_tcp+0xbc>)
 8008e46:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 8008e4a:	4929      	ldr	r1, [pc, #164]	@ (8008ef0 <poll_tcp+0xc0>)
 8008e4c:	4829      	ldr	r0, [pc, #164]	@ (8008ef4 <poll_tcp+0xc4>)
 8008e4e:	f00f ff79 	bl	8018d44 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	785b      	ldrb	r3, [r3, #1]
 8008e56:	2b01      	cmp	r3, #1
 8008e58:	d104      	bne.n	8008e64 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8008e5a:	2101      	movs	r1, #1
 8008e5c:	68f8      	ldr	r0, [r7, #12]
 8008e5e:	f001 f8b3 	bl	8009fc8 <lwip_netconn_do_writemore>
 8008e62:	e016      	b.n	8008e92 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	785b      	ldrb	r3, [r3, #1]
 8008e68:	2b04      	cmp	r3, #4
 8008e6a:	d112      	bne.n	8008e92 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	6a1b      	ldr	r3, [r3, #32]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d00a      	beq.n	8008e8a <poll_tcp+0x5a>
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	6a1b      	ldr	r3, [r3, #32]
 8008e78:	7a5b      	ldrb	r3, [r3, #9]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d005      	beq.n	8008e8a <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	6a1b      	ldr	r3, [r3, #32]
 8008e82:	7a5a      	ldrb	r2, [r3, #9]
 8008e84:	3a01      	subs	r2, #1
 8008e86:	b2d2      	uxtb	r2, r2
 8008e88:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8008e8a:	2101      	movs	r1, #1
 8008e8c:	68f8      	ldr	r0, [r7, #12]
 8008e8e:	f000 fbf7 	bl	8009680 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	7f1b      	ldrb	r3, [r3, #28]
 8008e96:	f003 0310 	and.w	r3, r3, #16
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d021      	beq.n	8008ee2 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	685b      	ldr	r3, [r3, #4]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d01d      	beq.n	8008ee2 <poll_tcp+0xb2>
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	685b      	ldr	r3, [r3, #4]
 8008eaa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8008eae:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 8008eb2:	d316      	bcc.n	8008ee2 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008ebc:	2b04      	cmp	r3, #4
 8008ebe:	d810      	bhi.n	8008ee2 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	7f1b      	ldrb	r3, [r3, #28]
 8008ec4:	f023 0310 	bic.w	r3, r3, #16
 8008ec8:	b2da      	uxtb	r2, r3
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d005      	beq.n	8008ee2 <poll_tcp+0xb2>
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008eda:	2200      	movs	r2, #0
 8008edc:	2102      	movs	r1, #2
 8008ede:	68f8      	ldr	r0, [r7, #12]
 8008ee0:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8008ee2:	2300      	movs	r3, #0
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3710      	adds	r7, #16
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}
 8008eec:	0801a5f4 	.word	0x0801a5f4
 8008ef0:	0801a74c 	.word	0x0801a74c
 8008ef4:	0801a638 	.word	0x0801a638

08008ef8 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b086      	sub	sp, #24
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	60f8      	str	r0, [r7, #12]
 8008f00:	60b9      	str	r1, [r7, #8]
 8008f02:	4613      	mov	r3, r2
 8008f04:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008f0a:	697b      	ldr	r3, [r7, #20]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d106      	bne.n	8008f1e <sent_tcp+0x26>
 8008f10:	4b20      	ldr	r3, [pc, #128]	@ (8008f94 <sent_tcp+0x9c>)
 8008f12:	f240 1293 	movw	r2, #403	@ 0x193
 8008f16:	4920      	ldr	r1, [pc, #128]	@ (8008f98 <sent_tcp+0xa0>)
 8008f18:	4820      	ldr	r0, [pc, #128]	@ (8008f9c <sent_tcp+0xa4>)
 8008f1a:	f00f ff13 	bl	8018d44 <iprintf>

  if (conn) {
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d032      	beq.n	8008f8a <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	785b      	ldrb	r3, [r3, #1]
 8008f28:	2b01      	cmp	r3, #1
 8008f2a:	d104      	bne.n	8008f36 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8008f2c:	2101      	movs	r1, #1
 8008f2e:	6978      	ldr	r0, [r7, #20]
 8008f30:	f001 f84a 	bl	8009fc8 <lwip_netconn_do_writemore>
 8008f34:	e007      	b.n	8008f46 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	785b      	ldrb	r3, [r3, #1]
 8008f3a:	2b04      	cmp	r3, #4
 8008f3c:	d103      	bne.n	8008f46 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8008f3e:	2101      	movs	r1, #1
 8008f40:	6978      	ldr	r0, [r7, #20]
 8008f42:	f000 fb9d 	bl	8009680 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	685b      	ldr	r3, [r3, #4]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d01d      	beq.n	8008f8a <sent_tcp+0x92>
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	685b      	ldr	r3, [r3, #4]
 8008f52:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8008f56:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 8008f5a:	d316      	bcc.n	8008f8a <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	685b      	ldr	r3, [r3, #4]
 8008f60:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008f64:	2b04      	cmp	r3, #4
 8008f66:	d810      	bhi.n	8008f8a <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	7f1b      	ldrb	r3, [r3, #28]
 8008f6c:	f023 0310 	bic.w	r3, r3, #16
 8008f70:	b2da      	uxtb	r2, r3
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d005      	beq.n	8008f8a <sent_tcp+0x92>
 8008f7e:	697b      	ldr	r3, [r7, #20]
 8008f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f82:	88fa      	ldrh	r2, [r7, #6]
 8008f84:	2102      	movs	r1, #2
 8008f86:	6978      	ldr	r0, [r7, #20]
 8008f88:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8008f8a:	2300      	movs	r3, #0
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3718      	adds	r7, #24
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}
 8008f94:	0801a5f4 	.word	0x0801a5f4
 8008f98:	0801a74c 	.word	0x0801a74c
 8008f9c:	0801a638 	.word	0x0801a638

08008fa0 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b088      	sub	sp, #32
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
 8008fa8:	460b      	mov	r3, r1
 8008faa:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008fb0:	69fb      	ldr	r3, [r7, #28]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d106      	bne.n	8008fc4 <err_tcp+0x24>
 8008fb6:	4b5f      	ldr	r3, [pc, #380]	@ (8009134 <err_tcp+0x194>)
 8008fb8:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8008fbc:	495e      	ldr	r1, [pc, #376]	@ (8009138 <err_tcp+0x198>)
 8008fbe:	485f      	ldr	r0, [pc, #380]	@ (800913c <err_tcp+0x19c>)
 8008fc0:	f00f fec0 	bl	8018d44 <iprintf>

  SYS_ARCH_PROTECT(lev);
 8008fc4:	f00f fd72 	bl	8018aac <sys_arch_protect>
 8008fc8:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8008fca:	69fb      	ldr	r3, [r7, #28]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8008fd0:	69fb      	ldr	r3, [r7, #28]
 8008fd2:	78fa      	ldrb	r2, [r7, #3]
 8008fd4:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8008fd6:	69fb      	ldr	r3, [r7, #28]
 8008fd8:	7f1b      	ldrb	r3, [r3, #28]
 8008fda:	f043 0301 	orr.w	r3, r3, #1
 8008fde:	b2da      	uxtb	r2, r3
 8008fe0:	69fb      	ldr	r3, [r7, #28]
 8008fe2:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8008fe4:	69fb      	ldr	r3, [r7, #28]
 8008fe6:	785b      	ldrb	r3, [r3, #1]
 8008fe8:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8008fea:	69fb      	ldr	r3, [r7, #28]
 8008fec:	2200      	movs	r2, #0
 8008fee:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8008ff0:	69b8      	ldr	r0, [r7, #24]
 8008ff2:	f00f fd69 	bl	8018ac8 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8008ff6:	69fb      	ldr	r3, [r7, #28]
 8008ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d005      	beq.n	800900a <err_tcp+0x6a>
 8008ffe:	69fb      	ldr	r3, [r7, #28]
 8009000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009002:	2200      	movs	r2, #0
 8009004:	2104      	movs	r1, #4
 8009006:	69f8      	ldr	r0, [r7, #28]
 8009008:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800900a:	69fb      	ldr	r3, [r7, #28]
 800900c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800900e:	2b00      	cmp	r3, #0
 8009010:	d005      	beq.n	800901e <err_tcp+0x7e>
 8009012:	69fb      	ldr	r3, [r7, #28]
 8009014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009016:	2200      	movs	r2, #0
 8009018:	2100      	movs	r1, #0
 800901a:	69f8      	ldr	r0, [r7, #28]
 800901c:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800901e:	69fb      	ldr	r3, [r7, #28]
 8009020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009022:	2b00      	cmp	r3, #0
 8009024:	d005      	beq.n	8009032 <err_tcp+0x92>
 8009026:	69fb      	ldr	r3, [r7, #28]
 8009028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800902a:	2200      	movs	r2, #0
 800902c:	2102      	movs	r1, #2
 800902e:	69f8      	ldr	r0, [r7, #28]
 8009030:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8009032:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009036:	4618      	mov	r0, r3
 8009038:	f7ff fd86 	bl	8008b48 <lwip_netconn_err_to_msg>
 800903c:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800903e:	69fb      	ldr	r3, [r7, #28]
 8009040:	3310      	adds	r3, #16
 8009042:	4618      	mov	r0, r3
 8009044:	f00f fc17 	bl	8018876 <sys_mbox_valid>
 8009048:	4603      	mov	r3, r0
 800904a:	2b00      	cmp	r3, #0
 800904c:	d005      	beq.n	800905a <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800904e:	69fb      	ldr	r3, [r7, #28]
 8009050:	3310      	adds	r3, #16
 8009052:	6939      	ldr	r1, [r7, #16]
 8009054:	4618      	mov	r0, r3
 8009056:	f00f fb99 	bl	801878c <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800905a:	69fb      	ldr	r3, [r7, #28]
 800905c:	3314      	adds	r3, #20
 800905e:	4618      	mov	r0, r3
 8009060:	f00f fc09 	bl	8018876 <sys_mbox_valid>
 8009064:	4603      	mov	r3, r0
 8009066:	2b00      	cmp	r3, #0
 8009068:	d005      	beq.n	8009076 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800906a:	69fb      	ldr	r3, [r7, #28]
 800906c:	3314      	adds	r3, #20
 800906e:	6939      	ldr	r1, [r7, #16]
 8009070:	4618      	mov	r0, r3
 8009072:	f00f fb8b 	bl	801878c <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8009076:	7dfb      	ldrb	r3, [r7, #23]
 8009078:	2b01      	cmp	r3, #1
 800907a:	d005      	beq.n	8009088 <err_tcp+0xe8>
 800907c:	7dfb      	ldrb	r3, [r7, #23]
 800907e:	2b04      	cmp	r3, #4
 8009080:	d002      	beq.n	8009088 <err_tcp+0xe8>
 8009082:	7dfb      	ldrb	r3, [r7, #23]
 8009084:	2b03      	cmp	r3, #3
 8009086:	d143      	bne.n	8009110 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8009088:	69fb      	ldr	r3, [r7, #28]
 800908a:	7f1b      	ldrb	r3, [r3, #28]
 800908c:	f003 0304 	and.w	r3, r3, #4
 8009090:	2b00      	cmp	r3, #0
 8009092:	bf14      	ite	ne
 8009094:	2301      	movne	r3, #1
 8009096:	2300      	moveq	r3, #0
 8009098:	b2db      	uxtb	r3, r3
 800909a:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800909c:	69fb      	ldr	r3, [r7, #28]
 800909e:	7f1b      	ldrb	r3, [r3, #28]
 80090a0:	f023 0304 	bic.w	r3, r3, #4
 80090a4:	b2da      	uxtb	r2, r3
 80090a6:	69fb      	ldr	r3, [r7, #28]
 80090a8:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d13b      	bne.n	8009128 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80090b0:	69fb      	ldr	r3, [r7, #28]
 80090b2:	6a1b      	ldr	r3, [r3, #32]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d106      	bne.n	80090c6 <err_tcp+0x126>
 80090b8:	4b1e      	ldr	r3, [pc, #120]	@ (8009134 <err_tcp+0x194>)
 80090ba:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 80090be:	4920      	ldr	r1, [pc, #128]	@ (8009140 <err_tcp+0x1a0>)
 80090c0:	481e      	ldr	r0, [pc, #120]	@ (800913c <err_tcp+0x19c>)
 80090c2:	f00f fe3f 	bl	8018d44 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 80090c6:	7dfb      	ldrb	r3, [r7, #23]
 80090c8:	2b04      	cmp	r3, #4
 80090ca:	d104      	bne.n	80090d6 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 80090cc:	69fb      	ldr	r3, [r7, #28]
 80090ce:	6a1b      	ldr	r3, [r3, #32]
 80090d0:	2200      	movs	r2, #0
 80090d2:	711a      	strb	r2, [r3, #4]
 80090d4:	e003      	b.n	80090de <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 80090d6:	69fb      	ldr	r3, [r7, #28]
 80090d8:	6a1b      	ldr	r3, [r3, #32]
 80090da:	78fa      	ldrb	r2, [r7, #3]
 80090dc:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80090de:	69fb      	ldr	r3, [r7, #28]
 80090e0:	6a1b      	ldr	r3, [r3, #32]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	330c      	adds	r3, #12
 80090e6:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 80090e8:	68b8      	ldr	r0, [r7, #8]
 80090ea:	f00f fc55 	bl	8018998 <sys_sem_valid>
 80090ee:	4603      	mov	r3, r0
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d106      	bne.n	8009102 <err_tcp+0x162>
 80090f4:	4b0f      	ldr	r3, [pc, #60]	@ (8009134 <err_tcp+0x194>)
 80090f6:	f240 12ef 	movw	r2, #495	@ 0x1ef
 80090fa:	4912      	ldr	r1, [pc, #72]	@ (8009144 <err_tcp+0x1a4>)
 80090fc:	480f      	ldr	r0, [pc, #60]	@ (800913c <err_tcp+0x19c>)
 80090fe:	f00f fe21 	bl	8018d44 <iprintf>
      conn->current_msg = NULL;
 8009102:	69fb      	ldr	r3, [r7, #28]
 8009104:	2200      	movs	r2, #0
 8009106:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8009108:	68b8      	ldr	r0, [r7, #8]
 800910a:	f00f fc2b 	bl	8018964 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800910e:	e00b      	b.n	8009128 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8009110:	69fb      	ldr	r3, [r7, #28]
 8009112:	6a1b      	ldr	r3, [r3, #32]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d008      	beq.n	800912a <err_tcp+0x18a>
 8009118:	4b06      	ldr	r3, [pc, #24]	@ (8009134 <err_tcp+0x194>)
 800911a:	f240 12f7 	movw	r2, #503	@ 0x1f7
 800911e:	490a      	ldr	r1, [pc, #40]	@ (8009148 <err_tcp+0x1a8>)
 8009120:	4806      	ldr	r0, [pc, #24]	@ (800913c <err_tcp+0x19c>)
 8009122:	f00f fe0f 	bl	8018d44 <iprintf>
  }
}
 8009126:	e000      	b.n	800912a <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 8009128:	bf00      	nop
}
 800912a:	bf00      	nop
 800912c:	3720      	adds	r7, #32
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}
 8009132:	bf00      	nop
 8009134:	0801a5f4 	.word	0x0801a5f4
 8009138:	0801a74c 	.word	0x0801a74c
 800913c:	0801a638 	.word	0x0801a638
 8009140:	0801a75c 	.word	0x0801a75c
 8009144:	0801a778 	.word	0x0801a778
 8009148:	0801a794 	.word	0x0801a794

0800914c <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b084      	sub	sp, #16
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	685b      	ldr	r3, [r3, #4]
 8009158:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800915a:	6879      	ldr	r1, [r7, #4]
 800915c:	68f8      	ldr	r0, [r7, #12]
 800915e:	f005 fe8f 	bl	800ee80 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8009162:	490a      	ldr	r1, [pc, #40]	@ (800918c <setup_tcp+0x40>)
 8009164:	68f8      	ldr	r0, [r7, #12]
 8009166:	f005 fe9d 	bl	800eea4 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800916a:	4909      	ldr	r1, [pc, #36]	@ (8009190 <setup_tcp+0x44>)
 800916c:	68f8      	ldr	r0, [r7, #12]
 800916e:	f005 febb 	bl	800eee8 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8009172:	2202      	movs	r2, #2
 8009174:	4907      	ldr	r1, [pc, #28]	@ (8009194 <setup_tcp+0x48>)
 8009176:	68f8      	ldr	r0, [r7, #12]
 8009178:	f005 ff12 	bl	800efa0 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800917c:	4906      	ldr	r1, [pc, #24]	@ (8009198 <setup_tcp+0x4c>)
 800917e:	68f8      	ldr	r0, [r7, #12]
 8009180:	f005 fed4 	bl	800ef2c <tcp_err>
}
 8009184:	bf00      	nop
 8009186:	3710      	adds	r7, #16
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}
 800918c:	08008d25 	.word	0x08008d25
 8009190:	08008ef9 	.word	0x08008ef9
 8009194:	08008e31 	.word	0x08008e31
 8009198:	08008fa1 	.word	0x08008fa1

0800919c <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800919c:	b590      	push	{r4, r7, lr}
 800919e:	b089      	sub	sp, #36	@ 0x24
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	60f8      	str	r0, [r7, #12]
 80091a4:	60b9      	str	r1, [r7, #8]
 80091a6:	4613      	mov	r3, r2
 80091a8:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 80091ae:	69fb      	ldr	r3, [r7, #28]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d102      	bne.n	80091ba <accept_function+0x1e>
    return ERR_VAL;
 80091b4:	f06f 0305 	mvn.w	r3, #5
 80091b8:	e0a1      	b.n	80092fe <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 80091ba:	69fb      	ldr	r3, [r7, #28]
 80091bc:	3314      	adds	r3, #20
 80091be:	4618      	mov	r0, r3
 80091c0:	f00f fb59 	bl	8018876 <sys_mbox_valid>
 80091c4:	4603      	mov	r3, r0
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d102      	bne.n	80091d0 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 80091ca:	f06f 0305 	mvn.w	r3, #5
 80091ce:	e096      	b.n	80092fe <accept_function+0x162>
  }

  if (newpcb == NULL) {
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d11b      	bne.n	800920e <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 80091d6:	69fb      	ldr	r3, [r7, #28]
 80091d8:	f103 0414 	add.w	r4, r3, #20
 80091dc:	f06f 000c 	mvn.w	r0, #12
 80091e0:	f7ff fcb2 	bl	8008b48 <lwip_netconn_err_to_msg>
 80091e4:	4603      	mov	r3, r0
 80091e6:	4619      	mov	r1, r3
 80091e8:	4620      	mov	r0, r4
 80091ea:	f00f facf 	bl	801878c <sys_mbox_trypost>
 80091ee:	4603      	mov	r3, r0
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d109      	bne.n	8009208 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80091f4:	69fb      	ldr	r3, [r7, #28]
 80091f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d005      	beq.n	8009208 <accept_function+0x6c>
 80091fc:	69fb      	ldr	r3, [r7, #28]
 80091fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009200:	2200      	movs	r2, #0
 8009202:	2100      	movs	r1, #0
 8009204:	69f8      	ldr	r0, [r7, #28]
 8009206:	4798      	blx	r3
    }
    return ERR_VAL;
 8009208:	f06f 0305 	mvn.w	r3, #5
 800920c:	e077      	b.n	80092fe <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800920e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d006      	beq.n	8009224 <accept_function+0x88>
 8009216:	4b3c      	ldr	r3, [pc, #240]	@ (8009308 <accept_function+0x16c>)
 8009218:	f240 222a 	movw	r2, #554	@ 0x22a
 800921c:	493b      	ldr	r1, [pc, #236]	@ (800930c <accept_function+0x170>)
 800921e:	483c      	ldr	r0, [pc, #240]	@ (8009310 <accept_function+0x174>)
 8009220:	f00f fd90 	bl	8018d44 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 8009224:	69fb      	ldr	r3, [r7, #28]
 8009226:	781a      	ldrb	r2, [r3, #0]
 8009228:	69fb      	ldr	r3, [r7, #28]
 800922a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800922c:	4619      	mov	r1, r3
 800922e:	4610      	mov	r0, r2
 8009230:	f000 f8f0 	bl	8009414 <netconn_alloc>
 8009234:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 8009236:	69bb      	ldr	r3, [r7, #24]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d11b      	bne.n	8009274 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800923c:	69fb      	ldr	r3, [r7, #28]
 800923e:	f103 0414 	add.w	r4, r3, #20
 8009242:	f06f 000c 	mvn.w	r0, #12
 8009246:	f7ff fc7f 	bl	8008b48 <lwip_netconn_err_to_msg>
 800924a:	4603      	mov	r3, r0
 800924c:	4619      	mov	r1, r3
 800924e:	4620      	mov	r0, r4
 8009250:	f00f fa9c 	bl	801878c <sys_mbox_trypost>
 8009254:	4603      	mov	r3, r0
 8009256:	2b00      	cmp	r3, #0
 8009258:	d109      	bne.n	800926e <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800925a:	69fb      	ldr	r3, [r7, #28]
 800925c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800925e:	2b00      	cmp	r3, #0
 8009260:	d005      	beq.n	800926e <accept_function+0xd2>
 8009262:	69fb      	ldr	r3, [r7, #28]
 8009264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009266:	2200      	movs	r2, #0
 8009268:	2100      	movs	r1, #0
 800926a:	69f8      	ldr	r0, [r7, #28]
 800926c:	4798      	blx	r3
    }
    return ERR_MEM;
 800926e:	f04f 33ff 	mov.w	r3, #4294967295
 8009272:	e044      	b.n	80092fe <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 8009274:	69bb      	ldr	r3, [r7, #24]
 8009276:	68ba      	ldr	r2, [r7, #8]
 8009278:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800927a:	69b8      	ldr	r0, [r7, #24]
 800927c:	f7ff ff66 	bl	800914c <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8009280:	69fb      	ldr	r3, [r7, #28]
 8009282:	3314      	adds	r3, #20
 8009284:	69b9      	ldr	r1, [r7, #24]
 8009286:	4618      	mov	r0, r3
 8009288:	f00f fa80 	bl	801878c <sys_mbox_trypost>
 800928c:	4603      	mov	r3, r0
 800928e:	2b00      	cmp	r3, #0
 8009290:	d02a      	beq.n	80092e8 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 8009292:	69bb      	ldr	r3, [r7, #24]
 8009294:	685b      	ldr	r3, [r3, #4]
 8009296:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 8009298:	2100      	movs	r1, #0
 800929a:	6978      	ldr	r0, [r7, #20]
 800929c:	f005 fdf0 	bl	800ee80 <tcp_arg>
    tcp_recv(pcb, NULL);
 80092a0:	2100      	movs	r1, #0
 80092a2:	6978      	ldr	r0, [r7, #20]
 80092a4:	f005 fdfe 	bl	800eea4 <tcp_recv>
    tcp_sent(pcb, NULL);
 80092a8:	2100      	movs	r1, #0
 80092aa:	6978      	ldr	r0, [r7, #20]
 80092ac:	f005 fe1c 	bl	800eee8 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 80092b0:	2200      	movs	r2, #0
 80092b2:	2100      	movs	r1, #0
 80092b4:	6978      	ldr	r0, [r7, #20]
 80092b6:	f005 fe73 	bl	800efa0 <tcp_poll>
    tcp_err(pcb, NULL);
 80092ba:	2100      	movs	r1, #0
 80092bc:	6978      	ldr	r0, [r7, #20]
 80092be:	f005 fe35 	bl	800ef2c <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 80092c2:	69bb      	ldr	r3, [r7, #24]
 80092c4:	2200      	movs	r2, #0
 80092c6:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 80092c8:	69bb      	ldr	r3, [r7, #24]
 80092ca:	3310      	adds	r3, #16
 80092cc:	4618      	mov	r0, r3
 80092ce:	f00f fa4b 	bl	8018768 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 80092d2:	69bb      	ldr	r3, [r7, #24]
 80092d4:	3310      	adds	r3, #16
 80092d6:	4618      	mov	r0, r3
 80092d8:	f00f fade 	bl	8018898 <sys_mbox_set_invalid>
    netconn_free(newconn);
 80092dc:	69b8      	ldr	r0, [r7, #24]
 80092de:	f000 f907 	bl	80094f0 <netconn_free>
    return ERR_MEM;
 80092e2:	f04f 33ff 	mov.w	r3, #4294967295
 80092e6:	e00a      	b.n	80092fe <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80092e8:	69fb      	ldr	r3, [r7, #28]
 80092ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d005      	beq.n	80092fc <accept_function+0x160>
 80092f0:	69fb      	ldr	r3, [r7, #28]
 80092f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092f4:	2200      	movs	r2, #0
 80092f6:	2100      	movs	r1, #0
 80092f8:	69f8      	ldr	r0, [r7, #28]
 80092fa:	4798      	blx	r3
  }

  return ERR_OK;
 80092fc:	2300      	movs	r3, #0
}
 80092fe:	4618      	mov	r0, r3
 8009300:	3724      	adds	r7, #36	@ 0x24
 8009302:	46bd      	mov	sp, r7
 8009304:	bd90      	pop	{r4, r7, pc}
 8009306:	bf00      	nop
 8009308:	0801a5f4 	.word	0x0801a5f4
 800930c:	0801a7b0 	.word	0x0801a7b0
 8009310:	0801a638 	.word	0x0801a638

08009314 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8009314:	b590      	push	{r4, r7, lr}
 8009316:	b085      	sub	sp, #20
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800931c:	2300      	movs	r3, #0
 800931e:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	685b      	ldr	r3, [r3, #4]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d006      	beq.n	8009338 <pcb_new+0x24>
 800932a:	4b2b      	ldr	r3, [pc, #172]	@ (80093d8 <pcb_new+0xc4>)
 800932c:	f240 2265 	movw	r2, #613	@ 0x265
 8009330:	492a      	ldr	r1, [pc, #168]	@ (80093dc <pcb_new+0xc8>)
 8009332:	482b      	ldr	r0, [pc, #172]	@ (80093e0 <pcb_new+0xcc>)
 8009334:	f00f fd06 	bl	8018d44 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	781b      	ldrb	r3, [r3, #0]
 800933e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009342:	2b10      	cmp	r3, #16
 8009344:	d022      	beq.n	800938c <pcb_new+0x78>
 8009346:	2b20      	cmp	r3, #32
 8009348:	d133      	bne.n	80093b2 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681c      	ldr	r4, [r3, #0]
 800934e:	7bfb      	ldrb	r3, [r7, #15]
 8009350:	4618      	mov	r0, r3
 8009352:	f00b f836 	bl	80143c2 <udp_new_ip_type>
 8009356:	4603      	mov	r3, r0
 8009358:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	685b      	ldr	r3, [r3, #4]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d02a      	beq.n	80093ba <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	781b      	ldrb	r3, [r3, #0]
 800936a:	2b22      	cmp	r3, #34	@ 0x22
 800936c:	d104      	bne.n	8009378 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	685b      	ldr	r3, [r3, #4]
 8009374:	2201      	movs	r2, #1
 8009376:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	6858      	ldr	r0, [r3, #4]
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	461a      	mov	r2, r3
 8009384:	4917      	ldr	r1, [pc, #92]	@ (80093e4 <pcb_new+0xd0>)
 8009386:	f00a ffa3 	bl	80142d0 <udp_recv>
      }
      break;
 800938a:	e016      	b.n	80093ba <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681c      	ldr	r4, [r3, #0]
 8009390:	7bfb      	ldrb	r3, [r7, #15]
 8009392:	4618      	mov	r0, r3
 8009394:	f005 fd66 	bl	800ee64 <tcp_new_ip_type>
 8009398:	4603      	mov	r3, r0
 800939a:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	685b      	ldr	r3, [r3, #4]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d00b      	beq.n	80093be <pcb_new+0xaa>
        setup_tcp(msg->conn);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	4618      	mov	r0, r3
 80093ac:	f7ff fece 	bl	800914c <setup_tcp>
      }
      break;
 80093b0:	e005      	b.n	80093be <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	22fa      	movs	r2, #250	@ 0xfa
 80093b6:	711a      	strb	r2, [r3, #4]
      return;
 80093b8:	e00a      	b.n	80093d0 <pcb_new+0xbc>
      break;
 80093ba:	bf00      	nop
 80093bc:	e000      	b.n	80093c0 <pcb_new+0xac>
      break;
 80093be:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	685b      	ldr	r3, [r3, #4]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d102      	bne.n	80093d0 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	22ff      	movs	r2, #255	@ 0xff
 80093ce:	711a      	strb	r2, [r3, #4]
  }
}
 80093d0:	3714      	adds	r7, #20
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd90      	pop	{r4, r7, pc}
 80093d6:	bf00      	nop
 80093d8:	0801a5f4 	.word	0x0801a5f4
 80093dc:	0801a7d8 	.word	0x0801a7d8
 80093e0:	0801a638 	.word	0x0801a638
 80093e4:	08008c29 	.word	0x08008c29

080093e8 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b084      	sub	sp, #16
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	2200      	movs	r2, #0
 80093f8:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	685b      	ldr	r3, [r3, #4]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d102      	bne.n	800940a <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8009404:	68f8      	ldr	r0, [r7, #12]
 8009406:	f7ff ff85 	bl	8009314 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800940a:	bf00      	nop
 800940c:	3710      	adds	r7, #16
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}
	...

08009414 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b086      	sub	sp, #24
 8009418:	af00      	add	r7, sp, #0
 800941a:	4603      	mov	r3, r0
 800941c:	6039      	str	r1, [r7, #0]
 800941e:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8009420:	2300      	movs	r3, #0
 8009422:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8009424:	2007      	movs	r0, #7
 8009426:	f002 fe2d 	bl	800c084 <memp_malloc>
 800942a:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d101      	bne.n	8009436 <netconn_alloc+0x22>
    return NULL;
 8009432:	2300      	movs	r3, #0
 8009434:	e052      	b.n	80094dc <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	2200      	movs	r2, #0
 800943a:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	79fa      	ldrb	r2, [r7, #7]
 8009440:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	2200      	movs	r2, #0
 8009446:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8009448:	79fb      	ldrb	r3, [r7, #7]
 800944a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800944e:	2b10      	cmp	r3, #16
 8009450:	d004      	beq.n	800945c <netconn_alloc+0x48>
 8009452:	2b20      	cmp	r3, #32
 8009454:	d105      	bne.n	8009462 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 8009456:	2306      	movs	r3, #6
 8009458:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800945a:	e00a      	b.n	8009472 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800945c:	2306      	movs	r3, #6
 800945e:	617b      	str	r3, [r7, #20]
      break;
 8009460:	e007      	b.n	8009472 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8009462:	4b20      	ldr	r3, [pc, #128]	@ (80094e4 <netconn_alloc+0xd0>)
 8009464:	f240 22e5 	movw	r2, #741	@ 0x2e5
 8009468:	491f      	ldr	r1, [pc, #124]	@ (80094e8 <netconn_alloc+0xd4>)
 800946a:	4820      	ldr	r0, [pc, #128]	@ (80094ec <netconn_alloc+0xd8>)
 800946c:	f00f fc6a 	bl	8018d44 <iprintf>
      goto free_and_return;
 8009470:	e02f      	b.n	80094d2 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	3310      	adds	r3, #16
 8009476:	6979      	ldr	r1, [r7, #20]
 8009478:	4618      	mov	r0, r3
 800947a:	f00f f953 	bl	8018724 <sys_mbox_new>
 800947e:	4603      	mov	r3, r0
 8009480:	2b00      	cmp	r3, #0
 8009482:	d125      	bne.n	80094d0 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	330c      	adds	r3, #12
 8009488:	2100      	movs	r1, #0
 800948a:	4618      	mov	r0, r3
 800948c:	f00f fa11 	bl	80188b2 <sys_sem_new>
 8009490:	4603      	mov	r3, r0
 8009492:	2b00      	cmp	r3, #0
 8009494:	d005      	beq.n	80094a2 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	3310      	adds	r3, #16
 800949a:	4618      	mov	r0, r3
 800949c:	f00f f964 	bl	8018768 <sys_mbox_free>
    goto free_and_return;
 80094a0:	e017      	b.n	80094d2 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	3314      	adds	r3, #20
 80094a6:	4618      	mov	r0, r3
 80094a8:	f00f f9f6 	bl	8018898 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	2200      	movs	r2, #0
 80094b0:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	f04f 32ff 	mov.w	r2, #4294967295
 80094b8:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	683a      	ldr	r2, [r7, #0]
 80094be:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	2200      	movs	r2, #0
 80094c4:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	7cfa      	ldrb	r2, [r7, #19]
 80094ca:	771a      	strb	r2, [r3, #28]
  return conn;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	e005      	b.n	80094dc <netconn_alloc+0xc8>
    goto free_and_return;
 80094d0:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 80094d2:	68f9      	ldr	r1, [r7, #12]
 80094d4:	2007      	movs	r0, #7
 80094d6:	f002 fe4b 	bl	800c170 <memp_free>
  return NULL;
 80094da:	2300      	movs	r3, #0
}
 80094dc:	4618      	mov	r0, r3
 80094de:	3718      	adds	r7, #24
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bd80      	pop	{r7, pc}
 80094e4:	0801a5f4 	.word	0x0801a5f4
 80094e8:	0801a7f8 	.word	0x0801a7f8
 80094ec:	0801a638 	.word	0x0801a638

080094f0 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b082      	sub	sp, #8
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	685b      	ldr	r3, [r3, #4]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d006      	beq.n	800950e <netconn_free+0x1e>
 8009500:	4b1b      	ldr	r3, [pc, #108]	@ (8009570 <netconn_free+0x80>)
 8009502:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8009506:	491b      	ldr	r1, [pc, #108]	@ (8009574 <netconn_free+0x84>)
 8009508:	481b      	ldr	r0, [pc, #108]	@ (8009578 <netconn_free+0x88>)
 800950a:	f00f fc1b 	bl	8018d44 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	3310      	adds	r3, #16
 8009512:	4618      	mov	r0, r3
 8009514:	f00f f9af 	bl	8018876 <sys_mbox_valid>
 8009518:	4603      	mov	r3, r0
 800951a:	2b00      	cmp	r3, #0
 800951c:	d006      	beq.n	800952c <netconn_free+0x3c>
 800951e:	4b14      	ldr	r3, [pc, #80]	@ (8009570 <netconn_free+0x80>)
 8009520:	f240 3223 	movw	r2, #803	@ 0x323
 8009524:	4915      	ldr	r1, [pc, #84]	@ (800957c <netconn_free+0x8c>)
 8009526:	4814      	ldr	r0, [pc, #80]	@ (8009578 <netconn_free+0x88>)
 8009528:	f00f fc0c 	bl	8018d44 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	3314      	adds	r3, #20
 8009530:	4618      	mov	r0, r3
 8009532:	f00f f9a0 	bl	8018876 <sys_mbox_valid>
 8009536:	4603      	mov	r3, r0
 8009538:	2b00      	cmp	r3, #0
 800953a:	d006      	beq.n	800954a <netconn_free+0x5a>
 800953c:	4b0c      	ldr	r3, [pc, #48]	@ (8009570 <netconn_free+0x80>)
 800953e:	f240 3226 	movw	r2, #806	@ 0x326
 8009542:	490f      	ldr	r1, [pc, #60]	@ (8009580 <netconn_free+0x90>)
 8009544:	480c      	ldr	r0, [pc, #48]	@ (8009578 <netconn_free+0x88>)
 8009546:	f00f fbfd 	bl	8018d44 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	330c      	adds	r3, #12
 800954e:	4618      	mov	r0, r3
 8009550:	f00f fa15 	bl	801897e <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	330c      	adds	r3, #12
 8009558:	4618      	mov	r0, r3
 800955a:	f00f fa2e 	bl	80189ba <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800955e:	6879      	ldr	r1, [r7, #4]
 8009560:	2007      	movs	r0, #7
 8009562:	f002 fe05 	bl	800c170 <memp_free>
}
 8009566:	bf00      	nop
 8009568:	3708      	adds	r7, #8
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}
 800956e:	bf00      	nop
 8009570:	0801a5f4 	.word	0x0801a5f4
 8009574:	0801a820 	.word	0x0801a820
 8009578:	0801a638 	.word	0x0801a638
 800957c:	0801a850 	.word	0x0801a850
 8009580:	0801a88c 	.word	0x0801a88c

08009584 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b086      	sub	sp, #24
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	3310      	adds	r3, #16
 8009590:	4618      	mov	r0, r3
 8009592:	f00f f970 	bl	8018876 <sys_mbox_valid>
 8009596:	4603      	mov	r3, r0
 8009598:	2b00      	cmp	r3, #0
 800959a:	d02f      	beq.n	80095fc <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800959c:	e018      	b.n	80095d0 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	781b      	ldrb	r3, [r3, #0]
 80095a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80095a6:	2b10      	cmp	r3, #16
 80095a8:	d10e      	bne.n	80095c8 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	f107 020f 	add.w	r2, r7, #15
 80095b0:	4611      	mov	r1, r2
 80095b2:	4618      	mov	r0, r3
 80095b4:	f7ff fafe 	bl	8008bb4 <lwip_netconn_is_err_msg>
 80095b8:	4603      	mov	r3, r0
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d108      	bne.n	80095d0 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 80095be:	693b      	ldr	r3, [r7, #16]
 80095c0:	4618      	mov	r0, r3
 80095c2:	f003 fc85 	bl	800ced0 <pbuf_free>
 80095c6:	e003      	b.n	80095d0 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 80095c8:	693b      	ldr	r3, [r7, #16]
 80095ca:	4618      	mov	r0, r3
 80095cc:	f000 ffe0 	bl	800a590 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	3310      	adds	r3, #16
 80095d4:	f107 0210 	add.w	r2, r7, #16
 80095d8:	4611      	mov	r1, r2
 80095da:	4618      	mov	r0, r3
 80095dc:	f00f f92f 	bl	801883e <sys_arch_mbox_tryfetch>
 80095e0:	4603      	mov	r3, r0
 80095e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095e6:	d1da      	bne.n	800959e <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	3310      	adds	r3, #16
 80095ec:	4618      	mov	r0, r3
 80095ee:	f00f f8bb 	bl	8018768 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	3310      	adds	r3, #16
 80095f6:	4618      	mov	r0, r3
 80095f8:	f00f f94e 	bl	8018898 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	3314      	adds	r3, #20
 8009600:	4618      	mov	r0, r3
 8009602:	f00f f938 	bl	8018876 <sys_mbox_valid>
 8009606:	4603      	mov	r3, r0
 8009608:	2b00      	cmp	r3, #0
 800960a:	d034      	beq.n	8009676 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800960c:	e01d      	b.n	800964a <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800960e:	693b      	ldr	r3, [r7, #16]
 8009610:	f107 020e 	add.w	r2, r7, #14
 8009614:	4611      	mov	r1, r2
 8009616:	4618      	mov	r0, r3
 8009618:	f7ff facc 	bl	8008bb4 <lwip_netconn_is_err_msg>
 800961c:	4603      	mov	r3, r0
 800961e:	2b00      	cmp	r3, #0
 8009620:	d113      	bne.n	800964a <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 8009622:	693b      	ldr	r3, [r7, #16]
 8009624:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 8009626:	6978      	ldr	r0, [r7, #20]
 8009628:	f7ff ffac 	bl	8009584 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	685b      	ldr	r3, [r3, #4]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d007      	beq.n	8009644 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	685b      	ldr	r3, [r3, #4]
 8009638:	4618      	mov	r0, r3
 800963a:	f004 fa49 	bl	800dad0 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	2200      	movs	r2, #0
 8009642:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8009644:	6978      	ldr	r0, [r7, #20]
 8009646:	f7ff ff53 	bl	80094f0 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	3314      	adds	r3, #20
 800964e:	f107 0210 	add.w	r2, r7, #16
 8009652:	4611      	mov	r1, r2
 8009654:	4618      	mov	r0, r3
 8009656:	f00f f8f2 	bl	801883e <sys_arch_mbox_tryfetch>
 800965a:	4603      	mov	r3, r0
 800965c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009660:	d1d5      	bne.n	800960e <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	3314      	adds	r3, #20
 8009666:	4618      	mov	r0, r3
 8009668:	f00f f87e 	bl	8018768 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	3314      	adds	r3, #20
 8009670:	4618      	mov	r0, r3
 8009672:	f00f f911 	bl	8018898 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8009676:	bf00      	nop
 8009678:	3718      	adds	r7, #24
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}
	...

08009680 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b086      	sub	sp, #24
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
 8009688:	460b      	mov	r3, r1
 800968a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800968c:	2300      	movs	r3, #0
 800968e:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d106      	bne.n	80096a4 <lwip_netconn_do_close_internal+0x24>
 8009696:	4b87      	ldr	r3, [pc, #540]	@ (80098b4 <lwip_netconn_do_close_internal+0x234>)
 8009698:	f240 32a2 	movw	r2, #930	@ 0x3a2
 800969c:	4986      	ldr	r1, [pc, #536]	@ (80098b8 <lwip_netconn_do_close_internal+0x238>)
 800969e:	4887      	ldr	r0, [pc, #540]	@ (80098bc <lwip_netconn_do_close_internal+0x23c>)
 80096a0:	f00f fb50 	bl	8018d44 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	781b      	ldrb	r3, [r3, #0]
 80096a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80096ac:	2b10      	cmp	r3, #16
 80096ae:	d006      	beq.n	80096be <lwip_netconn_do_close_internal+0x3e>
 80096b0:	4b80      	ldr	r3, [pc, #512]	@ (80098b4 <lwip_netconn_do_close_internal+0x234>)
 80096b2:	f240 32a3 	movw	r2, #931	@ 0x3a3
 80096b6:	4982      	ldr	r1, [pc, #520]	@ (80098c0 <lwip_netconn_do_close_internal+0x240>)
 80096b8:	4880      	ldr	r0, [pc, #512]	@ (80098bc <lwip_netconn_do_close_internal+0x23c>)
 80096ba:	f00f fb43 	bl	8018d44 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	785b      	ldrb	r3, [r3, #1]
 80096c2:	2b04      	cmp	r3, #4
 80096c4:	d006      	beq.n	80096d4 <lwip_netconn_do_close_internal+0x54>
 80096c6:	4b7b      	ldr	r3, [pc, #492]	@ (80098b4 <lwip_netconn_do_close_internal+0x234>)
 80096c8:	f44f 7269 	mov.w	r2, #932	@ 0x3a4
 80096cc:	497d      	ldr	r1, [pc, #500]	@ (80098c4 <lwip_netconn_do_close_internal+0x244>)
 80096ce:	487b      	ldr	r0, [pc, #492]	@ (80098bc <lwip_netconn_do_close_internal+0x23c>)
 80096d0:	f00f fb38 	bl	8018d44 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	685b      	ldr	r3, [r3, #4]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d106      	bne.n	80096ea <lwip_netconn_do_close_internal+0x6a>
 80096dc:	4b75      	ldr	r3, [pc, #468]	@ (80098b4 <lwip_netconn_do_close_internal+0x234>)
 80096de:	f240 32a5 	movw	r2, #933	@ 0x3a5
 80096e2:	4979      	ldr	r1, [pc, #484]	@ (80098c8 <lwip_netconn_do_close_internal+0x248>)
 80096e4:	4875      	ldr	r0, [pc, #468]	@ (80098bc <lwip_netconn_do_close_internal+0x23c>)
 80096e6:	f00f fb2d 	bl	8018d44 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6a1b      	ldr	r3, [r3, #32]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d106      	bne.n	8009700 <lwip_netconn_do_close_internal+0x80>
 80096f2:	4b70      	ldr	r3, [pc, #448]	@ (80098b4 <lwip_netconn_do_close_internal+0x234>)
 80096f4:	f240 32a6 	movw	r2, #934	@ 0x3a6
 80096f8:	4974      	ldr	r1, [pc, #464]	@ (80098cc <lwip_netconn_do_close_internal+0x24c>)
 80096fa:	4870      	ldr	r0, [pc, #448]	@ (80098bc <lwip_netconn_do_close_internal+0x23c>)
 80096fc:	f00f fb22 	bl	8018d44 <iprintf>

  tpcb = conn->pcb.tcp;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	685b      	ldr	r3, [r3, #4]
 8009704:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6a1b      	ldr	r3, [r3, #32]
 800970a:	7a1b      	ldrb	r3, [r3, #8]
 800970c:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800970e:	7bfb      	ldrb	r3, [r7, #15]
 8009710:	f003 0301 	and.w	r3, r3, #1
 8009714:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 8009716:	7bfb      	ldrb	r3, [r7, #15]
 8009718:	f003 0302 	and.w	r3, r3, #2
 800971c:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800971e:	7bfb      	ldrb	r3, [r7, #15]
 8009720:	2b03      	cmp	r3, #3
 8009722:	d102      	bne.n	800972a <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8009724:	2301      	movs	r3, #1
 8009726:	75bb      	strb	r3, [r7, #22]
 8009728:	e01f      	b.n	800976a <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800972a:	7bbb      	ldrb	r3, [r7, #14]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d00e      	beq.n	800974e <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8009730:	693b      	ldr	r3, [r7, #16]
 8009732:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8009734:	2b05      	cmp	r3, #5
 8009736:	d007      	beq.n	8009748 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8009738:	693b      	ldr	r3, [r7, #16]
 800973a:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800973c:	2b06      	cmp	r3, #6
 800973e:	d003      	beq.n	8009748 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8009744:	2b08      	cmp	r3, #8
 8009746:	d102      	bne.n	800974e <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 8009748:	2301      	movs	r3, #1
 800974a:	75bb      	strb	r3, [r7, #22]
 800974c:	e00d      	b.n	800976a <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800974e:	7b7b      	ldrb	r3, [r7, #13]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d008      	beq.n	8009766 <lwip_netconn_do_close_internal+0xe6>
 8009754:	693b      	ldr	r3, [r7, #16]
 8009756:	8b5b      	ldrh	r3, [r3, #26]
 8009758:	f003 0310 	and.w	r3, r3, #16
 800975c:	2b00      	cmp	r3, #0
 800975e:	d002      	beq.n	8009766 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8009760:	2301      	movs	r3, #1
 8009762:	75bb      	strb	r3, [r7, #22]
 8009764:	e001      	b.n	800976a <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 8009766:	2300      	movs	r3, #0
 8009768:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800976a:	7dbb      	ldrb	r3, [r7, #22]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d003      	beq.n	8009778 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8009770:	2100      	movs	r1, #0
 8009772:	6938      	ldr	r0, [r7, #16]
 8009774:	f005 fb84 	bl	800ee80 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	7d1b      	ldrb	r3, [r3, #20]
 800977c:	2b01      	cmp	r3, #1
 800977e:	d104      	bne.n	800978a <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8009780:	2100      	movs	r1, #0
 8009782:	6938      	ldr	r0, [r7, #16]
 8009784:	f005 fbf4 	bl	800ef70 <tcp_accept>
 8009788:	e01d      	b.n	80097c6 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800978a:	7bbb      	ldrb	r3, [r7, #14]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d007      	beq.n	80097a0 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8009790:	2100      	movs	r1, #0
 8009792:	6938      	ldr	r0, [r7, #16]
 8009794:	f005 fb86 	bl	800eea4 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8009798:	2100      	movs	r1, #0
 800979a:	6938      	ldr	r0, [r7, #16]
 800979c:	f005 fbe8 	bl	800ef70 <tcp_accept>
    }
    if (shut_tx) {
 80097a0:	7b7b      	ldrb	r3, [r7, #13]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d003      	beq.n	80097ae <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 80097a6:	2100      	movs	r1, #0
 80097a8:	6938      	ldr	r0, [r7, #16]
 80097aa:	f005 fb9d 	bl	800eee8 <tcp_sent>
    }
    if (shut_close) {
 80097ae:	7dbb      	ldrb	r3, [r7, #22]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d008      	beq.n	80097c6 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 80097b4:	2200      	movs	r2, #0
 80097b6:	2100      	movs	r1, #0
 80097b8:	6938      	ldr	r0, [r7, #16]
 80097ba:	f005 fbf1 	bl	800efa0 <tcp_poll>
      tcp_err(tpcb, NULL);
 80097be:	2100      	movs	r1, #0
 80097c0:	6938      	ldr	r0, [r7, #16]
 80097c2:	f005 fbb3 	bl	800ef2c <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 80097c6:	7dbb      	ldrb	r3, [r7, #22]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d005      	beq.n	80097d8 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 80097cc:	6938      	ldr	r0, [r7, #16]
 80097ce:	f004 f839 	bl	800d844 <tcp_close>
 80097d2:	4603      	mov	r3, r0
 80097d4:	75fb      	strb	r3, [r7, #23]
 80097d6:	e007      	b.n	80097e8 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 80097d8:	7bbb      	ldrb	r3, [r7, #14]
 80097da:	7b7a      	ldrb	r2, [r7, #13]
 80097dc:	4619      	mov	r1, r3
 80097de:	6938      	ldr	r0, [r7, #16]
 80097e0:	f004 f85c 	bl	800d89c <tcp_shutdown>
 80097e4:	4603      	mov	r3, r0
 80097e6:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 80097e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d102      	bne.n	80097f6 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 80097f0:	2301      	movs	r3, #1
 80097f2:	757b      	strb	r3, [r7, #21]
 80097f4:	e016      	b.n	8009824 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 80097f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80097fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097fe:	d10f      	bne.n	8009820 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6a1b      	ldr	r3, [r3, #32]
 8009804:	7a5b      	ldrb	r3, [r3, #9]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d10c      	bne.n	8009824 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800980a:	2301      	movs	r3, #1
 800980c:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800980e:	7dbb      	ldrb	r3, [r7, #22]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d007      	beq.n	8009824 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8009814:	6938      	ldr	r0, [r7, #16]
 8009816:	f004 f95b 	bl	800dad0 <tcp_abort>
          err = ERR_OK;
 800981a:	2300      	movs	r3, #0
 800981c:	75fb      	strb	r3, [r7, #23]
 800981e:	e001      	b.n	8009824 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8009820:	2301      	movs	r3, #1
 8009822:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8009824:	7d7b      	ldrb	r3, [r7, #21]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d052      	beq.n	80098d0 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6a1b      	ldr	r3, [r3, #32]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	330c      	adds	r3, #12
 8009832:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	6a1b      	ldr	r3, [r3, #32]
 8009838:	7dfa      	ldrb	r2, [r7, #23]
 800983a:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2200      	movs	r2, #0
 8009840:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2200      	movs	r2, #0
 8009846:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8009848:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d129      	bne.n	80098a4 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 8009850:	7dbb      	ldrb	r3, [r7, #22]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d00c      	beq.n	8009870 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2200      	movs	r2, #0
 800985a:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009860:	2b00      	cmp	r3, #0
 8009862:	d005      	beq.n	8009870 <lwip_netconn_do_close_internal+0x1f0>
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009868:	2200      	movs	r2, #0
 800986a:	2104      	movs	r1, #4
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	4798      	blx	r3
      }
      if (shut_rx) {
 8009870:	7bbb      	ldrb	r3, [r7, #14]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d009      	beq.n	800988a <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800987a:	2b00      	cmp	r3, #0
 800987c:	d005      	beq.n	800988a <lwip_netconn_do_close_internal+0x20a>
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009882:	2200      	movs	r2, #0
 8009884:	2100      	movs	r1, #0
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	4798      	blx	r3
      }
      if (shut_tx) {
 800988a:	7b7b      	ldrb	r3, [r7, #13]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d009      	beq.n	80098a4 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009894:	2b00      	cmp	r3, #0
 8009896:	d005      	beq.n	80098a4 <lwip_netconn_do_close_internal+0x224>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800989c:	2200      	movs	r2, #0
 800989e:	2102      	movs	r1, #2
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80098a4:	78fb      	ldrb	r3, [r7, #3]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d002      	beq.n	80098b0 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 80098aa:	68b8      	ldr	r0, [r7, #8]
 80098ac:	f00f f85a 	bl	8018964 <sys_sem_signal>
    }
    return ERR_OK;
 80098b0:	2300      	movs	r3, #0
 80098b2:	e03c      	b.n	800992e <lwip_netconn_do_close_internal+0x2ae>
 80098b4:	0801a5f4 	.word	0x0801a5f4
 80098b8:	0801a8c8 	.word	0x0801a8c8
 80098bc:	0801a638 	.word	0x0801a638
 80098c0:	0801a8d8 	.word	0x0801a8d8
 80098c4:	0801a8f8 	.word	0x0801a8f8
 80098c8:	0801a91c 	.word	0x0801a91c
 80098cc:	0801a75c 	.word	0x0801a75c
  }
  if (!close_finished) {
 80098d0:	7d7b      	ldrb	r3, [r7, #21]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d11e      	bne.n	8009914 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 80098d6:	693b      	ldr	r3, [r7, #16]
 80098d8:	7d1b      	ldrb	r3, [r3, #20]
 80098da:	2b01      	cmp	r3, #1
 80098dc:	d106      	bne.n	80098ec <lwip_netconn_do_close_internal+0x26c>
 80098de:	4b16      	ldr	r3, [pc, #88]	@ (8009938 <lwip_netconn_do_close_internal+0x2b8>)
 80098e0:	f240 4241 	movw	r2, #1089	@ 0x441
 80098e4:	4915      	ldr	r1, [pc, #84]	@ (800993c <lwip_netconn_do_close_internal+0x2bc>)
 80098e6:	4816      	ldr	r0, [pc, #88]	@ (8009940 <lwip_netconn_do_close_internal+0x2c0>)
 80098e8:	f00f fa2c 	bl	8018d44 <iprintf>
    if (shut_tx) {
 80098ec:	7b7b      	ldrb	r3, [r7, #13]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d003      	beq.n	80098fa <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 80098f2:	4914      	ldr	r1, [pc, #80]	@ (8009944 <lwip_netconn_do_close_internal+0x2c4>)
 80098f4:	6938      	ldr	r0, [r7, #16]
 80098f6:	f005 faf7 	bl	800eee8 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 80098fa:	2201      	movs	r2, #1
 80098fc:	4912      	ldr	r1, [pc, #72]	@ (8009948 <lwip_netconn_do_close_internal+0x2c8>)
 80098fe:	6938      	ldr	r0, [r7, #16]
 8009900:	f005 fb4e 	bl	800efa0 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8009904:	4911      	ldr	r1, [pc, #68]	@ (800994c <lwip_netconn_do_close_internal+0x2cc>)
 8009906:	6938      	ldr	r0, [r7, #16]
 8009908:	f005 fb10 	bl	800ef2c <tcp_err>
    tcp_arg(tpcb, conn);
 800990c:	6879      	ldr	r1, [r7, #4]
 800990e:	6938      	ldr	r0, [r7, #16]
 8009910:	f005 fab6 	bl	800ee80 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8009914:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d106      	bne.n	800992a <lwip_netconn_do_close_internal+0x2aa>
 800991c:	4b06      	ldr	r3, [pc, #24]	@ (8009938 <lwip_netconn_do_close_internal+0x2b8>)
 800991e:	f240 424d 	movw	r2, #1101	@ 0x44d
 8009922:	490b      	ldr	r1, [pc, #44]	@ (8009950 <lwip_netconn_do_close_internal+0x2d0>)
 8009924:	4806      	ldr	r0, [pc, #24]	@ (8009940 <lwip_netconn_do_close_internal+0x2c0>)
 8009926:	f00f fa0d 	bl	8018d44 <iprintf>
  return err;
 800992a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800992e:	4618      	mov	r0, r3
 8009930:	3718      	adds	r7, #24
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}
 8009936:	bf00      	nop
 8009938:	0801a5f4 	.word	0x0801a5f4
 800993c:	0801a930 	.word	0x0801a930
 8009940:	0801a638 	.word	0x0801a638
 8009944:	08008ef9 	.word	0x08008ef9
 8009948:	08008e31 	.word	0x08008e31
 800994c:	08008fa1 	.word	0x08008fa1
 8009950:	0801a954 	.word	0x0801a954

08009954 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b084      	sub	sp, #16
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	785b      	ldrb	r3, [r3, #1]
 8009966:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8009968:	7afb      	ldrb	r3, [r7, #11]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d00d      	beq.n	800998a <lwip_netconn_do_delconn+0x36>
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	781b      	ldrb	r3, [r3, #0]
 8009974:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009978:	2b10      	cmp	r3, #16
 800997a:	d006      	beq.n	800998a <lwip_netconn_do_delconn+0x36>
 800997c:	4b60      	ldr	r3, [pc, #384]	@ (8009b00 <lwip_netconn_do_delconn+0x1ac>)
 800997e:	f240 425e 	movw	r2, #1118	@ 0x45e
 8009982:	4960      	ldr	r1, [pc, #384]	@ (8009b04 <lwip_netconn_do_delconn+0x1b0>)
 8009984:	4860      	ldr	r0, [pc, #384]	@ (8009b08 <lwip_netconn_do_delconn+0x1b4>)
 8009986:	f00f f9dd 	bl	8018d44 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800998a:	7afb      	ldrb	r3, [r7, #11]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d005      	beq.n	800999c <lwip_netconn_do_delconn+0x48>
 8009990:	7afb      	ldrb	r3, [r7, #11]
 8009992:	2b02      	cmp	r3, #2
 8009994:	d002      	beq.n	800999c <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 8009996:	7afb      	ldrb	r3, [r7, #11]
 8009998:	2b03      	cmp	r3, #3
 800999a:	d109      	bne.n	80099b0 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800999c:	7afb      	ldrb	r3, [r7, #11]
 800999e:	2b03      	cmp	r3, #3
 80099a0:	d10a      	bne.n	80099b8 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	7f1b      	ldrb	r3, [r3, #28]
 80099a8:	f003 0304 	and.w	r3, r3, #4
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d103      	bne.n	80099b8 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	22fb      	movs	r2, #251	@ 0xfb
 80099b4:	711a      	strb	r2, [r3, #4]
 80099b6:	e097      	b.n	8009ae8 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 80099b8:	7afb      	ldrb	r3, [r7, #11]
 80099ba:	2b03      	cmp	r3, #3
 80099bc:	d10d      	bne.n	80099da <lwip_netconn_do_delconn+0x86>
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	7f1b      	ldrb	r3, [r3, #28]
 80099c4:	f003 0304 	and.w	r3, r3, #4
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d106      	bne.n	80099da <lwip_netconn_do_delconn+0x86>
 80099cc:	4b4c      	ldr	r3, [pc, #304]	@ (8009b00 <lwip_netconn_do_delconn+0x1ac>)
 80099ce:	f240 427a 	movw	r2, #1146	@ 0x47a
 80099d2:	494e      	ldr	r1, [pc, #312]	@ (8009b0c <lwip_netconn_do_delconn+0x1b8>)
 80099d4:	484c      	ldr	r0, [pc, #304]	@ (8009b08 <lwip_netconn_do_delconn+0x1b4>)
 80099d6:	f00f f9b5 	bl	8018d44 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	2200      	movs	r2, #0
 80099de:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	4618      	mov	r0, r3
 80099e6:	f7ff fdcd 	bl	8009584 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	685b      	ldr	r3, [r3, #4]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d05f      	beq.n	8009ab4 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	781b      	ldrb	r3, [r3, #0]
 80099fa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80099fe:	2b10      	cmp	r3, #16
 8009a00:	d00d      	beq.n	8009a1e <lwip_netconn_do_delconn+0xca>
 8009a02:	2b20      	cmp	r3, #32
 8009a04:	d151      	bne.n	8009aaa <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	685b      	ldr	r3, [r3, #4]
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	685b      	ldr	r3, [r3, #4]
 8009a16:	4618      	mov	r0, r3
 8009a18:	f00a fc7a 	bl	8014310 <udp_remove>
          break;
 8009a1c:	e046      	b.n	8009aac <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	6a1b      	ldr	r3, [r3, #32]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d006      	beq.n	8009a36 <lwip_netconn_do_delconn+0xe2>
 8009a28:	4b35      	ldr	r3, [pc, #212]	@ (8009b00 <lwip_netconn_do_delconn+0x1ac>)
 8009a2a:	f240 4294 	movw	r2, #1172	@ 0x494
 8009a2e:	4938      	ldr	r1, [pc, #224]	@ (8009b10 <lwip_netconn_do_delconn+0x1bc>)
 8009a30:	4835      	ldr	r0, [pc, #212]	@ (8009b08 <lwip_netconn_do_delconn+0x1b4>)
 8009a32:	f00f f987 	bl	8018d44 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	2204      	movs	r2, #4
 8009a3c:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	2203      	movs	r2, #3
 8009a42:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	68fa      	ldr	r2, [r7, #12]
 8009a4a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	2100      	movs	r1, #0
 8009a52:	4618      	mov	r0, r3
 8009a54:	f7ff fe14 	bl	8009680 <lwip_netconn_do_close_internal>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d04b      	beq.n	8009af6 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	785b      	ldrb	r3, [r3, #1]
 8009a64:	2b04      	cmp	r3, #4
 8009a66:	d006      	beq.n	8009a76 <lwip_netconn_do_delconn+0x122>
 8009a68:	4b25      	ldr	r3, [pc, #148]	@ (8009b00 <lwip_netconn_do_delconn+0x1ac>)
 8009a6a:	f240 429a 	movw	r2, #1178	@ 0x49a
 8009a6e:	4929      	ldr	r1, [pc, #164]	@ (8009b14 <lwip_netconn_do_delconn+0x1c0>)
 8009a70:	4825      	ldr	r0, [pc, #148]	@ (8009b08 <lwip_netconn_do_delconn+0x1b4>)
 8009a72:	f00f f967 	bl	8018d44 <iprintf>
            UNLOCK_TCPIP_CORE();
 8009a76:	4828      	ldr	r0, [pc, #160]	@ (8009b18 <lwip_netconn_do_delconn+0x1c4>)
 8009a78:	f00e ffe5 	bl	8018a46 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	330c      	adds	r3, #12
 8009a82:	2100      	movs	r1, #0
 8009a84:	4618      	mov	r0, r3
 8009a86:	f00e ff3c 	bl	8018902 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8009a8a:	4823      	ldr	r0, [pc, #140]	@ (8009b18 <lwip_netconn_do_delconn+0x1c4>)
 8009a8c:	f00e ffcc 	bl	8018a28 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	785b      	ldrb	r3, [r3, #1]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d02d      	beq.n	8009af6 <lwip_netconn_do_delconn+0x1a2>
 8009a9a:	4b19      	ldr	r3, [pc, #100]	@ (8009b00 <lwip_netconn_do_delconn+0x1ac>)
 8009a9c:	f240 429e 	movw	r2, #1182	@ 0x49e
 8009aa0:	491c      	ldr	r1, [pc, #112]	@ (8009b14 <lwip_netconn_do_delconn+0x1c0>)
 8009aa2:	4819      	ldr	r0, [pc, #100]	@ (8009b08 <lwip_netconn_do_delconn+0x1b4>)
 8009aa4:	f00f f94e 	bl	8018d44 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 8009aa8:	e025      	b.n	8009af6 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 8009aaa:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d007      	beq.n	8009ace <lwip_netconn_do_delconn+0x17a>
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ac4:	68fa      	ldr	r2, [r7, #12]
 8009ac6:	6810      	ldr	r0, [r2, #0]
 8009ac8:	2200      	movs	r2, #0
 8009aca:	2100      	movs	r1, #0
 8009acc:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d007      	beq.n	8009ae8 <lwip_netconn_do_delconn+0x194>
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ade:	68fa      	ldr	r2, [r7, #12]
 8009ae0:	6810      	ldr	r0, [r2, #0]
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	2102      	movs	r1, #2
 8009ae6:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	330c      	adds	r3, #12
 8009aee:	4618      	mov	r0, r3
 8009af0:	f00e ff52 	bl	8018998 <sys_sem_valid>
 8009af4:	e000      	b.n	8009af8 <lwip_netconn_do_delconn+0x1a4>
          return;
 8009af6:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 8009af8:	3710      	adds	r7, #16
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}
 8009afe:	bf00      	nop
 8009b00:	0801a5f4 	.word	0x0801a5f4
 8009b04:	0801a964 	.word	0x0801a964
 8009b08:	0801a638 	.word	0x0801a638
 8009b0c:	0801a978 	.word	0x0801a978
 8009b10:	0801a998 	.word	0x0801a998
 8009b14:	0801a9b4 	.word	0x0801a9b4
 8009b18:	2000d2bc 	.word	0x2000d2bc

08009b1c <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b084      	sub	sp, #16
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	685b      	ldr	r3, [r3, #4]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d025      	beq.n	8009b7e <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	781b      	ldrb	r3, [r3, #0]
 8009b38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009b3c:	2b10      	cmp	r3, #16
 8009b3e:	d00e      	beq.n	8009b5e <lwip_netconn_do_bind+0x42>
 8009b40:	2b20      	cmp	r3, #32
 8009b42:	d119      	bne.n	8009b78 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009b44:	68bb      	ldr	r3, [r7, #8]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	6858      	ldr	r0, [r3, #4]
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	6899      	ldr	r1, [r3, #8]
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	899b      	ldrh	r3, [r3, #12]
 8009b52:	461a      	mov	r2, r3
 8009b54:	f00a fac6 	bl	80140e4 <udp_bind>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	73fb      	strb	r3, [r7, #15]
        break;
 8009b5c:	e011      	b.n	8009b82 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009b5e:	68bb      	ldr	r3, [r7, #8]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	6858      	ldr	r0, [r3, #4]
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	6899      	ldr	r1, [r3, #8]
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	899b      	ldrh	r3, [r3, #12]
 8009b6c:	461a      	mov	r2, r3
 8009b6e:	f003 ffbb 	bl	800dae8 <tcp_bind>
 8009b72:	4603      	mov	r3, r0
 8009b74:	73fb      	strb	r3, [r7, #15]
        break;
 8009b76:	e004      	b.n	8009b82 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 8009b78:	23fa      	movs	r3, #250	@ 0xfa
 8009b7a:	73fb      	strb	r3, [r7, #15]
        break;
 8009b7c:	e001      	b.n	8009b82 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 8009b7e:	23fa      	movs	r3, #250	@ 0xfa
 8009b80:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 8009b82:	68bb      	ldr	r3, [r7, #8]
 8009b84:	7bfa      	ldrb	r2, [r7, #15]
 8009b86:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8009b88:	bf00      	nop
 8009b8a:	3710      	adds	r7, #16
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bd80      	pop	{r7, pc}

08009b90 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b088      	sub	sp, #32
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	60f8      	str	r0, [r7, #12]
 8009b98:	60b9      	str	r1, [r7, #8]
 8009b9a:	4613      	mov	r3, r2
 8009b9c:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 8009ba6:	69bb      	ldr	r3, [r7, #24]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d102      	bne.n	8009bb2 <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 8009bac:	f06f 0305 	mvn.w	r3, #5
 8009bb0:	e070      	b.n	8009c94 <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 8009bb2:	69bb      	ldr	r3, [r7, #24]
 8009bb4:	785b      	ldrb	r3, [r3, #1]
 8009bb6:	2b03      	cmp	r3, #3
 8009bb8:	d006      	beq.n	8009bc8 <lwip_netconn_do_connected+0x38>
 8009bba:	4b38      	ldr	r3, [pc, #224]	@ (8009c9c <lwip_netconn_do_connected+0x10c>)
 8009bbc:	f240 5223 	movw	r2, #1315	@ 0x523
 8009bc0:	4937      	ldr	r1, [pc, #220]	@ (8009ca0 <lwip_netconn_do_connected+0x110>)
 8009bc2:	4838      	ldr	r0, [pc, #224]	@ (8009ca4 <lwip_netconn_do_connected+0x114>)
 8009bc4:	f00f f8be 	bl	8018d44 <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 8009bc8:	69bb      	ldr	r3, [r7, #24]
 8009bca:	6a1b      	ldr	r3, [r3, #32]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d10c      	bne.n	8009bea <lwip_netconn_do_connected+0x5a>
 8009bd0:	69bb      	ldr	r3, [r7, #24]
 8009bd2:	7f1b      	ldrb	r3, [r3, #28]
 8009bd4:	f003 0304 	and.w	r3, r3, #4
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d106      	bne.n	8009bea <lwip_netconn_do_connected+0x5a>
 8009bdc:	4b2f      	ldr	r3, [pc, #188]	@ (8009c9c <lwip_netconn_do_connected+0x10c>)
 8009bde:	f240 5224 	movw	r2, #1316	@ 0x524
 8009be2:	4931      	ldr	r1, [pc, #196]	@ (8009ca8 <lwip_netconn_do_connected+0x118>)
 8009be4:	482f      	ldr	r0, [pc, #188]	@ (8009ca4 <lwip_netconn_do_connected+0x114>)
 8009be6:	f00f f8ad 	bl	8018d44 <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 8009bea:	69bb      	ldr	r3, [r7, #24]
 8009bec:	6a1b      	ldr	r3, [r3, #32]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d008      	beq.n	8009c04 <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 8009bf2:	69bb      	ldr	r3, [r7, #24]
 8009bf4:	6a1b      	ldr	r3, [r3, #32]
 8009bf6:	79fa      	ldrb	r2, [r7, #7]
 8009bf8:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009bfa:	69bb      	ldr	r3, [r7, #24]
 8009bfc:	6a1b      	ldr	r3, [r3, #32]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	330c      	adds	r3, #12
 8009c02:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 8009c04:	69bb      	ldr	r3, [r7, #24]
 8009c06:	781b      	ldrb	r3, [r3, #0]
 8009c08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009c0c:	2b10      	cmp	r3, #16
 8009c0e:	d106      	bne.n	8009c1e <lwip_netconn_do_connected+0x8e>
 8009c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d102      	bne.n	8009c1e <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 8009c18:	69b8      	ldr	r0, [r7, #24]
 8009c1a:	f7ff fa97 	bl	800914c <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 8009c1e:	69bb      	ldr	r3, [r7, #24]
 8009c20:	7f1b      	ldrb	r3, [r3, #28]
 8009c22:	f003 0304 	and.w	r3, r3, #4
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	bf0c      	ite	eq
 8009c2a:	2301      	moveq	r3, #1
 8009c2c:	2300      	movne	r3, #0
 8009c2e:	b2db      	uxtb	r3, r3
 8009c30:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 8009c32:	69bb      	ldr	r3, [r7, #24]
 8009c34:	7f1b      	ldrb	r3, [r3, #28]
 8009c36:	f023 0304 	bic.w	r3, r3, #4
 8009c3a:	b2da      	uxtb	r2, r3
 8009c3c:	69bb      	ldr	r3, [r7, #24]
 8009c3e:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 8009c40:	697b      	ldr	r3, [r7, #20]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d002      	beq.n	8009c4c <lwip_netconn_do_connected+0xbc>
 8009c46:	69fb      	ldr	r3, [r7, #28]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d10c      	bne.n	8009c66 <lwip_netconn_do_connected+0xd6>
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d102      	bne.n	8009c58 <lwip_netconn_do_connected+0xc8>
 8009c52:	69fb      	ldr	r3, [r7, #28]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d006      	beq.n	8009c66 <lwip_netconn_do_connected+0xd6>
 8009c58:	4b10      	ldr	r3, [pc, #64]	@ (8009c9c <lwip_netconn_do_connected+0x10c>)
 8009c5a:	f44f 62a6 	mov.w	r2, #1328	@ 0x530
 8009c5e:	4913      	ldr	r1, [pc, #76]	@ (8009cac <lwip_netconn_do_connected+0x11c>)
 8009c60:	4810      	ldr	r0, [pc, #64]	@ (8009ca4 <lwip_netconn_do_connected+0x114>)
 8009c62:	f00f f86f 	bl	8018d44 <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 8009c66:	69bb      	ldr	r3, [r7, #24]
 8009c68:	2200      	movs	r2, #0
 8009c6a:	621a      	str	r2, [r3, #32]
  conn->state = NETCONN_NONE;
 8009c6c:	69bb      	ldr	r3, [r7, #24]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009c72:	69bb      	ldr	r3, [r7, #24]
 8009c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d005      	beq.n	8009c86 <lwip_netconn_do_connected+0xf6>
 8009c7a:	69bb      	ldr	r3, [r7, #24]
 8009c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c7e:	2200      	movs	r2, #0
 8009c80:	2102      	movs	r1, #2
 8009c82:	69b8      	ldr	r0, [r7, #24]
 8009c84:	4798      	blx	r3

  if (was_blocking) {
 8009c86:	697b      	ldr	r3, [r7, #20]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d002      	beq.n	8009c92 <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 8009c8c:	69f8      	ldr	r0, [r7, #28]
 8009c8e:	f00e fe69 	bl	8018964 <sys_sem_signal>
  }
  return ERR_OK;
 8009c92:	2300      	movs	r3, #0
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	3720      	adds	r7, #32
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}
 8009c9c:	0801a5f4 	.word	0x0801a5f4
 8009ca0:	0801a9bc 	.word	0x0801a9bc
 8009ca4:	0801a638 	.word	0x0801a638
 8009ca8:	0801a9dc 	.word	0x0801a9dc
 8009cac:	0801aa1c 	.word	0x0801aa1c

08009cb0 <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b086      	sub	sp, #24
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 8009cbc:	693b      	ldr	r3, [r7, #16]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	685b      	ldr	r3, [r3, #4]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d102      	bne.n	8009ccc <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 8009cc6:	23f1      	movs	r3, #241	@ 0xf1
 8009cc8:	75fb      	strb	r3, [r7, #23]
 8009cca:	e09b      	b.n	8009e04 <lwip_netconn_do_connect+0x154>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009ccc:	693b      	ldr	r3, [r7, #16]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	781b      	ldrb	r3, [r3, #0]
 8009cd2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009cd6:	2b10      	cmp	r3, #16
 8009cd8:	d00f      	beq.n	8009cfa <lwip_netconn_do_connect+0x4a>
 8009cda:	2b20      	cmp	r3, #32
 8009cdc:	f040 8087 	bne.w	8009dee <lwip_netconn_do_connect+0x13e>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009ce0:	693b      	ldr	r3, [r7, #16]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	6858      	ldr	r0, [r3, #4]
 8009ce6:	693b      	ldr	r3, [r7, #16]
 8009ce8:	6899      	ldr	r1, [r3, #8]
 8009cea:	693b      	ldr	r3, [r7, #16]
 8009cec:	899b      	ldrh	r3, [r3, #12]
 8009cee:	461a      	mov	r2, r3
 8009cf0:	f00a fa80 	bl	80141f4 <udp_connect>
 8009cf4:	4603      	mov	r3, r0
 8009cf6:	75fb      	strb	r3, [r7, #23]
        break;
 8009cf8:	e084      	b.n	8009e04 <lwip_netconn_do_connect+0x154>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	785b      	ldrb	r3, [r3, #1]
 8009d00:	2b03      	cmp	r3, #3
 8009d02:	d102      	bne.n	8009d0a <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 8009d04:	23f7      	movs	r3, #247	@ 0xf7
 8009d06:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 8009d08:	e07b      	b.n	8009e02 <lwip_netconn_do_connect+0x152>
        } else if (msg->conn->state != NETCONN_NONE) {
 8009d0a:	693b      	ldr	r3, [r7, #16]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	785b      	ldrb	r3, [r3, #1]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d002      	beq.n	8009d1a <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 8009d14:	23f6      	movs	r3, #246	@ 0xf6
 8009d16:	75fb      	strb	r3, [r7, #23]
        break;
 8009d18:	e073      	b.n	8009e02 <lwip_netconn_do_connect+0x152>
          setup_tcp(msg->conn);
 8009d1a:	693b      	ldr	r3, [r7, #16]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f7ff fa14 	bl	800914c <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 8009d24:	693b      	ldr	r3, [r7, #16]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	6858      	ldr	r0, [r3, #4]
 8009d2a:	693b      	ldr	r3, [r7, #16]
 8009d2c:	6899      	ldr	r1, [r3, #8]
 8009d2e:	693b      	ldr	r3, [r7, #16]
 8009d30:	899a      	ldrh	r2, [r3, #12]
 8009d32:	4b38      	ldr	r3, [pc, #224]	@ (8009e14 <lwip_netconn_do_connect+0x164>)
 8009d34:	f004 f93c 	bl	800dfb0 <tcp_connect>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 8009d3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d15e      	bne.n	8009e02 <lwip_netconn_do_connect+0x152>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 8009d44:	693b      	ldr	r3, [r7, #16]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	7f1b      	ldrb	r3, [r3, #28]
 8009d4a:	f003 0302 	and.w	r3, r3, #2
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	bf14      	ite	ne
 8009d52:	2301      	movne	r3, #1
 8009d54:	2300      	moveq	r3, #0
 8009d56:	b2db      	uxtb	r3, r3
 8009d58:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 8009d5a:	693b      	ldr	r3, [r7, #16]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	2203      	movs	r2, #3
 8009d60:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 8009d62:	7bfb      	ldrb	r3, [r7, #15]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d009      	beq.n	8009d7c <lwip_netconn_do_connect+0xcc>
 8009d68:	693b      	ldr	r3, [r7, #16]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	7f1a      	ldrb	r2, [r3, #28]
 8009d6e:	693b      	ldr	r3, [r7, #16]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f042 0204 	orr.w	r2, r2, #4
 8009d76:	b2d2      	uxtb	r2, r2
 8009d78:	771a      	strb	r2, [r3, #28]
 8009d7a:	e008      	b.n	8009d8e <lwip_netconn_do_connect+0xde>
 8009d7c:	693b      	ldr	r3, [r7, #16]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	7f1a      	ldrb	r2, [r3, #28]
 8009d82:	693b      	ldr	r3, [r7, #16]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	f022 0204 	bic.w	r2, r2, #4
 8009d8a:	b2d2      	uxtb	r2, r2
 8009d8c:	771a      	strb	r2, [r3, #28]
            if (non_blocking) {
 8009d8e:	7bfb      	ldrb	r3, [r7, #15]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d002      	beq.n	8009d9a <lwip_netconn_do_connect+0xea>
              err = ERR_INPROGRESS;
 8009d94:	23fb      	movs	r3, #251	@ 0xfb
 8009d96:	75fb      	strb	r3, [r7, #23]
        break;
 8009d98:	e033      	b.n	8009e02 <lwip_netconn_do_connect+0x152>
              msg->conn->current_msg = msg;
 8009d9a:	693b      	ldr	r3, [r7, #16]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	693a      	ldr	r2, [r7, #16]
 8009da0:	621a      	str	r2, [r3, #32]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 8009da2:	693b      	ldr	r3, [r7, #16]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	785b      	ldrb	r3, [r3, #1]
 8009da8:	2b03      	cmp	r3, #3
 8009daa:	d006      	beq.n	8009dba <lwip_netconn_do_connect+0x10a>
 8009dac:	4b1a      	ldr	r3, [pc, #104]	@ (8009e18 <lwip_netconn_do_connect+0x168>)
 8009dae:	f44f 62ae 	mov.w	r2, #1392	@ 0x570
 8009db2:	491a      	ldr	r1, [pc, #104]	@ (8009e1c <lwip_netconn_do_connect+0x16c>)
 8009db4:	481a      	ldr	r0, [pc, #104]	@ (8009e20 <lwip_netconn_do_connect+0x170>)
 8009db6:	f00e ffc5 	bl	8018d44 <iprintf>
              UNLOCK_TCPIP_CORE();
 8009dba:	481a      	ldr	r0, [pc, #104]	@ (8009e24 <lwip_netconn_do_connect+0x174>)
 8009dbc:	f00e fe43 	bl	8018a46 <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009dc0:	693b      	ldr	r3, [r7, #16]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	330c      	adds	r3, #12
 8009dc6:	2100      	movs	r1, #0
 8009dc8:	4618      	mov	r0, r3
 8009dca:	f00e fd9a 	bl	8018902 <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 8009dce:	4815      	ldr	r0, [pc, #84]	@ (8009e24 <lwip_netconn_do_connect+0x174>)
 8009dd0:	f00e fe2a 	bl	8018a28 <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 8009dd4:	693b      	ldr	r3, [r7, #16]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	785b      	ldrb	r3, [r3, #1]
 8009dda:	2b03      	cmp	r3, #3
 8009ddc:	d116      	bne.n	8009e0c <lwip_netconn_do_connect+0x15c>
 8009dde:	4b0e      	ldr	r3, [pc, #56]	@ (8009e18 <lwip_netconn_do_connect+0x168>)
 8009de0:	f240 5274 	movw	r2, #1396	@ 0x574
 8009de4:	490d      	ldr	r1, [pc, #52]	@ (8009e1c <lwip_netconn_do_connect+0x16c>)
 8009de6:	480e      	ldr	r0, [pc, #56]	@ (8009e20 <lwip_netconn_do_connect+0x170>)
 8009de8:	f00e ffac 	bl	8018d44 <iprintf>
              return;
 8009dec:	e00e      	b.n	8009e0c <lwip_netconn_do_connect+0x15c>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 8009dee:	4b0a      	ldr	r3, [pc, #40]	@ (8009e18 <lwip_netconn_do_connect+0x168>)
 8009df0:	f240 527d 	movw	r2, #1405	@ 0x57d
 8009df4:	490c      	ldr	r1, [pc, #48]	@ (8009e28 <lwip_netconn_do_connect+0x178>)
 8009df6:	480a      	ldr	r0, [pc, #40]	@ (8009e20 <lwip_netconn_do_connect+0x170>)
 8009df8:	f00e ffa4 	bl	8018d44 <iprintf>
 8009dfc:	23fa      	movs	r3, #250	@ 0xfa
 8009dfe:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 8009e00:	e000      	b.n	8009e04 <lwip_netconn_do_connect+0x154>
        break;
 8009e02:	bf00      	nop
    }
  }
  msg->err = err;
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	7dfa      	ldrb	r2, [r7, #23]
 8009e08:	711a      	strb	r2, [r3, #4]
 8009e0a:	e000      	b.n	8009e0e <lwip_netconn_do_connect+0x15e>
              return;
 8009e0c:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 8009e0e:	3718      	adds	r7, #24
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd80      	pop	{r7, pc}
 8009e14:	08009b91 	.word	0x08009b91
 8009e18:	0801a5f4 	.word	0x0801a5f4
 8009e1c:	0801a9b4 	.word	0x0801a9b4
 8009e20:	0801a638 	.word	0x0801a638
 8009e24:	2000d2bc 	.word	0x2000d2bc
 8009e28:	0801aa3c 	.word	0x0801aa3c

08009e2c <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b086      	sub	sp, #24
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8009e38:	697b      	ldr	r3, [r7, #20]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	685b      	ldr	r3, [r3, #4]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d07f      	beq.n	8009f42 <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	781b      	ldrb	r3, [r3, #0]
 8009e48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009e4c:	2b10      	cmp	r3, #16
 8009e4e:	d175      	bne.n	8009f3c <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 8009e50:	697b      	ldr	r3, [r7, #20]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	785b      	ldrb	r3, [r3, #1]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d165      	bne.n	8009f26 <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 8009e5a:	697b      	ldr	r3, [r7, #20]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	685b      	ldr	r3, [r3, #4]
 8009e60:	7d1b      	ldrb	r3, [r3, #20]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d002      	beq.n	8009e6c <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 8009e66:	23fa      	movs	r3, #250	@ 0xfa
 8009e68:	72fb      	strb	r3, [r7, #11]
 8009e6a:	e06c      	b.n	8009f46 <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 8009e6c:	23ff      	movs	r3, #255	@ 0xff
 8009e6e:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 8009e70:	697b      	ldr	r3, [r7, #20]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	685b      	ldr	r3, [r3, #4]
 8009e76:	f107 020b 	add.w	r2, r7, #11
 8009e7a:	7cf9      	ldrb	r1, [r7, #19]
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	f003 fefd 	bl	800dc7c <tcp_listen_with_backlog_and_err>
 8009e82:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d05d      	beq.n	8009f46 <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8009e8a:	697b      	ldr	r3, [r7, #20]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	3310      	adds	r3, #16
 8009e90:	4618      	mov	r0, r3
 8009e92:	f00e fcf0 	bl	8018876 <sys_mbox_valid>
 8009e96:	4603      	mov	r3, r0
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d00b      	beq.n	8009eb4 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 8009e9c:	697b      	ldr	r3, [r7, #20]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	3310      	adds	r3, #16
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	f00e fc60 	bl	8018768 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 8009ea8:	697b      	ldr	r3, [r7, #20]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	3310      	adds	r3, #16
 8009eae:	4618      	mov	r0, r3
 8009eb0:	f00e fcf2 	bl	8018898 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8009eb8:	697b      	ldr	r3, [r7, #20]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	3314      	adds	r3, #20
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	f00e fcd9 	bl	8018876 <sys_mbox_valid>
 8009ec4:	4603      	mov	r3, r0
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d108      	bne.n	8009edc <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8009eca:	697b      	ldr	r3, [r7, #20]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	3314      	adds	r3, #20
 8009ed0:	2106      	movs	r1, #6
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f00e fc26 	bl	8018724 <sys_mbox_new>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 8009edc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d118      	bne.n	8009f16 <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 8009ee4:	697b      	ldr	r3, [r7, #20]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	2202      	movs	r2, #2
 8009eea:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 8009eec:	697b      	ldr	r3, [r7, #20]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	68fa      	ldr	r2, [r7, #12]
 8009ef2:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8009ef4:	697b      	ldr	r3, [r7, #20]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	685a      	ldr	r2, [r3, #4]
 8009efa:	697b      	ldr	r3, [r7, #20]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	4619      	mov	r1, r3
 8009f00:	4610      	mov	r0, r2
 8009f02:	f004 ffbd 	bl	800ee80 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 8009f06:	697b      	ldr	r3, [r7, #20]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	685b      	ldr	r3, [r3, #4]
 8009f0c:	4912      	ldr	r1, [pc, #72]	@ (8009f58 <lwip_netconn_do_listen+0x12c>)
 8009f0e:	4618      	mov	r0, r3
 8009f10:	f005 f82e 	bl	800ef70 <tcp_accept>
 8009f14:	e017      	b.n	8009f46 <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 8009f16:	68f8      	ldr	r0, [r7, #12]
 8009f18:	f003 fc94 	bl	800d844 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	2200      	movs	r2, #0
 8009f22:	605a      	str	r2, [r3, #4]
 8009f24:	e00f      	b.n	8009f46 <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 8009f26:	697b      	ldr	r3, [r7, #20]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	785b      	ldrb	r3, [r3, #1]
 8009f2c:	2b02      	cmp	r3, #2
 8009f2e:	d102      	bne.n	8009f36 <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 8009f30:	2300      	movs	r3, #0
 8009f32:	72fb      	strb	r3, [r7, #11]
 8009f34:	e007      	b.n	8009f46 <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 8009f36:	23f5      	movs	r3, #245	@ 0xf5
 8009f38:	72fb      	strb	r3, [r7, #11]
 8009f3a:	e004      	b.n	8009f46 <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 8009f3c:	23f0      	movs	r3, #240	@ 0xf0
 8009f3e:	72fb      	strb	r3, [r7, #11]
 8009f40:	e001      	b.n	8009f46 <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 8009f42:	23f5      	movs	r3, #245	@ 0xf5
 8009f44:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 8009f46:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8009f4a:	697b      	ldr	r3, [r7, #20]
 8009f4c:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8009f4e:	bf00      	nop
 8009f50:	3718      	adds	r7, #24
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}
 8009f56:	bf00      	nop
 8009f58:	0800919d 	.word	0x0800919d

08009f5c <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b086      	sub	sp, #24
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8009f68:	693b      	ldr	r3, [r7, #16]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8009f6e:	693b      	ldr	r3, [r7, #16]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	685b      	ldr	r3, [r3, #4]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d022      	beq.n	8009fbe <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8009f78:	693b      	ldr	r3, [r7, #16]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	781b      	ldrb	r3, [r3, #0]
 8009f7e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009f82:	2b10      	cmp	r3, #16
 8009f84:	d11b      	bne.n	8009fbe <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 8009f86:	693b      	ldr	r3, [r7, #16]
 8009f88:	689b      	ldr	r3, [r3, #8]
 8009f8a:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8009f8c:	697b      	ldr	r3, [r7, #20]
 8009f8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f92:	d202      	bcs.n	8009f9a <lwip_netconn_do_recv+0x3e>
 8009f94:	697b      	ldr	r3, [r7, #20]
 8009f96:	b29b      	uxth	r3, r3
 8009f98:	e001      	b.n	8009f9e <lwip_netconn_do_recv+0x42>
 8009f9a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009f9e:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 8009fa0:	693b      	ldr	r3, [r7, #16]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	685b      	ldr	r3, [r3, #4]
 8009fa6:	89fa      	ldrh	r2, [r7, #14]
 8009fa8:	4611      	mov	r1, r2
 8009faa:	4618      	mov	r0, r3
 8009fac:	f003 ff6a 	bl	800de84 <tcp_recved>
        remaining -= recved;
 8009fb0:	89fb      	ldrh	r3, [r7, #14]
 8009fb2:	697a      	ldr	r2, [r7, #20]
 8009fb4:	1ad3      	subs	r3, r2, r3
 8009fb6:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8009fb8:	697b      	ldr	r3, [r7, #20]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d1e6      	bne.n	8009f8c <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8009fbe:	bf00      	nop
 8009fc0:	3718      	adds	r7, #24
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}
	...

08009fc8 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b088      	sub	sp, #32
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
 8009fd0:	460b      	mov	r3, r1
 8009fd2:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d106      	bne.n	8009fec <lwip_netconn_do_writemore+0x24>
 8009fde:	4b96      	ldr	r3, [pc, #600]	@ (800a238 <lwip_netconn_do_writemore+0x270>)
 8009fe0:	f240 6273 	movw	r2, #1651	@ 0x673
 8009fe4:	4995      	ldr	r1, [pc, #596]	@ (800a23c <lwip_netconn_do_writemore+0x274>)
 8009fe6:	4896      	ldr	r0, [pc, #600]	@ (800a240 <lwip_netconn_do_writemore+0x278>)
 8009fe8:	f00e feac 	bl	8018d44 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	785b      	ldrb	r3, [r3, #1]
 8009ff0:	2b01      	cmp	r3, #1
 8009ff2:	d006      	beq.n	800a002 <lwip_netconn_do_writemore+0x3a>
 8009ff4:	4b90      	ldr	r3, [pc, #576]	@ (800a238 <lwip_netconn_do_writemore+0x270>)
 8009ff6:	f240 6274 	movw	r2, #1652	@ 0x674
 8009ffa:	4992      	ldr	r1, [pc, #584]	@ (800a244 <lwip_netconn_do_writemore+0x27c>)
 8009ffc:	4890      	ldr	r0, [pc, #576]	@ (800a240 <lwip_netconn_do_writemore+0x278>)
 8009ffe:	f00e fea1 	bl	8018d44 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6a1b      	ldr	r3, [r3, #32]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d106      	bne.n	800a018 <lwip_netconn_do_writemore+0x50>
 800a00a:	4b8b      	ldr	r3, [pc, #556]	@ (800a238 <lwip_netconn_do_writemore+0x270>)
 800a00c:	f240 6275 	movw	r2, #1653	@ 0x675
 800a010:	498d      	ldr	r1, [pc, #564]	@ (800a248 <lwip_netconn_do_writemore+0x280>)
 800a012:	488b      	ldr	r0, [pc, #556]	@ (800a240 <lwip_netconn_do_writemore+0x278>)
 800a014:	f00e fe96 	bl	8018d44 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	685b      	ldr	r3, [r3, #4]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d106      	bne.n	800a02e <lwip_netconn_do_writemore+0x66>
 800a020:	4b85      	ldr	r3, [pc, #532]	@ (800a238 <lwip_netconn_do_writemore+0x270>)
 800a022:	f240 6276 	movw	r2, #1654	@ 0x676
 800a026:	4989      	ldr	r1, [pc, #548]	@ (800a24c <lwip_netconn_do_writemore+0x284>)
 800a028:	4885      	ldr	r0, [pc, #532]	@ (800a240 <lwip_netconn_do_writemore+0x278>)
 800a02a:	f00e fe8b 	bl	8018d44 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6a1b      	ldr	r3, [r3, #32]
 800a032:	699a      	ldr	r2, [r3, #24]
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6a1b      	ldr	r3, [r3, #32]
 800a038:	695b      	ldr	r3, [r3, #20]
 800a03a:	429a      	cmp	r2, r3
 800a03c:	d306      	bcc.n	800a04c <lwip_netconn_do_writemore+0x84>
 800a03e:	4b7e      	ldr	r3, [pc, #504]	@ (800a238 <lwip_netconn_do_writemore+0x270>)
 800a040:	f240 6277 	movw	r2, #1655	@ 0x677
 800a044:	4982      	ldr	r1, [pc, #520]	@ (800a250 <lwip_netconn_do_writemore+0x288>)
 800a046:	487e      	ldr	r0, [pc, #504]	@ (800a240 <lwip_netconn_do_writemore+0x278>)
 800a048:	f00e fe7c 	bl	8018d44 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	6a1b      	ldr	r3, [r3, #32]
 800a050:	899b      	ldrh	r3, [r3, #12]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d106      	bne.n	800a064 <lwip_netconn_do_writemore+0x9c>
 800a056:	4b78      	ldr	r3, [pc, #480]	@ (800a238 <lwip_netconn_do_writemore+0x270>)
 800a058:	f240 6279 	movw	r2, #1657	@ 0x679
 800a05c:	497d      	ldr	r1, [pc, #500]	@ (800a254 <lwip_netconn_do_writemore+0x28c>)
 800a05e:	4878      	ldr	r0, [pc, #480]	@ (800a240 <lwip_netconn_do_writemore+0x278>)
 800a060:	f00e fe70 	bl	8018d44 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	6a1b      	ldr	r3, [r3, #32]
 800a068:	7f1b      	ldrb	r3, [r3, #28]
 800a06a:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	7f1b      	ldrb	r3, [r3, #28]
 800a070:	f003 0302 	and.w	r3, r3, #2
 800a074:	2b00      	cmp	r3, #0
 800a076:	d104      	bne.n	800a082 <lwip_netconn_do_writemore+0xba>
 800a078:	7ebb      	ldrb	r3, [r7, #26]
 800a07a:	f003 0304 	and.w	r3, r3, #4
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d001      	beq.n	800a086 <lwip_netconn_do_writemore+0xbe>
 800a082:	2301      	movs	r3, #1
 800a084:	e000      	b.n	800a088 <lwip_netconn_do_writemore+0xc0>
 800a086:	2300      	movs	r3, #0
 800a088:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	6a1b      	ldr	r3, [r3, #32]
 800a08e:	689b      	ldr	r3, [r3, #8]
 800a090:	681a      	ldr	r2, [r3, #0]
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6a1b      	ldr	r3, [r3, #32]
 800a096:	691b      	ldr	r3, [r3, #16]
 800a098:	4413      	add	r3, r2
 800a09a:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	6a1b      	ldr	r3, [r3, #32]
 800a0a0:	689b      	ldr	r3, [r3, #8]
 800a0a2:	685a      	ldr	r2, [r3, #4]
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	6a1b      	ldr	r3, [r3, #32]
 800a0a8:	691b      	ldr	r3, [r3, #16]
 800a0aa:	1ad3      	subs	r3, r2, r3
 800a0ac:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800a0ae:	693b      	ldr	r3, [r7, #16]
 800a0b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a0b4:	d307      	bcc.n	800a0c6 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800a0b6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a0ba:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800a0bc:	7ebb      	ldrb	r3, [r7, #26]
 800a0be:	f043 0302 	orr.w	r3, r3, #2
 800a0c2:	76bb      	strb	r3, [r7, #26]
 800a0c4:	e001      	b.n	800a0ca <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800a0c6:	693b      	ldr	r3, [r7, #16]
 800a0c8:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	685b      	ldr	r3, [r3, #4]
 800a0ce:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800a0d2:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800a0d4:	89fa      	ldrh	r2, [r7, #14]
 800a0d6:	8bbb      	ldrh	r3, [r7, #28]
 800a0d8:	429a      	cmp	r2, r3
 800a0da:	d216      	bcs.n	800a10a <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800a0dc:	89fb      	ldrh	r3, [r7, #14]
 800a0de:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800a0e0:	7e3b      	ldrb	r3, [r7, #24]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d00d      	beq.n	800a102 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800a0e6:	8bbb      	ldrh	r3, [r7, #28]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d10e      	bne.n	800a10a <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6a1b      	ldr	r3, [r3, #32]
 800a0f0:	699b      	ldr	r3, [r3, #24]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d102      	bne.n	800a0fc <lwip_netconn_do_writemore+0x134>
 800a0f6:	f06f 0306 	mvn.w	r3, #6
 800a0fa:	e000      	b.n	800a0fe <lwip_netconn_do_writemore+0x136>
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800a100:	e07d      	b.n	800a1fe <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800a102:	7ebb      	ldrb	r3, [r7, #26]
 800a104:	f043 0302 	orr.w	r3, r3, #2
 800a108:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	6a1b      	ldr	r3, [r3, #32]
 800a10e:	691a      	ldr	r2, [r3, #16]
 800a110:	8bbb      	ldrh	r3, [r7, #28]
 800a112:	441a      	add	r2, r3
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	6a1b      	ldr	r3, [r3, #32]
 800a118:	689b      	ldr	r3, [r3, #8]
 800a11a:	685b      	ldr	r3, [r3, #4]
 800a11c:	429a      	cmp	r2, r3
 800a11e:	d906      	bls.n	800a12e <lwip_netconn_do_writemore+0x166>
 800a120:	4b45      	ldr	r3, [pc, #276]	@ (800a238 <lwip_netconn_do_writemore+0x270>)
 800a122:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 800a126:	494c      	ldr	r1, [pc, #304]	@ (800a258 <lwip_netconn_do_writemore+0x290>)
 800a128:	4845      	ldr	r0, [pc, #276]	@ (800a240 <lwip_netconn_do_writemore+0x278>)
 800a12a:	f00e fe0b 	bl	8018d44 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800a12e:	8bbb      	ldrh	r3, [r7, #28]
 800a130:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a134:	4293      	cmp	r3, r2
 800a136:	d103      	bne.n	800a140 <lwip_netconn_do_writemore+0x178>
 800a138:	693b      	ldr	r3, [r7, #16]
 800a13a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a13e:	d209      	bcs.n	800a154 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800a140:	693b      	ldr	r3, [r7, #16]
 800a142:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800a144:	8bba      	ldrh	r2, [r7, #28]
 800a146:	429a      	cmp	r2, r3
 800a148:	d10b      	bne.n	800a162 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6a1b      	ldr	r3, [r3, #32]
 800a14e:	899b      	ldrh	r3, [r3, #12]
 800a150:	2b01      	cmp	r3, #1
 800a152:	d906      	bls.n	800a162 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800a154:	2301      	movs	r3, #1
 800a156:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800a158:	7ebb      	ldrb	r3, [r7, #26]
 800a15a:	f043 0302 	orr.w	r3, r3, #2
 800a15e:	76bb      	strb	r3, [r7, #26]
 800a160:	e001      	b.n	800a166 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800a162:	2300      	movs	r3, #0
 800a164:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	6858      	ldr	r0, [r3, #4]
 800a16a:	7ebb      	ldrb	r3, [r7, #26]
 800a16c:	8bba      	ldrh	r2, [r7, #28]
 800a16e:	6979      	ldr	r1, [r7, #20]
 800a170:	f007 fdc2 	bl	8011cf8 <tcp_write>
 800a174:	4603      	mov	r3, r0
 800a176:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800a178:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d12c      	bne.n	800a1da <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	6a1b      	ldr	r3, [r3, #32]
 800a184:	6999      	ldr	r1, [r3, #24]
 800a186:	8bba      	ldrh	r2, [r7, #28]
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	6a1b      	ldr	r3, [r3, #32]
 800a18c:	440a      	add	r2, r1
 800a18e:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	6a1b      	ldr	r3, [r3, #32]
 800a194:	6919      	ldr	r1, [r3, #16]
 800a196:	8bba      	ldrh	r2, [r7, #28]
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6a1b      	ldr	r3, [r3, #32]
 800a19c:	440a      	add	r2, r1
 800a19e:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	6a1b      	ldr	r3, [r3, #32]
 800a1a4:	691a      	ldr	r2, [r3, #16]
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6a1b      	ldr	r3, [r3, #32]
 800a1aa:	689b      	ldr	r3, [r3, #8]
 800a1ac:	685b      	ldr	r3, [r3, #4]
 800a1ae:	429a      	cmp	r2, r3
 800a1b0:	d113      	bne.n	800a1da <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6a1b      	ldr	r3, [r3, #32]
 800a1b6:	899a      	ldrh	r2, [r3, #12]
 800a1b8:	3a01      	subs	r2, #1
 800a1ba:	b292      	uxth	r2, r2
 800a1bc:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6a1b      	ldr	r3, [r3, #32]
 800a1c2:	899b      	ldrh	r3, [r3, #12]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d008      	beq.n	800a1da <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	6a1b      	ldr	r3, [r3, #32]
 800a1cc:	689a      	ldr	r2, [r3, #8]
 800a1ce:	3208      	adds	r2, #8
 800a1d0:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6a1b      	ldr	r3, [r3, #32]
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800a1da:	7e7b      	ldrb	r3, [r7, #25]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d004      	beq.n	800a1ea <lwip_netconn_do_writemore+0x222>
 800a1e0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	f43f af50 	beq.w	800a08a <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800a1ea:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d004      	beq.n	800a1fc <lwip_netconn_do_writemore+0x234>
 800a1f2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a1f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1fa:	d146      	bne.n	800a28a <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800a1fc:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800a1fe:	7e3b      	ldrb	r3, [r7, #24]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d02b      	beq.n	800a25c <lwip_netconn_do_writemore+0x294>
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	6a1b      	ldr	r3, [r3, #32]
 800a208:	699a      	ldr	r2, [r3, #24]
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	6a1b      	ldr	r3, [r3, #32]
 800a20e:	695b      	ldr	r3, [r3, #20]
 800a210:	429a      	cmp	r2, r3
 800a212:	d223      	bcs.n	800a25c <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d005      	beq.n	800a228 <lwip_netconn_do_writemore+0x260>
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a220:	2200      	movs	r2, #0
 800a222:	2103      	movs	r1, #3
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	7f1b      	ldrb	r3, [r3, #28]
 800a22c:	f043 0310 	orr.w	r3, r3, #16
 800a230:	b2da      	uxtb	r2, r3
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	771a      	strb	r2, [r3, #28]
 800a236:	e028      	b.n	800a28a <lwip_netconn_do_writemore+0x2c2>
 800a238:	0801a5f4 	.word	0x0801a5f4
 800a23c:	0801a74c 	.word	0x0801a74c
 800a240:	0801a638 	.word	0x0801a638
 800a244:	0801aa54 	.word	0x0801aa54
 800a248:	0801a75c 	.word	0x0801a75c
 800a24c:	0801aa74 	.word	0x0801aa74
 800a250:	0801aa8c 	.word	0x0801aa8c
 800a254:	0801aacc 	.word	0x0801aacc
 800a258:	0801aaf4 	.word	0x0801aaf4
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	685b      	ldr	r3, [r3, #4]
 800a260:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800a264:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800a268:	d305      	bcc.n	800a276 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	685b      	ldr	r3, [r3, #4]
 800a26e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800a272:	2b04      	cmp	r3, #4
 800a274:	d909      	bls.n	800a28a <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d005      	beq.n	800a28a <lwip_netconn_do_writemore+0x2c2>
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a282:	2200      	movs	r2, #0
 800a284:	2103      	movs	r1, #3
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800a28a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d11d      	bne.n	800a2ce <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6a1b      	ldr	r3, [r3, #32]
 800a296:	699a      	ldr	r2, [r3, #24]
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	6a1b      	ldr	r3, [r3, #32]
 800a29c:	695b      	ldr	r3, [r3, #20]
 800a29e:	429a      	cmp	r2, r3
 800a2a0:	d002      	beq.n	800a2a8 <lwip_netconn_do_writemore+0x2e0>
 800a2a2:	7e3b      	ldrb	r3, [r7, #24]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d001      	beq.n	800a2ac <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800a2a8:	2301      	movs	r3, #1
 800a2aa:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	685b      	ldr	r3, [r3, #4]
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	f008 fb0b 	bl	80128cc <tcp_output>
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800a2ba:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800a2be:	f113 0f04 	cmn.w	r3, #4
 800a2c2:	d12c      	bne.n	800a31e <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800a2c4:	7b3b      	ldrb	r3, [r7, #12]
 800a2c6:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	76fb      	strb	r3, [r7, #27]
 800a2cc:	e027      	b.n	800a31e <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800a2ce:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a2d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2d6:	d120      	bne.n	800a31a <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	685b      	ldr	r3, [r3, #4]
 800a2dc:	4618      	mov	r0, r3
 800a2de:	f008 faf5 	bl	80128cc <tcp_output>
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800a2e6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800a2ea:	f113 0f04 	cmn.w	r3, #4
 800a2ee:	d104      	bne.n	800a2fa <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800a2f0:	7b7b      	ldrb	r3, [r7, #13]
 800a2f2:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	76fb      	strb	r3, [r7, #27]
 800a2f8:	e011      	b.n	800a31e <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800a2fa:	7e3b      	ldrb	r3, [r7, #24]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d00e      	beq.n	800a31e <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	6a1b      	ldr	r3, [r3, #32]
 800a304:	699b      	ldr	r3, [r3, #24]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d102      	bne.n	800a310 <lwip_netconn_do_writemore+0x348>
 800a30a:	f06f 0306 	mvn.w	r3, #6
 800a30e:	e000      	b.n	800a312 <lwip_netconn_do_writemore+0x34a>
 800a310:	2300      	movs	r3, #0
 800a312:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a314:	2301      	movs	r3, #1
 800a316:	76fb      	strb	r3, [r7, #27]
 800a318:	e001      	b.n	800a31e <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800a31a:	2301      	movs	r3, #1
 800a31c:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800a31e:	7efb      	ldrb	r3, [r7, #27]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d015      	beq.n	800a350 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	6a1b      	ldr	r3, [r3, #32]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	330c      	adds	r3, #12
 800a32c:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6a1b      	ldr	r3, [r3, #32]
 800a332:	7ffa      	ldrb	r2, [r7, #31]
 800a334:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2200      	movs	r2, #0
 800a33a:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2200      	movs	r2, #0
 800a340:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800a342:	78fb      	ldrb	r3, [r7, #3]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d006      	beq.n	800a356 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800a348:	68b8      	ldr	r0, [r7, #8]
 800a34a:	f00e fb0b 	bl	8018964 <sys_sem_signal>
 800a34e:	e002      	b.n	800a356 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800a350:	f04f 33ff 	mov.w	r3, #4294967295
 800a354:	e000      	b.n	800a358 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800a356:	2300      	movs	r3, #0
}
 800a358:	4618      	mov	r0, r3
 800a35a:	3720      	adds	r7, #32
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bd80      	pop	{r7, pc}

0800a360 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b084      	sub	sp, #16
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	4618      	mov	r0, r3
 800a372:	f7fe fbce 	bl	8008b12 <netconn_err>
 800a376:	4603      	mov	r3, r0
 800a378:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800a37a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d166      	bne.n	800a450 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	781b      	ldrb	r3, [r3, #0]
 800a388:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a38c:	2b10      	cmp	r3, #16
 800a38e:	d15d      	bne.n	800a44c <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	785b      	ldrb	r3, [r3, #1]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d002      	beq.n	800a3a0 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800a39a:	23fb      	movs	r3, #251	@ 0xfb
 800a39c:	73fb      	strb	r3, [r7, #15]
 800a39e:	e057      	b.n	800a450 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800a3a0:	68bb      	ldr	r3, [r7, #8]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	685b      	ldr	r3, [r3, #4]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d04d      	beq.n	800a446 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800a3aa:	68bb      	ldr	r3, [r7, #8]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	2201      	movs	r2, #1
 800a3b0:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a3b2:	68bb      	ldr	r3, [r7, #8]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	6a1b      	ldr	r3, [r3, #32]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d006      	beq.n	800a3ca <lwip_netconn_do_write+0x6a>
 800a3bc:	4b28      	ldr	r3, [pc, #160]	@ (800a460 <lwip_netconn_do_write+0x100>)
 800a3be:	f240 7223 	movw	r2, #1827	@ 0x723
 800a3c2:	4928      	ldr	r1, [pc, #160]	@ (800a464 <lwip_netconn_do_write+0x104>)
 800a3c4:	4828      	ldr	r0, [pc, #160]	@ (800a468 <lwip_netconn_do_write+0x108>)
 800a3c6:	f00e fcbd 	bl	8018d44 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800a3ca:	68bb      	ldr	r3, [r7, #8]
 800a3cc:	695b      	ldr	r3, [r3, #20]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d106      	bne.n	800a3e0 <lwip_netconn_do_write+0x80>
 800a3d2:	4b23      	ldr	r3, [pc, #140]	@ (800a460 <lwip_netconn_do_write+0x100>)
 800a3d4:	f240 7224 	movw	r2, #1828	@ 0x724
 800a3d8:	4924      	ldr	r1, [pc, #144]	@ (800a46c <lwip_netconn_do_write+0x10c>)
 800a3da:	4823      	ldr	r0, [pc, #140]	@ (800a468 <lwip_netconn_do_write+0x108>)
 800a3dc:	f00e fcb2 	bl	8018d44 <iprintf>
        msg->conn->current_msg = msg;
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	68ba      	ldr	r2, [r7, #8]
 800a3e6:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800a3e8:	68bb      	ldr	r3, [r7, #8]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	2100      	movs	r1, #0
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	f7ff fdea 	bl	8009fc8 <lwip_netconn_do_writemore>
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d02e      	beq.n	800a458 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800a3fa:	68bb      	ldr	r3, [r7, #8]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	785b      	ldrb	r3, [r3, #1]
 800a400:	2b01      	cmp	r3, #1
 800a402:	d006      	beq.n	800a412 <lwip_netconn_do_write+0xb2>
 800a404:	4b16      	ldr	r3, [pc, #88]	@ (800a460 <lwip_netconn_do_write+0x100>)
 800a406:	f44f 62e5 	mov.w	r2, #1832	@ 0x728
 800a40a:	4919      	ldr	r1, [pc, #100]	@ (800a470 <lwip_netconn_do_write+0x110>)
 800a40c:	4816      	ldr	r0, [pc, #88]	@ (800a468 <lwip_netconn_do_write+0x108>)
 800a40e:	f00e fc99 	bl	8018d44 <iprintf>
          UNLOCK_TCPIP_CORE();
 800a412:	4818      	ldr	r0, [pc, #96]	@ (800a474 <lwip_netconn_do_write+0x114>)
 800a414:	f00e fb17 	bl	8018a46 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a418:	68bb      	ldr	r3, [r7, #8]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	330c      	adds	r3, #12
 800a41e:	2100      	movs	r1, #0
 800a420:	4618      	mov	r0, r3
 800a422:	f00e fa6e 	bl	8018902 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800a426:	4813      	ldr	r0, [pc, #76]	@ (800a474 <lwip_netconn_do_write+0x114>)
 800a428:	f00e fafe 	bl	8018a28 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	785b      	ldrb	r3, [r3, #1]
 800a432:	2b01      	cmp	r3, #1
 800a434:	d110      	bne.n	800a458 <lwip_netconn_do_write+0xf8>
 800a436:	4b0a      	ldr	r3, [pc, #40]	@ (800a460 <lwip_netconn_do_write+0x100>)
 800a438:	f240 722c 	movw	r2, #1836	@ 0x72c
 800a43c:	490c      	ldr	r1, [pc, #48]	@ (800a470 <lwip_netconn_do_write+0x110>)
 800a43e:	480a      	ldr	r0, [pc, #40]	@ (800a468 <lwip_netconn_do_write+0x108>)
 800a440:	f00e fc80 	bl	8018d44 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800a444:	e008      	b.n	800a458 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800a446:	23f5      	movs	r3, #245	@ 0xf5
 800a448:	73fb      	strb	r3, [r7, #15]
 800a44a:	e001      	b.n	800a450 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800a44c:	23fa      	movs	r3, #250	@ 0xfa
 800a44e:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	7bfa      	ldrb	r2, [r7, #15]
 800a454:	711a      	strb	r2, [r3, #4]
 800a456:	e000      	b.n	800a45a <lwip_netconn_do_write+0xfa>
        return;
 800a458:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800a45a:	3710      	adds	r7, #16
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bd80      	pop	{r7, pc}
 800a460:	0801a5f4 	.word	0x0801a5f4
 800a464:	0801a998 	.word	0x0801a998
 800a468:	0801a638 	.word	0x0801a638
 800a46c:	0801ab20 	.word	0x0801ab20
 800a470:	0801a9b4 	.word	0x0801a9b4
 800a474:	2000d2bc 	.word	0x2000d2bc

0800a478 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b084      	sub	sp, #16
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	785b      	ldrb	r3, [r3, #1]
 800a48a:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	685b      	ldr	r3, [r3, #4]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d069      	beq.n	800a56a <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	781b      	ldrb	r3, [r3, #0]
 800a49c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800a4a0:	2b10      	cmp	r3, #16
 800a4a2:	d162      	bne.n	800a56a <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800a4a8:	2b03      	cmp	r3, #3
 800a4aa:	d002      	beq.n	800a4b2 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800a4ac:	7afb      	ldrb	r3, [r7, #11]
 800a4ae:	2b02      	cmp	r3, #2
 800a4b0:	d05b      	beq.n	800a56a <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800a4b2:	7afb      	ldrb	r3, [r7, #11]
 800a4b4:	2b03      	cmp	r3, #3
 800a4b6:	d103      	bne.n	800a4c0 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	22f5      	movs	r2, #245	@ 0xf5
 800a4bc:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800a4be:	e059      	b.n	800a574 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800a4c0:	7afb      	ldrb	r3, [r7, #11]
 800a4c2:	2b01      	cmp	r3, #1
 800a4c4:	d103      	bne.n	800a4ce <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	22fb      	movs	r2, #251	@ 0xfb
 800a4ca:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800a4cc:	e052      	b.n	800a574 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	7a1b      	ldrb	r3, [r3, #8]
 800a4d2:	f003 0301 	and.w	r3, r3, #1
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d004      	beq.n	800a4e4 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f7ff f850 	bl	8009584 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	6a1b      	ldr	r3, [r3, #32]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d006      	beq.n	800a4fc <lwip_netconn_do_close+0x84>
 800a4ee:	4b23      	ldr	r3, [pc, #140]	@ (800a57c <lwip_netconn_do_close+0x104>)
 800a4f0:	f240 72bd 	movw	r2, #1981	@ 0x7bd
 800a4f4:	4922      	ldr	r1, [pc, #136]	@ (800a580 <lwip_netconn_do_close+0x108>)
 800a4f6:	4823      	ldr	r0, [pc, #140]	@ (800a584 <lwip_netconn_do_close+0x10c>)
 800a4f8:	f00e fc24 	bl	8018d44 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	2204      	movs	r2, #4
 800a502:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	68fa      	ldr	r2, [r7, #12]
 800a50a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	2100      	movs	r1, #0
 800a512:	4618      	mov	r0, r3
 800a514:	f7ff f8b4 	bl	8009680 <lwip_netconn_do_close_internal>
 800a518:	4603      	mov	r3, r0
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d029      	beq.n	800a572 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	785b      	ldrb	r3, [r3, #1]
 800a524:	2b04      	cmp	r3, #4
 800a526:	d006      	beq.n	800a536 <lwip_netconn_do_close+0xbe>
 800a528:	4b14      	ldr	r3, [pc, #80]	@ (800a57c <lwip_netconn_do_close+0x104>)
 800a52a:	f240 72c2 	movw	r2, #1986	@ 0x7c2
 800a52e:	4916      	ldr	r1, [pc, #88]	@ (800a588 <lwip_netconn_do_close+0x110>)
 800a530:	4814      	ldr	r0, [pc, #80]	@ (800a584 <lwip_netconn_do_close+0x10c>)
 800a532:	f00e fc07 	bl	8018d44 <iprintf>
        UNLOCK_TCPIP_CORE();
 800a536:	4815      	ldr	r0, [pc, #84]	@ (800a58c <lwip_netconn_do_close+0x114>)
 800a538:	f00e fa85 	bl	8018a46 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	330c      	adds	r3, #12
 800a542:	2100      	movs	r1, #0
 800a544:	4618      	mov	r0, r3
 800a546:	f00e f9dc 	bl	8018902 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800a54a:	4810      	ldr	r0, [pc, #64]	@ (800a58c <lwip_netconn_do_close+0x114>)
 800a54c:	f00e fa6c 	bl	8018a28 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	785b      	ldrb	r3, [r3, #1]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d00b      	beq.n	800a572 <lwip_netconn_do_close+0xfa>
 800a55a:	4b08      	ldr	r3, [pc, #32]	@ (800a57c <lwip_netconn_do_close+0x104>)
 800a55c:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 800a560:	4909      	ldr	r1, [pc, #36]	@ (800a588 <lwip_netconn_do_close+0x110>)
 800a562:	4808      	ldr	r0, [pc, #32]	@ (800a584 <lwip_netconn_do_close+0x10c>)
 800a564:	f00e fbee 	bl	8018d44 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800a568:	e003      	b.n	800a572 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	22f5      	movs	r2, #245	@ 0xf5
 800a56e:	711a      	strb	r2, [r3, #4]
 800a570:	e000      	b.n	800a574 <lwip_netconn_do_close+0xfc>
      return;
 800a572:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800a574:	3710      	adds	r7, #16
 800a576:	46bd      	mov	sp, r7
 800a578:	bd80      	pop	{r7, pc}
 800a57a:	bf00      	nop
 800a57c:	0801a5f4 	.word	0x0801a5f4
 800a580:	0801a998 	.word	0x0801a998
 800a584:	0801a638 	.word	0x0801a638
 800a588:	0801a9b4 	.word	0x0801a9b4
 800a58c:	2000d2bc 	.word	0x2000d2bc

0800a590 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b082      	sub	sp, #8
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d013      	beq.n	800a5c6 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d00b      	beq.n	800a5be <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	f002 fc90 	bl	800ced0 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	605a      	str	r2, [r3, #4]
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	685a      	ldr	r2, [r3, #4]
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800a5be:	6879      	ldr	r1, [r7, #4]
 800a5c0:	2006      	movs	r0, #6
 800a5c2:	f001 fdd5 	bl	800c170 <memp_free>
  }
}
 800a5c6:	bf00      	nop
 800a5c8:	3708      	adds	r7, #8
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}
	...

0800a5d0 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b084      	sub	sp, #16
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	60f8      	str	r0, [r7, #12]
 800a5d8:	60b9      	str	r1, [r7, #8]
 800a5da:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d108      	bne.n	800a5f4 <netbuf_data+0x24>
 800a5e2:	4b1b      	ldr	r3, [pc, #108]	@ (800a650 <netbuf_data+0x80>)
 800a5e4:	22c6      	movs	r2, #198	@ 0xc6
 800a5e6:	491b      	ldr	r1, [pc, #108]	@ (800a654 <netbuf_data+0x84>)
 800a5e8:	481b      	ldr	r0, [pc, #108]	@ (800a658 <netbuf_data+0x88>)
 800a5ea:	f00e fbab 	bl	8018d44 <iprintf>
 800a5ee:	f06f 030f 	mvn.w	r3, #15
 800a5f2:	e029      	b.n	800a648 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800a5f4:	68bb      	ldr	r3, [r7, #8]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d108      	bne.n	800a60c <netbuf_data+0x3c>
 800a5fa:	4b15      	ldr	r3, [pc, #84]	@ (800a650 <netbuf_data+0x80>)
 800a5fc:	22c7      	movs	r2, #199	@ 0xc7
 800a5fe:	4917      	ldr	r1, [pc, #92]	@ (800a65c <netbuf_data+0x8c>)
 800a600:	4815      	ldr	r0, [pc, #84]	@ (800a658 <netbuf_data+0x88>)
 800a602:	f00e fb9f 	bl	8018d44 <iprintf>
 800a606:	f06f 030f 	mvn.w	r3, #15
 800a60a:	e01d      	b.n	800a648 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d108      	bne.n	800a624 <netbuf_data+0x54>
 800a612:	4b0f      	ldr	r3, [pc, #60]	@ (800a650 <netbuf_data+0x80>)
 800a614:	22c8      	movs	r2, #200	@ 0xc8
 800a616:	4912      	ldr	r1, [pc, #72]	@ (800a660 <netbuf_data+0x90>)
 800a618:	480f      	ldr	r0, [pc, #60]	@ (800a658 <netbuf_data+0x88>)
 800a61a:	f00e fb93 	bl	8018d44 <iprintf>
 800a61e:	f06f 030f 	mvn.w	r3, #15
 800a622:	e011      	b.n	800a648 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	685b      	ldr	r3, [r3, #4]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d102      	bne.n	800a632 <netbuf_data+0x62>
    return ERR_BUF;
 800a62c:	f06f 0301 	mvn.w	r3, #1
 800a630:	e00a      	b.n	800a648 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	685b      	ldr	r3, [r3, #4]
 800a636:	685a      	ldr	r2, [r3, #4]
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	685b      	ldr	r3, [r3, #4]
 800a640:	895a      	ldrh	r2, [r3, #10]
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 800a646:	2300      	movs	r3, #0
}
 800a648:	4618      	mov	r0, r3
 800a64a:	3710      	adds	r7, #16
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}
 800a650:	0801ab4c 	.word	0x0801ab4c
 800a654:	0801ac54 	.word	0x0801ac54
 800a658:	0801ab9c 	.word	0x0801ab9c
 800a65c:	0801ac70 	.word	0x0801ac70
 800a660:	0801ac90 	.word	0x0801ac90

0800a664 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b082      	sub	sp, #8
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d108      	bne.n	800a684 <netbuf_next+0x20>
 800a672:	4b11      	ldr	r3, [pc, #68]	@ (800a6b8 <netbuf_next+0x54>)
 800a674:	22e0      	movs	r2, #224	@ 0xe0
 800a676:	4911      	ldr	r1, [pc, #68]	@ (800a6bc <netbuf_next+0x58>)
 800a678:	4811      	ldr	r0, [pc, #68]	@ (800a6c0 <netbuf_next+0x5c>)
 800a67a:	f00e fb63 	bl	8018d44 <iprintf>
 800a67e:	f04f 33ff 	mov.w	r3, #4294967295
 800a682:	e014      	b.n	800a6ae <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	685b      	ldr	r3, [r3, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d102      	bne.n	800a694 <netbuf_next+0x30>
    return -1;
 800a68e:	f04f 33ff 	mov.w	r3, #4294967295
 800a692:	e00c      	b.n	800a6ae <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	685b      	ldr	r3, [r3, #4]
 800a698:	681a      	ldr	r2, [r3, #0]
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	685b      	ldr	r3, [r3, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d101      	bne.n	800a6ac <netbuf_next+0x48>
    return 1;
 800a6a8:	2301      	movs	r3, #1
 800a6aa:	e000      	b.n	800a6ae <netbuf_next+0x4a>
  }
  return 0;
 800a6ac:	2300      	movs	r3, #0
}
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	3708      	adds	r7, #8
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}
 800a6b6:	bf00      	nop
 800a6b8:	0801ab4c 	.word	0x0801ab4c
 800a6bc:	0801acac 	.word	0x0801acac
 800a6c0:	0801ab9c 	.word	0x0801ab9c

0800a6c4 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b084      	sub	sp, #16
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
 800a6cc:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800a6ce:	f009 f9b5 	bl	8013a3c <sys_timeouts_sleeptime>
 800a6d2:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6da:	d10b      	bne.n	800a6f4 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800a6dc:	4813      	ldr	r0, [pc, #76]	@ (800a72c <tcpip_timeouts_mbox_fetch+0x68>)
 800a6de:	f00e f9b2 	bl	8018a46 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	6839      	ldr	r1, [r7, #0]
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f00e f86a 	bl	80187c0 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800a6ec:	480f      	ldr	r0, [pc, #60]	@ (800a72c <tcpip_timeouts_mbox_fetch+0x68>)
 800a6ee:	f00e f99b 	bl	8018a28 <sys_mutex_lock>
    return;
 800a6f2:	e018      	b.n	800a726 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d102      	bne.n	800a700 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800a6fa:	f009 f965 	bl	80139c8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a6fe:	e7e6      	b.n	800a6ce <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800a700:	480a      	ldr	r0, [pc, #40]	@ (800a72c <tcpip_timeouts_mbox_fetch+0x68>)
 800a702:	f00e f9a0 	bl	8018a46 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800a706:	68fa      	ldr	r2, [r7, #12]
 800a708:	6839      	ldr	r1, [r7, #0]
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	f00e f858 	bl	80187c0 <sys_arch_mbox_fetch>
 800a710:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800a712:	4806      	ldr	r0, [pc, #24]	@ (800a72c <tcpip_timeouts_mbox_fetch+0x68>)
 800a714:	f00e f988 	bl	8018a28 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800a718:	68bb      	ldr	r3, [r7, #8]
 800a71a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a71e:	d102      	bne.n	800a726 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800a720:	f009 f952 	bl	80139c8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a724:	e7d3      	b.n	800a6ce <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800a726:	3710      	adds	r7, #16
 800a728:	46bd      	mov	sp, r7
 800a72a:	bd80      	pop	{r7, pc}
 800a72c:	2000d2bc 	.word	0x2000d2bc

0800a730 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b084      	sub	sp, #16
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800a738:	4810      	ldr	r0, [pc, #64]	@ (800a77c <tcpip_thread+0x4c>)
 800a73a:	f00e f975 	bl	8018a28 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800a73e:	4b10      	ldr	r3, [pc, #64]	@ (800a780 <tcpip_thread+0x50>)
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d005      	beq.n	800a752 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800a746:	4b0e      	ldr	r3, [pc, #56]	@ (800a780 <tcpip_thread+0x50>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	4a0e      	ldr	r2, [pc, #56]	@ (800a784 <tcpip_thread+0x54>)
 800a74c:	6812      	ldr	r2, [r2, #0]
 800a74e:	4610      	mov	r0, r2
 800a750:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a752:	f107 030c 	add.w	r3, r7, #12
 800a756:	4619      	mov	r1, r3
 800a758:	480b      	ldr	r0, [pc, #44]	@ (800a788 <tcpip_thread+0x58>)
 800a75a:	f7ff ffb3 	bl	800a6c4 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d106      	bne.n	800a772 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a764:	4b09      	ldr	r3, [pc, #36]	@ (800a78c <tcpip_thread+0x5c>)
 800a766:	2291      	movs	r2, #145	@ 0x91
 800a768:	4909      	ldr	r1, [pc, #36]	@ (800a790 <tcpip_thread+0x60>)
 800a76a:	480a      	ldr	r0, [pc, #40]	@ (800a794 <tcpip_thread+0x64>)
 800a76c:	f00e faea 	bl	8018d44 <iprintf>
      continue;
 800a770:	e003      	b.n	800a77a <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	4618      	mov	r0, r3
 800a776:	f000 f80f 	bl	800a798 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a77a:	e7ea      	b.n	800a752 <tcpip_thread+0x22>
 800a77c:	2000d2bc 	.word	0x2000d2bc
 800a780:	2000d2b0 	.word	0x2000d2b0
 800a784:	2000d2b4 	.word	0x2000d2b4
 800a788:	2000d2b8 	.word	0x2000d2b8
 800a78c:	0801ace4 	.word	0x0801ace4
 800a790:	0801ad14 	.word	0x0801ad14
 800a794:	0801ad34 	.word	0x0801ad34

0800a798 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b082      	sub	sp, #8
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	781b      	ldrb	r3, [r3, #0]
 800a7a4:	2b02      	cmp	r3, #2
 800a7a6:	d026      	beq.n	800a7f6 <tcpip_thread_handle_msg+0x5e>
 800a7a8:	2b02      	cmp	r3, #2
 800a7aa:	dc2b      	bgt.n	800a804 <tcpip_thread_handle_msg+0x6c>
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d002      	beq.n	800a7b6 <tcpip_thread_handle_msg+0x1e>
 800a7b0:	2b01      	cmp	r3, #1
 800a7b2:	d015      	beq.n	800a7e0 <tcpip_thread_handle_msg+0x48>
 800a7b4:	e026      	b.n	800a804 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	68db      	ldr	r3, [r3, #12]
 800a7ba:	687a      	ldr	r2, [r7, #4]
 800a7bc:	6850      	ldr	r0, [r2, #4]
 800a7be:	687a      	ldr	r2, [r7, #4]
 800a7c0:	6892      	ldr	r2, [r2, #8]
 800a7c2:	4611      	mov	r1, r2
 800a7c4:	4798      	blx	r3
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d004      	beq.n	800a7d6 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	685b      	ldr	r3, [r3, #4]
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	f002 fb7d 	bl	800ced0 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a7d6:	6879      	ldr	r1, [r7, #4]
 800a7d8:	2009      	movs	r0, #9
 800a7da:	f001 fcc9 	bl	800c170 <memp_free>
      break;
 800a7de:	e018      	b.n	800a812 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	685b      	ldr	r3, [r3, #4]
 800a7e4:	687a      	ldr	r2, [r7, #4]
 800a7e6:	6892      	ldr	r2, [r2, #8]
 800a7e8:	4610      	mov	r0, r2
 800a7ea:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800a7ec:	6879      	ldr	r1, [r7, #4]
 800a7ee:	2008      	movs	r0, #8
 800a7f0:	f001 fcbe 	bl	800c170 <memp_free>
      break;
 800a7f4:	e00d      	b.n	800a812 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	685b      	ldr	r3, [r3, #4]
 800a7fa:	687a      	ldr	r2, [r7, #4]
 800a7fc:	6892      	ldr	r2, [r2, #8]
 800a7fe:	4610      	mov	r0, r2
 800a800:	4798      	blx	r3
      break;
 800a802:	e006      	b.n	800a812 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a804:	4b05      	ldr	r3, [pc, #20]	@ (800a81c <tcpip_thread_handle_msg+0x84>)
 800a806:	22cf      	movs	r2, #207	@ 0xcf
 800a808:	4905      	ldr	r1, [pc, #20]	@ (800a820 <tcpip_thread_handle_msg+0x88>)
 800a80a:	4806      	ldr	r0, [pc, #24]	@ (800a824 <tcpip_thread_handle_msg+0x8c>)
 800a80c:	f00e fa9a 	bl	8018d44 <iprintf>
      break;
 800a810:	bf00      	nop
  }
}
 800a812:	bf00      	nop
 800a814:	3708      	adds	r7, #8
 800a816:	46bd      	mov	sp, r7
 800a818:	bd80      	pop	{r7, pc}
 800a81a:	bf00      	nop
 800a81c:	0801ace4 	.word	0x0801ace4
 800a820:	0801ad14 	.word	0x0801ad14
 800a824:	0801ad34 	.word	0x0801ad34

0800a828 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b086      	sub	sp, #24
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	60f8      	str	r0, [r7, #12]
 800a830:	60b9      	str	r1, [r7, #8]
 800a832:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a834:	481a      	ldr	r0, [pc, #104]	@ (800a8a0 <tcpip_inpkt+0x78>)
 800a836:	f00e f81e 	bl	8018876 <sys_mbox_valid>
 800a83a:	4603      	mov	r3, r0
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d105      	bne.n	800a84c <tcpip_inpkt+0x24>
 800a840:	4b18      	ldr	r3, [pc, #96]	@ (800a8a4 <tcpip_inpkt+0x7c>)
 800a842:	22fc      	movs	r2, #252	@ 0xfc
 800a844:	4918      	ldr	r1, [pc, #96]	@ (800a8a8 <tcpip_inpkt+0x80>)
 800a846:	4819      	ldr	r0, [pc, #100]	@ (800a8ac <tcpip_inpkt+0x84>)
 800a848:	f00e fa7c 	bl	8018d44 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800a84c:	2009      	movs	r0, #9
 800a84e:	f001 fc19 	bl	800c084 <memp_malloc>
 800a852:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800a854:	697b      	ldr	r3, [r7, #20]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d102      	bne.n	800a860 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800a85a:	f04f 33ff 	mov.w	r3, #4294967295
 800a85e:	e01a      	b.n	800a896 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800a860:	697b      	ldr	r3, [r7, #20]
 800a862:	2200      	movs	r2, #0
 800a864:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800a866:	697b      	ldr	r3, [r7, #20]
 800a868:	68fa      	ldr	r2, [r7, #12]
 800a86a:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800a86c:	697b      	ldr	r3, [r7, #20]
 800a86e:	68ba      	ldr	r2, [r7, #8]
 800a870:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800a872:	697b      	ldr	r3, [r7, #20]
 800a874:	687a      	ldr	r2, [r7, #4]
 800a876:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a878:	6979      	ldr	r1, [r7, #20]
 800a87a:	4809      	ldr	r0, [pc, #36]	@ (800a8a0 <tcpip_inpkt+0x78>)
 800a87c:	f00d ff86 	bl	801878c <sys_mbox_trypost>
 800a880:	4603      	mov	r3, r0
 800a882:	2b00      	cmp	r3, #0
 800a884:	d006      	beq.n	800a894 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a886:	6979      	ldr	r1, [r7, #20]
 800a888:	2009      	movs	r0, #9
 800a88a:	f001 fc71 	bl	800c170 <memp_free>
    return ERR_MEM;
 800a88e:	f04f 33ff 	mov.w	r3, #4294967295
 800a892:	e000      	b.n	800a896 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800a894:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800a896:	4618      	mov	r0, r3
 800a898:	3718      	adds	r7, #24
 800a89a:	46bd      	mov	sp, r7
 800a89c:	bd80      	pop	{r7, pc}
 800a89e:	bf00      	nop
 800a8a0:	2000d2b8 	.word	0x2000d2b8
 800a8a4:	0801ace4 	.word	0x0801ace4
 800a8a8:	0801ad5c 	.word	0x0801ad5c
 800a8ac:	0801ad34 	.word	0x0801ad34

0800a8b0 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b082      	sub	sp, #8
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
 800a8b8:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a8c0:	f003 0318 	and.w	r3, r3, #24
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d006      	beq.n	800a8d6 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800a8c8:	4a08      	ldr	r2, [pc, #32]	@ (800a8ec <tcpip_input+0x3c>)
 800a8ca:	6839      	ldr	r1, [r7, #0]
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	f7ff ffab 	bl	800a828 <tcpip_inpkt>
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	e005      	b.n	800a8e2 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800a8d6:	4a06      	ldr	r2, [pc, #24]	@ (800a8f0 <tcpip_input+0x40>)
 800a8d8:	6839      	ldr	r1, [r7, #0]
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	f7ff ffa4 	bl	800a828 <tcpip_inpkt>
 800a8e0:	4603      	mov	r3, r0
}
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	3708      	adds	r7, #8
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bd80      	pop	{r7, pc}
 800a8ea:	bf00      	nop
 800a8ec:	08018579 	.word	0x08018579
 800a8f0:	08017445 	.word	0x08017445

0800a8f4 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b084      	sub	sp, #16
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
 800a8fc:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a8fe:	4819      	ldr	r0, [pc, #100]	@ (800a964 <tcpip_try_callback+0x70>)
 800a900:	f00d ffb9 	bl	8018876 <sys_mbox_valid>
 800a904:	4603      	mov	r3, r0
 800a906:	2b00      	cmp	r3, #0
 800a908:	d106      	bne.n	800a918 <tcpip_try_callback+0x24>
 800a90a:	4b17      	ldr	r3, [pc, #92]	@ (800a968 <tcpip_try_callback+0x74>)
 800a90c:	f240 125d 	movw	r2, #349	@ 0x15d
 800a910:	4916      	ldr	r1, [pc, #88]	@ (800a96c <tcpip_try_callback+0x78>)
 800a912:	4817      	ldr	r0, [pc, #92]	@ (800a970 <tcpip_try_callback+0x7c>)
 800a914:	f00e fa16 	bl	8018d44 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800a918:	2008      	movs	r0, #8
 800a91a:	f001 fbb3 	bl	800c084 <memp_malloc>
 800a91e:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d102      	bne.n	800a92c <tcpip_try_callback+0x38>
    return ERR_MEM;
 800a926:	f04f 33ff 	mov.w	r3, #4294967295
 800a92a:	e017      	b.n	800a95c <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	2201      	movs	r2, #1
 800a930:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	687a      	ldr	r2, [r7, #4]
 800a936:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	683a      	ldr	r2, [r7, #0]
 800a93c:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a93e:	68f9      	ldr	r1, [r7, #12]
 800a940:	4808      	ldr	r0, [pc, #32]	@ (800a964 <tcpip_try_callback+0x70>)
 800a942:	f00d ff23 	bl	801878c <sys_mbox_trypost>
 800a946:	4603      	mov	r3, r0
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d006      	beq.n	800a95a <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800a94c:	68f9      	ldr	r1, [r7, #12]
 800a94e:	2008      	movs	r0, #8
 800a950:	f001 fc0e 	bl	800c170 <memp_free>
    return ERR_MEM;
 800a954:	f04f 33ff 	mov.w	r3, #4294967295
 800a958:	e000      	b.n	800a95c <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800a95a:	2300      	movs	r3, #0
}
 800a95c:	4618      	mov	r0, r3
 800a95e:	3710      	adds	r7, #16
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}
 800a964:	2000d2b8 	.word	0x2000d2b8
 800a968:	0801ace4 	.word	0x0801ace4
 800a96c:	0801ad5c 	.word	0x0801ad5c
 800a970:	0801ad34 	.word	0x0801ad34

0800a974 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b084      	sub	sp, #16
 800a978:	af00      	add	r7, sp, #0
 800a97a:	60f8      	str	r0, [r7, #12]
 800a97c:	60b9      	str	r1, [r7, #8]
 800a97e:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800a980:	4806      	ldr	r0, [pc, #24]	@ (800a99c <tcpip_send_msg_wait_sem+0x28>)
 800a982:	f00e f851 	bl	8018a28 <sys_mutex_lock>
  fn(apimsg);
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	68b8      	ldr	r0, [r7, #8]
 800a98a:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800a98c:	4803      	ldr	r0, [pc, #12]	@ (800a99c <tcpip_send_msg_wait_sem+0x28>)
 800a98e:	f00e f85a 	bl	8018a46 <sys_mutex_unlock>
  return ERR_OK;
 800a992:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800a994:	4618      	mov	r0, r3
 800a996:	3710      	adds	r7, #16
 800a998:	46bd      	mov	sp, r7
 800a99a:	bd80      	pop	{r7, pc}
 800a99c:	2000d2bc 	.word	0x2000d2bc

0800a9a0 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b084      	sub	sp, #16
 800a9a4:	af02      	add	r7, sp, #8
 800a9a6:	6078      	str	r0, [r7, #4]
 800a9a8:	6039      	str	r1, [r7, #0]
  lwip_init();
 800a9aa:	f000 fec1 	bl	800b730 <lwip_init>

  tcpip_init_done = initfunc;
 800a9ae:	4a17      	ldr	r2, [pc, #92]	@ (800aa0c <tcpip_init+0x6c>)
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800a9b4:	4a16      	ldr	r2, [pc, #88]	@ (800aa10 <tcpip_init+0x70>)
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800a9ba:	2106      	movs	r1, #6
 800a9bc:	4815      	ldr	r0, [pc, #84]	@ (800aa14 <tcpip_init+0x74>)
 800a9be:	f00d feb1 	bl	8018724 <sys_mbox_new>
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d006      	beq.n	800a9d6 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800a9c8:	4b13      	ldr	r3, [pc, #76]	@ (800aa18 <tcpip_init+0x78>)
 800a9ca:	f240 2261 	movw	r2, #609	@ 0x261
 800a9ce:	4913      	ldr	r1, [pc, #76]	@ (800aa1c <tcpip_init+0x7c>)
 800a9d0:	4813      	ldr	r0, [pc, #76]	@ (800aa20 <tcpip_init+0x80>)
 800a9d2:	f00e f9b7 	bl	8018d44 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800a9d6:	4813      	ldr	r0, [pc, #76]	@ (800aa24 <tcpip_init+0x84>)
 800a9d8:	f00e f80a 	bl	80189f0 <sys_mutex_new>
 800a9dc:	4603      	mov	r3, r0
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d006      	beq.n	800a9f0 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800a9e2:	4b0d      	ldr	r3, [pc, #52]	@ (800aa18 <tcpip_init+0x78>)
 800a9e4:	f240 2265 	movw	r2, #613	@ 0x265
 800a9e8:	490f      	ldr	r1, [pc, #60]	@ (800aa28 <tcpip_init+0x88>)
 800a9ea:	480d      	ldr	r0, [pc, #52]	@ (800aa20 <tcpip_init+0x80>)
 800a9ec:	f00e f9aa 	bl	8018d44 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	9300      	str	r3, [sp, #0]
 800a9f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	490c      	ldr	r1, [pc, #48]	@ (800aa2c <tcpip_init+0x8c>)
 800a9fc:	480c      	ldr	r0, [pc, #48]	@ (800aa30 <tcpip_init+0x90>)
 800a9fe:	f00e f82f 	bl	8018a60 <sys_thread_new>
}
 800aa02:	bf00      	nop
 800aa04:	3708      	adds	r7, #8
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}
 800aa0a:	bf00      	nop
 800aa0c:	2000d2b0 	.word	0x2000d2b0
 800aa10:	2000d2b4 	.word	0x2000d2b4
 800aa14:	2000d2b8 	.word	0x2000d2b8
 800aa18:	0801ace4 	.word	0x0801ace4
 800aa1c:	0801ad6c 	.word	0x0801ad6c
 800aa20:	0801ad34 	.word	0x0801ad34
 800aa24:	2000d2bc 	.word	0x2000d2bc
 800aa28:	0801ad90 	.word	0x0801ad90
 800aa2c:	0800a731 	.word	0x0800a731
 800aa30:	0801adb4 	.word	0x0801adb4

0800aa34 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b084      	sub	sp, #16
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
 800aa3c:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d002      	beq.n	800aa4a <fs_open+0x16>
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d102      	bne.n	800aa50 <fs_open+0x1c>
    return ERR_ARG;
 800aa4a:	f06f 030f 	mvn.w	r3, #15
 800aa4e:	e028      	b.n	800aaa2 <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 800aa50:	4b16      	ldr	r3, [pc, #88]	@ (800aaac <fs_open+0x78>)
 800aa52:	60fb      	str	r3, [r7, #12]
 800aa54:	e020      	b.n	800aa98 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	685b      	ldr	r3, [r3, #4]
 800aa5a:	4619      	mov	r1, r3
 800aa5c:	6838      	ldr	r0, [r7, #0]
 800aa5e:	f7f5 fbc7 	bl	80001f0 <strcmp>
 800aa62:	4603      	mov	r3, r0
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d114      	bne.n	800aa92 <fs_open+0x5e>
      file->data = (const char *)f->data;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	689a      	ldr	r2, [r3, #8]
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	68da      	ldr	r2, [r3, #12]
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	68da      	ldr	r2, [r3, #12]
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2200      	movs	r2, #0
 800aa84:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	7c1a      	ldrb	r2, [r3, #16]
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 800aa8e:	2300      	movs	r3, #0
 800aa90:	e007      	b.n	800aaa2 <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	60fb      	str	r3, [r7, #12]
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d1db      	bne.n	800aa56 <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 800aa9e:	f06f 0305 	mvn.w	r3, #5
}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	3710      	adds	r7, #16
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd80      	pop	{r7, pc}
 800aaaa:	bf00      	nop
 800aaac:	08027e50 	.word	0x08027e50

0800aab0 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 800aab0:	b480      	push	{r7}
 800aab2:	b083      	sub	sp, #12
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 800aab8:	bf00      	nop
 800aaba:	370c      	adds	r7, #12
 800aabc:	46bd      	mov	sp, r7
 800aabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac2:	4770      	bx	lr

0800aac4 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 800aac4:	b480      	push	{r7}
 800aac6:	b083      	sub	sp, #12
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	685a      	ldr	r2, [r3, #4]
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	689b      	ldr	r3, [r3, #8]
 800aad4:	1ad3      	subs	r3, r2, r3
}
 800aad6:	4618      	mov	r0, r3
 800aad8:	370c      	adds	r7, #12
 800aada:	46bd      	mov	sp, r7
 800aadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae0:	4770      	bx	lr

0800aae2 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 800aae2:	b580      	push	{r7, lr}
 800aae4:	b082      	sub	sp, #8
 800aae6:	af00      	add	r7, sp, #0
 800aae8:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 800aaea:	222c      	movs	r2, #44	@ 0x2c
 800aaec:	2100      	movs	r1, #0
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	f00e f9c7 	bl	8018e82 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 800aaf4:	bf00      	nop
 800aaf6:	3708      	adds	r7, #8
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	bd80      	pop	{r7, pc}

0800aafc <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b082      	sub	sp, #8
 800ab00:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 800ab02:	202c      	movs	r0, #44	@ 0x2c
 800ab04:	f001 f91a 	bl	800bd3c <mem_malloc>
 800ab08:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d002      	beq.n	800ab16 <http_state_alloc+0x1a>
    http_state_init(ret);
 800ab10:	6878      	ldr	r0, [r7, #4]
 800ab12:	f7ff ffe6 	bl	800aae2 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 800ab16:	687b      	ldr	r3, [r7, #4]
}
 800ab18:	4618      	mov	r0, r3
 800ab1a:	3708      	adds	r7, #8
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	bd80      	pop	{r7, pc}

0800ab20 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b082      	sub	sp, #8
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	695b      	ldr	r3, [r3, #20]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d007      	beq.n	800ab40 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	695b      	ldr	r3, [r3, #20]
 800ab34:	4618      	mov	r0, r3
 800ab36:	f7ff ffbb 	bl	800aab0 <fs_close>
    hs->handle = NULL;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	615a      	str	r2, [r3, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	6a1b      	ldr	r3, [r3, #32]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d007      	beq.n	800ab58 <http_state_eof+0x38>
    pbuf_free(hs->req);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6a1b      	ldr	r3, [r3, #32]
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	f002 f9bf 	bl	800ced0 <pbuf_free>
    hs->req = NULL;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	2200      	movs	r2, #0
 800ab56:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800ab58:	bf00      	nop
 800ab5a:	3708      	adds	r7, #8
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bd80      	pop	{r7, pc}

0800ab60 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b082      	sub	sp, #8
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d005      	beq.n	800ab7a <http_state_free+0x1a>
    http_state_eof(hs);
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	f7ff ffd6 	bl	800ab20 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 800ab74:	6878      	ldr	r0, [r7, #4]
 800ab76:	f000 ff47 	bl	800ba08 <mem_free>
  }
}
 800ab7a:	bf00      	nop
 800ab7c:	3708      	adds	r7, #8
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}
	...

0800ab84 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b086      	sub	sp, #24
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	60f8      	str	r0, [r7, #12]
 800ab8c:	60b9      	str	r1, [r7, #8]
 800ab8e:	607a      	str	r2, [r7, #4]
 800ab90:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d106      	bne.n	800aba6 <http_write+0x22>
 800ab98:	4b2c      	ldr	r3, [pc, #176]	@ (800ac4c <http_write+0xc8>)
 800ab9a:	f240 2219 	movw	r2, #537	@ 0x219
 800ab9e:	492c      	ldr	r1, [pc, #176]	@ (800ac50 <http_write+0xcc>)
 800aba0:	482c      	ldr	r0, [pc, #176]	@ (800ac54 <http_write+0xd0>)
 800aba2:	f00e f8cf 	bl	8018d44 <iprintf>
  len = *length;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	881b      	ldrh	r3, [r3, #0]
 800abaa:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 800abac:	8afb      	ldrh	r3, [r7, #22]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d101      	bne.n	800abb6 <http_write+0x32>
    return ERR_OK;
 800abb2:	2300      	movs	r3, #0
 800abb4:	e045      	b.n	800ac42 <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800abbc:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 800abbe:	8aba      	ldrh	r2, [r7, #20]
 800abc0:	8afb      	ldrh	r3, [r7, #22]
 800abc2:	429a      	cmp	r2, r3
 800abc4:	d201      	bcs.n	800abca <http_write+0x46>
    len = max_len;
 800abc6:	8abb      	ldrh	r3, [r7, #20]
 800abc8:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800abce:	005b      	lsls	r3, r3, #1
 800abd0:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 800abd2:	8afa      	ldrh	r2, [r7, #22]
 800abd4:	8abb      	ldrh	r3, [r7, #20]
 800abd6:	429a      	cmp	r2, r3
 800abd8:	d901      	bls.n	800abde <http_write+0x5a>
    len = max_len;
 800abda:	8abb      	ldrh	r3, [r7, #20]
 800abdc:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 800abde:	78fb      	ldrb	r3, [r7, #3]
 800abe0:	8afa      	ldrh	r2, [r7, #22]
 800abe2:	68b9      	ldr	r1, [r7, #8]
 800abe4:	68f8      	ldr	r0, [r7, #12]
 800abe6:	f007 f887 	bl	8011cf8 <tcp_write>
 800abea:	4603      	mov	r3, r0
 800abec:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 800abee:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800abf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abf6:	d10f      	bne.n	800ac18 <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d004      	beq.n	800ac0c <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 800ac08:	2b08      	cmp	r3, #8
 800ac0a:	d902      	bls.n	800ac12 <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 800ac0c:	2301      	movs	r3, #1
 800ac0e:	82fb      	strh	r3, [r7, #22]
 800ac10:	e002      	b.n	800ac18 <http_write+0x94>
      } else {
        len /= 2;
 800ac12:	8afb      	ldrh	r3, [r7, #22]
 800ac14:	085b      	lsrs	r3, r3, #1
 800ac16:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 800ac18:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ac1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac20:	d102      	bne.n	800ac28 <http_write+0xa4>
 800ac22:	8afb      	ldrh	r3, [r7, #22]
 800ac24:	2b01      	cmp	r3, #1
 800ac26:	d8da      	bhi.n	800abde <http_write+0x5a>

  if (err == ERR_OK) {
 800ac28:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d103      	bne.n	800ac38 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	8afa      	ldrh	r2, [r7, #22]
 800ac34:	801a      	strh	r2, [r3, #0]
 800ac36:	e002      	b.n	800ac3e <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 800ac3e:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800ac42:	4618      	mov	r0, r3
 800ac44:	3718      	adds	r7, #24
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bd80      	pop	{r7, pc}
 800ac4a:	bf00      	nop
 800ac4c:	0801ae04 	.word	0x0801ae04
 800ac50:	0801ae3c 	.word	0x0801ae3c
 800ac54:	0801ae4c 	.word	0x0801ae4c

0800ac58 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b086      	sub	sp, #24
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	60f8      	str	r0, [r7, #12]
 800ac60:	60b9      	str	r1, [r7, #8]
 800ac62:	4613      	mov	r3, r2
 800ac64:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 800ac66:	2100      	movs	r1, #0
 800ac68:	68f8      	ldr	r0, [r7, #12]
 800ac6a:	f004 f909 	bl	800ee80 <tcp_arg>
  altcp_recv(pcb, NULL);
 800ac6e:	2100      	movs	r1, #0
 800ac70:	68f8      	ldr	r0, [r7, #12]
 800ac72:	f004 f917 	bl	800eea4 <tcp_recv>
  altcp_err(pcb, NULL);
 800ac76:	2100      	movs	r1, #0
 800ac78:	68f8      	ldr	r0, [r7, #12]
 800ac7a:	f004 f957 	bl	800ef2c <tcp_err>
  altcp_poll(pcb, NULL, 0);
 800ac7e:	2200      	movs	r2, #0
 800ac80:	2100      	movs	r1, #0
 800ac82:	68f8      	ldr	r0, [r7, #12]
 800ac84:	f004 f98c 	bl	800efa0 <tcp_poll>
  altcp_sent(pcb, NULL);
 800ac88:	2100      	movs	r1, #0
 800ac8a:	68f8      	ldr	r0, [r7, #12]
 800ac8c:	f004 f92c 	bl	800eee8 <tcp_sent>
  if (hs != NULL) {
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d002      	beq.n	800ac9c <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 800ac96:	68b8      	ldr	r0, [r7, #8]
 800ac98:	f7ff ff62 	bl	800ab60 <http_state_free>
  }

  if (abort_conn) {
 800ac9c:	79fb      	ldrb	r3, [r7, #7]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d004      	beq.n	800acac <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 800aca2:	68f8      	ldr	r0, [r7, #12]
 800aca4:	f002 ff14 	bl	800dad0 <tcp_abort>
    return ERR_OK;
 800aca8:	2300      	movs	r3, #0
 800acaa:	e00f      	b.n	800accc <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 800acac:	68f8      	ldr	r0, [r7, #12]
 800acae:	f002 fdc9 	bl	800d844 <tcp_close>
 800acb2:	4603      	mov	r3, r0
 800acb4:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 800acb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d004      	beq.n	800acc8 <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800acbe:	2204      	movs	r2, #4
 800acc0:	4904      	ldr	r1, [pc, #16]	@ (800acd4 <http_close_or_abort_conn+0x7c>)
 800acc2:	68f8      	ldr	r0, [r7, #12]
 800acc4:	f004 f96c 	bl	800efa0 <tcp_poll>
  }
  return err;
 800acc8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800accc:	4618      	mov	r0, r3
 800acce:	3718      	adds	r7, #24
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}
 800acd4:	0800b39b 	.word	0x0800b39b

0800acd8 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b082      	sub	sp, #8
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
 800ace0:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 800ace2:	2200      	movs	r2, #0
 800ace4:	6839      	ldr	r1, [r7, #0]
 800ace6:	6878      	ldr	r0, [r7, #4]
 800ace8:	f7ff ffb6 	bl	800ac58 <http_close_or_abort_conn>
 800acec:	4603      	mov	r3, r0
}
 800acee:	4618      	mov	r0, r3
 800acf0:	3708      	adds	r7, #8
 800acf2:	46bd      	mov	sp, r7
 800acf4:	bd80      	pop	{r7, pc}

0800acf6 <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800acf6:	b580      	push	{r7, lr}
 800acf8:	b082      	sub	sp, #8
 800acfa:	af00      	add	r7, sp, #0
 800acfc:	6078      	str	r0, [r7, #4]
 800acfe:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 800ad00:	6839      	ldr	r1, [r7, #0]
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	f7ff ffe8 	bl	800acd8 <http_close_conn>
  }
}
 800ad08:	bf00      	nop
 800ad0a:	3708      	adds	r7, #8
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}

0800ad10 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b084      	sub	sp, #16
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
 800ad18:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	695b      	ldr	r3, [r3, #20]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d105      	bne.n	800ad2e <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 800ad22:	6839      	ldr	r1, [r7, #0]
 800ad24:	6878      	ldr	r0, [r7, #4]
 800ad26:	f7ff ffe6 	bl	800acf6 <http_eof>
    return 0;
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	e016      	b.n	800ad5c <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	695b      	ldr	r3, [r3, #20]
 800ad32:	4618      	mov	r0, r3
 800ad34:	f7ff fec6 	bl	800aac4 <fs_bytes_left>
 800ad38:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	dc05      	bgt.n	800ad4c <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800ad40:	6839      	ldr	r1, [r7, #0]
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f7ff ffd7 	bl	800acf6 <http_eof>
    return 0;
 800ad48:	2300      	movs	r3, #0
 800ad4a:	e007      	b.n	800ad5c <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 800ad4c:	4b05      	ldr	r3, [pc, #20]	@ (800ad64 <http_check_eof+0x54>)
 800ad4e:	f240 429d 	movw	r2, #1181	@ 0x49d
 800ad52:	4905      	ldr	r1, [pc, #20]	@ (800ad68 <http_check_eof+0x58>)
 800ad54:	4805      	ldr	r0, [pc, #20]	@ (800ad6c <http_check_eof+0x5c>)
 800ad56:	f00d fff5 	bl	8018d44 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 800ad5a:	2301      	movs	r3, #1
}
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	3710      	adds	r7, #16
 800ad60:	46bd      	mov	sp, r7
 800ad62:	bd80      	pop	{r7, pc}
 800ad64:	0801ae04 	.word	0x0801ae04
 800ad68:	0801ae74 	.word	0x0801ae74
 800ad6c:	0801ae4c 	.word	0x0801ae4c

0800ad70 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b084      	sub	sp, #16
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
 800ad78:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad82:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800ad86:	4293      	cmp	r3, r2
 800ad88:	d803      	bhi.n	800ad92 <http_send_data_nonssi+0x22>
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad8e:	b29b      	uxth	r3, r3
 800ad90:	e001      	b.n	800ad96 <http_send_data_nonssi+0x26>
 800ad92:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ad96:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800ad98:	683b      	ldr	r3, [r7, #0]
 800ad9a:	6999      	ldr	r1, [r3, #24]
 800ad9c:	f107 020c 	add.w	r2, r7, #12
 800ada0:	2300      	movs	r3, #0
 800ada2:	6878      	ldr	r0, [r7, #4]
 800ada4:	f7ff feee 	bl	800ab84 <http_write>
 800ada8:	4603      	mov	r3, r0
 800adaa:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 800adac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d10d      	bne.n	800add0 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 800adb4:	2301      	movs	r3, #1
 800adb6:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	699b      	ldr	r3, [r3, #24]
 800adbc:	89ba      	ldrh	r2, [r7, #12]
 800adbe:	441a      	add	r2, r3
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adc8:	89ba      	ldrh	r2, [r7, #12]
 800adca:	1a9a      	subs	r2, r3, r2
 800adcc:	683b      	ldr	r3, [r7, #0]
 800adce:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  return data_to_send;
 800add0:	7bfb      	ldrb	r3, [r7, #15]
}
 800add2:	4618      	mov	r0, r3
 800add4:	3710      	adds	r7, #16
 800add6:	46bd      	mov	sp, r7
 800add8:	bd80      	pop	{r7, pc}

0800adda <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 800adda:	b580      	push	{r7, lr}
 800addc:	b084      	sub	sp, #16
 800adde:	af00      	add	r7, sp, #0
 800ade0:	6078      	str	r0, [r7, #4]
 800ade2:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 800ade4:	2300      	movs	r3, #0
 800ade6:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d101      	bne.n	800adf2 <http_send+0x18>
    return 0;
 800adee:	2300      	movs	r3, #0
 800adf0:	e025      	b.n	800ae3e <http_send+0x64>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d108      	bne.n	800ae0c <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 800adfa:	6839      	ldr	r1, [r7, #0]
 800adfc:	6878      	ldr	r0, [r7, #4]
 800adfe:	f7ff ff87 	bl	800ad10 <http_check_eof>
 800ae02:	4603      	mov	r3, r0
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d101      	bne.n	800ae0c <http_send+0x32>
      return 0;
 800ae08:	2300      	movs	r3, #0
 800ae0a:	e018      	b.n	800ae3e <http_send+0x64>
  if (hs->ssi) {
    data_to_send = http_send_data_ssi(pcb, hs);
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 800ae0c:	6839      	ldr	r1, [r7, #0]
 800ae0e:	6878      	ldr	r0, [r7, #4]
 800ae10:	f7ff ffae 	bl	800ad70 <http_send_data_nonssi>
 800ae14:	4603      	mov	r3, r0
 800ae16:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d10d      	bne.n	800ae3c <http_send+0x62>
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	695b      	ldr	r3, [r3, #20]
 800ae24:	4618      	mov	r0, r3
 800ae26:	f7ff fe4d 	bl	800aac4 <fs_bytes_left>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	dc05      	bgt.n	800ae3c <http_send+0x62>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800ae30:	6839      	ldr	r1, [r7, #0]
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f7ff ff5f 	bl	800acf6 <http_eof>
    return 0;
 800ae38:	2300      	movs	r3, #0
 800ae3a:	e000      	b.n	800ae3e <http_send+0x64>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 800ae3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae3e:	4618      	mov	r0, r3
 800ae40:	3710      	adds	r7, #16
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd80      	pop	{r7, pc}
	...

0800ae48 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b084      	sub	sp, #16
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
 800ae50:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	4a1c      	ldr	r2, [pc, #112]	@ (800aec8 <http_get_404_file+0x80>)
 800ae56:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 800ae58:	687a      	ldr	r2, [r7, #4]
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	4619      	mov	r1, r3
 800ae60:	4610      	mov	r0, r2
 800ae62:	f7ff fde7 	bl	800aa34 <fs_open>
 800ae66:	4603      	mov	r3, r0
 800ae68:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800ae6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d024      	beq.n	800aebc <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 800ae72:	683b      	ldr	r3, [r7, #0]
 800ae74:	4a15      	ldr	r2, [pc, #84]	@ (800aecc <http_get_404_file+0x84>)
 800ae76:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 800ae78:	687a      	ldr	r2, [r7, #4]
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	4619      	mov	r1, r3
 800ae80:	4610      	mov	r0, r2
 800ae82:	f7ff fdd7 	bl	800aa34 <fs_open>
 800ae86:	4603      	mov	r3, r0
 800ae88:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800ae8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d014      	beq.n	800aebc <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	4a0e      	ldr	r2, [pc, #56]	@ (800aed0 <http_get_404_file+0x88>)
 800ae96:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 800ae98:	687a      	ldr	r2, [r7, #4]
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	4619      	mov	r1, r3
 800aea0:	4610      	mov	r0, r2
 800aea2:	f7ff fdc7 	bl	800aa34 <fs_open>
 800aea6:	4603      	mov	r3, r0
 800aea8:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 800aeaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d004      	beq.n	800aebc <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	601a      	str	r2, [r3, #0]
        return NULL;
 800aeb8:	2300      	movs	r3, #0
 800aeba:	e000      	b.n	800aebe <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 800aebc:	687b      	ldr	r3, [r7, #4]
}
 800aebe:	4618      	mov	r0, r3
 800aec0:	3710      	adds	r7, #16
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bd80      	pop	{r7, pc}
 800aec6:	bf00      	nop
 800aec8:	0801aeac 	.word	0x0801aeac
 800aecc:	0801aeb8 	.word	0x0801aeb8
 800aed0:	0801aec4 	.word	0x0801aec4

0800aed4 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b08e      	sub	sp, #56	@ 0x38
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	60f8      	str	r0, [r7, #12]
 800aedc:	60b9      	str	r1, [r7, #8]
 800aede:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	627b      	str	r3, [r7, #36]	@ 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 800aee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d106      	bne.n	800aef8 <http_parse_request+0x24>
 800aeea:	4b65      	ldr	r3, [pc, #404]	@ (800b080 <http_parse_request+0x1ac>)
 800aeec:	f240 72ae 	movw	r2, #1966	@ 0x7ae
 800aef0:	4964      	ldr	r1, [pc, #400]	@ (800b084 <http_parse_request+0x1b0>)
 800aef2:	4865      	ldr	r0, [pc, #404]	@ (800b088 <http_parse_request+0x1b4>)
 800aef4:	f00d ff26 	bl	8018d44 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d106      	bne.n	800af0c <http_parse_request+0x38>
 800aefe:	4b60      	ldr	r3, [pc, #384]	@ (800b080 <http_parse_request+0x1ac>)
 800af00:	f240 72af 	movw	r2, #1967	@ 0x7af
 800af04:	4961      	ldr	r1, [pc, #388]	@ (800b08c <http_parse_request+0x1b8>)
 800af06:	4860      	ldr	r0, [pc, #384]	@ (800b088 <http_parse_request+0x1b4>)
 800af08:	f00d ff1c 	bl	8018d44 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 800af0c:	68bb      	ldr	r3, [r7, #8]
 800af0e:	695b      	ldr	r3, [r3, #20]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d103      	bne.n	800af1c <http_parse_request+0x48>
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	699b      	ldr	r3, [r3, #24]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d002      	beq.n	800af22 <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 800af1c:	f06f 0307 	mvn.w	r3, #7
 800af20:	e0a9      	b.n	800b076 <http_parse_request+0x1a2>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 800af22:	68bb      	ldr	r3, [r7, #8]
 800af24:	6a1b      	ldr	r3, [r3, #32]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d103      	bne.n	800af32 <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 800af2a:	68bb      	ldr	r3, [r7, #8]
 800af2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800af2e:	621a      	str	r2, [r3, #32]
 800af30:	e005      	b.n	800af3e <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 800af32:	68bb      	ldr	r3, [r7, #8]
 800af34:	6a1b      	ldr	r3, [r3, #32]
 800af36:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800af38:	4618      	mov	r0, r3
 800af3a:	f002 f897 	bl	800d06c <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 800af3e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800af40:	f002 f86c 	bl	800d01c <pbuf_ref>

  if (hs->req->next != NULL) {
 800af44:	68bb      	ldr	r3, [r7, #8]
 800af46:	6a1b      	ldr	r3, [r3, #32]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d012      	beq.n	800af74 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800af4e:	68bb      	ldr	r3, [r7, #8]
 800af50:	6a1b      	ldr	r3, [r3, #32]
 800af52:	891b      	ldrh	r3, [r3, #8]
 800af54:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800af58:	4293      	cmp	r3, r2
 800af5a:	bf28      	it	cs
 800af5c:	4613      	movcs	r3, r2
 800af5e:	867b      	strh	r3, [r7, #50]	@ 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 800af60:	68bb      	ldr	r3, [r7, #8]
 800af62:	6a18      	ldr	r0, [r3, #32]
 800af64:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800af66:	2300      	movs	r3, #0
 800af68:	4949      	ldr	r1, [pc, #292]	@ (800b090 <http_parse_request+0x1bc>)
 800af6a:	f002 f9b7 	bl	800d2dc <pbuf_copy_partial>
    data = httpd_req_buf;
 800af6e:	4b48      	ldr	r3, [pc, #288]	@ (800b090 <http_parse_request+0x1bc>)
 800af70:	637b      	str	r3, [r7, #52]	@ 0x34
 800af72:	e005      	b.n	800af80 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 800af74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af76:	685b      	ldr	r3, [r3, #4]
 800af78:	637b      	str	r3, [r7, #52]	@ 0x34
    data_len = p->len;
 800af7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af7c:	895b      	ldrh	r3, [r3, #10]
 800af7e:	867b      	strh	r3, [r7, #50]	@ 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 800af80:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800af82:	2b06      	cmp	r3, #6
 800af84:	d962      	bls.n	800b04c <http_parse_request+0x178>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 800af86:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800af88:	461a      	mov	r2, r3
 800af8a:	4942      	ldr	r1, [pc, #264]	@ (800b094 <http_parse_request+0x1c0>)
 800af8c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800af8e:	f000 fb99 	bl	800b6c4 <lwip_strnstr>
 800af92:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 800af94:	6a3b      	ldr	r3, [r7, #32]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d058      	beq.n	800b04c <http_parse_request+0x178>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 800af9a:	2300      	movs	r3, #0
 800af9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 800af9e:	2204      	movs	r2, #4
 800afa0:	493d      	ldr	r1, [pc, #244]	@ (800b098 <http_parse_request+0x1c4>)
 800afa2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800afa4:	f00d ff9d 	bl	8018ee2 <strncmp>
 800afa8:	4603      	mov	r3, r0
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d116      	bne.n	800afdc <http_parse_request+0x108>
        sp1 = data + 3;
 800afae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afb0:	3303      	adds	r3, #3
 800afb2:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 800afb4:	69fb      	ldr	r3, [r7, #28]
 800afb6:	1c5a      	adds	r2, r3, #1
 800afb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afba:	1ad3      	subs	r3, r2, r3
 800afbc:	b29b      	uxth	r3, r3
 800afbe:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800afc0:	1ad3      	subs	r3, r2, r3
 800afc2:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 800afc4:	69fb      	ldr	r3, [r7, #28]
 800afc6:	3301      	adds	r3, #1
 800afc8:	8b7a      	ldrh	r2, [r7, #26]
 800afca:	4934      	ldr	r1, [pc, #208]	@ (800b09c <http_parse_request+0x1c8>)
 800afcc:	4618      	mov	r0, r3
 800afce:	f000 fb79 	bl	800b6c4 <lwip_strnstr>
 800afd2:	62b8      	str	r0, [r7, #40]	@ 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 800afd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d111      	bne.n	800affe <http_parse_request+0x12a>
 800afda:	e006      	b.n	800afea <http_parse_request+0x116>
        data[4] = 0;
 800afdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afde:	3304      	adds	r3, #4
 800afe0:	2200      	movs	r2, #0
 800afe2:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 800afe4:	f06f 030f 	mvn.w	r3, #15
 800afe8:	e045      	b.n	800b076 <http_parse_request+0x1a2>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 800afea:	69fb      	ldr	r3, [r7, #28]
 800afec:	3301      	adds	r3, #1
 800afee:	8b7a      	ldrh	r2, [r7, #26]
 800aff0:	4928      	ldr	r1, [pc, #160]	@ (800b094 <http_parse_request+0x1c0>)
 800aff2:	4618      	mov	r0, r3
 800aff4:	f000 fb66 	bl	800b6c4 <lwip_strnstr>
 800aff8:	62b8      	str	r0, [r7, #40]	@ 0x28
        is_09 = 1;
 800affa:	2301      	movs	r3, #1
 800affc:	62fb      	str	r3, [r7, #44]	@ 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 800affe:	69fb      	ldr	r3, [r7, #28]
 800b000:	3301      	adds	r3, #1
 800b002:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b004:	1ad3      	subs	r3, r2, r3
 800b006:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 800b008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d01e      	beq.n	800b04c <http_parse_request+0x178>
 800b00e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b010:	69fb      	ldr	r3, [r7, #28]
 800b012:	429a      	cmp	r2, r3
 800b014:	d91a      	bls.n	800b04c <http_parse_request+0x178>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 800b016:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800b018:	461a      	mov	r2, r3
 800b01a:	4921      	ldr	r1, [pc, #132]	@ (800b0a0 <http_parse_request+0x1cc>)
 800b01c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800b01e:	f000 fb51 	bl	800b6c4 <lwip_strnstr>
 800b022:	4603      	mov	r3, r0
 800b024:	2b00      	cmp	r3, #0
 800b026:	d011      	beq.n	800b04c <http_parse_request+0x178>
          char *uri = sp1 + 1;
 800b028:	69fb      	ldr	r3, [r7, #28]
 800b02a:	3301      	adds	r3, #1
 800b02c:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 800b02e:	69fb      	ldr	r3, [r7, #28]
 800b030:	2200      	movs	r2, #0
 800b032:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 800b034:	8b3b      	ldrh	r3, [r7, #24]
 800b036:	697a      	ldr	r2, [r7, #20]
 800b038:	4413      	add	r3, r2
 800b03a:	2200      	movs	r2, #0
 800b03c:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 800b03e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b040:	6979      	ldr	r1, [r7, #20]
 800b042:	68b8      	ldr	r0, [r7, #8]
 800b044:	f000 f82e 	bl	800b0a4 <http_find_file>
 800b048:	4603      	mov	r3, r0
 800b04a:	e014      	b.n	800b076 <http_parse_request+0x1a2>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 800b04c:	68bb      	ldr	r3, [r7, #8]
 800b04e:	6a1b      	ldr	r3, [r3, #32]
 800b050:	4618      	mov	r0, r3
 800b052:	f001 ffcb 	bl	800cfec <pbuf_clen>
 800b056:	4603      	mov	r3, r0
 800b058:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	6a1b      	ldr	r3, [r3, #32]
 800b05e:	891b      	ldrh	r3, [r3, #8]
 800b060:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b064:	d205      	bcs.n	800b072 <http_parse_request+0x19e>
 800b066:	8a7b      	ldrh	r3, [r7, #18]
 800b068:	2b05      	cmp	r3, #5
 800b06a:	d802      	bhi.n	800b072 <http_parse_request+0x19e>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 800b06c:	f06f 0304 	mvn.w	r3, #4
 800b070:	e001      	b.n	800b076 <http_parse_request+0x1a2>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 800b072:	f06f 030f 	mvn.w	r3, #15
  }
}
 800b076:	4618      	mov	r0, r3
 800b078:	3738      	adds	r7, #56	@ 0x38
 800b07a:	46bd      	mov	sp, r7
 800b07c:	bd80      	pop	{r7, pc}
 800b07e:	bf00      	nop
 800b080:	0801ae04 	.word	0x0801ae04
 800b084:	0801aed0 	.word	0x0801aed0
 800b088:	0801ae4c 	.word	0x0801ae4c
 800b08c:	0801aedc 	.word	0x0801aedc
 800b090:	2000d2c0 	.word	0x2000d2c0
 800b094:	0801aee8 	.word	0x0801aee8
 800b098:	0801aeec 	.word	0x0801aeec
 800b09c:	0801aef4 	.word	0x0801aef4
 800b0a0:	0801aef8 	.word	0x0801aef8

0800b0a4 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b092      	sub	sp, #72	@ 0x48
 800b0a8:	af02      	add	r7, sp, #8
 800b0aa:	60f8      	str	r0, [r7, #12]
 800b0ac:	60b9      	str	r1, [r7, #8]
 800b0ae:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  char *params = NULL;
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	637b      	str	r3, [r7, #52]	@ 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 800b0be:	68bb      	ldr	r3, [r7, #8]
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	f7f5 f89f 	bl	8000204 <strlen>
 800b0c6:	62b8      	str	r0, [r7, #40]	@ 0x28
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800b0c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d06b      	beq.n	800b1a6 <http_find_file+0x102>
 800b0ce:	68ba      	ldr	r2, [r7, #8]
 800b0d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0d2:	3b01      	subs	r3, #1
 800b0d4:	4413      	add	r3, r2
 800b0d6:	781b      	ldrb	r3, [r3, #0]
 800b0d8:	2b2f      	cmp	r3, #47	@ 0x2f
 800b0da:	d164      	bne.n	800b1a6 <http_find_file+0x102>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800b0dc:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800b0de:	4a53      	ldr	r2, [pc, #332]	@ (800b22c <http_find_file+0x188>)
 800b0e0:	4293      	cmp	r3, r2
 800b0e2:	d102      	bne.n	800b0ea <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800b0e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0e6:	2b01      	cmp	r3, #1
 800b0e8:	d15d      	bne.n	800b1a6 <http_find_file+0x102>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 800b0ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0ec:	3b01      	subs	r3, #1
 800b0ee:	2b3f      	cmp	r3, #63	@ 0x3f
 800b0f0:	bf28      	it	cs
 800b0f2:	233f      	movcs	r3, #63	@ 0x3f
 800b0f4:	627b      	str	r3, [r7, #36]	@ 0x24
    if (copy_len > 0) {
 800b0f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d00a      	beq.n	800b112 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b100:	4619      	mov	r1, r3
 800b102:	484a      	ldr	r0, [pc, #296]	@ (800b22c <http_find_file+0x188>)
 800b104:	f00e f81f 	bl	8019146 <memcpy>
      http_uri_buf[copy_len] = 0;
 800b108:	4a48      	ldr	r2, [pc, #288]	@ (800b22c <http_find_file+0x188>)
 800b10a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b10c:	4413      	add	r3, r2
 800b10e:	2200      	movs	r2, #0
 800b110:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800b112:	2300      	movs	r3, #0
 800b114:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b116:	e043      	b.n	800b1a0 <http_find_file+0xfc>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 800b118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d028      	beq.n	800b170 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 800b11e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b120:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 800b124:	623b      	str	r3, [r7, #32]
        if (len_left > 0) {
 800b126:	6a3b      	ldr	r3, [r7, #32]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d01e      	beq.n	800b16a <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 800b12c:	4a40      	ldr	r2, [pc, #256]	@ (800b230 <http_find_file+0x18c>)
 800b12e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b130:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b134:	4618      	mov	r0, r3
 800b136:	f7f5 f865 	bl	8000204 <strlen>
 800b13a:	61f8      	str	r0, [r7, #28]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 800b13c:	69fa      	ldr	r2, [r7, #28]
 800b13e:	6a3b      	ldr	r3, [r7, #32]
 800b140:	4293      	cmp	r3, r2
 800b142:	bf28      	it	cs
 800b144:	4613      	movcs	r3, r2
 800b146:	61bb      	str	r3, [r7, #24]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 800b148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b14a:	4a38      	ldr	r2, [pc, #224]	@ (800b22c <http_find_file+0x188>)
 800b14c:	1898      	adds	r0, r3, r2
 800b14e:	4a38      	ldr	r2, [pc, #224]	@ (800b230 <http_find_file+0x18c>)
 800b150:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b152:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b156:	69ba      	ldr	r2, [r7, #24]
 800b158:	4619      	mov	r1, r3
 800b15a:	f00d fff4 	bl	8019146 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 800b15e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b160:	69bb      	ldr	r3, [r7, #24]
 800b162:	4413      	add	r3, r2
 800b164:	4a31      	ldr	r2, [pc, #196]	@ (800b22c <http_find_file+0x188>)
 800b166:	2100      	movs	r1, #0
 800b168:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 800b16a:	4b30      	ldr	r3, [pc, #192]	@ (800b22c <http_find_file+0x188>)
 800b16c:	633b      	str	r3, [r7, #48]	@ 0x30
 800b16e:	e004      	b.n	800b17a <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 800b170:	4a2f      	ldr	r2, [pc, #188]	@ (800b230 <http_find_file+0x18c>)
 800b172:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b174:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b178:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b17e:	4618      	mov	r0, r3
 800b180:	f7ff fc58 	bl	800aa34 <fs_open>
 800b184:	4603      	mov	r3, r0
 800b186:	75fb      	strb	r3, [r7, #23]
      if (err == ERR_OK) {
 800b188:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d104      	bne.n	800b19a <http_find_file+0xf6>
        uri = file_name;
 800b190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b192:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	63bb      	str	r3, [r7, #56]	@ 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
#endif /* LWIP_HTTPD_SSI */
        break;
 800b198:	e005      	b.n	800b1a6 <http_find_file+0x102>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800b19a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b19c:	3301      	adds	r3, #1
 800b19e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b1a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b1a2:	2b04      	cmp	r3, #4
 800b1a4:	d9b8      	bls.n	800b118 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 800b1a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d124      	bne.n	800b1f6 <http_find_file+0x152>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 800b1ac:	68bb      	ldr	r3, [r7, #8]
 800b1ae:	213f      	movs	r1, #63	@ 0x3f
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	f00d fe89 	bl	8018ec8 <strchr>
 800b1b6:	6378      	str	r0, [r7, #52]	@ 0x34
    if (params != NULL) {
 800b1b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d005      	beq.n	800b1ca <http_find_file+0x126>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 800b1be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	701a      	strb	r2, [r3, #0]
      params++;
 800b1c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1c6:	3301      	adds	r3, #1
 800b1c8:	637b      	str	r3, [r7, #52]	@ 0x34
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	68ba      	ldr	r2, [r7, #8]
 800b1ce:	4611      	mov	r1, r2
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	f7ff fc2f 	bl	800aa34 <fs_open>
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800b1da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d102      	bne.n	800b1e8 <http_find_file+0x144>
      file = &hs->file_handle;
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b1e6:	e006      	b.n	800b1f6 <http_find_file+0x152>
    } else {
      file = http_get_404_file(hs, &uri);
 800b1e8:	f107 0308 	add.w	r3, r7, #8
 800b1ec:	4619      	mov	r1, r3
 800b1ee:	68f8      	ldr	r0, [r7, #12]
 800b1f0:	f7ff fe2a 	bl	800ae48 <http_get_404_file>
 800b1f4:	63b8      	str	r0, [r7, #56]	@ 0x38
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 800b1f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d106      	bne.n	800b20a <http_find_file+0x166>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 800b1fc:	f107 0308 	add.w	r3, r7, #8
 800b200:	4619      	mov	r1, r3
 800b202:	68f8      	ldr	r0, [r7, #12]
 800b204:	f7ff fe20 	bl	800ae48 <http_get_404_file>
 800b208:	63b8      	str	r0, [r7, #56]	@ 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 800b20a:	68ba      	ldr	r2, [r7, #8]
 800b20c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b20e:	9301      	str	r3, [sp, #4]
 800b210:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b214:	9300      	str	r3, [sp, #0]
 800b216:	4613      	mov	r3, r2
 800b218:	687a      	ldr	r2, [r7, #4]
 800b21a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b21c:	68f8      	ldr	r0, [r7, #12]
 800b21e:	f000 f809 	bl	800b234 <http_init_file>
 800b222:	4603      	mov	r3, r0
}
 800b224:	4618      	mov	r0, r3
 800b226:	3740      	adds	r7, #64	@ 0x40
 800b228:	46bd      	mov	sp, r7
 800b22a:	bd80      	pop	{r7, pc}
 800b22c:	2000d6c0 	.word	0x2000d6c0
 800b230:	08027e64 	.word	0x08027e64

0800b234 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 800b234:	b580      	push	{r7, lr}
 800b236:	b086      	sub	sp, #24
 800b238:	af00      	add	r7, sp, #0
 800b23a:	60f8      	str	r0, [r7, #12]
 800b23c:	60b9      	str	r1, [r7, #8]
 800b23e:	607a      	str	r2, [r7, #4]
 800b240:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 800b242:	68bb      	ldr	r3, [r7, #8]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d05c      	beq.n	800b302 <http_init_file+0xce>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 800b248:	68bb      	ldr	r3, [r7, #8]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d106      	bne.n	800b25e <http_init_file+0x2a>
 800b250:	4b35      	ldr	r3, [pc, #212]	@ (800b328 <http_init_file+0xf4>)
 800b252:	f640 120b 	movw	r2, #2315	@ 0x90b
 800b256:	4935      	ldr	r1, [pc, #212]	@ (800b32c <http_init_file+0xf8>)
 800b258:	4835      	ldr	r0, [pc, #212]	@ (800b330 <http_init_file+0xfc>)
 800b25a:	f00d fd73 	bl	8018d44 <iprintf>
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	68ba      	ldr	r2, [r7, #8]
 800b262:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 800b264:	68bb      	ldr	r3, [r7, #8]
 800b266:	681a      	ldr	r2, [r3, #0]
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 800b26c:	68bb      	ldr	r3, [r7, #8]
 800b26e:	685b      	ldr	r3, [r3, #4]
 800b270:	2b00      	cmp	r3, #0
 800b272:	da06      	bge.n	800b282 <http_init_file+0x4e>
 800b274:	4b2c      	ldr	r3, [pc, #176]	@ (800b328 <http_init_file+0xf4>)
 800b276:	f640 1234 	movw	r2, #2356	@ 0x934
 800b27a:	492e      	ldr	r1, [pc, #184]	@ (800b334 <http_init_file+0x100>)
 800b27c:	482c      	ldr	r0, [pc, #176]	@ (800b330 <http_init_file+0xfc>)
 800b27e:	f00d fd61 	bl	8018d44 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 800b282:	68bb      	ldr	r3, [r7, #8]
 800b284:	685b      	ldr	r3, [r3, #4]
 800b286:	461a      	mov	r2, r3
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	625a      	str	r2, [r3, #36]	@ 0x24
    }
    hs->retries = 0;
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	2200      	movs	r2, #0
 800b290:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	695b      	ldr	r3, [r3, #20]
 800b298:	7c1b      	ldrb	r3, [r3, #16]
 800b29a:	f003 0301 	and.w	r3, r3, #1
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d106      	bne.n	800b2b0 <http_init_file+0x7c>
 800b2a2:	4b21      	ldr	r3, [pc, #132]	@ (800b328 <http_init_file+0xf4>)
 800b2a4:	f640 1243 	movw	r2, #2371	@ 0x943
 800b2a8:	4923      	ldr	r1, [pc, #140]	@ (800b338 <http_init_file+0x104>)
 800b2aa:	4821      	ldr	r0, [pc, #132]	@ (800b330 <http_init_file+0xfc>)
 800b2ac:	f00d fd4a 	bl	8018d44 <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d032      	beq.n	800b31c <http_init_file+0xe8>
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	695b      	ldr	r3, [r3, #20]
 800b2ba:	7c1b      	ldrb	r3, [r3, #16]
 800b2bc:	f003 0301 	and.w	r3, r3, #1
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d02b      	beq.n	800b31c <http_init_file+0xe8>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	6998      	ldr	r0, [r3, #24]
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2cc:	461a      	mov	r2, r3
 800b2ce:	491b      	ldr	r1, [pc, #108]	@ (800b33c <http_init_file+0x108>)
 800b2d0:	f000 f9f8 	bl	800b6c4 <lwip_strnstr>
 800b2d4:	6178      	str	r0, [r7, #20]
      if (file_start != NULL) {
 800b2d6:	697b      	ldr	r3, [r7, #20]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d01f      	beq.n	800b31c <http_init_file+0xe8>
        int diff = file_start + 4 - hs->file;
 800b2dc:	697b      	ldr	r3, [r7, #20]
 800b2de:	1d1a      	adds	r2, r3, #4
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	699b      	ldr	r3, [r3, #24]
 800b2e4:	1ad3      	subs	r3, r2, r3
 800b2e6:	613b      	str	r3, [r7, #16]
        hs->file += diff;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	699a      	ldr	r2, [r3, #24]
 800b2ec:	693b      	ldr	r3, [r7, #16]
 800b2ee:	441a      	add	r2, r3
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b2f8:	693b      	ldr	r3, [r7, #16]
 800b2fa:	1ad2      	subs	r2, r2, r3
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	625a      	str	r2, [r3, #36]	@ 0x24
 800b300:	e00c      	b.n	800b31c <http_init_file+0xe8>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	2200      	movs	r2, #0
 800b306:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	2200      	movs	r2, #0
 800b30c:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	2200      	movs	r2, #0
 800b312:	625a      	str	r2, [r3, #36]	@ 0x24
    hs->retries = 0;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	2200      	movs	r2, #0
 800b318:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 800b31c:	2300      	movs	r3, #0
}
 800b31e:	4618      	mov	r0, r3
 800b320:	3718      	adds	r7, #24
 800b322:	46bd      	mov	sp, r7
 800b324:	bd80      	pop	{r7, pc}
 800b326:	bf00      	nop
 800b328:	0801ae04 	.word	0x0801ae04
 800b32c:	0801af00 	.word	0x0801af00
 800b330:	0801ae4c 	.word	0x0801ae4c
 800b334:	0801af14 	.word	0x0801af14
 800b338:	0801af34 	.word	0x0801af34
 800b33c:	0801aef8 	.word	0x0801aef8

0800b340 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b084      	sub	sp, #16
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
 800b348:	460b      	mov	r3, r1
 800b34a:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d002      	beq.n	800b35c <http_err+0x1c>
    http_state_free(hs);
 800b356:	68f8      	ldr	r0, [r7, #12]
 800b358:	f7ff fc02 	bl	800ab60 <http_state_free>
  }
}
 800b35c:	bf00      	nop
 800b35e:	3710      	adds	r7, #16
 800b360:	46bd      	mov	sp, r7
 800b362:	bd80      	pop	{r7, pc}

0800b364 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b086      	sub	sp, #24
 800b368:	af00      	add	r7, sp, #0
 800b36a:	60f8      	str	r0, [r7, #12]
 800b36c:	60b9      	str	r1, [r7, #8]
 800b36e:	4613      	mov	r3, r2
 800b370:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 800b376:	697b      	ldr	r3, [r7, #20]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d101      	bne.n	800b380 <http_sent+0x1c>
    return ERR_OK;
 800b37c:	2300      	movs	r3, #0
 800b37e:	e008      	b.n	800b392 <http_sent+0x2e>
  }

  hs->retries = 0;
 800b380:	697b      	ldr	r3, [r7, #20]
 800b382:	2200      	movs	r2, #0
 800b384:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  http_send(pcb, hs);
 800b388:	6979      	ldr	r1, [r7, #20]
 800b38a:	68b8      	ldr	r0, [r7, #8]
 800b38c:	f7ff fd25 	bl	800adda <http_send>

  return ERR_OK;
 800b390:	2300      	movs	r3, #0
}
 800b392:	4618      	mov	r0, r3
 800b394:	3718      	adds	r7, #24
 800b396:	46bd      	mov	sp, r7
 800b398:	bd80      	pop	{r7, pc}

0800b39a <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 800b39a:	b580      	push	{r7, lr}
 800b39c:	b084      	sub	sp, #16
 800b39e:	af00      	add	r7, sp, #0
 800b3a0:	6078      	str	r0, [r7, #4]
 800b3a2:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d107      	bne.n	800b3be <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 800b3ae:	2100      	movs	r1, #0
 800b3b0:	6838      	ldr	r0, [r7, #0]
 800b3b2:	f7ff fc91 	bl	800acd8 <http_close_conn>
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	e021      	b.n	800b402 <http_poll+0x68>
  } else {
    hs->retries++;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b3c4:	3301      	adds	r3, #1
 800b3c6:	b2da      	uxtb	r2, r3
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b3d4:	2b04      	cmp	r3, #4
 800b3d6:	d105      	bne.n	800b3e4 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 800b3d8:	68f9      	ldr	r1, [r7, #12]
 800b3da:	6838      	ldr	r0, [r7, #0]
 800b3dc:	f7ff fc7c 	bl	800acd8 <http_close_conn>
      return ERR_OK;
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	e00e      	b.n	800b402 <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	695b      	ldr	r3, [r3, #20]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d009      	beq.n	800b400 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 800b3ec:	68f9      	ldr	r1, [r7, #12]
 800b3ee:	6838      	ldr	r0, [r7, #0]
 800b3f0:	f7ff fcf3 	bl	800adda <http_send>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d002      	beq.n	800b400 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 800b3fa:	6838      	ldr	r0, [r7, #0]
 800b3fc:	f007 fa66 	bl	80128cc <tcp_output>
      }
    }
  }

  return ERR_OK;
 800b400:	2300      	movs	r3, #0
}
 800b402:	4618      	mov	r0, r3
 800b404:	3710      	adds	r7, #16
 800b406:	46bd      	mov	sp, r7
 800b408:	bd80      	pop	{r7, pc}
	...

0800b40c <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b086      	sub	sp, #24
 800b410:	af00      	add	r7, sp, #0
 800b412:	60f8      	str	r0, [r7, #12]
 800b414:	60b9      	str	r1, [r7, #8]
 800b416:	607a      	str	r2, [r7, #4]
 800b418:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 800b41e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d105      	bne.n	800b432 <http_recv+0x26>
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d002      	beq.n	800b432 <http_recv+0x26>
 800b42c:	697b      	ldr	r3, [r7, #20]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d111      	bne.n	800b456 <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d008      	beq.n	800b44a <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	891b      	ldrh	r3, [r3, #8]
 800b43c:	4619      	mov	r1, r3
 800b43e:	68b8      	ldr	r0, [r7, #8]
 800b440:	f002 fd20 	bl	800de84 <tcp_recved>
      pbuf_free(p);
 800b444:	6878      	ldr	r0, [r7, #4]
 800b446:	f001 fd43 	bl	800ced0 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 800b44a:	6979      	ldr	r1, [r7, #20]
 800b44c:	68b8      	ldr	r0, [r7, #8]
 800b44e:	f7ff fc43 	bl	800acd8 <http_close_conn>
    return ERR_OK;
 800b452:	2300      	movs	r3, #0
 800b454:	e055      	b.n	800b502 <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	891b      	ldrh	r3, [r3, #8]
 800b45a:	4619      	mov	r1, r3
 800b45c:	68b8      	ldr	r0, [r7, #8]
 800b45e:	f002 fd11 	bl	800de84 <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 800b462:	697b      	ldr	r3, [r7, #20]
 800b464:	695b      	ldr	r3, [r3, #20]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d147      	bne.n	800b4fa <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 800b46a:	68ba      	ldr	r2, [r7, #8]
 800b46c:	6979      	ldr	r1, [r7, #20]
 800b46e:	6878      	ldr	r0, [r7, #4]
 800b470:	f7ff fd30 	bl	800aed4 <http_parse_request>
 800b474:	4603      	mov	r3, r0
 800b476:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 800b478:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d015      	beq.n	800b4ac <http_recv+0xa0>
 800b480:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b484:	f113 0f05 	cmn.w	r3, #5
 800b488:	d010      	beq.n	800b4ac <http_recv+0xa0>
 800b48a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b48e:	f113 0f10 	cmn.w	r3, #16
 800b492:	d00b      	beq.n	800b4ac <http_recv+0xa0>
 800b494:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b498:	f113 0f08 	cmn.w	r3, #8
 800b49c:	d006      	beq.n	800b4ac <http_recv+0xa0>
 800b49e:	4b1b      	ldr	r3, [pc, #108]	@ (800b50c <http_recv+0x100>)
 800b4a0:	f640 2204 	movw	r2, #2564	@ 0xa04
 800b4a4:	491a      	ldr	r1, [pc, #104]	@ (800b510 <http_recv+0x104>)
 800b4a6:	481b      	ldr	r0, [pc, #108]	@ (800b514 <http_recv+0x108>)
 800b4a8:	f00d fc4c 	bl	8018d44 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 800b4ac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b4b0:	f113 0f05 	cmn.w	r3, #5
 800b4b4:	d00b      	beq.n	800b4ce <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 800b4b6:	697b      	ldr	r3, [r7, #20]
 800b4b8:	6a1b      	ldr	r3, [r3, #32]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d007      	beq.n	800b4ce <http_recv+0xc2>
          pbuf_free(hs->req);
 800b4be:	697b      	ldr	r3, [r7, #20]
 800b4c0:	6a1b      	ldr	r3, [r3, #32]
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	f001 fd04 	bl	800ced0 <pbuf_free>
          hs->req = NULL;
 800b4c8:	697b      	ldr	r3, [r7, #20]
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	f001 fcfe 	bl	800ced0 <pbuf_free>
      if (parsed == ERR_OK) {
 800b4d4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d104      	bne.n	800b4e6 <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 800b4dc:	6979      	ldr	r1, [r7, #20]
 800b4de:	68b8      	ldr	r0, [r7, #8]
 800b4e0:	f7ff fc7b 	bl	800adda <http_send>
 800b4e4:	e00c      	b.n	800b500 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 800b4e6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b4ea:	f113 0f10 	cmn.w	r3, #16
 800b4ee:	d107      	bne.n	800b500 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 800b4f0:	6979      	ldr	r1, [r7, #20]
 800b4f2:	68b8      	ldr	r0, [r7, #8]
 800b4f4:	f7ff fbf0 	bl	800acd8 <http_close_conn>
 800b4f8:	e002      	b.n	800b500 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 800b4fa:	6878      	ldr	r0, [r7, #4]
 800b4fc:	f001 fce8 	bl	800ced0 <pbuf_free>
    }
  }
  return ERR_OK;
 800b500:	2300      	movs	r3, #0
}
 800b502:	4618      	mov	r0, r3
 800b504:	3718      	adds	r7, #24
 800b506:	46bd      	mov	sp, r7
 800b508:	bd80      	pop	{r7, pc}
 800b50a:	bf00      	nop
 800b50c:	0801ae04 	.word	0x0801ae04
 800b510:	0801af60 	.word	0x0801af60
 800b514:	0801ae4c 	.word	0x0801ae4c

0800b518 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b086      	sub	sp, #24
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	60f8      	str	r0, [r7, #12]
 800b520:	60b9      	str	r1, [r7, #8]
 800b522:	4613      	mov	r3, r2
 800b524:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800b526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d102      	bne.n	800b534 <http_accept+0x1c>
 800b52e:	68bb      	ldr	r3, [r7, #8]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d102      	bne.n	800b53a <http_accept+0x22>
    return ERR_VAL;
 800b534:	f06f 0305 	mvn.w	r3, #5
 800b538:	e025      	b.n	800b586 <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800b53a:	2101      	movs	r1, #1
 800b53c:	68b8      	ldr	r0, [r7, #8]
 800b53e:	f003 fa9f 	bl	800ea80 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 800b542:	f7ff fadb 	bl	800aafc <http_state_alloc>
 800b546:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 800b548:	697b      	ldr	r3, [r7, #20]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d102      	bne.n	800b554 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 800b54e:	f04f 33ff 	mov.w	r3, #4294967295
 800b552:	e018      	b.n	800b586 <http_accept+0x6e>
  }
  hs->pcb = pcb;
 800b554:	697b      	ldr	r3, [r7, #20]
 800b556:	68ba      	ldr	r2, [r7, #8]
 800b558:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 800b55a:	6979      	ldr	r1, [r7, #20]
 800b55c:	68b8      	ldr	r0, [r7, #8]
 800b55e:	f003 fc8f 	bl	800ee80 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 800b562:	490b      	ldr	r1, [pc, #44]	@ (800b590 <http_accept+0x78>)
 800b564:	68b8      	ldr	r0, [r7, #8]
 800b566:	f003 fc9d 	bl	800eea4 <tcp_recv>
  altcp_err(pcb, http_err);
 800b56a:	490a      	ldr	r1, [pc, #40]	@ (800b594 <http_accept+0x7c>)
 800b56c:	68b8      	ldr	r0, [r7, #8]
 800b56e:	f003 fcdd 	bl	800ef2c <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800b572:	2204      	movs	r2, #4
 800b574:	4908      	ldr	r1, [pc, #32]	@ (800b598 <http_accept+0x80>)
 800b576:	68b8      	ldr	r0, [r7, #8]
 800b578:	f003 fd12 	bl	800efa0 <tcp_poll>
  altcp_sent(pcb, http_sent);
 800b57c:	4907      	ldr	r1, [pc, #28]	@ (800b59c <http_accept+0x84>)
 800b57e:	68b8      	ldr	r0, [r7, #8]
 800b580:	f003 fcb2 	bl	800eee8 <tcp_sent>

  return ERR_OK;
 800b584:	2300      	movs	r3, #0
}
 800b586:	4618      	mov	r0, r3
 800b588:	3718      	adds	r7, #24
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd80      	pop	{r7, pc}
 800b58e:	bf00      	nop
 800b590:	0800b40d 	.word	0x0800b40d
 800b594:	0800b341 	.word	0x0800b341
 800b598:	0800b39b 	.word	0x0800b39b
 800b59c:	0800b365 	.word	0x0800b365

0800b5a0 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b084      	sub	sp, #16
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
 800b5a8:	460b      	mov	r3, r1
 800b5aa:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d029      	beq.n	800b606 <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800b5b2:	2101      	movs	r1, #1
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	f003 fa63 	bl	800ea80 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 800b5ba:	887b      	ldrh	r3, [r7, #2]
 800b5bc:	461a      	mov	r2, r3
 800b5be:	4914      	ldr	r1, [pc, #80]	@ (800b610 <httpd_init_pcb+0x70>)
 800b5c0:	6878      	ldr	r0, [r7, #4]
 800b5c2:	f002 fa91 	bl	800dae8 <tcp_bind>
 800b5c6:	4603      	mov	r3, r0
 800b5c8:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800b5ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d006      	beq.n	800b5e0 <httpd_init_pcb+0x40>
 800b5d2:	4b10      	ldr	r3, [pc, #64]	@ (800b614 <httpd_init_pcb+0x74>)
 800b5d4:	f640 2257 	movw	r2, #2647	@ 0xa57
 800b5d8:	490f      	ldr	r1, [pc, #60]	@ (800b618 <httpd_init_pcb+0x78>)
 800b5da:	4810      	ldr	r0, [pc, #64]	@ (800b61c <httpd_init_pcb+0x7c>)
 800b5dc:	f00d fbb2 	bl	8018d44 <iprintf>
    pcb = altcp_listen(pcb);
 800b5e0:	21ff      	movs	r1, #255	@ 0xff
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	f002 fb38 	bl	800dc58 <tcp_listen_with_backlog>
 800b5e8:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d106      	bne.n	800b5fe <httpd_init_pcb+0x5e>
 800b5f0:	4b08      	ldr	r3, [pc, #32]	@ (800b614 <httpd_init_pcb+0x74>)
 800b5f2:	f640 2259 	movw	r2, #2649	@ 0xa59
 800b5f6:	490a      	ldr	r1, [pc, #40]	@ (800b620 <httpd_init_pcb+0x80>)
 800b5f8:	4808      	ldr	r0, [pc, #32]	@ (800b61c <httpd_init_pcb+0x7c>)
 800b5fa:	f00d fba3 	bl	8018d44 <iprintf>
    altcp_accept(pcb, http_accept);
 800b5fe:	4909      	ldr	r1, [pc, #36]	@ (800b624 <httpd_init_pcb+0x84>)
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f003 fcb5 	bl	800ef70 <tcp_accept>
  }
}
 800b606:	bf00      	nop
 800b608:	3710      	adds	r7, #16
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd80      	pop	{r7, pc}
 800b60e:	bf00      	nop
 800b610:	08027fac 	.word	0x08027fac
 800b614:	0801ae04 	.word	0x0801ae04
 800b618:	0801af8c 	.word	0x0801af8c
 800b61c:	0801ae4c 	.word	0x0801ae4c
 800b620:	0801afa8 	.word	0x0801afa8
 800b624:	0800b519 	.word	0x0800b519

0800b628 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b082      	sub	sp, #8
 800b62c:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 800b62e:	202e      	movs	r0, #46	@ 0x2e
 800b630:	f003 fc18 	bl	800ee64 <tcp_new_ip_type>
 800b634:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d106      	bne.n	800b64a <httpd_init+0x22>
 800b63c:	4b07      	ldr	r3, [pc, #28]	@ (800b65c <httpd_init+0x34>)
 800b63e:	f640 2272 	movw	r2, #2674	@ 0xa72
 800b642:	4907      	ldr	r1, [pc, #28]	@ (800b660 <httpd_init+0x38>)
 800b644:	4807      	ldr	r0, [pc, #28]	@ (800b664 <httpd_init+0x3c>)
 800b646:	f00d fb7d 	bl	8018d44 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 800b64a:	2150      	movs	r1, #80	@ 0x50
 800b64c:	6878      	ldr	r0, [r7, #4]
 800b64e:	f7ff ffa7 	bl	800b5a0 <httpd_init_pcb>
}
 800b652:	bf00      	nop
 800b654:	3708      	adds	r7, #8
 800b656:	46bd      	mov	sp, r7
 800b658:	bd80      	pop	{r7, pc}
 800b65a:	bf00      	nop
 800b65c:	0801ae04 	.word	0x0801ae04
 800b660:	0801afc8 	.word	0x0801afc8
 800b664:	0801ae4c 	.word	0x0801ae4c

0800b668 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800b668:	b480      	push	{r7}
 800b66a:	b083      	sub	sp, #12
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	4603      	mov	r3, r0
 800b670:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800b672:	88fb      	ldrh	r3, [r7, #6]
 800b674:	021b      	lsls	r3, r3, #8
 800b676:	b21a      	sxth	r2, r3
 800b678:	88fb      	ldrh	r3, [r7, #6]
 800b67a:	0a1b      	lsrs	r3, r3, #8
 800b67c:	b29b      	uxth	r3, r3
 800b67e:	b21b      	sxth	r3, r3
 800b680:	4313      	orrs	r3, r2
 800b682:	b21b      	sxth	r3, r3
 800b684:	b29b      	uxth	r3, r3
}
 800b686:	4618      	mov	r0, r3
 800b688:	370c      	adds	r7, #12
 800b68a:	46bd      	mov	sp, r7
 800b68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b690:	4770      	bx	lr

0800b692 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800b692:	b480      	push	{r7}
 800b694:	b083      	sub	sp, #12
 800b696:	af00      	add	r7, sp, #0
 800b698:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	061a      	lsls	r2, r3, #24
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	021b      	lsls	r3, r3, #8
 800b6a2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b6a6:	431a      	orrs	r2, r3
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	0a1b      	lsrs	r3, r3, #8
 800b6ac:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b6b0:	431a      	orrs	r2, r3
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	0e1b      	lsrs	r3, r3, #24
 800b6b6:	4313      	orrs	r3, r2
}
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	370c      	adds	r7, #12
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c2:	4770      	bx	lr

0800b6c4 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b086      	sub	sp, #24
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	60f8      	str	r0, [r7, #12]
 800b6cc:	60b9      	str	r1, [r7, #8]
 800b6ce:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 800b6d0:	68b8      	ldr	r0, [r7, #8]
 800b6d2:	f7f4 fd97 	bl	8000204 <strlen>
 800b6d6:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 800b6d8:	693b      	ldr	r3, [r7, #16]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d101      	bne.n	800b6e2 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	e022      	b.n	800b728 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	617b      	str	r3, [r7, #20]
 800b6e6:	e012      	b.n	800b70e <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 800b6e8:	697b      	ldr	r3, [r7, #20]
 800b6ea:	781a      	ldrb	r2, [r3, #0]
 800b6ec:	68bb      	ldr	r3, [r7, #8]
 800b6ee:	781b      	ldrb	r3, [r3, #0]
 800b6f0:	429a      	cmp	r2, r3
 800b6f2:	d109      	bne.n	800b708 <lwip_strnstr+0x44>
 800b6f4:	693a      	ldr	r2, [r7, #16]
 800b6f6:	68b9      	ldr	r1, [r7, #8]
 800b6f8:	6978      	ldr	r0, [r7, #20]
 800b6fa:	f00d fbf2 	bl	8018ee2 <strncmp>
 800b6fe:	4603      	mov	r3, r0
 800b700:	2b00      	cmp	r3, #0
 800b702:	d101      	bne.n	800b708 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 800b704:	697b      	ldr	r3, [r7, #20]
 800b706:	e00f      	b.n	800b728 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800b708:	697b      	ldr	r3, [r7, #20]
 800b70a:	3301      	adds	r3, #1
 800b70c:	617b      	str	r3, [r7, #20]
 800b70e:	697b      	ldr	r3, [r7, #20]
 800b710:	781b      	ldrb	r3, [r3, #0]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d007      	beq.n	800b726 <lwip_strnstr+0x62>
 800b716:	697a      	ldr	r2, [r7, #20]
 800b718:	693b      	ldr	r3, [r7, #16]
 800b71a:	441a      	add	r2, r3
 800b71c:	68f9      	ldr	r1, [r7, #12]
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	440b      	add	r3, r1
 800b722:	429a      	cmp	r2, r3
 800b724:	d9e0      	bls.n	800b6e8 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 800b726:	2300      	movs	r3, #0
}
 800b728:	4618      	mov	r0, r3
 800b72a:	3718      	adds	r7, #24
 800b72c:	46bd      	mov	sp, r7
 800b72e:	bd80      	pop	{r7, pc}

0800b730 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b082      	sub	sp, #8
 800b734:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800b736:	2300      	movs	r3, #0
 800b738:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800b73a:	f00d f94b 	bl	80189d4 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800b73e:	f000 f8d5 	bl	800b8ec <mem_init>
  memp_init();
 800b742:	f000 fc31 	bl	800bfa8 <memp_init>
  pbuf_init();
  netif_init();
 800b746:	f000 fd3d 	bl	800c1c4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800b74a:	f008 f9af 	bl	8013aac <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800b74e:	f001 fe69 	bl	800d424 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800b752:	f008 f8f1 	bl	8013938 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800b756:	bf00      	nop
 800b758:	3708      	adds	r7, #8
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}
	...

0800b760 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800b760:	b480      	push	{r7}
 800b762:	b083      	sub	sp, #12
 800b764:	af00      	add	r7, sp, #0
 800b766:	4603      	mov	r3, r0
 800b768:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800b76a:	4b05      	ldr	r3, [pc, #20]	@ (800b780 <ptr_to_mem+0x20>)
 800b76c:	681a      	ldr	r2, [r3, #0]
 800b76e:	88fb      	ldrh	r3, [r7, #6]
 800b770:	4413      	add	r3, r2
}
 800b772:	4618      	mov	r0, r3
 800b774:	370c      	adds	r7, #12
 800b776:	46bd      	mov	sp, r7
 800b778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77c:	4770      	bx	lr
 800b77e:	bf00      	nop
 800b780:	2000dd6c 	.word	0x2000dd6c

0800b784 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800b784:	b480      	push	{r7}
 800b786:	b083      	sub	sp, #12
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800b78c:	4b05      	ldr	r3, [pc, #20]	@ (800b7a4 <mem_to_ptr+0x20>)
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	687a      	ldr	r2, [r7, #4]
 800b792:	1ad3      	subs	r3, r2, r3
 800b794:	b29b      	uxth	r3, r3
}
 800b796:	4618      	mov	r0, r3
 800b798:	370c      	adds	r7, #12
 800b79a:	46bd      	mov	sp, r7
 800b79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a0:	4770      	bx	lr
 800b7a2:	bf00      	nop
 800b7a4:	2000dd6c 	.word	0x2000dd6c

0800b7a8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800b7a8:	b590      	push	{r4, r7, lr}
 800b7aa:	b085      	sub	sp, #20
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800b7b0:	4b45      	ldr	r3, [pc, #276]	@ (800b8c8 <plug_holes+0x120>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	687a      	ldr	r2, [r7, #4]
 800b7b6:	429a      	cmp	r2, r3
 800b7b8:	d206      	bcs.n	800b7c8 <plug_holes+0x20>
 800b7ba:	4b44      	ldr	r3, [pc, #272]	@ (800b8cc <plug_holes+0x124>)
 800b7bc:	f240 12df 	movw	r2, #479	@ 0x1df
 800b7c0:	4943      	ldr	r1, [pc, #268]	@ (800b8d0 <plug_holes+0x128>)
 800b7c2:	4844      	ldr	r0, [pc, #272]	@ (800b8d4 <plug_holes+0x12c>)
 800b7c4:	f00d fabe 	bl	8018d44 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800b7c8:	4b43      	ldr	r3, [pc, #268]	@ (800b8d8 <plug_holes+0x130>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	687a      	ldr	r2, [r7, #4]
 800b7ce:	429a      	cmp	r2, r3
 800b7d0:	d306      	bcc.n	800b7e0 <plug_holes+0x38>
 800b7d2:	4b3e      	ldr	r3, [pc, #248]	@ (800b8cc <plug_holes+0x124>)
 800b7d4:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800b7d8:	4940      	ldr	r1, [pc, #256]	@ (800b8dc <plug_holes+0x134>)
 800b7da:	483e      	ldr	r0, [pc, #248]	@ (800b8d4 <plug_holes+0x12c>)
 800b7dc:	f00d fab2 	bl	8018d44 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	791b      	ldrb	r3, [r3, #4]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d006      	beq.n	800b7f6 <plug_holes+0x4e>
 800b7e8:	4b38      	ldr	r3, [pc, #224]	@ (800b8cc <plug_holes+0x124>)
 800b7ea:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800b7ee:	493c      	ldr	r1, [pc, #240]	@ (800b8e0 <plug_holes+0x138>)
 800b7f0:	4838      	ldr	r0, [pc, #224]	@ (800b8d4 <plug_holes+0x12c>)
 800b7f2:	f00d faa7 	bl	8018d44 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	881b      	ldrh	r3, [r3, #0]
 800b7fa:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800b7fe:	d906      	bls.n	800b80e <plug_holes+0x66>
 800b800:	4b32      	ldr	r3, [pc, #200]	@ (800b8cc <plug_holes+0x124>)
 800b802:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800b806:	4937      	ldr	r1, [pc, #220]	@ (800b8e4 <plug_holes+0x13c>)
 800b808:	4832      	ldr	r0, [pc, #200]	@ (800b8d4 <plug_holes+0x12c>)
 800b80a:	f00d fa9b 	bl	8018d44 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	881b      	ldrh	r3, [r3, #0]
 800b812:	4618      	mov	r0, r3
 800b814:	f7ff ffa4 	bl	800b760 <ptr_to_mem>
 800b818:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800b81a:	687a      	ldr	r2, [r7, #4]
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	429a      	cmp	r2, r3
 800b820:	d024      	beq.n	800b86c <plug_holes+0xc4>
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	791b      	ldrb	r3, [r3, #4]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d120      	bne.n	800b86c <plug_holes+0xc4>
 800b82a:	4b2b      	ldr	r3, [pc, #172]	@ (800b8d8 <plug_holes+0x130>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	68fa      	ldr	r2, [r7, #12]
 800b830:	429a      	cmp	r2, r3
 800b832:	d01b      	beq.n	800b86c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800b834:	4b2c      	ldr	r3, [pc, #176]	@ (800b8e8 <plug_holes+0x140>)
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	68fa      	ldr	r2, [r7, #12]
 800b83a:	429a      	cmp	r2, r3
 800b83c:	d102      	bne.n	800b844 <plug_holes+0x9c>
      lfree = mem;
 800b83e:	4a2a      	ldr	r2, [pc, #168]	@ (800b8e8 <plug_holes+0x140>)
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	881a      	ldrh	r2, [r3, #0]
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	881b      	ldrh	r3, [r3, #0]
 800b850:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800b854:	d00a      	beq.n	800b86c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	881b      	ldrh	r3, [r3, #0]
 800b85a:	4618      	mov	r0, r3
 800b85c:	f7ff ff80 	bl	800b760 <ptr_to_mem>
 800b860:	4604      	mov	r4, r0
 800b862:	6878      	ldr	r0, [r7, #4]
 800b864:	f7ff ff8e 	bl	800b784 <mem_to_ptr>
 800b868:	4603      	mov	r3, r0
 800b86a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	885b      	ldrh	r3, [r3, #2]
 800b870:	4618      	mov	r0, r3
 800b872:	f7ff ff75 	bl	800b760 <ptr_to_mem>
 800b876:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800b878:	68ba      	ldr	r2, [r7, #8]
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	429a      	cmp	r2, r3
 800b87e:	d01f      	beq.n	800b8c0 <plug_holes+0x118>
 800b880:	68bb      	ldr	r3, [r7, #8]
 800b882:	791b      	ldrb	r3, [r3, #4]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d11b      	bne.n	800b8c0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800b888:	4b17      	ldr	r3, [pc, #92]	@ (800b8e8 <plug_holes+0x140>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	687a      	ldr	r2, [r7, #4]
 800b88e:	429a      	cmp	r2, r3
 800b890:	d102      	bne.n	800b898 <plug_holes+0xf0>
      lfree = pmem;
 800b892:	4a15      	ldr	r2, [pc, #84]	@ (800b8e8 <plug_holes+0x140>)
 800b894:	68bb      	ldr	r3, [r7, #8]
 800b896:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	881a      	ldrh	r2, [r3, #0]
 800b89c:	68bb      	ldr	r3, [r7, #8]
 800b89e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	881b      	ldrh	r3, [r3, #0]
 800b8a4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800b8a8:	d00a      	beq.n	800b8c0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	881b      	ldrh	r3, [r3, #0]
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	f7ff ff56 	bl	800b760 <ptr_to_mem>
 800b8b4:	4604      	mov	r4, r0
 800b8b6:	68b8      	ldr	r0, [r7, #8]
 800b8b8:	f7ff ff64 	bl	800b784 <mem_to_ptr>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800b8c0:	bf00      	nop
 800b8c2:	3714      	adds	r7, #20
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	bd90      	pop	{r4, r7, pc}
 800b8c8:	2000dd6c 	.word	0x2000dd6c
 800b8cc:	0801afe4 	.word	0x0801afe4
 800b8d0:	0801b014 	.word	0x0801b014
 800b8d4:	0801b02c 	.word	0x0801b02c
 800b8d8:	2000dd70 	.word	0x2000dd70
 800b8dc:	0801b054 	.word	0x0801b054
 800b8e0:	0801b070 	.word	0x0801b070
 800b8e4:	0801b08c 	.word	0x0801b08c
 800b8e8:	2000dd78 	.word	0x2000dd78

0800b8ec <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b082      	sub	sp, #8
 800b8f0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800b8f2:	4b1f      	ldr	r3, [pc, #124]	@ (800b970 <mem_init+0x84>)
 800b8f4:	3303      	adds	r3, #3
 800b8f6:	f023 0303 	bic.w	r3, r3, #3
 800b8fa:	461a      	mov	r2, r3
 800b8fc:	4b1d      	ldr	r3, [pc, #116]	@ (800b974 <mem_init+0x88>)
 800b8fe:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800b900:	4b1c      	ldr	r3, [pc, #112]	@ (800b974 <mem_init+0x88>)
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800b90c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	2200      	movs	r2, #0
 800b912:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	2200      	movs	r2, #0
 800b918:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800b91a:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 800b91e:	f7ff ff1f 	bl	800b760 <ptr_to_mem>
 800b922:	4603      	mov	r3, r0
 800b924:	4a14      	ldr	r2, [pc, #80]	@ (800b978 <mem_init+0x8c>)
 800b926:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800b928:	4b13      	ldr	r3, [pc, #76]	@ (800b978 <mem_init+0x8c>)
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	2201      	movs	r2, #1
 800b92e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800b930:	4b11      	ldr	r3, [pc, #68]	@ (800b978 <mem_init+0x8c>)
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800b938:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800b93a:	4b0f      	ldr	r3, [pc, #60]	@ (800b978 <mem_init+0x8c>)
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800b942:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800b944:	4b0b      	ldr	r3, [pc, #44]	@ (800b974 <mem_init+0x88>)
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	4a0c      	ldr	r2, [pc, #48]	@ (800b97c <mem_init+0x90>)
 800b94a:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800b94c:	480c      	ldr	r0, [pc, #48]	@ (800b980 <mem_init+0x94>)
 800b94e:	f00d f84f 	bl	80189f0 <sys_mutex_new>
 800b952:	4603      	mov	r3, r0
 800b954:	2b00      	cmp	r3, #0
 800b956:	d006      	beq.n	800b966 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800b958:	4b0a      	ldr	r3, [pc, #40]	@ (800b984 <mem_init+0x98>)
 800b95a:	f240 221f 	movw	r2, #543	@ 0x21f
 800b95e:	490a      	ldr	r1, [pc, #40]	@ (800b988 <mem_init+0x9c>)
 800b960:	480a      	ldr	r0, [pc, #40]	@ (800b98c <mem_init+0xa0>)
 800b962:	f00d f9ef 	bl	8018d44 <iprintf>
  }
}
 800b966:	bf00      	nop
 800b968:	3708      	adds	r7, #8
 800b96a:	46bd      	mov	sp, r7
 800b96c:	bd80      	pop	{r7, pc}
 800b96e:	bf00      	nop
 800b970:	2000d718 	.word	0x2000d718
 800b974:	2000dd6c 	.word	0x2000dd6c
 800b978:	2000dd70 	.word	0x2000dd70
 800b97c:	2000dd78 	.word	0x2000dd78
 800b980:	2000dd74 	.word	0x2000dd74
 800b984:	0801afe4 	.word	0x0801afe4
 800b988:	0801b0b8 	.word	0x0801b0b8
 800b98c:	0801b02c 	.word	0x0801b02c

0800b990 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b086      	sub	sp, #24
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800b998:	6878      	ldr	r0, [r7, #4]
 800b99a:	f7ff fef3 	bl	800b784 <mem_to_ptr>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	881b      	ldrh	r3, [r3, #0]
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	f7ff feda 	bl	800b760 <ptr_to_mem>
 800b9ac:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	885b      	ldrh	r3, [r3, #2]
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	f7ff fed4 	bl	800b760 <ptr_to_mem>
 800b9b8:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	881b      	ldrh	r3, [r3, #0]
 800b9be:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800b9c2:	d818      	bhi.n	800b9f6 <mem_link_valid+0x66>
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	885b      	ldrh	r3, [r3, #2]
 800b9c8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800b9cc:	d813      	bhi.n	800b9f6 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b9d2:	8afa      	ldrh	r2, [r7, #22]
 800b9d4:	429a      	cmp	r2, r3
 800b9d6:	d004      	beq.n	800b9e2 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	881b      	ldrh	r3, [r3, #0]
 800b9dc:	8afa      	ldrh	r2, [r7, #22]
 800b9de:	429a      	cmp	r2, r3
 800b9e0:	d109      	bne.n	800b9f6 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b9e2:	4b08      	ldr	r3, [pc, #32]	@ (800ba04 <mem_link_valid+0x74>)
 800b9e4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b9e6:	693a      	ldr	r2, [r7, #16]
 800b9e8:	429a      	cmp	r2, r3
 800b9ea:	d006      	beq.n	800b9fa <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b9ec:	693b      	ldr	r3, [r7, #16]
 800b9ee:	885b      	ldrh	r3, [r3, #2]
 800b9f0:	8afa      	ldrh	r2, [r7, #22]
 800b9f2:	429a      	cmp	r2, r3
 800b9f4:	d001      	beq.n	800b9fa <mem_link_valid+0x6a>
    return 0;
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	e000      	b.n	800b9fc <mem_link_valid+0x6c>
  }
  return 1;
 800b9fa:	2301      	movs	r3, #1
}
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	3718      	adds	r7, #24
 800ba00:	46bd      	mov	sp, r7
 800ba02:	bd80      	pop	{r7, pc}
 800ba04:	2000dd70 	.word	0x2000dd70

0800ba08 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b088      	sub	sp, #32
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d070      	beq.n	800baf8 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	f003 0303 	and.w	r3, r3, #3
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d00d      	beq.n	800ba3c <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800ba20:	4b37      	ldr	r3, [pc, #220]	@ (800bb00 <mem_free+0xf8>)
 800ba22:	f240 2273 	movw	r2, #627	@ 0x273
 800ba26:	4937      	ldr	r1, [pc, #220]	@ (800bb04 <mem_free+0xfc>)
 800ba28:	4837      	ldr	r0, [pc, #220]	@ (800bb08 <mem_free+0x100>)
 800ba2a:	f00d f98b 	bl	8018d44 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ba2e:	f00d f83d 	bl	8018aac <sys_arch_protect>
 800ba32:	60f8      	str	r0, [r7, #12]
 800ba34:	68f8      	ldr	r0, [r7, #12]
 800ba36:	f00d f847 	bl	8018ac8 <sys_arch_unprotect>
    return;
 800ba3a:	e05e      	b.n	800bafa <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	3b08      	subs	r3, #8
 800ba40:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800ba42:	4b32      	ldr	r3, [pc, #200]	@ (800bb0c <mem_free+0x104>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	69fa      	ldr	r2, [r7, #28]
 800ba48:	429a      	cmp	r2, r3
 800ba4a:	d306      	bcc.n	800ba5a <mem_free+0x52>
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	f103 020c 	add.w	r2, r3, #12
 800ba52:	4b2f      	ldr	r3, [pc, #188]	@ (800bb10 <mem_free+0x108>)
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	429a      	cmp	r2, r3
 800ba58:	d90d      	bls.n	800ba76 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800ba5a:	4b29      	ldr	r3, [pc, #164]	@ (800bb00 <mem_free+0xf8>)
 800ba5c:	f240 227f 	movw	r2, #639	@ 0x27f
 800ba60:	492c      	ldr	r1, [pc, #176]	@ (800bb14 <mem_free+0x10c>)
 800ba62:	4829      	ldr	r0, [pc, #164]	@ (800bb08 <mem_free+0x100>)
 800ba64:	f00d f96e 	bl	8018d44 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ba68:	f00d f820 	bl	8018aac <sys_arch_protect>
 800ba6c:	6138      	str	r0, [r7, #16]
 800ba6e:	6938      	ldr	r0, [r7, #16]
 800ba70:	f00d f82a 	bl	8018ac8 <sys_arch_unprotect>
    return;
 800ba74:	e041      	b.n	800bafa <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800ba76:	4828      	ldr	r0, [pc, #160]	@ (800bb18 <mem_free+0x110>)
 800ba78:	f00c ffd6 	bl	8018a28 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800ba7c:	69fb      	ldr	r3, [r7, #28]
 800ba7e:	791b      	ldrb	r3, [r3, #4]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d110      	bne.n	800baa6 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800ba84:	4b1e      	ldr	r3, [pc, #120]	@ (800bb00 <mem_free+0xf8>)
 800ba86:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800ba8a:	4924      	ldr	r1, [pc, #144]	@ (800bb1c <mem_free+0x114>)
 800ba8c:	481e      	ldr	r0, [pc, #120]	@ (800bb08 <mem_free+0x100>)
 800ba8e:	f00d f959 	bl	8018d44 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800ba92:	4821      	ldr	r0, [pc, #132]	@ (800bb18 <mem_free+0x110>)
 800ba94:	f00c ffd7 	bl	8018a46 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ba98:	f00d f808 	bl	8018aac <sys_arch_protect>
 800ba9c:	6178      	str	r0, [r7, #20]
 800ba9e:	6978      	ldr	r0, [r7, #20]
 800baa0:	f00d f812 	bl	8018ac8 <sys_arch_unprotect>
    return;
 800baa4:	e029      	b.n	800bafa <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800baa6:	69f8      	ldr	r0, [r7, #28]
 800baa8:	f7ff ff72 	bl	800b990 <mem_link_valid>
 800baac:	4603      	mov	r3, r0
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d110      	bne.n	800bad4 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800bab2:	4b13      	ldr	r3, [pc, #76]	@ (800bb00 <mem_free+0xf8>)
 800bab4:	f240 2295 	movw	r2, #661	@ 0x295
 800bab8:	4919      	ldr	r1, [pc, #100]	@ (800bb20 <mem_free+0x118>)
 800baba:	4813      	ldr	r0, [pc, #76]	@ (800bb08 <mem_free+0x100>)
 800babc:	f00d f942 	bl	8018d44 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800bac0:	4815      	ldr	r0, [pc, #84]	@ (800bb18 <mem_free+0x110>)
 800bac2:	f00c ffc0 	bl	8018a46 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bac6:	f00c fff1 	bl	8018aac <sys_arch_protect>
 800baca:	61b8      	str	r0, [r7, #24]
 800bacc:	69b8      	ldr	r0, [r7, #24]
 800bace:	f00c fffb 	bl	8018ac8 <sys_arch_unprotect>
    return;
 800bad2:	e012      	b.n	800bafa <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800bad4:	69fb      	ldr	r3, [r7, #28]
 800bad6:	2200      	movs	r2, #0
 800bad8:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800bada:	4b12      	ldr	r3, [pc, #72]	@ (800bb24 <mem_free+0x11c>)
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	69fa      	ldr	r2, [r7, #28]
 800bae0:	429a      	cmp	r2, r3
 800bae2:	d202      	bcs.n	800baea <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800bae4:	4a0f      	ldr	r2, [pc, #60]	@ (800bb24 <mem_free+0x11c>)
 800bae6:	69fb      	ldr	r3, [r7, #28]
 800bae8:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800baea:	69f8      	ldr	r0, [r7, #28]
 800baec:	f7ff fe5c 	bl	800b7a8 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800baf0:	4809      	ldr	r0, [pc, #36]	@ (800bb18 <mem_free+0x110>)
 800baf2:	f00c ffa8 	bl	8018a46 <sys_mutex_unlock>
 800baf6:	e000      	b.n	800bafa <mem_free+0xf2>
    return;
 800baf8:	bf00      	nop
}
 800bafa:	3720      	adds	r7, #32
 800bafc:	46bd      	mov	sp, r7
 800bafe:	bd80      	pop	{r7, pc}
 800bb00:	0801afe4 	.word	0x0801afe4
 800bb04:	0801b0d4 	.word	0x0801b0d4
 800bb08:	0801b02c 	.word	0x0801b02c
 800bb0c:	2000dd6c 	.word	0x2000dd6c
 800bb10:	2000dd70 	.word	0x2000dd70
 800bb14:	0801b0f8 	.word	0x0801b0f8
 800bb18:	2000dd74 	.word	0x2000dd74
 800bb1c:	0801b114 	.word	0x0801b114
 800bb20:	0801b13c 	.word	0x0801b13c
 800bb24:	2000dd78 	.word	0x2000dd78

0800bb28 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b088      	sub	sp, #32
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
 800bb30:	460b      	mov	r3, r1
 800bb32:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800bb34:	887b      	ldrh	r3, [r7, #2]
 800bb36:	3303      	adds	r3, #3
 800bb38:	b29b      	uxth	r3, r3
 800bb3a:	f023 0303 	bic.w	r3, r3, #3
 800bb3e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800bb40:	8bfb      	ldrh	r3, [r7, #30]
 800bb42:	2b0b      	cmp	r3, #11
 800bb44:	d801      	bhi.n	800bb4a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800bb46:	230c      	movs	r3, #12
 800bb48:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800bb4a:	8bfb      	ldrh	r3, [r7, #30]
 800bb4c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800bb50:	d803      	bhi.n	800bb5a <mem_trim+0x32>
 800bb52:	8bfa      	ldrh	r2, [r7, #30]
 800bb54:	887b      	ldrh	r3, [r7, #2]
 800bb56:	429a      	cmp	r2, r3
 800bb58:	d201      	bcs.n	800bb5e <mem_trim+0x36>
    return NULL;
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	e0d8      	b.n	800bd10 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800bb5e:	4b6e      	ldr	r3, [pc, #440]	@ (800bd18 <mem_trim+0x1f0>)
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	687a      	ldr	r2, [r7, #4]
 800bb64:	429a      	cmp	r2, r3
 800bb66:	d304      	bcc.n	800bb72 <mem_trim+0x4a>
 800bb68:	4b6c      	ldr	r3, [pc, #432]	@ (800bd1c <mem_trim+0x1f4>)
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	687a      	ldr	r2, [r7, #4]
 800bb6e:	429a      	cmp	r2, r3
 800bb70:	d306      	bcc.n	800bb80 <mem_trim+0x58>
 800bb72:	4b6b      	ldr	r3, [pc, #428]	@ (800bd20 <mem_trim+0x1f8>)
 800bb74:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800bb78:	496a      	ldr	r1, [pc, #424]	@ (800bd24 <mem_trim+0x1fc>)
 800bb7a:	486b      	ldr	r0, [pc, #428]	@ (800bd28 <mem_trim+0x200>)
 800bb7c:	f00d f8e2 	bl	8018d44 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800bb80:	4b65      	ldr	r3, [pc, #404]	@ (800bd18 <mem_trim+0x1f0>)
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	687a      	ldr	r2, [r7, #4]
 800bb86:	429a      	cmp	r2, r3
 800bb88:	d304      	bcc.n	800bb94 <mem_trim+0x6c>
 800bb8a:	4b64      	ldr	r3, [pc, #400]	@ (800bd1c <mem_trim+0x1f4>)
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	687a      	ldr	r2, [r7, #4]
 800bb90:	429a      	cmp	r2, r3
 800bb92:	d307      	bcc.n	800bba4 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bb94:	f00c ff8a 	bl	8018aac <sys_arch_protect>
 800bb98:	60b8      	str	r0, [r7, #8]
 800bb9a:	68b8      	ldr	r0, [r7, #8]
 800bb9c:	f00c ff94 	bl	8018ac8 <sys_arch_unprotect>
    return rmem;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	e0b5      	b.n	800bd10 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	3b08      	subs	r3, #8
 800bba8:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800bbaa:	69b8      	ldr	r0, [r7, #24]
 800bbac:	f7ff fdea 	bl	800b784 <mem_to_ptr>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800bbb4:	69bb      	ldr	r3, [r7, #24]
 800bbb6:	881a      	ldrh	r2, [r3, #0]
 800bbb8:	8afb      	ldrh	r3, [r7, #22]
 800bbba:	1ad3      	subs	r3, r2, r3
 800bbbc:	b29b      	uxth	r3, r3
 800bbbe:	3b08      	subs	r3, #8
 800bbc0:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800bbc2:	8bfa      	ldrh	r2, [r7, #30]
 800bbc4:	8abb      	ldrh	r3, [r7, #20]
 800bbc6:	429a      	cmp	r2, r3
 800bbc8:	d906      	bls.n	800bbd8 <mem_trim+0xb0>
 800bbca:	4b55      	ldr	r3, [pc, #340]	@ (800bd20 <mem_trim+0x1f8>)
 800bbcc:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800bbd0:	4956      	ldr	r1, [pc, #344]	@ (800bd2c <mem_trim+0x204>)
 800bbd2:	4855      	ldr	r0, [pc, #340]	@ (800bd28 <mem_trim+0x200>)
 800bbd4:	f00d f8b6 	bl	8018d44 <iprintf>
  if (newsize > size) {
 800bbd8:	8bfa      	ldrh	r2, [r7, #30]
 800bbda:	8abb      	ldrh	r3, [r7, #20]
 800bbdc:	429a      	cmp	r2, r3
 800bbde:	d901      	bls.n	800bbe4 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	e095      	b.n	800bd10 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800bbe4:	8bfa      	ldrh	r2, [r7, #30]
 800bbe6:	8abb      	ldrh	r3, [r7, #20]
 800bbe8:	429a      	cmp	r2, r3
 800bbea:	d101      	bne.n	800bbf0 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	e08f      	b.n	800bd10 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800bbf0:	484f      	ldr	r0, [pc, #316]	@ (800bd30 <mem_trim+0x208>)
 800bbf2:	f00c ff19 	bl	8018a28 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800bbf6:	69bb      	ldr	r3, [r7, #24]
 800bbf8:	881b      	ldrh	r3, [r3, #0]
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	f7ff fdb0 	bl	800b760 <ptr_to_mem>
 800bc00:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800bc02:	693b      	ldr	r3, [r7, #16]
 800bc04:	791b      	ldrb	r3, [r3, #4]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d13f      	bne.n	800bc8a <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800bc0a:	69bb      	ldr	r3, [r7, #24]
 800bc0c:	881b      	ldrh	r3, [r3, #0]
 800bc0e:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800bc12:	d106      	bne.n	800bc22 <mem_trim+0xfa>
 800bc14:	4b42      	ldr	r3, [pc, #264]	@ (800bd20 <mem_trim+0x1f8>)
 800bc16:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800bc1a:	4946      	ldr	r1, [pc, #280]	@ (800bd34 <mem_trim+0x20c>)
 800bc1c:	4842      	ldr	r0, [pc, #264]	@ (800bd28 <mem_trim+0x200>)
 800bc1e:	f00d f891 	bl	8018d44 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800bc22:	693b      	ldr	r3, [r7, #16]
 800bc24:	881b      	ldrh	r3, [r3, #0]
 800bc26:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800bc28:	8afa      	ldrh	r2, [r7, #22]
 800bc2a:	8bfb      	ldrh	r3, [r7, #30]
 800bc2c:	4413      	add	r3, r2
 800bc2e:	b29b      	uxth	r3, r3
 800bc30:	3308      	adds	r3, #8
 800bc32:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800bc34:	4b40      	ldr	r3, [pc, #256]	@ (800bd38 <mem_trim+0x210>)
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	693a      	ldr	r2, [r7, #16]
 800bc3a:	429a      	cmp	r2, r3
 800bc3c:	d106      	bne.n	800bc4c <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800bc3e:	89fb      	ldrh	r3, [r7, #14]
 800bc40:	4618      	mov	r0, r3
 800bc42:	f7ff fd8d 	bl	800b760 <ptr_to_mem>
 800bc46:	4603      	mov	r3, r0
 800bc48:	4a3b      	ldr	r2, [pc, #236]	@ (800bd38 <mem_trim+0x210>)
 800bc4a:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800bc4c:	89fb      	ldrh	r3, [r7, #14]
 800bc4e:	4618      	mov	r0, r3
 800bc50:	f7ff fd86 	bl	800b760 <ptr_to_mem>
 800bc54:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800bc56:	693b      	ldr	r3, [r7, #16]
 800bc58:	2200      	movs	r2, #0
 800bc5a:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800bc5c:	693b      	ldr	r3, [r7, #16]
 800bc5e:	89ba      	ldrh	r2, [r7, #12]
 800bc60:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800bc62:	693b      	ldr	r3, [r7, #16]
 800bc64:	8afa      	ldrh	r2, [r7, #22]
 800bc66:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800bc68:	69bb      	ldr	r3, [r7, #24]
 800bc6a:	89fa      	ldrh	r2, [r7, #14]
 800bc6c:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800bc6e:	693b      	ldr	r3, [r7, #16]
 800bc70:	881b      	ldrh	r3, [r3, #0]
 800bc72:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800bc76:	d047      	beq.n	800bd08 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800bc78:	693b      	ldr	r3, [r7, #16]
 800bc7a:	881b      	ldrh	r3, [r3, #0]
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	f7ff fd6f 	bl	800b760 <ptr_to_mem>
 800bc82:	4602      	mov	r2, r0
 800bc84:	89fb      	ldrh	r3, [r7, #14]
 800bc86:	8053      	strh	r3, [r2, #2]
 800bc88:	e03e      	b.n	800bd08 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800bc8a:	8bfb      	ldrh	r3, [r7, #30]
 800bc8c:	f103 0214 	add.w	r2, r3, #20
 800bc90:	8abb      	ldrh	r3, [r7, #20]
 800bc92:	429a      	cmp	r2, r3
 800bc94:	d838      	bhi.n	800bd08 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800bc96:	8afa      	ldrh	r2, [r7, #22]
 800bc98:	8bfb      	ldrh	r3, [r7, #30]
 800bc9a:	4413      	add	r3, r2
 800bc9c:	b29b      	uxth	r3, r3
 800bc9e:	3308      	adds	r3, #8
 800bca0:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800bca2:	69bb      	ldr	r3, [r7, #24]
 800bca4:	881b      	ldrh	r3, [r3, #0]
 800bca6:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800bcaa:	d106      	bne.n	800bcba <mem_trim+0x192>
 800bcac:	4b1c      	ldr	r3, [pc, #112]	@ (800bd20 <mem_trim+0x1f8>)
 800bcae:	f240 3216 	movw	r2, #790	@ 0x316
 800bcb2:	4920      	ldr	r1, [pc, #128]	@ (800bd34 <mem_trim+0x20c>)
 800bcb4:	481c      	ldr	r0, [pc, #112]	@ (800bd28 <mem_trim+0x200>)
 800bcb6:	f00d f845 	bl	8018d44 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800bcba:	89fb      	ldrh	r3, [r7, #14]
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	f7ff fd4f 	bl	800b760 <ptr_to_mem>
 800bcc2:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800bcc4:	4b1c      	ldr	r3, [pc, #112]	@ (800bd38 <mem_trim+0x210>)
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	693a      	ldr	r2, [r7, #16]
 800bcca:	429a      	cmp	r2, r3
 800bccc:	d202      	bcs.n	800bcd4 <mem_trim+0x1ac>
      lfree = mem2;
 800bcce:	4a1a      	ldr	r2, [pc, #104]	@ (800bd38 <mem_trim+0x210>)
 800bcd0:	693b      	ldr	r3, [r7, #16]
 800bcd2:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800bcd4:	693b      	ldr	r3, [r7, #16]
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800bcda:	69bb      	ldr	r3, [r7, #24]
 800bcdc:	881a      	ldrh	r2, [r3, #0]
 800bcde:	693b      	ldr	r3, [r7, #16]
 800bce0:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800bce2:	693b      	ldr	r3, [r7, #16]
 800bce4:	8afa      	ldrh	r2, [r7, #22]
 800bce6:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800bce8:	69bb      	ldr	r3, [r7, #24]
 800bcea:	89fa      	ldrh	r2, [r7, #14]
 800bcec:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800bcee:	693b      	ldr	r3, [r7, #16]
 800bcf0:	881b      	ldrh	r3, [r3, #0]
 800bcf2:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800bcf6:	d007      	beq.n	800bd08 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800bcf8:	693b      	ldr	r3, [r7, #16]
 800bcfa:	881b      	ldrh	r3, [r3, #0]
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	f7ff fd2f 	bl	800b760 <ptr_to_mem>
 800bd02:	4602      	mov	r2, r0
 800bd04:	89fb      	ldrh	r3, [r7, #14]
 800bd06:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800bd08:	4809      	ldr	r0, [pc, #36]	@ (800bd30 <mem_trim+0x208>)
 800bd0a:	f00c fe9c 	bl	8018a46 <sys_mutex_unlock>
  return rmem;
 800bd0e:	687b      	ldr	r3, [r7, #4]
}
 800bd10:	4618      	mov	r0, r3
 800bd12:	3720      	adds	r7, #32
 800bd14:	46bd      	mov	sp, r7
 800bd16:	bd80      	pop	{r7, pc}
 800bd18:	2000dd6c 	.word	0x2000dd6c
 800bd1c:	2000dd70 	.word	0x2000dd70
 800bd20:	0801afe4 	.word	0x0801afe4
 800bd24:	0801b170 	.word	0x0801b170
 800bd28:	0801b02c 	.word	0x0801b02c
 800bd2c:	0801b188 	.word	0x0801b188
 800bd30:	2000dd74 	.word	0x2000dd74
 800bd34:	0801b1a8 	.word	0x0801b1a8
 800bd38:	2000dd78 	.word	0x2000dd78

0800bd3c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b088      	sub	sp, #32
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	4603      	mov	r3, r0
 800bd44:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800bd46:	88fb      	ldrh	r3, [r7, #6]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d101      	bne.n	800bd50 <mem_malloc+0x14>
    return NULL;
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	e0e2      	b.n	800bf16 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800bd50:	88fb      	ldrh	r3, [r7, #6]
 800bd52:	3303      	adds	r3, #3
 800bd54:	b29b      	uxth	r3, r3
 800bd56:	f023 0303 	bic.w	r3, r3, #3
 800bd5a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800bd5c:	8bbb      	ldrh	r3, [r7, #28]
 800bd5e:	2b0b      	cmp	r3, #11
 800bd60:	d801      	bhi.n	800bd66 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800bd62:	230c      	movs	r3, #12
 800bd64:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800bd66:	8bbb      	ldrh	r3, [r7, #28]
 800bd68:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800bd6c:	d803      	bhi.n	800bd76 <mem_malloc+0x3a>
 800bd6e:	8bba      	ldrh	r2, [r7, #28]
 800bd70:	88fb      	ldrh	r3, [r7, #6]
 800bd72:	429a      	cmp	r2, r3
 800bd74:	d201      	bcs.n	800bd7a <mem_malloc+0x3e>
    return NULL;
 800bd76:	2300      	movs	r3, #0
 800bd78:	e0cd      	b.n	800bf16 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800bd7a:	4869      	ldr	r0, [pc, #420]	@ (800bf20 <mem_malloc+0x1e4>)
 800bd7c:	f00c fe54 	bl	8018a28 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800bd80:	4b68      	ldr	r3, [pc, #416]	@ (800bf24 <mem_malloc+0x1e8>)
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	4618      	mov	r0, r3
 800bd86:	f7ff fcfd 	bl	800b784 <mem_to_ptr>
 800bd8a:	4603      	mov	r3, r0
 800bd8c:	83fb      	strh	r3, [r7, #30]
 800bd8e:	e0b7      	b.n	800bf00 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800bd90:	8bfb      	ldrh	r3, [r7, #30]
 800bd92:	4618      	mov	r0, r3
 800bd94:	f7ff fce4 	bl	800b760 <ptr_to_mem>
 800bd98:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800bd9a:	697b      	ldr	r3, [r7, #20]
 800bd9c:	791b      	ldrb	r3, [r3, #4]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	f040 80a7 	bne.w	800bef2 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800bda4:	697b      	ldr	r3, [r7, #20]
 800bda6:	881b      	ldrh	r3, [r3, #0]
 800bda8:	461a      	mov	r2, r3
 800bdaa:	8bfb      	ldrh	r3, [r7, #30]
 800bdac:	1ad3      	subs	r3, r2, r3
 800bdae:	f1a3 0208 	sub.w	r2, r3, #8
 800bdb2:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800bdb4:	429a      	cmp	r2, r3
 800bdb6:	f0c0 809c 	bcc.w	800bef2 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800bdba:	697b      	ldr	r3, [r7, #20]
 800bdbc:	881b      	ldrh	r3, [r3, #0]
 800bdbe:	461a      	mov	r2, r3
 800bdc0:	8bfb      	ldrh	r3, [r7, #30]
 800bdc2:	1ad3      	subs	r3, r2, r3
 800bdc4:	f1a3 0208 	sub.w	r2, r3, #8
 800bdc8:	8bbb      	ldrh	r3, [r7, #28]
 800bdca:	3314      	adds	r3, #20
 800bdcc:	429a      	cmp	r2, r3
 800bdce:	d333      	bcc.n	800be38 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800bdd0:	8bfa      	ldrh	r2, [r7, #30]
 800bdd2:	8bbb      	ldrh	r3, [r7, #28]
 800bdd4:	4413      	add	r3, r2
 800bdd6:	b29b      	uxth	r3, r3
 800bdd8:	3308      	adds	r3, #8
 800bdda:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800bddc:	8a7b      	ldrh	r3, [r7, #18]
 800bdde:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800bde2:	d106      	bne.n	800bdf2 <mem_malloc+0xb6>
 800bde4:	4b50      	ldr	r3, [pc, #320]	@ (800bf28 <mem_malloc+0x1ec>)
 800bde6:	f240 3287 	movw	r2, #903	@ 0x387
 800bdea:	4950      	ldr	r1, [pc, #320]	@ (800bf2c <mem_malloc+0x1f0>)
 800bdec:	4850      	ldr	r0, [pc, #320]	@ (800bf30 <mem_malloc+0x1f4>)
 800bdee:	f00c ffa9 	bl	8018d44 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800bdf2:	8a7b      	ldrh	r3, [r7, #18]
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	f7ff fcb3 	bl	800b760 <ptr_to_mem>
 800bdfa:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	2200      	movs	r2, #0
 800be00:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800be02:	697b      	ldr	r3, [r7, #20]
 800be04:	881a      	ldrh	r2, [r3, #0]
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	8bfa      	ldrh	r2, [r7, #30]
 800be0e:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800be10:	697b      	ldr	r3, [r7, #20]
 800be12:	8a7a      	ldrh	r2, [r7, #18]
 800be14:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800be16:	697b      	ldr	r3, [r7, #20]
 800be18:	2201      	movs	r2, #1
 800be1a:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	881b      	ldrh	r3, [r3, #0]
 800be20:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800be24:	d00b      	beq.n	800be3e <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	881b      	ldrh	r3, [r3, #0]
 800be2a:	4618      	mov	r0, r3
 800be2c:	f7ff fc98 	bl	800b760 <ptr_to_mem>
 800be30:	4602      	mov	r2, r0
 800be32:	8a7b      	ldrh	r3, [r7, #18]
 800be34:	8053      	strh	r3, [r2, #2]
 800be36:	e002      	b.n	800be3e <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800be38:	697b      	ldr	r3, [r7, #20]
 800be3a:	2201      	movs	r2, #1
 800be3c:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800be3e:	4b39      	ldr	r3, [pc, #228]	@ (800bf24 <mem_malloc+0x1e8>)
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	697a      	ldr	r2, [r7, #20]
 800be44:	429a      	cmp	r2, r3
 800be46:	d127      	bne.n	800be98 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800be48:	4b36      	ldr	r3, [pc, #216]	@ (800bf24 <mem_malloc+0x1e8>)
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800be4e:	e005      	b.n	800be5c <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800be50:	69bb      	ldr	r3, [r7, #24]
 800be52:	881b      	ldrh	r3, [r3, #0]
 800be54:	4618      	mov	r0, r3
 800be56:	f7ff fc83 	bl	800b760 <ptr_to_mem>
 800be5a:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800be5c:	69bb      	ldr	r3, [r7, #24]
 800be5e:	791b      	ldrb	r3, [r3, #4]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d004      	beq.n	800be6e <mem_malloc+0x132>
 800be64:	4b33      	ldr	r3, [pc, #204]	@ (800bf34 <mem_malloc+0x1f8>)
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	69ba      	ldr	r2, [r7, #24]
 800be6a:	429a      	cmp	r2, r3
 800be6c:	d1f0      	bne.n	800be50 <mem_malloc+0x114>
          }
          lfree = cur;
 800be6e:	4a2d      	ldr	r2, [pc, #180]	@ (800bf24 <mem_malloc+0x1e8>)
 800be70:	69bb      	ldr	r3, [r7, #24]
 800be72:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800be74:	4b2b      	ldr	r3, [pc, #172]	@ (800bf24 <mem_malloc+0x1e8>)
 800be76:	681a      	ldr	r2, [r3, #0]
 800be78:	4b2e      	ldr	r3, [pc, #184]	@ (800bf34 <mem_malloc+0x1f8>)
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	429a      	cmp	r2, r3
 800be7e:	d00b      	beq.n	800be98 <mem_malloc+0x15c>
 800be80:	4b28      	ldr	r3, [pc, #160]	@ (800bf24 <mem_malloc+0x1e8>)
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	791b      	ldrb	r3, [r3, #4]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d006      	beq.n	800be98 <mem_malloc+0x15c>
 800be8a:	4b27      	ldr	r3, [pc, #156]	@ (800bf28 <mem_malloc+0x1ec>)
 800be8c:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800be90:	4929      	ldr	r1, [pc, #164]	@ (800bf38 <mem_malloc+0x1fc>)
 800be92:	4827      	ldr	r0, [pc, #156]	@ (800bf30 <mem_malloc+0x1f4>)
 800be94:	f00c ff56 	bl	8018d44 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800be98:	4821      	ldr	r0, [pc, #132]	@ (800bf20 <mem_malloc+0x1e4>)
 800be9a:	f00c fdd4 	bl	8018a46 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800be9e:	8bba      	ldrh	r2, [r7, #28]
 800bea0:	697b      	ldr	r3, [r7, #20]
 800bea2:	4413      	add	r3, r2
 800bea4:	3308      	adds	r3, #8
 800bea6:	4a23      	ldr	r2, [pc, #140]	@ (800bf34 <mem_malloc+0x1f8>)
 800bea8:	6812      	ldr	r2, [r2, #0]
 800beaa:	4293      	cmp	r3, r2
 800beac:	d906      	bls.n	800bebc <mem_malloc+0x180>
 800beae:	4b1e      	ldr	r3, [pc, #120]	@ (800bf28 <mem_malloc+0x1ec>)
 800beb0:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800beb4:	4921      	ldr	r1, [pc, #132]	@ (800bf3c <mem_malloc+0x200>)
 800beb6:	481e      	ldr	r0, [pc, #120]	@ (800bf30 <mem_malloc+0x1f4>)
 800beb8:	f00c ff44 	bl	8018d44 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800bebc:	697b      	ldr	r3, [r7, #20]
 800bebe:	f003 0303 	and.w	r3, r3, #3
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d006      	beq.n	800bed4 <mem_malloc+0x198>
 800bec6:	4b18      	ldr	r3, [pc, #96]	@ (800bf28 <mem_malloc+0x1ec>)
 800bec8:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800becc:	491c      	ldr	r1, [pc, #112]	@ (800bf40 <mem_malloc+0x204>)
 800bece:	4818      	ldr	r0, [pc, #96]	@ (800bf30 <mem_malloc+0x1f4>)
 800bed0:	f00c ff38 	bl	8018d44 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800bed4:	697b      	ldr	r3, [r7, #20]
 800bed6:	f003 0303 	and.w	r3, r3, #3
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d006      	beq.n	800beec <mem_malloc+0x1b0>
 800bede:	4b12      	ldr	r3, [pc, #72]	@ (800bf28 <mem_malloc+0x1ec>)
 800bee0:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800bee4:	4917      	ldr	r1, [pc, #92]	@ (800bf44 <mem_malloc+0x208>)
 800bee6:	4812      	ldr	r0, [pc, #72]	@ (800bf30 <mem_malloc+0x1f4>)
 800bee8:	f00c ff2c 	bl	8018d44 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800beec:	697b      	ldr	r3, [r7, #20]
 800beee:	3308      	adds	r3, #8
 800bef0:	e011      	b.n	800bf16 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800bef2:	8bfb      	ldrh	r3, [r7, #30]
 800bef4:	4618      	mov	r0, r3
 800bef6:	f7ff fc33 	bl	800b760 <ptr_to_mem>
 800befa:	4603      	mov	r3, r0
 800befc:	881b      	ldrh	r3, [r3, #0]
 800befe:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800bf00:	8bfa      	ldrh	r2, [r7, #30]
 800bf02:	8bbb      	ldrh	r3, [r7, #28]
 800bf04:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 800bf08:	429a      	cmp	r2, r3
 800bf0a:	f4ff af41 	bcc.w	800bd90 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800bf0e:	4804      	ldr	r0, [pc, #16]	@ (800bf20 <mem_malloc+0x1e4>)
 800bf10:	f00c fd99 	bl	8018a46 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800bf14:	2300      	movs	r3, #0
}
 800bf16:	4618      	mov	r0, r3
 800bf18:	3720      	adds	r7, #32
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bd80      	pop	{r7, pc}
 800bf1e:	bf00      	nop
 800bf20:	2000dd74 	.word	0x2000dd74
 800bf24:	2000dd78 	.word	0x2000dd78
 800bf28:	0801afe4 	.word	0x0801afe4
 800bf2c:	0801b1a8 	.word	0x0801b1a8
 800bf30:	0801b02c 	.word	0x0801b02c
 800bf34:	2000dd70 	.word	0x2000dd70
 800bf38:	0801b1bc 	.word	0x0801b1bc
 800bf3c:	0801b1d8 	.word	0x0801b1d8
 800bf40:	0801b208 	.word	0x0801b208
 800bf44:	0801b238 	.word	0x0801b238

0800bf48 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800bf48:	b480      	push	{r7}
 800bf4a:	b085      	sub	sp, #20
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	689b      	ldr	r3, [r3, #8]
 800bf54:	2200      	movs	r2, #0
 800bf56:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	685b      	ldr	r3, [r3, #4]
 800bf5c:	3303      	adds	r3, #3
 800bf5e:	f023 0303 	bic.w	r3, r3, #3
 800bf62:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800bf64:	2300      	movs	r3, #0
 800bf66:	60fb      	str	r3, [r7, #12]
 800bf68:	e011      	b.n	800bf8e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	689b      	ldr	r3, [r3, #8]
 800bf6e:	681a      	ldr	r2, [r3, #0]
 800bf70:	68bb      	ldr	r3, [r7, #8]
 800bf72:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	689b      	ldr	r3, [r3, #8]
 800bf78:	68ba      	ldr	r2, [r7, #8]
 800bf7a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	881b      	ldrh	r3, [r3, #0]
 800bf80:	461a      	mov	r2, r3
 800bf82:	68bb      	ldr	r3, [r7, #8]
 800bf84:	4413      	add	r3, r2
 800bf86:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	3301      	adds	r3, #1
 800bf8c:	60fb      	str	r3, [r7, #12]
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	885b      	ldrh	r3, [r3, #2]
 800bf92:	461a      	mov	r2, r3
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	4293      	cmp	r3, r2
 800bf98:	dbe7      	blt.n	800bf6a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800bf9a:	bf00      	nop
 800bf9c:	bf00      	nop
 800bf9e:	3714      	adds	r7, #20
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa6:	4770      	bx	lr

0800bfa8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b082      	sub	sp, #8
 800bfac:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800bfae:	2300      	movs	r3, #0
 800bfb0:	80fb      	strh	r3, [r7, #6]
 800bfb2:	e009      	b.n	800bfc8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800bfb4:	88fb      	ldrh	r3, [r7, #6]
 800bfb6:	4a08      	ldr	r2, [pc, #32]	@ (800bfd8 <memp_init+0x30>)
 800bfb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	f7ff ffc3 	bl	800bf48 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800bfc2:	88fb      	ldrh	r3, [r7, #6]
 800bfc4:	3301      	adds	r3, #1
 800bfc6:	80fb      	strh	r3, [r7, #6]
 800bfc8:	88fb      	ldrh	r3, [r7, #6]
 800bfca:	2b0c      	cmp	r3, #12
 800bfcc:	d9f2      	bls.n	800bfb4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800bfce:	bf00      	nop
 800bfd0:	bf00      	nop
 800bfd2:	3708      	adds	r7, #8
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	bd80      	pop	{r7, pc}
 800bfd8:	08027f28 	.word	0x08027f28

0800bfdc <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b084      	sub	sp, #16
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800bfe4:	f00c fd62 	bl	8018aac <sys_arch_protect>
 800bfe8:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	689b      	ldr	r3, [r3, #8]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800bff2:	68bb      	ldr	r3, [r7, #8]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d015      	beq.n	800c024 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	689b      	ldr	r3, [r3, #8]
 800bffc:	68ba      	ldr	r2, [r7, #8]
 800bffe:	6812      	ldr	r2, [r2, #0]
 800c000:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800c002:	68bb      	ldr	r3, [r7, #8]
 800c004:	f003 0303 	and.w	r3, r3, #3
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d006      	beq.n	800c01a <do_memp_malloc_pool+0x3e>
 800c00c:	4b09      	ldr	r3, [pc, #36]	@ (800c034 <do_memp_malloc_pool+0x58>)
 800c00e:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800c012:	4909      	ldr	r1, [pc, #36]	@ (800c038 <do_memp_malloc_pool+0x5c>)
 800c014:	4809      	ldr	r0, [pc, #36]	@ (800c03c <do_memp_malloc_pool+0x60>)
 800c016:	f00c fe95 	bl	8018d44 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c01a:	68f8      	ldr	r0, [r7, #12]
 800c01c:	f00c fd54 	bl	8018ac8 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800c020:	68bb      	ldr	r3, [r7, #8]
 800c022:	e003      	b.n	800c02c <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c024:	68f8      	ldr	r0, [r7, #12]
 800c026:	f00c fd4f 	bl	8018ac8 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800c02a:	2300      	movs	r3, #0
}
 800c02c:	4618      	mov	r0, r3
 800c02e:	3710      	adds	r7, #16
 800c030:	46bd      	mov	sp, r7
 800c032:	bd80      	pop	{r7, pc}
 800c034:	0801b25c 	.word	0x0801b25c
 800c038:	0801b28c 	.word	0x0801b28c
 800c03c:	0801b2b0 	.word	0x0801b2b0

0800c040 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c040:	b580      	push	{r7, lr}
 800c042:	b082      	sub	sp, #8
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d106      	bne.n	800c05c <memp_malloc_pool+0x1c>
 800c04e:	4b0a      	ldr	r3, [pc, #40]	@ (800c078 <memp_malloc_pool+0x38>)
 800c050:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800c054:	4909      	ldr	r1, [pc, #36]	@ (800c07c <memp_malloc_pool+0x3c>)
 800c056:	480a      	ldr	r0, [pc, #40]	@ (800c080 <memp_malloc_pool+0x40>)
 800c058:	f00c fe74 	bl	8018d44 <iprintf>
  if (desc == NULL) {
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d101      	bne.n	800c066 <memp_malloc_pool+0x26>
    return NULL;
 800c062:	2300      	movs	r3, #0
 800c064:	e003      	b.n	800c06e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800c066:	6878      	ldr	r0, [r7, #4]
 800c068:	f7ff ffb8 	bl	800bfdc <do_memp_malloc_pool>
 800c06c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800c06e:	4618      	mov	r0, r3
 800c070:	3708      	adds	r7, #8
 800c072:	46bd      	mov	sp, r7
 800c074:	bd80      	pop	{r7, pc}
 800c076:	bf00      	nop
 800c078:	0801b25c 	.word	0x0801b25c
 800c07c:	0801b2d8 	.word	0x0801b2d8
 800c080:	0801b2b0 	.word	0x0801b2b0

0800c084 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b084      	sub	sp, #16
 800c088:	af00      	add	r7, sp, #0
 800c08a:	4603      	mov	r3, r0
 800c08c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800c08e:	79fb      	ldrb	r3, [r7, #7]
 800c090:	2b0c      	cmp	r3, #12
 800c092:	d908      	bls.n	800c0a6 <memp_malloc+0x22>
 800c094:	4b0a      	ldr	r3, [pc, #40]	@ (800c0c0 <memp_malloc+0x3c>)
 800c096:	f240 1257 	movw	r2, #343	@ 0x157
 800c09a:	490a      	ldr	r1, [pc, #40]	@ (800c0c4 <memp_malloc+0x40>)
 800c09c:	480a      	ldr	r0, [pc, #40]	@ (800c0c8 <memp_malloc+0x44>)
 800c09e:	f00c fe51 	bl	8018d44 <iprintf>
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	e008      	b.n	800c0b8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800c0a6:	79fb      	ldrb	r3, [r7, #7]
 800c0a8:	4a08      	ldr	r2, [pc, #32]	@ (800c0cc <memp_malloc+0x48>)
 800c0aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	f7ff ff94 	bl	800bfdc <do_memp_malloc_pool>
 800c0b4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
}
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	3710      	adds	r7, #16
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	bd80      	pop	{r7, pc}
 800c0c0:	0801b25c 	.word	0x0801b25c
 800c0c4:	0801b2ec 	.word	0x0801b2ec
 800c0c8:	0801b2b0 	.word	0x0801b2b0
 800c0cc:	08027f28 	.word	0x08027f28

0800c0d0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b084      	sub	sp, #16
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
 800c0d8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800c0da:	683b      	ldr	r3, [r7, #0]
 800c0dc:	f003 0303 	and.w	r3, r3, #3
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d006      	beq.n	800c0f2 <do_memp_free_pool+0x22>
 800c0e4:	4b0d      	ldr	r3, [pc, #52]	@ (800c11c <do_memp_free_pool+0x4c>)
 800c0e6:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800c0ea:	490d      	ldr	r1, [pc, #52]	@ (800c120 <do_memp_free_pool+0x50>)
 800c0ec:	480d      	ldr	r0, [pc, #52]	@ (800c124 <do_memp_free_pool+0x54>)
 800c0ee:	f00c fe29 	bl	8018d44 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800c0f2:	683b      	ldr	r3, [r7, #0]
 800c0f4:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800c0f6:	f00c fcd9 	bl	8018aac <sys_arch_protect>
 800c0fa:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	689b      	ldr	r3, [r3, #8]
 800c100:	681a      	ldr	r2, [r3, #0]
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	689b      	ldr	r3, [r3, #8]
 800c10a:	68fa      	ldr	r2, [r7, #12]
 800c10c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800c10e:	68b8      	ldr	r0, [r7, #8]
 800c110:	f00c fcda 	bl	8018ac8 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800c114:	bf00      	nop
 800c116:	3710      	adds	r7, #16
 800c118:	46bd      	mov	sp, r7
 800c11a:	bd80      	pop	{r7, pc}
 800c11c:	0801b25c 	.word	0x0801b25c
 800c120:	0801b30c 	.word	0x0801b30c
 800c124:	0801b2b0 	.word	0x0801b2b0

0800c128 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b082      	sub	sp, #8
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
 800c130:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d106      	bne.n	800c146 <memp_free_pool+0x1e>
 800c138:	4b0a      	ldr	r3, [pc, #40]	@ (800c164 <memp_free_pool+0x3c>)
 800c13a:	f240 1295 	movw	r2, #405	@ 0x195
 800c13e:	490a      	ldr	r1, [pc, #40]	@ (800c168 <memp_free_pool+0x40>)
 800c140:	480a      	ldr	r0, [pc, #40]	@ (800c16c <memp_free_pool+0x44>)
 800c142:	f00c fdff 	bl	8018d44 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d007      	beq.n	800c15c <memp_free_pool+0x34>
 800c14c:	683b      	ldr	r3, [r7, #0]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d004      	beq.n	800c15c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800c152:	6839      	ldr	r1, [r7, #0]
 800c154:	6878      	ldr	r0, [r7, #4]
 800c156:	f7ff ffbb 	bl	800c0d0 <do_memp_free_pool>
 800c15a:	e000      	b.n	800c15e <memp_free_pool+0x36>
    return;
 800c15c:	bf00      	nop
}
 800c15e:	3708      	adds	r7, #8
 800c160:	46bd      	mov	sp, r7
 800c162:	bd80      	pop	{r7, pc}
 800c164:	0801b25c 	.word	0x0801b25c
 800c168:	0801b2d8 	.word	0x0801b2d8
 800c16c:	0801b2b0 	.word	0x0801b2b0

0800c170 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800c170:	b580      	push	{r7, lr}
 800c172:	b082      	sub	sp, #8
 800c174:	af00      	add	r7, sp, #0
 800c176:	4603      	mov	r3, r0
 800c178:	6039      	str	r1, [r7, #0]
 800c17a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800c17c:	79fb      	ldrb	r3, [r7, #7]
 800c17e:	2b0c      	cmp	r3, #12
 800c180:	d907      	bls.n	800c192 <memp_free+0x22>
 800c182:	4b0c      	ldr	r3, [pc, #48]	@ (800c1b4 <memp_free+0x44>)
 800c184:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800c188:	490b      	ldr	r1, [pc, #44]	@ (800c1b8 <memp_free+0x48>)
 800c18a:	480c      	ldr	r0, [pc, #48]	@ (800c1bc <memp_free+0x4c>)
 800c18c:	f00c fdda 	bl	8018d44 <iprintf>
 800c190:	e00c      	b.n	800c1ac <memp_free+0x3c>

  if (mem == NULL) {
 800c192:	683b      	ldr	r3, [r7, #0]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d008      	beq.n	800c1aa <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800c198:	79fb      	ldrb	r3, [r7, #7]
 800c19a:	4a09      	ldr	r2, [pc, #36]	@ (800c1c0 <memp_free+0x50>)
 800c19c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c1a0:	6839      	ldr	r1, [r7, #0]
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	f7ff ff94 	bl	800c0d0 <do_memp_free_pool>
 800c1a8:	e000      	b.n	800c1ac <memp_free+0x3c>
    return;
 800c1aa:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800c1ac:	3708      	adds	r7, #8
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bd80      	pop	{r7, pc}
 800c1b2:	bf00      	nop
 800c1b4:	0801b25c 	.word	0x0801b25c
 800c1b8:	0801b32c 	.word	0x0801b32c
 800c1bc:	0801b2b0 	.word	0x0801b2b0
 800c1c0:	08027f28 	.word	0x08027f28

0800c1c4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800c1c4:	b480      	push	{r7}
 800c1c6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800c1c8:	bf00      	nop
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d0:	4770      	bx	lr
	...

0800c1d4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b086      	sub	sp, #24
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	60f8      	str	r0, [r7, #12]
 800c1dc:	60b9      	str	r1, [r7, #8]
 800c1de:	607a      	str	r2, [r7, #4]
 800c1e0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d108      	bne.n	800c1fa <netif_add+0x26>
 800c1e8:	4b5b      	ldr	r3, [pc, #364]	@ (800c358 <netif_add+0x184>)
 800c1ea:	f240 1227 	movw	r2, #295	@ 0x127
 800c1ee:	495b      	ldr	r1, [pc, #364]	@ (800c35c <netif_add+0x188>)
 800c1f0:	485b      	ldr	r0, [pc, #364]	@ (800c360 <netif_add+0x18c>)
 800c1f2:	f00c fda7 	bl	8018d44 <iprintf>
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	e0a9      	b.n	800c34e <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800c1fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d108      	bne.n	800c212 <netif_add+0x3e>
 800c200:	4b55      	ldr	r3, [pc, #340]	@ (800c358 <netif_add+0x184>)
 800c202:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800c206:	4957      	ldr	r1, [pc, #348]	@ (800c364 <netif_add+0x190>)
 800c208:	4855      	ldr	r0, [pc, #340]	@ (800c360 <netif_add+0x18c>)
 800c20a:	f00c fd9b 	bl	8018d44 <iprintf>
 800c20e:	2300      	movs	r3, #0
 800c210:	e09d      	b.n	800c34e <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800c212:	68bb      	ldr	r3, [r7, #8]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d101      	bne.n	800c21c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800c218:	4b53      	ldr	r3, [pc, #332]	@ (800c368 <netif_add+0x194>)
 800c21a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d101      	bne.n	800c226 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800c222:	4b51      	ldr	r3, [pc, #324]	@ (800c368 <netif_add+0x194>)
 800c224:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c226:	683b      	ldr	r3, [r7, #0]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d101      	bne.n	800c230 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800c22c:	4b4e      	ldr	r3, [pc, #312]	@ (800c368 <netif_add+0x194>)
 800c22e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	2200      	movs	r2, #0
 800c234:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	2200      	movs	r2, #0
 800c23a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	2200      	movs	r2, #0
 800c240:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	4a49      	ldr	r2, [pc, #292]	@ (800c36c <netif_add+0x198>)
 800c246:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	2200      	movs	r2, #0
 800c24c:	851a      	strh	r2, [r3, #40]	@ 0x28
  netif->flags = 0;
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	2200      	movs	r2, #0
 800c252:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	3324      	adds	r3, #36	@ 0x24
 800c25a:	2204      	movs	r2, #4
 800c25c:	2100      	movs	r1, #0
 800c25e:	4618      	mov	r0, r3
 800c260:	f00c fe0f 	bl	8018e82 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	2200      	movs	r2, #0
 800c268:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	6a3a      	ldr	r2, [r7, #32]
 800c26e:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800c270:	4b3f      	ldr	r3, [pc, #252]	@ (800c370 <netif_add+0x19c>)
 800c272:	781a      	ldrb	r2, [r3, #0]
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  netif->input = input;
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c27e:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800c280:	683b      	ldr	r3, [r7, #0]
 800c282:	687a      	ldr	r2, [r7, #4]
 800c284:	68b9      	ldr	r1, [r7, #8]
 800c286:	68f8      	ldr	r0, [r7, #12]
 800c288:	f000 f914 	bl	800c4b4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800c28c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c28e:	68f8      	ldr	r0, [r7, #12]
 800c290:	4798      	blx	r3
 800c292:	4603      	mov	r3, r0
 800c294:	2b00      	cmp	r3, #0
 800c296:	d001      	beq.n	800c29c <netif_add+0xc8>
    return NULL;
 800c298:	2300      	movs	r3, #0
 800c29a:	e058      	b.n	800c34e <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c2a2:	2bff      	cmp	r3, #255	@ 0xff
 800c2a4:	d103      	bne.n	800c2ae <netif_add+0xda>
        netif->num = 0;
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }
      num_netifs = 0;
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c2b2:	4b30      	ldr	r3, [pc, #192]	@ (800c374 <netif_add+0x1a0>)
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	617b      	str	r3, [r7, #20]
 800c2b8:	e02b      	b.n	800c312 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800c2ba:	697a      	ldr	r2, [r7, #20]
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	429a      	cmp	r2, r3
 800c2c0:	d106      	bne.n	800c2d0 <netif_add+0xfc>
 800c2c2:	4b25      	ldr	r3, [pc, #148]	@ (800c358 <netif_add+0x184>)
 800c2c4:	f240 128b 	movw	r2, #395	@ 0x18b
 800c2c8:	492b      	ldr	r1, [pc, #172]	@ (800c378 <netif_add+0x1a4>)
 800c2ca:	4825      	ldr	r0, [pc, #148]	@ (800c360 <netif_add+0x18c>)
 800c2cc:	f00c fd3a 	bl	8018d44 <iprintf>
        num_netifs++;
 800c2d0:	693b      	ldr	r3, [r7, #16]
 800c2d2:	3301      	adds	r3, #1
 800c2d4:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800c2d6:	693b      	ldr	r3, [r7, #16]
 800c2d8:	2bff      	cmp	r3, #255	@ 0xff
 800c2da:	dd06      	ble.n	800c2ea <netif_add+0x116>
 800c2dc:	4b1e      	ldr	r3, [pc, #120]	@ (800c358 <netif_add+0x184>)
 800c2de:	f240 128d 	movw	r2, #397	@ 0x18d
 800c2e2:	4926      	ldr	r1, [pc, #152]	@ (800c37c <netif_add+0x1a8>)
 800c2e4:	481e      	ldr	r0, [pc, #120]	@ (800c360 <netif_add+0x18c>)
 800c2e6:	f00c fd2d 	bl	8018d44 <iprintf>
        if (netif2->num == netif->num) {
 800c2ea:	697b      	ldr	r3, [r7, #20]
 800c2ec:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c2f6:	429a      	cmp	r2, r3
 800c2f8:	d108      	bne.n	800c30c <netif_add+0x138>
          netif->num++;
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c300:	3301      	adds	r3, #1
 800c302:	b2da      	uxtb	r2, r3
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          break;
 800c30a:	e005      	b.n	800c318 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c30c:	697b      	ldr	r3, [r7, #20]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	617b      	str	r3, [r7, #20]
 800c312:	697b      	ldr	r3, [r7, #20]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d1d0      	bne.n	800c2ba <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800c318:	697b      	ldr	r3, [r7, #20]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d1be      	bne.n	800c29c <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c324:	2bfe      	cmp	r3, #254	@ 0xfe
 800c326:	d103      	bne.n	800c330 <netif_add+0x15c>
    netif_num = 0;
 800c328:	4b11      	ldr	r3, [pc, #68]	@ (800c370 <netif_add+0x19c>)
 800c32a:	2200      	movs	r2, #0
 800c32c:	701a      	strb	r2, [r3, #0]
 800c32e:	e006      	b.n	800c33e <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c336:	3301      	adds	r3, #1
 800c338:	b2da      	uxtb	r2, r3
 800c33a:	4b0d      	ldr	r3, [pc, #52]	@ (800c370 <netif_add+0x19c>)
 800c33c:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800c33e:	4b0d      	ldr	r3, [pc, #52]	@ (800c374 <netif_add+0x1a0>)
 800c340:	681a      	ldr	r2, [r3, #0]
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800c346:	4a0b      	ldr	r2, [pc, #44]	@ (800c374 <netif_add+0x1a0>)
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800c34c:	68fb      	ldr	r3, [r7, #12]
}
 800c34e:	4618      	mov	r0, r3
 800c350:	3718      	adds	r7, #24
 800c352:	46bd      	mov	sp, r7
 800c354:	bd80      	pop	{r7, pc}
 800c356:	bf00      	nop
 800c358:	0801b348 	.word	0x0801b348
 800c35c:	0801b3dc 	.word	0x0801b3dc
 800c360:	0801b398 	.word	0x0801b398
 800c364:	0801b3f8 	.word	0x0801b3f8
 800c368:	08027fac 	.word	0x08027fac
 800c36c:	0800c797 	.word	0x0800c797
 800c370:	20010e70 	.word	0x20010e70
 800c374:	20010e68 	.word	0x20010e68
 800c378:	0801b41c 	.word	0x0801b41c
 800c37c:	0801b430 	.word	0x0801b430

0800c380 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c380:	b580      	push	{r7, lr}
 800c382:	b082      	sub	sp, #8
 800c384:	af00      	add	r7, sp, #0
 800c386:	6078      	str	r0, [r7, #4]
 800c388:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800c38a:	6839      	ldr	r1, [r7, #0]
 800c38c:	6878      	ldr	r0, [r7, #4]
 800c38e:	f002 ffad 	bl	800f2ec <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800c392:	6839      	ldr	r1, [r7, #0]
 800c394:	6878      	ldr	r0, [r7, #4]
 800c396:	f008 f821 	bl	80143dc <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800c39a:	bf00      	nop
 800c39c:	3708      	adds	r7, #8
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	bd80      	pop	{r7, pc}
	...

0800c3a4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b086      	sub	sp, #24
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	60f8      	str	r0, [r7, #12]
 800c3ac:	60b9      	str	r1, [r7, #8]
 800c3ae:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800c3b0:	68bb      	ldr	r3, [r7, #8]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d106      	bne.n	800c3c4 <netif_do_set_ipaddr+0x20>
 800c3b6:	4b1d      	ldr	r3, [pc, #116]	@ (800c42c <netif_do_set_ipaddr+0x88>)
 800c3b8:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800c3bc:	491c      	ldr	r1, [pc, #112]	@ (800c430 <netif_do_set_ipaddr+0x8c>)
 800c3be:	481d      	ldr	r0, [pc, #116]	@ (800c434 <netif_do_set_ipaddr+0x90>)
 800c3c0:	f00c fcc0 	bl	8018d44 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d106      	bne.n	800c3d8 <netif_do_set_ipaddr+0x34>
 800c3ca:	4b18      	ldr	r3, [pc, #96]	@ (800c42c <netif_do_set_ipaddr+0x88>)
 800c3cc:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800c3d0:	4917      	ldr	r1, [pc, #92]	@ (800c430 <netif_do_set_ipaddr+0x8c>)
 800c3d2:	4818      	ldr	r0, [pc, #96]	@ (800c434 <netif_do_set_ipaddr+0x90>)
 800c3d4:	f00c fcb6 	bl	8018d44 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800c3d8:	68bb      	ldr	r3, [r7, #8]
 800c3da:	681a      	ldr	r2, [r3, #0]
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	3304      	adds	r3, #4
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	429a      	cmp	r2, r3
 800c3e4:	d01c      	beq.n	800c420 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800c3e6:	68bb      	ldr	r3, [r7, #8]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	3304      	adds	r3, #4
 800c3f0:	681a      	ldr	r2, [r3, #0]
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800c3f6:	f107 0314 	add.w	r3, r7, #20
 800c3fa:	4619      	mov	r1, r3
 800c3fc:	6878      	ldr	r0, [r7, #4]
 800c3fe:	f7ff ffbf 	bl	800c380 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800c402:	68bb      	ldr	r3, [r7, #8]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d002      	beq.n	800c40e <netif_do_set_ipaddr+0x6a>
 800c408:	68bb      	ldr	r3, [r7, #8]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	e000      	b.n	800c410 <netif_do_set_ipaddr+0x6c>
 800c40e:	2300      	movs	r3, #0
 800c410:	68fa      	ldr	r2, [r7, #12]
 800c412:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800c414:	2101      	movs	r1, #1
 800c416:	68f8      	ldr	r0, [r7, #12]
 800c418:	f000 f8d2 	bl	800c5c0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800c41c:	2301      	movs	r3, #1
 800c41e:	e000      	b.n	800c422 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800c420:	2300      	movs	r3, #0
}
 800c422:	4618      	mov	r0, r3
 800c424:	3718      	adds	r7, #24
 800c426:	46bd      	mov	sp, r7
 800c428:	bd80      	pop	{r7, pc}
 800c42a:	bf00      	nop
 800c42c:	0801b348 	.word	0x0801b348
 800c430:	0801b460 	.word	0x0801b460
 800c434:	0801b398 	.word	0x0801b398

0800c438 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800c438:	b480      	push	{r7}
 800c43a:	b085      	sub	sp, #20
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	60f8      	str	r0, [r7, #12]
 800c440:	60b9      	str	r1, [r7, #8]
 800c442:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800c444:	68bb      	ldr	r3, [r7, #8]
 800c446:	681a      	ldr	r2, [r3, #0]
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	3308      	adds	r3, #8
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	429a      	cmp	r2, r3
 800c450:	d00a      	beq.n	800c468 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800c452:	68bb      	ldr	r3, [r7, #8]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d002      	beq.n	800c45e <netif_do_set_netmask+0x26>
 800c458:	68bb      	ldr	r3, [r7, #8]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	e000      	b.n	800c460 <netif_do_set_netmask+0x28>
 800c45e:	2300      	movs	r3, #0
 800c460:	68fa      	ldr	r2, [r7, #12]
 800c462:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800c464:	2301      	movs	r3, #1
 800c466:	e000      	b.n	800c46a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800c468:	2300      	movs	r3, #0
}
 800c46a:	4618      	mov	r0, r3
 800c46c:	3714      	adds	r7, #20
 800c46e:	46bd      	mov	sp, r7
 800c470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c474:	4770      	bx	lr

0800c476 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800c476:	b480      	push	{r7}
 800c478:	b085      	sub	sp, #20
 800c47a:	af00      	add	r7, sp, #0
 800c47c:	60f8      	str	r0, [r7, #12]
 800c47e:	60b9      	str	r1, [r7, #8]
 800c480:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800c482:	68bb      	ldr	r3, [r7, #8]
 800c484:	681a      	ldr	r2, [r3, #0]
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	330c      	adds	r3, #12
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	429a      	cmp	r2, r3
 800c48e:	d00a      	beq.n	800c4a6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800c490:	68bb      	ldr	r3, [r7, #8]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d002      	beq.n	800c49c <netif_do_set_gw+0x26>
 800c496:	68bb      	ldr	r3, [r7, #8]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	e000      	b.n	800c49e <netif_do_set_gw+0x28>
 800c49c:	2300      	movs	r3, #0
 800c49e:	68fa      	ldr	r2, [r7, #12]
 800c4a0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800c4a2:	2301      	movs	r3, #1
 800c4a4:	e000      	b.n	800c4a8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800c4a6:	2300      	movs	r3, #0
}
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	3714      	adds	r7, #20
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b2:	4770      	bx	lr

0800c4b4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	b088      	sub	sp, #32
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	60f8      	str	r0, [r7, #12]
 800c4bc:	60b9      	str	r1, [r7, #8]
 800c4be:	607a      	str	r2, [r7, #4]
 800c4c0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c4ca:	68bb      	ldr	r3, [r7, #8]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d101      	bne.n	800c4d4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800c4d0:	4b1c      	ldr	r3, [pc, #112]	@ (800c544 <netif_set_addr+0x90>)
 800c4d2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d101      	bne.n	800c4de <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800c4da:	4b1a      	ldr	r3, [pc, #104]	@ (800c544 <netif_set_addr+0x90>)
 800c4dc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c4de:	683b      	ldr	r3, [r7, #0]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d101      	bne.n	800c4e8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800c4e4:	4b17      	ldr	r3, [pc, #92]	@ (800c544 <netif_set_addr+0x90>)
 800c4e6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800c4e8:	68bb      	ldr	r3, [r7, #8]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d003      	beq.n	800c4f6 <netif_set_addr+0x42>
 800c4ee:	68bb      	ldr	r3, [r7, #8]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d101      	bne.n	800c4fa <netif_set_addr+0x46>
 800c4f6:	2301      	movs	r3, #1
 800c4f8:	e000      	b.n	800c4fc <netif_set_addr+0x48>
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	617b      	str	r3, [r7, #20]
  if (remove) {
 800c4fe:	697b      	ldr	r3, [r7, #20]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d006      	beq.n	800c512 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c504:	f107 0310 	add.w	r3, r7, #16
 800c508:	461a      	mov	r2, r3
 800c50a:	68b9      	ldr	r1, [r7, #8]
 800c50c:	68f8      	ldr	r0, [r7, #12]
 800c50e:	f7ff ff49 	bl	800c3a4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800c512:	69fa      	ldr	r2, [r7, #28]
 800c514:	6879      	ldr	r1, [r7, #4]
 800c516:	68f8      	ldr	r0, [r7, #12]
 800c518:	f7ff ff8e 	bl	800c438 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800c51c:	69ba      	ldr	r2, [r7, #24]
 800c51e:	6839      	ldr	r1, [r7, #0]
 800c520:	68f8      	ldr	r0, [r7, #12]
 800c522:	f7ff ffa8 	bl	800c476 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800c526:	697b      	ldr	r3, [r7, #20]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d106      	bne.n	800c53a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c52c:	f107 0310 	add.w	r3, r7, #16
 800c530:	461a      	mov	r2, r3
 800c532:	68b9      	ldr	r1, [r7, #8]
 800c534:	68f8      	ldr	r0, [r7, #12]
 800c536:	f7ff ff35 	bl	800c3a4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800c53a:	bf00      	nop
 800c53c:	3720      	adds	r7, #32
 800c53e:	46bd      	mov	sp, r7
 800c540:	bd80      	pop	{r7, pc}
 800c542:	bf00      	nop
 800c544:	08027fac 	.word	0x08027fac

0800c548 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800c548:	b480      	push	{r7}
 800c54a:	b083      	sub	sp, #12
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800c550:	4a04      	ldr	r2, [pc, #16]	@ (800c564 <netif_set_default+0x1c>)
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800c556:	bf00      	nop
 800c558:	370c      	adds	r7, #12
 800c55a:	46bd      	mov	sp, r7
 800c55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c560:	4770      	bx	lr
 800c562:	bf00      	nop
 800c564:	20010e6c 	.word	0x20010e6c

0800c568 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b082      	sub	sp, #8
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d107      	bne.n	800c586 <netif_set_up+0x1e>
 800c576:	4b0f      	ldr	r3, [pc, #60]	@ (800c5b4 <netif_set_up+0x4c>)
 800c578:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800c57c:	490e      	ldr	r1, [pc, #56]	@ (800c5b8 <netif_set_up+0x50>)
 800c57e:	480f      	ldr	r0, [pc, #60]	@ (800c5bc <netif_set_up+0x54>)
 800c580:	f00c fbe0 	bl	8018d44 <iprintf>
 800c584:	e013      	b.n	800c5ae <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c58c:	f003 0301 	and.w	r3, r3, #1
 800c590:	2b00      	cmp	r3, #0
 800c592:	d10c      	bne.n	800c5ae <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c59a:	f043 0301 	orr.w	r3, r3, #1
 800c59e:	b2da      	uxtb	r2, r3
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c5a6:	2103      	movs	r1, #3
 800c5a8:	6878      	ldr	r0, [r7, #4]
 800c5aa:	f000 f809 	bl	800c5c0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800c5ae:	3708      	adds	r7, #8
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	bd80      	pop	{r7, pc}
 800c5b4:	0801b348 	.word	0x0801b348
 800c5b8:	0801b4d0 	.word	0x0801b4d0
 800c5bc:	0801b398 	.word	0x0801b398

0800c5c0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b082      	sub	sp, #8
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]
 800c5c8:	460b      	mov	r3, r1
 800c5ca:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d106      	bne.n	800c5e0 <netif_issue_reports+0x20>
 800c5d2:	4b18      	ldr	r3, [pc, #96]	@ (800c634 <netif_issue_reports+0x74>)
 800c5d4:	f240 326d 	movw	r2, #877	@ 0x36d
 800c5d8:	4917      	ldr	r1, [pc, #92]	@ (800c638 <netif_issue_reports+0x78>)
 800c5da:	4818      	ldr	r0, [pc, #96]	@ (800c63c <netif_issue_reports+0x7c>)
 800c5dc:	f00c fbb2 	bl	8018d44 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c5e6:	f003 0304 	and.w	r3, r3, #4
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d01e      	beq.n	800c62c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c5f4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d017      	beq.n	800c62c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c5fc:	78fb      	ldrb	r3, [r7, #3]
 800c5fe:	f003 0301 	and.w	r3, r3, #1
 800c602:	2b00      	cmp	r3, #0
 800c604:	d013      	beq.n	800c62e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	3304      	adds	r3, #4
 800c60a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d00e      	beq.n	800c62e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c616:	f003 0308 	and.w	r3, r3, #8
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d007      	beq.n	800c62e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	3304      	adds	r3, #4
 800c622:	4619      	mov	r1, r3
 800c624:	6878      	ldr	r0, [r7, #4]
 800c626:	f00a fcd3 	bl	8016fd0 <etharp_request>
 800c62a:	e000      	b.n	800c62e <netif_issue_reports+0x6e>
    return;
 800c62c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800c62e:	3708      	adds	r7, #8
 800c630:	46bd      	mov	sp, r7
 800c632:	bd80      	pop	{r7, pc}
 800c634:	0801b348 	.word	0x0801b348
 800c638:	0801b4ec 	.word	0x0801b4ec
 800c63c:	0801b398 	.word	0x0801b398

0800c640 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b082      	sub	sp, #8
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d107      	bne.n	800c65e <netif_set_down+0x1e>
 800c64e:	4b12      	ldr	r3, [pc, #72]	@ (800c698 <netif_set_down+0x58>)
 800c650:	f240 329b 	movw	r2, #923	@ 0x39b
 800c654:	4911      	ldr	r1, [pc, #68]	@ (800c69c <netif_set_down+0x5c>)
 800c656:	4812      	ldr	r0, [pc, #72]	@ (800c6a0 <netif_set_down+0x60>)
 800c658:	f00c fb74 	bl	8018d44 <iprintf>
 800c65c:	e019      	b.n	800c692 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c664:	f003 0301 	and.w	r3, r3, #1
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d012      	beq.n	800c692 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c672:	f023 0301 	bic.w	r3, r3, #1
 800c676:	b2da      	uxtb	r2, r3
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c684:	f003 0308 	and.w	r3, r3, #8
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d002      	beq.n	800c692 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800c68c:	6878      	ldr	r0, [r7, #4]
 800c68e:	f00a f859 	bl	8016744 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800c692:	3708      	adds	r7, #8
 800c694:	46bd      	mov	sp, r7
 800c696:	bd80      	pop	{r7, pc}
 800c698:	0801b348 	.word	0x0801b348
 800c69c:	0801b510 	.word	0x0801b510
 800c6a0:	0801b398 	.word	0x0801b398

0800c6a4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800c6a4:	b580      	push	{r7, lr}
 800c6a6:	b082      	sub	sp, #8
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d107      	bne.n	800c6c2 <netif_set_link_up+0x1e>
 800c6b2:	4b15      	ldr	r3, [pc, #84]	@ (800c708 <netif_set_link_up+0x64>)
 800c6b4:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800c6b8:	4914      	ldr	r1, [pc, #80]	@ (800c70c <netif_set_link_up+0x68>)
 800c6ba:	4815      	ldr	r0, [pc, #84]	@ (800c710 <netif_set_link_up+0x6c>)
 800c6bc:	f00c fb42 	bl	8018d44 <iprintf>
 800c6c0:	e01e      	b.n	800c700 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c6c8:	f003 0304 	and.w	r3, r3, #4
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d117      	bne.n	800c700 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c6d6:	f043 0304 	orr.w	r3, r3, #4
 800c6da:	b2da      	uxtb	r2, r3
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800c6e2:	6878      	ldr	r0, [r7, #4]
 800c6e4:	f008 faa4 	bl	8014c30 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c6e8:	2103      	movs	r1, #3
 800c6ea:	6878      	ldr	r0, [r7, #4]
 800c6ec:	f7ff ff68 	bl	800c5c0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	69db      	ldr	r3, [r3, #28]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d003      	beq.n	800c700 <netif_set_link_up+0x5c>
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	69db      	ldr	r3, [r3, #28]
 800c6fc:	6878      	ldr	r0, [r7, #4]
 800c6fe:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c700:	3708      	adds	r7, #8
 800c702:	46bd      	mov	sp, r7
 800c704:	bd80      	pop	{r7, pc}
 800c706:	bf00      	nop
 800c708:	0801b348 	.word	0x0801b348
 800c70c:	0801b530 	.word	0x0801b530
 800c710:	0801b398 	.word	0x0801b398

0800c714 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800c714:	b580      	push	{r7, lr}
 800c716:	b082      	sub	sp, #8
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d107      	bne.n	800c732 <netif_set_link_down+0x1e>
 800c722:	4b11      	ldr	r3, [pc, #68]	@ (800c768 <netif_set_link_down+0x54>)
 800c724:	f240 4206 	movw	r2, #1030	@ 0x406
 800c728:	4910      	ldr	r1, [pc, #64]	@ (800c76c <netif_set_link_down+0x58>)
 800c72a:	4811      	ldr	r0, [pc, #68]	@ (800c770 <netif_set_link_down+0x5c>)
 800c72c:	f00c fb0a 	bl	8018d44 <iprintf>
 800c730:	e017      	b.n	800c762 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c738:	f003 0304 	and.w	r3, r3, #4
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d010      	beq.n	800c762 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c746:	f023 0304 	bic.w	r3, r3, #4
 800c74a:	b2da      	uxtb	r2, r3
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    NETIF_LINK_CALLBACK(netif);
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	69db      	ldr	r3, [r3, #28]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d003      	beq.n	800c762 <netif_set_link_down+0x4e>
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	69db      	ldr	r3, [r3, #28]
 800c75e:	6878      	ldr	r0, [r7, #4]
 800c760:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c762:	3708      	adds	r7, #8
 800c764:	46bd      	mov	sp, r7
 800c766:	bd80      	pop	{r7, pc}
 800c768:	0801b348 	.word	0x0801b348
 800c76c:	0801b554 	.word	0x0801b554
 800c770:	0801b398 	.word	0x0801b398

0800c774 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800c774:	b480      	push	{r7}
 800c776:	b083      	sub	sp, #12
 800c778:	af00      	add	r7, sp, #0
 800c77a:	6078      	str	r0, [r7, #4]
 800c77c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d002      	beq.n	800c78a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	683a      	ldr	r2, [r7, #0]
 800c788:	61da      	str	r2, [r3, #28]
  }
}
 800c78a:	bf00      	nop
 800c78c:	370c      	adds	r7, #12
 800c78e:	46bd      	mov	sp, r7
 800c790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c794:	4770      	bx	lr

0800c796 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800c796:	b480      	push	{r7}
 800c798:	b085      	sub	sp, #20
 800c79a:	af00      	add	r7, sp, #0
 800c79c:	60f8      	str	r0, [r7, #12]
 800c79e:	60b9      	str	r1, [r7, #8]
 800c7a0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800c7a2:	f06f 030b 	mvn.w	r3, #11
}
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	3714      	adds	r7, #20
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b0:	4770      	bx	lr
	...

0800c7b4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800c7b4:	b480      	push	{r7}
 800c7b6:	b085      	sub	sp, #20
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	4603      	mov	r3, r0
 800c7bc:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800c7be:	79fb      	ldrb	r3, [r7, #7]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d013      	beq.n	800c7ec <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800c7c4:	4b0d      	ldr	r3, [pc, #52]	@ (800c7fc <netif_get_by_index+0x48>)
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	60fb      	str	r3, [r7, #12]
 800c7ca:	e00c      	b.n	800c7e6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c7d2:	3301      	adds	r3, #1
 800c7d4:	b2db      	uxtb	r3, r3
 800c7d6:	79fa      	ldrb	r2, [r7, #7]
 800c7d8:	429a      	cmp	r2, r3
 800c7da:	d101      	bne.n	800c7e0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	e006      	b.n	800c7ee <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	60fb      	str	r3, [r7, #12]
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d1ef      	bne.n	800c7cc <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800c7ec:	2300      	movs	r3, #0
}
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	3714      	adds	r7, #20
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f8:	4770      	bx	lr
 800c7fa:	bf00      	nop
 800c7fc:	20010e68 	.word	0x20010e68

0800c800 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800c800:	b580      	push	{r7, lr}
 800c802:	b082      	sub	sp, #8
 800c804:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800c806:	f00c f951 	bl	8018aac <sys_arch_protect>
 800c80a:	6038      	str	r0, [r7, #0]
 800c80c:	4b0d      	ldr	r3, [pc, #52]	@ (800c844 <pbuf_free_ooseq+0x44>)
 800c80e:	2200      	movs	r2, #0
 800c810:	701a      	strb	r2, [r3, #0]
 800c812:	6838      	ldr	r0, [r7, #0]
 800c814:	f00c f958 	bl	8018ac8 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c818:	4b0b      	ldr	r3, [pc, #44]	@ (800c848 <pbuf_free_ooseq+0x48>)
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	607b      	str	r3, [r7, #4]
 800c81e:	e00a      	b.n	800c836 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c824:	2b00      	cmp	r3, #0
 800c826:	d003      	beq.n	800c830 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800c828:	6878      	ldr	r0, [r7, #4]
 800c82a:	f002 fd9d 	bl	800f368 <tcp_free_ooseq>
      return;
 800c82e:	e005      	b.n	800c83c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	68db      	ldr	r3, [r3, #12]
 800c834:	607b      	str	r3, [r7, #4]
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d1f1      	bne.n	800c820 <pbuf_free_ooseq+0x20>
    }
  }
}
 800c83c:	3708      	adds	r7, #8
 800c83e:	46bd      	mov	sp, r7
 800c840:	bd80      	pop	{r7, pc}
 800c842:	bf00      	nop
 800c844:	20010e71 	.word	0x20010e71
 800c848:	20010e80 	.word	0x20010e80

0800c84c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b082      	sub	sp, #8
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800c854:	f7ff ffd4 	bl	800c800 <pbuf_free_ooseq>
}
 800c858:	bf00      	nop
 800c85a:	3708      	adds	r7, #8
 800c85c:	46bd      	mov	sp, r7
 800c85e:	bd80      	pop	{r7, pc}

0800c860 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800c860:	b580      	push	{r7, lr}
 800c862:	b082      	sub	sp, #8
 800c864:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800c866:	f00c f921 	bl	8018aac <sys_arch_protect>
 800c86a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800c86c:	4b0f      	ldr	r3, [pc, #60]	@ (800c8ac <pbuf_pool_is_empty+0x4c>)
 800c86e:	781b      	ldrb	r3, [r3, #0]
 800c870:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800c872:	4b0e      	ldr	r3, [pc, #56]	@ (800c8ac <pbuf_pool_is_empty+0x4c>)
 800c874:	2201      	movs	r2, #1
 800c876:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800c878:	6878      	ldr	r0, [r7, #4]
 800c87a:	f00c f925 	bl	8018ac8 <sys_arch_unprotect>

  if (!queued) {
 800c87e:	78fb      	ldrb	r3, [r7, #3]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d10f      	bne.n	800c8a4 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800c884:	2100      	movs	r1, #0
 800c886:	480a      	ldr	r0, [pc, #40]	@ (800c8b0 <pbuf_pool_is_empty+0x50>)
 800c888:	f7fe f834 	bl	800a8f4 <tcpip_try_callback>
 800c88c:	4603      	mov	r3, r0
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d008      	beq.n	800c8a4 <pbuf_pool_is_empty+0x44>
 800c892:	f00c f90b 	bl	8018aac <sys_arch_protect>
 800c896:	6078      	str	r0, [r7, #4]
 800c898:	4b04      	ldr	r3, [pc, #16]	@ (800c8ac <pbuf_pool_is_empty+0x4c>)
 800c89a:	2200      	movs	r2, #0
 800c89c:	701a      	strb	r2, [r3, #0]
 800c89e:	6878      	ldr	r0, [r7, #4]
 800c8a0:	f00c f912 	bl	8018ac8 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800c8a4:	bf00      	nop
 800c8a6:	3708      	adds	r7, #8
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	bd80      	pop	{r7, pc}
 800c8ac:	20010e71 	.word	0x20010e71
 800c8b0:	0800c84d 	.word	0x0800c84d

0800c8b4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800c8b4:	b480      	push	{r7}
 800c8b6:	b085      	sub	sp, #20
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	60f8      	str	r0, [r7, #12]
 800c8bc:	60b9      	str	r1, [r7, #8]
 800c8be:	4611      	mov	r1, r2
 800c8c0:	461a      	mov	r2, r3
 800c8c2:	460b      	mov	r3, r1
 800c8c4:	80fb      	strh	r3, [r7, #6]
 800c8c6:	4613      	mov	r3, r2
 800c8c8:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	2200      	movs	r2, #0
 800c8ce:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	68ba      	ldr	r2, [r7, #8]
 800c8d4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	88fa      	ldrh	r2, [r7, #6]
 800c8da:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	88ba      	ldrh	r2, [r7, #4]
 800c8e0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800c8e2:	8b3b      	ldrh	r3, [r7, #24]
 800c8e4:	b2da      	uxtb	r2, r3
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	7f3a      	ldrb	r2, [r7, #28]
 800c8ee:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	2201      	movs	r2, #1
 800c8f4:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	73da      	strb	r2, [r3, #15]
}
 800c8fc:	bf00      	nop
 800c8fe:	3714      	adds	r7, #20
 800c900:	46bd      	mov	sp, r7
 800c902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c906:	4770      	bx	lr

0800c908 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b08c      	sub	sp, #48	@ 0x30
 800c90c:	af02      	add	r7, sp, #8
 800c90e:	4603      	mov	r3, r0
 800c910:	71fb      	strb	r3, [r7, #7]
 800c912:	460b      	mov	r3, r1
 800c914:	80bb      	strh	r3, [r7, #4]
 800c916:	4613      	mov	r3, r2
 800c918:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800c91a:	79fb      	ldrb	r3, [r7, #7]
 800c91c:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800c91e:	887b      	ldrh	r3, [r7, #2]
 800c920:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800c924:	d07f      	beq.n	800ca26 <pbuf_alloc+0x11e>
 800c926:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800c92a:	f300 80c8 	bgt.w	800cabe <pbuf_alloc+0x1b6>
 800c92e:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800c932:	d010      	beq.n	800c956 <pbuf_alloc+0x4e>
 800c934:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800c938:	f300 80c1 	bgt.w	800cabe <pbuf_alloc+0x1b6>
 800c93c:	2b01      	cmp	r3, #1
 800c93e:	d002      	beq.n	800c946 <pbuf_alloc+0x3e>
 800c940:	2b41      	cmp	r3, #65	@ 0x41
 800c942:	f040 80bc 	bne.w	800cabe <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800c946:	887a      	ldrh	r2, [r7, #2]
 800c948:	88bb      	ldrh	r3, [r7, #4]
 800c94a:	4619      	mov	r1, r3
 800c94c:	2000      	movs	r0, #0
 800c94e:	f000 f8d1 	bl	800caf4 <pbuf_alloc_reference>
 800c952:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800c954:	e0bd      	b.n	800cad2 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800c956:	2300      	movs	r3, #0
 800c958:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800c95a:	2300      	movs	r3, #0
 800c95c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800c95e:	88bb      	ldrh	r3, [r7, #4]
 800c960:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800c962:	200c      	movs	r0, #12
 800c964:	f7ff fb8e 	bl	800c084 <memp_malloc>
 800c968:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800c96a:	693b      	ldr	r3, [r7, #16]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d109      	bne.n	800c984 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800c970:	f7ff ff76 	bl	800c860 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800c974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c976:	2b00      	cmp	r3, #0
 800c978:	d002      	beq.n	800c980 <pbuf_alloc+0x78>
            pbuf_free(p);
 800c97a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c97c:	f000 faa8 	bl	800ced0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800c980:	2300      	movs	r3, #0
 800c982:	e0a7      	b.n	800cad4 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800c984:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c986:	3303      	adds	r3, #3
 800c988:	b29b      	uxth	r3, r3
 800c98a:	f023 0303 	bic.w	r3, r3, #3
 800c98e:	b29b      	uxth	r3, r3
 800c990:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800c994:	b29b      	uxth	r3, r3
 800c996:	8b7a      	ldrh	r2, [r7, #26]
 800c998:	4293      	cmp	r3, r2
 800c99a:	bf28      	it	cs
 800c99c:	4613      	movcs	r3, r2
 800c99e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800c9a0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c9a2:	3310      	adds	r3, #16
 800c9a4:	693a      	ldr	r2, [r7, #16]
 800c9a6:	4413      	add	r3, r2
 800c9a8:	3303      	adds	r3, #3
 800c9aa:	f023 0303 	bic.w	r3, r3, #3
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	89f9      	ldrh	r1, [r7, #14]
 800c9b2:	8b7a      	ldrh	r2, [r7, #26]
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	9301      	str	r3, [sp, #4]
 800c9b8:	887b      	ldrh	r3, [r7, #2]
 800c9ba:	9300      	str	r3, [sp, #0]
 800c9bc:	460b      	mov	r3, r1
 800c9be:	4601      	mov	r1, r0
 800c9c0:	6938      	ldr	r0, [r7, #16]
 800c9c2:	f7ff ff77 	bl	800c8b4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800c9c6:	693b      	ldr	r3, [r7, #16]
 800c9c8:	685b      	ldr	r3, [r3, #4]
 800c9ca:	f003 0303 	and.w	r3, r3, #3
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d006      	beq.n	800c9e0 <pbuf_alloc+0xd8>
 800c9d2:	4b42      	ldr	r3, [pc, #264]	@ (800cadc <pbuf_alloc+0x1d4>)
 800c9d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c9d8:	4941      	ldr	r1, [pc, #260]	@ (800cae0 <pbuf_alloc+0x1d8>)
 800c9da:	4842      	ldr	r0, [pc, #264]	@ (800cae4 <pbuf_alloc+0x1dc>)
 800c9dc:	f00c f9b2 	bl	8018d44 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800c9e0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c9e2:	3303      	adds	r3, #3
 800c9e4:	f023 0303 	bic.w	r3, r3, #3
 800c9e8:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800c9ec:	d106      	bne.n	800c9fc <pbuf_alloc+0xf4>
 800c9ee:	4b3b      	ldr	r3, [pc, #236]	@ (800cadc <pbuf_alloc+0x1d4>)
 800c9f0:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800c9f4:	493c      	ldr	r1, [pc, #240]	@ (800cae8 <pbuf_alloc+0x1e0>)
 800c9f6:	483b      	ldr	r0, [pc, #236]	@ (800cae4 <pbuf_alloc+0x1dc>)
 800c9f8:	f00c f9a4 	bl	8018d44 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800c9fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d102      	bne.n	800ca08 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800ca02:	693b      	ldr	r3, [r7, #16]
 800ca04:	627b      	str	r3, [r7, #36]	@ 0x24
 800ca06:	e002      	b.n	800ca0e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800ca08:	69fb      	ldr	r3, [r7, #28]
 800ca0a:	693a      	ldr	r2, [r7, #16]
 800ca0c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800ca0e:	693b      	ldr	r3, [r7, #16]
 800ca10:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800ca12:	8b7a      	ldrh	r2, [r7, #26]
 800ca14:	89fb      	ldrh	r3, [r7, #14]
 800ca16:	1ad3      	subs	r3, r2, r3
 800ca18:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800ca1e:	8b7b      	ldrh	r3, [r7, #26]
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d19e      	bne.n	800c962 <pbuf_alloc+0x5a>
      break;
 800ca24:	e055      	b.n	800cad2 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800ca26:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ca28:	3303      	adds	r3, #3
 800ca2a:	b29b      	uxth	r3, r3
 800ca2c:	f023 0303 	bic.w	r3, r3, #3
 800ca30:	b29a      	uxth	r2, r3
 800ca32:	88bb      	ldrh	r3, [r7, #4]
 800ca34:	3303      	adds	r3, #3
 800ca36:	b29b      	uxth	r3, r3
 800ca38:	f023 0303 	bic.w	r3, r3, #3
 800ca3c:	b29b      	uxth	r3, r3
 800ca3e:	4413      	add	r3, r2
 800ca40:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800ca42:	8b3b      	ldrh	r3, [r7, #24]
 800ca44:	3310      	adds	r3, #16
 800ca46:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800ca48:	8b3a      	ldrh	r2, [r7, #24]
 800ca4a:	88bb      	ldrh	r3, [r7, #4]
 800ca4c:	3303      	adds	r3, #3
 800ca4e:	f023 0303 	bic.w	r3, r3, #3
 800ca52:	429a      	cmp	r2, r3
 800ca54:	d306      	bcc.n	800ca64 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800ca56:	8afa      	ldrh	r2, [r7, #22]
 800ca58:	88bb      	ldrh	r3, [r7, #4]
 800ca5a:	3303      	adds	r3, #3
 800ca5c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800ca60:	429a      	cmp	r2, r3
 800ca62:	d201      	bcs.n	800ca68 <pbuf_alloc+0x160>
        return NULL;
 800ca64:	2300      	movs	r3, #0
 800ca66:	e035      	b.n	800cad4 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800ca68:	8afb      	ldrh	r3, [r7, #22]
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	f7ff f966 	bl	800bd3c <mem_malloc>
 800ca70:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800ca72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d101      	bne.n	800ca7c <pbuf_alloc+0x174>
        return NULL;
 800ca78:	2300      	movs	r3, #0
 800ca7a:	e02b      	b.n	800cad4 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800ca7c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ca7e:	3310      	adds	r3, #16
 800ca80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ca82:	4413      	add	r3, r2
 800ca84:	3303      	adds	r3, #3
 800ca86:	f023 0303 	bic.w	r3, r3, #3
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	88b9      	ldrh	r1, [r7, #4]
 800ca8e:	88ba      	ldrh	r2, [r7, #4]
 800ca90:	2300      	movs	r3, #0
 800ca92:	9301      	str	r3, [sp, #4]
 800ca94:	887b      	ldrh	r3, [r7, #2]
 800ca96:	9300      	str	r3, [sp, #0]
 800ca98:	460b      	mov	r3, r1
 800ca9a:	4601      	mov	r1, r0
 800ca9c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ca9e:	f7ff ff09 	bl	800c8b4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800caa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caa4:	685b      	ldr	r3, [r3, #4]
 800caa6:	f003 0303 	and.w	r3, r3, #3
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d010      	beq.n	800cad0 <pbuf_alloc+0x1c8>
 800caae:	4b0b      	ldr	r3, [pc, #44]	@ (800cadc <pbuf_alloc+0x1d4>)
 800cab0:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800cab4:	490d      	ldr	r1, [pc, #52]	@ (800caec <pbuf_alloc+0x1e4>)
 800cab6:	480b      	ldr	r0, [pc, #44]	@ (800cae4 <pbuf_alloc+0x1dc>)
 800cab8:	f00c f944 	bl	8018d44 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800cabc:	e008      	b.n	800cad0 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800cabe:	4b07      	ldr	r3, [pc, #28]	@ (800cadc <pbuf_alloc+0x1d4>)
 800cac0:	f240 1227 	movw	r2, #295	@ 0x127
 800cac4:	490a      	ldr	r1, [pc, #40]	@ (800caf0 <pbuf_alloc+0x1e8>)
 800cac6:	4807      	ldr	r0, [pc, #28]	@ (800cae4 <pbuf_alloc+0x1dc>)
 800cac8:	f00c f93c 	bl	8018d44 <iprintf>
      return NULL;
 800cacc:	2300      	movs	r3, #0
 800cace:	e001      	b.n	800cad4 <pbuf_alloc+0x1cc>
      break;
 800cad0:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800cad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800cad4:	4618      	mov	r0, r3
 800cad6:	3728      	adds	r7, #40	@ 0x28
 800cad8:	46bd      	mov	sp, r7
 800cada:	bd80      	pop	{r7, pc}
 800cadc:	0801b578 	.word	0x0801b578
 800cae0:	0801b5a8 	.word	0x0801b5a8
 800cae4:	0801b5d8 	.word	0x0801b5d8
 800cae8:	0801b600 	.word	0x0801b600
 800caec:	0801b634 	.word	0x0801b634
 800caf0:	0801b660 	.word	0x0801b660

0800caf4 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b086      	sub	sp, #24
 800caf8:	af02      	add	r7, sp, #8
 800cafa:	6078      	str	r0, [r7, #4]
 800cafc:	460b      	mov	r3, r1
 800cafe:	807b      	strh	r3, [r7, #2]
 800cb00:	4613      	mov	r3, r2
 800cb02:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800cb04:	883b      	ldrh	r3, [r7, #0]
 800cb06:	2b41      	cmp	r3, #65	@ 0x41
 800cb08:	d009      	beq.n	800cb1e <pbuf_alloc_reference+0x2a>
 800cb0a:	883b      	ldrh	r3, [r7, #0]
 800cb0c:	2b01      	cmp	r3, #1
 800cb0e:	d006      	beq.n	800cb1e <pbuf_alloc_reference+0x2a>
 800cb10:	4b0f      	ldr	r3, [pc, #60]	@ (800cb50 <pbuf_alloc_reference+0x5c>)
 800cb12:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800cb16:	490f      	ldr	r1, [pc, #60]	@ (800cb54 <pbuf_alloc_reference+0x60>)
 800cb18:	480f      	ldr	r0, [pc, #60]	@ (800cb58 <pbuf_alloc_reference+0x64>)
 800cb1a:	f00c f913 	bl	8018d44 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800cb1e:	200b      	movs	r0, #11
 800cb20:	f7ff fab0 	bl	800c084 <memp_malloc>
 800cb24:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d101      	bne.n	800cb30 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	e00b      	b.n	800cb48 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800cb30:	8879      	ldrh	r1, [r7, #2]
 800cb32:	887a      	ldrh	r2, [r7, #2]
 800cb34:	2300      	movs	r3, #0
 800cb36:	9301      	str	r3, [sp, #4]
 800cb38:	883b      	ldrh	r3, [r7, #0]
 800cb3a:	9300      	str	r3, [sp, #0]
 800cb3c:	460b      	mov	r3, r1
 800cb3e:	6879      	ldr	r1, [r7, #4]
 800cb40:	68f8      	ldr	r0, [r7, #12]
 800cb42:	f7ff feb7 	bl	800c8b4 <pbuf_init_alloced_pbuf>
  return p;
 800cb46:	68fb      	ldr	r3, [r7, #12]
}
 800cb48:	4618      	mov	r0, r3
 800cb4a:	3710      	adds	r7, #16
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	bd80      	pop	{r7, pc}
 800cb50:	0801b578 	.word	0x0801b578
 800cb54:	0801b67c 	.word	0x0801b67c
 800cb58:	0801b5d8 	.word	0x0801b5d8

0800cb5c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b088      	sub	sp, #32
 800cb60:	af02      	add	r7, sp, #8
 800cb62:	607b      	str	r3, [r7, #4]
 800cb64:	4603      	mov	r3, r0
 800cb66:	73fb      	strb	r3, [r7, #15]
 800cb68:	460b      	mov	r3, r1
 800cb6a:	81bb      	strh	r3, [r7, #12]
 800cb6c:	4613      	mov	r3, r2
 800cb6e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800cb70:	7bfb      	ldrb	r3, [r7, #15]
 800cb72:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800cb74:	8a7b      	ldrh	r3, [r7, #18]
 800cb76:	3303      	adds	r3, #3
 800cb78:	f023 0203 	bic.w	r2, r3, #3
 800cb7c:	89bb      	ldrh	r3, [r7, #12]
 800cb7e:	441a      	add	r2, r3
 800cb80:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cb82:	429a      	cmp	r2, r3
 800cb84:	d901      	bls.n	800cb8a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800cb86:	2300      	movs	r3, #0
 800cb88:	e018      	b.n	800cbbc <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800cb8a:	6a3b      	ldr	r3, [r7, #32]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d007      	beq.n	800cba0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800cb90:	8a7b      	ldrh	r3, [r7, #18]
 800cb92:	3303      	adds	r3, #3
 800cb94:	f023 0303 	bic.w	r3, r3, #3
 800cb98:	6a3a      	ldr	r2, [r7, #32]
 800cb9a:	4413      	add	r3, r2
 800cb9c:	617b      	str	r3, [r7, #20]
 800cb9e:	e001      	b.n	800cba4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800cba0:	2300      	movs	r3, #0
 800cba2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800cba4:	6878      	ldr	r0, [r7, #4]
 800cba6:	89b9      	ldrh	r1, [r7, #12]
 800cba8:	89ba      	ldrh	r2, [r7, #12]
 800cbaa:	2302      	movs	r3, #2
 800cbac:	9301      	str	r3, [sp, #4]
 800cbae:	897b      	ldrh	r3, [r7, #10]
 800cbb0:	9300      	str	r3, [sp, #0]
 800cbb2:	460b      	mov	r3, r1
 800cbb4:	6979      	ldr	r1, [r7, #20]
 800cbb6:	f7ff fe7d 	bl	800c8b4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800cbba:	687b      	ldr	r3, [r7, #4]
}
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	3718      	adds	r7, #24
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	bd80      	pop	{r7, pc}

0800cbc4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b084      	sub	sp, #16
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
 800cbcc:	460b      	mov	r3, r1
 800cbce:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d106      	bne.n	800cbe4 <pbuf_realloc+0x20>
 800cbd6:	4b3a      	ldr	r3, [pc, #232]	@ (800ccc0 <pbuf_realloc+0xfc>)
 800cbd8:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800cbdc:	4939      	ldr	r1, [pc, #228]	@ (800ccc4 <pbuf_realloc+0x100>)
 800cbde:	483a      	ldr	r0, [pc, #232]	@ (800ccc8 <pbuf_realloc+0x104>)
 800cbe0:	f00c f8b0 	bl	8018d44 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	891b      	ldrh	r3, [r3, #8]
 800cbe8:	887a      	ldrh	r2, [r7, #2]
 800cbea:	429a      	cmp	r2, r3
 800cbec:	d263      	bcs.n	800ccb6 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	891a      	ldrh	r2, [r3, #8]
 800cbf2:	887b      	ldrh	r3, [r7, #2]
 800cbf4:	1ad3      	subs	r3, r2, r3
 800cbf6:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800cbf8:	887b      	ldrh	r3, [r7, #2]
 800cbfa:	817b      	strh	r3, [r7, #10]
  q = p;
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800cc00:	e018      	b.n	800cc34 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	895b      	ldrh	r3, [r3, #10]
 800cc06:	897a      	ldrh	r2, [r7, #10]
 800cc08:	1ad3      	subs	r3, r2, r3
 800cc0a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	891a      	ldrh	r2, [r3, #8]
 800cc10:	893b      	ldrh	r3, [r7, #8]
 800cc12:	1ad3      	subs	r3, r2, r3
 800cc14:	b29a      	uxth	r2, r3
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d106      	bne.n	800cc34 <pbuf_realloc+0x70>
 800cc26:	4b26      	ldr	r3, [pc, #152]	@ (800ccc0 <pbuf_realloc+0xfc>)
 800cc28:	f240 12af 	movw	r2, #431	@ 0x1af
 800cc2c:	4927      	ldr	r1, [pc, #156]	@ (800cccc <pbuf_realloc+0x108>)
 800cc2e:	4826      	ldr	r0, [pc, #152]	@ (800ccc8 <pbuf_realloc+0x104>)
 800cc30:	f00c f888 	bl	8018d44 <iprintf>
  while (rem_len > q->len) {
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	895b      	ldrh	r3, [r3, #10]
 800cc38:	897a      	ldrh	r2, [r7, #10]
 800cc3a:	429a      	cmp	r2, r3
 800cc3c:	d8e1      	bhi.n	800cc02 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	7b1b      	ldrb	r3, [r3, #12]
 800cc42:	f003 030f 	and.w	r3, r3, #15
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d121      	bne.n	800cc8e <pbuf_realloc+0xca>
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	895b      	ldrh	r3, [r3, #10]
 800cc4e:	897a      	ldrh	r2, [r7, #10]
 800cc50:	429a      	cmp	r2, r3
 800cc52:	d01c      	beq.n	800cc8e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	7b5b      	ldrb	r3, [r3, #13]
 800cc58:	f003 0302 	and.w	r3, r3, #2
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d116      	bne.n	800cc8e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	685a      	ldr	r2, [r3, #4]
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	1ad3      	subs	r3, r2, r3
 800cc68:	b29a      	uxth	r2, r3
 800cc6a:	897b      	ldrh	r3, [r7, #10]
 800cc6c:	4413      	add	r3, r2
 800cc6e:	b29b      	uxth	r3, r3
 800cc70:	4619      	mov	r1, r3
 800cc72:	68f8      	ldr	r0, [r7, #12]
 800cc74:	f7fe ff58 	bl	800bb28 <mem_trim>
 800cc78:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d106      	bne.n	800cc8e <pbuf_realloc+0xca>
 800cc80:	4b0f      	ldr	r3, [pc, #60]	@ (800ccc0 <pbuf_realloc+0xfc>)
 800cc82:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800cc86:	4912      	ldr	r1, [pc, #72]	@ (800ccd0 <pbuf_realloc+0x10c>)
 800cc88:	480f      	ldr	r0, [pc, #60]	@ (800ccc8 <pbuf_realloc+0x104>)
 800cc8a:	f00c f85b 	bl	8018d44 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	897a      	ldrh	r2, [r7, #10]
 800cc92:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	895a      	ldrh	r2, [r3, #10]
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d004      	beq.n	800ccae <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	4618      	mov	r0, r3
 800ccaa:	f000 f911 	bl	800ced0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	2200      	movs	r2, #0
 800ccb2:	601a      	str	r2, [r3, #0]
 800ccb4:	e000      	b.n	800ccb8 <pbuf_realloc+0xf4>
    return;
 800ccb6:	bf00      	nop

}
 800ccb8:	3710      	adds	r7, #16
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	bd80      	pop	{r7, pc}
 800ccbe:	bf00      	nop
 800ccc0:	0801b578 	.word	0x0801b578
 800ccc4:	0801b690 	.word	0x0801b690
 800ccc8:	0801b5d8 	.word	0x0801b5d8
 800cccc:	0801b6a8 	.word	0x0801b6a8
 800ccd0:	0801b6c0 	.word	0x0801b6c0

0800ccd4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b086      	sub	sp, #24
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	60f8      	str	r0, [r7, #12]
 800ccdc:	60b9      	str	r1, [r7, #8]
 800ccde:	4613      	mov	r3, r2
 800cce0:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d106      	bne.n	800ccf6 <pbuf_add_header_impl+0x22>
 800cce8:	4b2b      	ldr	r3, [pc, #172]	@ (800cd98 <pbuf_add_header_impl+0xc4>)
 800ccea:	f240 12df 	movw	r2, #479	@ 0x1df
 800ccee:	492b      	ldr	r1, [pc, #172]	@ (800cd9c <pbuf_add_header_impl+0xc8>)
 800ccf0:	482b      	ldr	r0, [pc, #172]	@ (800cda0 <pbuf_add_header_impl+0xcc>)
 800ccf2:	f00c f827 	bl	8018d44 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d003      	beq.n	800cd04 <pbuf_add_header_impl+0x30>
 800ccfc:	68bb      	ldr	r3, [r7, #8]
 800ccfe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cd02:	d301      	bcc.n	800cd08 <pbuf_add_header_impl+0x34>
    return 1;
 800cd04:	2301      	movs	r3, #1
 800cd06:	e043      	b.n	800cd90 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800cd08:	68bb      	ldr	r3, [r7, #8]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d101      	bne.n	800cd12 <pbuf_add_header_impl+0x3e>
    return 0;
 800cd0e:	2300      	movs	r3, #0
 800cd10:	e03e      	b.n	800cd90 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800cd12:	68bb      	ldr	r3, [r7, #8]
 800cd14:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	891a      	ldrh	r2, [r3, #8]
 800cd1a:	8a7b      	ldrh	r3, [r7, #18]
 800cd1c:	4413      	add	r3, r2
 800cd1e:	b29b      	uxth	r3, r3
 800cd20:	8a7a      	ldrh	r2, [r7, #18]
 800cd22:	429a      	cmp	r2, r3
 800cd24:	d901      	bls.n	800cd2a <pbuf_add_header_impl+0x56>
    return 1;
 800cd26:	2301      	movs	r3, #1
 800cd28:	e032      	b.n	800cd90 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	7b1b      	ldrb	r3, [r3, #12]
 800cd2e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800cd30:	8a3b      	ldrh	r3, [r7, #16]
 800cd32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d00c      	beq.n	800cd54 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	685a      	ldr	r2, [r3, #4]
 800cd3e:	68bb      	ldr	r3, [r7, #8]
 800cd40:	425b      	negs	r3, r3
 800cd42:	4413      	add	r3, r2
 800cd44:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	3310      	adds	r3, #16
 800cd4a:	697a      	ldr	r2, [r7, #20]
 800cd4c:	429a      	cmp	r2, r3
 800cd4e:	d20d      	bcs.n	800cd6c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800cd50:	2301      	movs	r3, #1
 800cd52:	e01d      	b.n	800cd90 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800cd54:	79fb      	ldrb	r3, [r7, #7]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d006      	beq.n	800cd68 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	685a      	ldr	r2, [r3, #4]
 800cd5e:	68bb      	ldr	r3, [r7, #8]
 800cd60:	425b      	negs	r3, r3
 800cd62:	4413      	add	r3, r2
 800cd64:	617b      	str	r3, [r7, #20]
 800cd66:	e001      	b.n	800cd6c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800cd68:	2301      	movs	r3, #1
 800cd6a:	e011      	b.n	800cd90 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	697a      	ldr	r2, [r7, #20]
 800cd70:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	895a      	ldrh	r2, [r3, #10]
 800cd76:	8a7b      	ldrh	r3, [r7, #18]
 800cd78:	4413      	add	r3, r2
 800cd7a:	b29a      	uxth	r2, r3
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	891a      	ldrh	r2, [r3, #8]
 800cd84:	8a7b      	ldrh	r3, [r7, #18]
 800cd86:	4413      	add	r3, r2
 800cd88:	b29a      	uxth	r2, r3
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	811a      	strh	r2, [r3, #8]


  return 0;
 800cd8e:	2300      	movs	r3, #0
}
 800cd90:	4618      	mov	r0, r3
 800cd92:	3718      	adds	r7, #24
 800cd94:	46bd      	mov	sp, r7
 800cd96:	bd80      	pop	{r7, pc}
 800cd98:	0801b578 	.word	0x0801b578
 800cd9c:	0801b6dc 	.word	0x0801b6dc
 800cda0:	0801b5d8 	.word	0x0801b5d8

0800cda4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b082      	sub	sp, #8
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]
 800cdac:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800cdae:	2200      	movs	r2, #0
 800cdb0:	6839      	ldr	r1, [r7, #0]
 800cdb2:	6878      	ldr	r0, [r7, #4]
 800cdb4:	f7ff ff8e 	bl	800ccd4 <pbuf_add_header_impl>
 800cdb8:	4603      	mov	r3, r0
}
 800cdba:	4618      	mov	r0, r3
 800cdbc:	3708      	adds	r7, #8
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	bd80      	pop	{r7, pc}
	...

0800cdc4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800cdc4:	b580      	push	{r7, lr}
 800cdc6:	b084      	sub	sp, #16
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
 800cdcc:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d106      	bne.n	800cde2 <pbuf_remove_header+0x1e>
 800cdd4:	4b20      	ldr	r3, [pc, #128]	@ (800ce58 <pbuf_remove_header+0x94>)
 800cdd6:	f240 224b 	movw	r2, #587	@ 0x24b
 800cdda:	4920      	ldr	r1, [pc, #128]	@ (800ce5c <pbuf_remove_header+0x98>)
 800cddc:	4820      	ldr	r0, [pc, #128]	@ (800ce60 <pbuf_remove_header+0x9c>)
 800cdde:	f00b ffb1 	bl	8018d44 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d003      	beq.n	800cdf0 <pbuf_remove_header+0x2c>
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cdee:	d301      	bcc.n	800cdf4 <pbuf_remove_header+0x30>
    return 1;
 800cdf0:	2301      	movs	r3, #1
 800cdf2:	e02c      	b.n	800ce4e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800cdf4:	683b      	ldr	r3, [r7, #0]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d101      	bne.n	800cdfe <pbuf_remove_header+0x3a>
    return 0;
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	e027      	b.n	800ce4e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800cdfe:	683b      	ldr	r3, [r7, #0]
 800ce00:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	895b      	ldrh	r3, [r3, #10]
 800ce06:	89fa      	ldrh	r2, [r7, #14]
 800ce08:	429a      	cmp	r2, r3
 800ce0a:	d908      	bls.n	800ce1e <pbuf_remove_header+0x5a>
 800ce0c:	4b12      	ldr	r3, [pc, #72]	@ (800ce58 <pbuf_remove_header+0x94>)
 800ce0e:	f240 2255 	movw	r2, #597	@ 0x255
 800ce12:	4914      	ldr	r1, [pc, #80]	@ (800ce64 <pbuf_remove_header+0xa0>)
 800ce14:	4812      	ldr	r0, [pc, #72]	@ (800ce60 <pbuf_remove_header+0x9c>)
 800ce16:	f00b ff95 	bl	8018d44 <iprintf>
 800ce1a:	2301      	movs	r3, #1
 800ce1c:	e017      	b.n	800ce4e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	685b      	ldr	r3, [r3, #4]
 800ce22:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	685a      	ldr	r2, [r3, #4]
 800ce28:	683b      	ldr	r3, [r7, #0]
 800ce2a:	441a      	add	r2, r3
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	895a      	ldrh	r2, [r3, #10]
 800ce34:	89fb      	ldrh	r3, [r7, #14]
 800ce36:	1ad3      	subs	r3, r2, r3
 800ce38:	b29a      	uxth	r2, r3
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	891a      	ldrh	r2, [r3, #8]
 800ce42:	89fb      	ldrh	r3, [r7, #14]
 800ce44:	1ad3      	subs	r3, r2, r3
 800ce46:	b29a      	uxth	r2, r3
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800ce4c:	2300      	movs	r3, #0
}
 800ce4e:	4618      	mov	r0, r3
 800ce50:	3710      	adds	r7, #16
 800ce52:	46bd      	mov	sp, r7
 800ce54:	bd80      	pop	{r7, pc}
 800ce56:	bf00      	nop
 800ce58:	0801b578 	.word	0x0801b578
 800ce5c:	0801b6dc 	.word	0x0801b6dc
 800ce60:	0801b5d8 	.word	0x0801b5d8
 800ce64:	0801b6e8 	.word	0x0801b6e8

0800ce68 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b082      	sub	sp, #8
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]
 800ce70:	460b      	mov	r3, r1
 800ce72:	807b      	strh	r3, [r7, #2]
 800ce74:	4613      	mov	r3, r2
 800ce76:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800ce78:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	da08      	bge.n	800ce92 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800ce80:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ce84:	425b      	negs	r3, r3
 800ce86:	4619      	mov	r1, r3
 800ce88:	6878      	ldr	r0, [r7, #4]
 800ce8a:	f7ff ff9b 	bl	800cdc4 <pbuf_remove_header>
 800ce8e:	4603      	mov	r3, r0
 800ce90:	e007      	b.n	800cea2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800ce92:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ce96:	787a      	ldrb	r2, [r7, #1]
 800ce98:	4619      	mov	r1, r3
 800ce9a:	6878      	ldr	r0, [r7, #4]
 800ce9c:	f7ff ff1a 	bl	800ccd4 <pbuf_add_header_impl>
 800cea0:	4603      	mov	r3, r0
  }
}
 800cea2:	4618      	mov	r0, r3
 800cea4:	3708      	adds	r7, #8
 800cea6:	46bd      	mov	sp, r7
 800cea8:	bd80      	pop	{r7, pc}

0800ceaa <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800ceaa:	b580      	push	{r7, lr}
 800ceac:	b082      	sub	sp, #8
 800ceae:	af00      	add	r7, sp, #0
 800ceb0:	6078      	str	r0, [r7, #4]
 800ceb2:	460b      	mov	r3, r1
 800ceb4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800ceb6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ceba:	2201      	movs	r2, #1
 800cebc:	4619      	mov	r1, r3
 800cebe:	6878      	ldr	r0, [r7, #4]
 800cec0:	f7ff ffd2 	bl	800ce68 <pbuf_header_impl>
 800cec4:	4603      	mov	r3, r0
}
 800cec6:	4618      	mov	r0, r3
 800cec8:	3708      	adds	r7, #8
 800ceca:	46bd      	mov	sp, r7
 800cecc:	bd80      	pop	{r7, pc}
	...

0800ced0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b088      	sub	sp, #32
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d10b      	bne.n	800cef6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d106      	bne.n	800cef2 <pbuf_free+0x22>
 800cee4:	4b3b      	ldr	r3, [pc, #236]	@ (800cfd4 <pbuf_free+0x104>)
 800cee6:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800ceea:	493b      	ldr	r1, [pc, #236]	@ (800cfd8 <pbuf_free+0x108>)
 800ceec:	483b      	ldr	r0, [pc, #236]	@ (800cfdc <pbuf_free+0x10c>)
 800ceee:	f00b ff29 	bl	8018d44 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800cef2:	2300      	movs	r3, #0
 800cef4:	e069      	b.n	800cfca <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800cef6:	2300      	movs	r3, #0
 800cef8:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800cefa:	e062      	b.n	800cfc2 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800cefc:	f00b fdd6 	bl	8018aac <sys_arch_protect>
 800cf00:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	7b9b      	ldrb	r3, [r3, #14]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d106      	bne.n	800cf18 <pbuf_free+0x48>
 800cf0a:	4b32      	ldr	r3, [pc, #200]	@ (800cfd4 <pbuf_free+0x104>)
 800cf0c:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800cf10:	4933      	ldr	r1, [pc, #204]	@ (800cfe0 <pbuf_free+0x110>)
 800cf12:	4832      	ldr	r0, [pc, #200]	@ (800cfdc <pbuf_free+0x10c>)
 800cf14:	f00b ff16 	bl	8018d44 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	7b9b      	ldrb	r3, [r3, #14]
 800cf1c:	3b01      	subs	r3, #1
 800cf1e:	b2da      	uxtb	r2, r3
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	739a      	strb	r2, [r3, #14]
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	7b9b      	ldrb	r3, [r3, #14]
 800cf28:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800cf2a:	69b8      	ldr	r0, [r7, #24]
 800cf2c:	f00b fdcc 	bl	8018ac8 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800cf30:	7dfb      	ldrb	r3, [r7, #23]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d143      	bne.n	800cfbe <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	7b1b      	ldrb	r3, [r3, #12]
 800cf40:	f003 030f 	and.w	r3, r3, #15
 800cf44:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	7b5b      	ldrb	r3, [r3, #13]
 800cf4a:	f003 0302 	and.w	r3, r3, #2
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d011      	beq.n	800cf76 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800cf56:	68bb      	ldr	r3, [r7, #8]
 800cf58:	691b      	ldr	r3, [r3, #16]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d106      	bne.n	800cf6c <pbuf_free+0x9c>
 800cf5e:	4b1d      	ldr	r3, [pc, #116]	@ (800cfd4 <pbuf_free+0x104>)
 800cf60:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800cf64:	491f      	ldr	r1, [pc, #124]	@ (800cfe4 <pbuf_free+0x114>)
 800cf66:	481d      	ldr	r0, [pc, #116]	@ (800cfdc <pbuf_free+0x10c>)
 800cf68:	f00b feec 	bl	8018d44 <iprintf>
        pc->custom_free_function(p);
 800cf6c:	68bb      	ldr	r3, [r7, #8]
 800cf6e:	691b      	ldr	r3, [r3, #16]
 800cf70:	6878      	ldr	r0, [r7, #4]
 800cf72:	4798      	blx	r3
 800cf74:	e01d      	b.n	800cfb2 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800cf76:	7bfb      	ldrb	r3, [r7, #15]
 800cf78:	2b02      	cmp	r3, #2
 800cf7a:	d104      	bne.n	800cf86 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800cf7c:	6879      	ldr	r1, [r7, #4]
 800cf7e:	200c      	movs	r0, #12
 800cf80:	f7ff f8f6 	bl	800c170 <memp_free>
 800cf84:	e015      	b.n	800cfb2 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800cf86:	7bfb      	ldrb	r3, [r7, #15]
 800cf88:	2b01      	cmp	r3, #1
 800cf8a:	d104      	bne.n	800cf96 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800cf8c:	6879      	ldr	r1, [r7, #4]
 800cf8e:	200b      	movs	r0, #11
 800cf90:	f7ff f8ee 	bl	800c170 <memp_free>
 800cf94:	e00d      	b.n	800cfb2 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800cf96:	7bfb      	ldrb	r3, [r7, #15]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d103      	bne.n	800cfa4 <pbuf_free+0xd4>
          mem_free(p);
 800cf9c:	6878      	ldr	r0, [r7, #4]
 800cf9e:	f7fe fd33 	bl	800ba08 <mem_free>
 800cfa2:	e006      	b.n	800cfb2 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800cfa4:	4b0b      	ldr	r3, [pc, #44]	@ (800cfd4 <pbuf_free+0x104>)
 800cfa6:	f240 320f 	movw	r2, #783	@ 0x30f
 800cfaa:	490f      	ldr	r1, [pc, #60]	@ (800cfe8 <pbuf_free+0x118>)
 800cfac:	480b      	ldr	r0, [pc, #44]	@ (800cfdc <pbuf_free+0x10c>)
 800cfae:	f00b fec9 	bl	8018d44 <iprintf>
        }
      }
      count++;
 800cfb2:	7ffb      	ldrb	r3, [r7, #31]
 800cfb4:	3301      	adds	r3, #1
 800cfb6:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800cfb8:	693b      	ldr	r3, [r7, #16]
 800cfba:	607b      	str	r3, [r7, #4]
 800cfbc:	e001      	b.n	800cfc2 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d199      	bne.n	800cefc <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800cfc8:	7ffb      	ldrb	r3, [r7, #31]
}
 800cfca:	4618      	mov	r0, r3
 800cfcc:	3720      	adds	r7, #32
 800cfce:	46bd      	mov	sp, r7
 800cfd0:	bd80      	pop	{r7, pc}
 800cfd2:	bf00      	nop
 800cfd4:	0801b578 	.word	0x0801b578
 800cfd8:	0801b6dc 	.word	0x0801b6dc
 800cfdc:	0801b5d8 	.word	0x0801b5d8
 800cfe0:	0801b708 	.word	0x0801b708
 800cfe4:	0801b720 	.word	0x0801b720
 800cfe8:	0801b744 	.word	0x0801b744

0800cfec <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800cfec:	b480      	push	{r7}
 800cfee:	b085      	sub	sp, #20
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800cff4:	2300      	movs	r3, #0
 800cff6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800cff8:	e005      	b.n	800d006 <pbuf_clen+0x1a>
    ++len;
 800cffa:	89fb      	ldrh	r3, [r7, #14]
 800cffc:	3301      	adds	r3, #1
 800cffe:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d1f6      	bne.n	800cffa <pbuf_clen+0xe>
  }
  return len;
 800d00c:	89fb      	ldrh	r3, [r7, #14]
}
 800d00e:	4618      	mov	r0, r3
 800d010:	3714      	adds	r7, #20
 800d012:	46bd      	mov	sp, r7
 800d014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d018:	4770      	bx	lr
	...

0800d01c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b084      	sub	sp, #16
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d016      	beq.n	800d058 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800d02a:	f00b fd3f 	bl	8018aac <sys_arch_protect>
 800d02e:	60f8      	str	r0, [r7, #12]
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	7b9b      	ldrb	r3, [r3, #14]
 800d034:	3301      	adds	r3, #1
 800d036:	b2da      	uxtb	r2, r3
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	739a      	strb	r2, [r3, #14]
 800d03c:	68f8      	ldr	r0, [r7, #12]
 800d03e:	f00b fd43 	bl	8018ac8 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	7b9b      	ldrb	r3, [r3, #14]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d106      	bne.n	800d058 <pbuf_ref+0x3c>
 800d04a:	4b05      	ldr	r3, [pc, #20]	@ (800d060 <pbuf_ref+0x44>)
 800d04c:	f240 3242 	movw	r2, #834	@ 0x342
 800d050:	4904      	ldr	r1, [pc, #16]	@ (800d064 <pbuf_ref+0x48>)
 800d052:	4805      	ldr	r0, [pc, #20]	@ (800d068 <pbuf_ref+0x4c>)
 800d054:	f00b fe76 	bl	8018d44 <iprintf>
  }
}
 800d058:	bf00      	nop
 800d05a:	3710      	adds	r7, #16
 800d05c:	46bd      	mov	sp, r7
 800d05e:	bd80      	pop	{r7, pc}
 800d060:	0801b578 	.word	0x0801b578
 800d064:	0801b758 	.word	0x0801b758
 800d068:	0801b5d8 	.word	0x0801b5d8

0800d06c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800d06c:	b580      	push	{r7, lr}
 800d06e:	b084      	sub	sp, #16
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]
 800d074:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d002      	beq.n	800d082 <pbuf_cat+0x16>
 800d07c:	683b      	ldr	r3, [r7, #0]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d107      	bne.n	800d092 <pbuf_cat+0x26>
 800d082:	4b20      	ldr	r3, [pc, #128]	@ (800d104 <pbuf_cat+0x98>)
 800d084:	f240 3259 	movw	r2, #857	@ 0x359
 800d088:	491f      	ldr	r1, [pc, #124]	@ (800d108 <pbuf_cat+0x9c>)
 800d08a:	4820      	ldr	r0, [pc, #128]	@ (800d10c <pbuf_cat+0xa0>)
 800d08c:	f00b fe5a 	bl	8018d44 <iprintf>
 800d090:	e034      	b.n	800d0fc <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	60fb      	str	r3, [r7, #12]
 800d096:	e00a      	b.n	800d0ae <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	891a      	ldrh	r2, [r3, #8]
 800d09c:	683b      	ldr	r3, [r7, #0]
 800d09e:	891b      	ldrh	r3, [r3, #8]
 800d0a0:	4413      	add	r3, r2
 800d0a2:	b29a      	uxth	r2, r3
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	60fb      	str	r3, [r7, #12]
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d1f0      	bne.n	800d098 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	891a      	ldrh	r2, [r3, #8]
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	895b      	ldrh	r3, [r3, #10]
 800d0be:	429a      	cmp	r2, r3
 800d0c0:	d006      	beq.n	800d0d0 <pbuf_cat+0x64>
 800d0c2:	4b10      	ldr	r3, [pc, #64]	@ (800d104 <pbuf_cat+0x98>)
 800d0c4:	f240 3262 	movw	r2, #866	@ 0x362
 800d0c8:	4911      	ldr	r1, [pc, #68]	@ (800d110 <pbuf_cat+0xa4>)
 800d0ca:	4810      	ldr	r0, [pc, #64]	@ (800d10c <pbuf_cat+0xa0>)
 800d0cc:	f00b fe3a 	bl	8018d44 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d006      	beq.n	800d0e6 <pbuf_cat+0x7a>
 800d0d8:	4b0a      	ldr	r3, [pc, #40]	@ (800d104 <pbuf_cat+0x98>)
 800d0da:	f240 3263 	movw	r2, #867	@ 0x363
 800d0de:	490d      	ldr	r1, [pc, #52]	@ (800d114 <pbuf_cat+0xa8>)
 800d0e0:	480a      	ldr	r0, [pc, #40]	@ (800d10c <pbuf_cat+0xa0>)
 800d0e2:	f00b fe2f 	bl	8018d44 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	891a      	ldrh	r2, [r3, #8]
 800d0ea:	683b      	ldr	r3, [r7, #0]
 800d0ec:	891b      	ldrh	r3, [r3, #8]
 800d0ee:	4413      	add	r3, r2
 800d0f0:	b29a      	uxth	r2, r3
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	683a      	ldr	r2, [r7, #0]
 800d0fa:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800d0fc:	3710      	adds	r7, #16
 800d0fe:	46bd      	mov	sp, r7
 800d100:	bd80      	pop	{r7, pc}
 800d102:	bf00      	nop
 800d104:	0801b578 	.word	0x0801b578
 800d108:	0801b76c 	.word	0x0801b76c
 800d10c:	0801b5d8 	.word	0x0801b5d8
 800d110:	0801b7a4 	.word	0x0801b7a4
 800d114:	0801b7d4 	.word	0x0801b7d4

0800d118 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b082      	sub	sp, #8
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	6078      	str	r0, [r7, #4]
 800d120:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800d122:	6839      	ldr	r1, [r7, #0]
 800d124:	6878      	ldr	r0, [r7, #4]
 800d126:	f7ff ffa1 	bl	800d06c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800d12a:	6838      	ldr	r0, [r7, #0]
 800d12c:	f7ff ff76 	bl	800d01c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800d130:	bf00      	nop
 800d132:	3708      	adds	r7, #8
 800d134:	46bd      	mov	sp, r7
 800d136:	bd80      	pop	{r7, pc}

0800d138 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800d138:	b580      	push	{r7, lr}
 800d13a:	b086      	sub	sp, #24
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
 800d140:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800d142:	2300      	movs	r3, #0
 800d144:	617b      	str	r3, [r7, #20]
 800d146:	2300      	movs	r3, #0
 800d148:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d008      	beq.n	800d162 <pbuf_copy+0x2a>
 800d150:	683b      	ldr	r3, [r7, #0]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d005      	beq.n	800d162 <pbuf_copy+0x2a>
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	891a      	ldrh	r2, [r3, #8]
 800d15a:	683b      	ldr	r3, [r7, #0]
 800d15c:	891b      	ldrh	r3, [r3, #8]
 800d15e:	429a      	cmp	r2, r3
 800d160:	d209      	bcs.n	800d176 <pbuf_copy+0x3e>
 800d162:	4b57      	ldr	r3, [pc, #348]	@ (800d2c0 <pbuf_copy+0x188>)
 800d164:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800d168:	4956      	ldr	r1, [pc, #344]	@ (800d2c4 <pbuf_copy+0x18c>)
 800d16a:	4857      	ldr	r0, [pc, #348]	@ (800d2c8 <pbuf_copy+0x190>)
 800d16c:	f00b fdea 	bl	8018d44 <iprintf>
 800d170:	f06f 030f 	mvn.w	r3, #15
 800d174:	e09f      	b.n	800d2b6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	895b      	ldrh	r3, [r3, #10]
 800d17a:	461a      	mov	r2, r3
 800d17c:	697b      	ldr	r3, [r7, #20]
 800d17e:	1ad2      	subs	r2, r2, r3
 800d180:	683b      	ldr	r3, [r7, #0]
 800d182:	895b      	ldrh	r3, [r3, #10]
 800d184:	4619      	mov	r1, r3
 800d186:	693b      	ldr	r3, [r7, #16]
 800d188:	1acb      	subs	r3, r1, r3
 800d18a:	429a      	cmp	r2, r3
 800d18c:	d306      	bcc.n	800d19c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800d18e:	683b      	ldr	r3, [r7, #0]
 800d190:	895b      	ldrh	r3, [r3, #10]
 800d192:	461a      	mov	r2, r3
 800d194:	693b      	ldr	r3, [r7, #16]
 800d196:	1ad3      	subs	r3, r2, r3
 800d198:	60fb      	str	r3, [r7, #12]
 800d19a:	e005      	b.n	800d1a8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	895b      	ldrh	r3, [r3, #10]
 800d1a0:	461a      	mov	r2, r3
 800d1a2:	697b      	ldr	r3, [r7, #20]
 800d1a4:	1ad3      	subs	r3, r2, r3
 800d1a6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	685a      	ldr	r2, [r3, #4]
 800d1ac:	697b      	ldr	r3, [r7, #20]
 800d1ae:	18d0      	adds	r0, r2, r3
 800d1b0:	683b      	ldr	r3, [r7, #0]
 800d1b2:	685a      	ldr	r2, [r3, #4]
 800d1b4:	693b      	ldr	r3, [r7, #16]
 800d1b6:	4413      	add	r3, r2
 800d1b8:	68fa      	ldr	r2, [r7, #12]
 800d1ba:	4619      	mov	r1, r3
 800d1bc:	f00b ffc3 	bl	8019146 <memcpy>
    offset_to += len;
 800d1c0:	697a      	ldr	r2, [r7, #20]
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	4413      	add	r3, r2
 800d1c6:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800d1c8:	693a      	ldr	r2, [r7, #16]
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	4413      	add	r3, r2
 800d1ce:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	895b      	ldrh	r3, [r3, #10]
 800d1d4:	461a      	mov	r2, r3
 800d1d6:	697b      	ldr	r3, [r7, #20]
 800d1d8:	4293      	cmp	r3, r2
 800d1da:	d906      	bls.n	800d1ea <pbuf_copy+0xb2>
 800d1dc:	4b38      	ldr	r3, [pc, #224]	@ (800d2c0 <pbuf_copy+0x188>)
 800d1de:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800d1e2:	493a      	ldr	r1, [pc, #232]	@ (800d2cc <pbuf_copy+0x194>)
 800d1e4:	4838      	ldr	r0, [pc, #224]	@ (800d2c8 <pbuf_copy+0x190>)
 800d1e6:	f00b fdad 	bl	8018d44 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800d1ea:	683b      	ldr	r3, [r7, #0]
 800d1ec:	895b      	ldrh	r3, [r3, #10]
 800d1ee:	461a      	mov	r2, r3
 800d1f0:	693b      	ldr	r3, [r7, #16]
 800d1f2:	4293      	cmp	r3, r2
 800d1f4:	d906      	bls.n	800d204 <pbuf_copy+0xcc>
 800d1f6:	4b32      	ldr	r3, [pc, #200]	@ (800d2c0 <pbuf_copy+0x188>)
 800d1f8:	f240 32da 	movw	r2, #986	@ 0x3da
 800d1fc:	4934      	ldr	r1, [pc, #208]	@ (800d2d0 <pbuf_copy+0x198>)
 800d1fe:	4832      	ldr	r0, [pc, #200]	@ (800d2c8 <pbuf_copy+0x190>)
 800d200:	f00b fda0 	bl	8018d44 <iprintf>
    if (offset_from >= p_from->len) {
 800d204:	683b      	ldr	r3, [r7, #0]
 800d206:	895b      	ldrh	r3, [r3, #10]
 800d208:	461a      	mov	r2, r3
 800d20a:	693b      	ldr	r3, [r7, #16]
 800d20c:	4293      	cmp	r3, r2
 800d20e:	d304      	bcc.n	800d21a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800d210:	2300      	movs	r3, #0
 800d212:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800d214:	683b      	ldr	r3, [r7, #0]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	895b      	ldrh	r3, [r3, #10]
 800d21e:	461a      	mov	r2, r3
 800d220:	697b      	ldr	r3, [r7, #20]
 800d222:	4293      	cmp	r3, r2
 800d224:	d114      	bne.n	800d250 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800d226:	2300      	movs	r3, #0
 800d228:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	2b00      	cmp	r3, #0
 800d234:	d10c      	bne.n	800d250 <pbuf_copy+0x118>
 800d236:	683b      	ldr	r3, [r7, #0]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d009      	beq.n	800d250 <pbuf_copy+0x118>
 800d23c:	4b20      	ldr	r3, [pc, #128]	@ (800d2c0 <pbuf_copy+0x188>)
 800d23e:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800d242:	4924      	ldr	r1, [pc, #144]	@ (800d2d4 <pbuf_copy+0x19c>)
 800d244:	4820      	ldr	r0, [pc, #128]	@ (800d2c8 <pbuf_copy+0x190>)
 800d246:	f00b fd7d 	bl	8018d44 <iprintf>
 800d24a:	f06f 030f 	mvn.w	r3, #15
 800d24e:	e032      	b.n	800d2b6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800d250:	683b      	ldr	r3, [r7, #0]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d013      	beq.n	800d27e <pbuf_copy+0x146>
 800d256:	683b      	ldr	r3, [r7, #0]
 800d258:	895a      	ldrh	r2, [r3, #10]
 800d25a:	683b      	ldr	r3, [r7, #0]
 800d25c:	891b      	ldrh	r3, [r3, #8]
 800d25e:	429a      	cmp	r2, r3
 800d260:	d10d      	bne.n	800d27e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d262:	683b      	ldr	r3, [r7, #0]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d009      	beq.n	800d27e <pbuf_copy+0x146>
 800d26a:	4b15      	ldr	r3, [pc, #84]	@ (800d2c0 <pbuf_copy+0x188>)
 800d26c:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800d270:	4919      	ldr	r1, [pc, #100]	@ (800d2d8 <pbuf_copy+0x1a0>)
 800d272:	4815      	ldr	r0, [pc, #84]	@ (800d2c8 <pbuf_copy+0x190>)
 800d274:	f00b fd66 	bl	8018d44 <iprintf>
 800d278:	f06f 0305 	mvn.w	r3, #5
 800d27c:	e01b      	b.n	800d2b6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d013      	beq.n	800d2ac <pbuf_copy+0x174>
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	895a      	ldrh	r2, [r3, #10]
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	891b      	ldrh	r3, [r3, #8]
 800d28c:	429a      	cmp	r2, r3
 800d28e:	d10d      	bne.n	800d2ac <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d009      	beq.n	800d2ac <pbuf_copy+0x174>
 800d298:	4b09      	ldr	r3, [pc, #36]	@ (800d2c0 <pbuf_copy+0x188>)
 800d29a:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800d29e:	490e      	ldr	r1, [pc, #56]	@ (800d2d8 <pbuf_copy+0x1a0>)
 800d2a0:	4809      	ldr	r0, [pc, #36]	@ (800d2c8 <pbuf_copy+0x190>)
 800d2a2:	f00b fd4f 	bl	8018d44 <iprintf>
 800d2a6:	f06f 0305 	mvn.w	r3, #5
 800d2aa:	e004      	b.n	800d2b6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800d2ac:	683b      	ldr	r3, [r7, #0]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	f47f af61 	bne.w	800d176 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800d2b4:	2300      	movs	r3, #0
}
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	3718      	adds	r7, #24
 800d2ba:	46bd      	mov	sp, r7
 800d2bc:	bd80      	pop	{r7, pc}
 800d2be:	bf00      	nop
 800d2c0:	0801b578 	.word	0x0801b578
 800d2c4:	0801b820 	.word	0x0801b820
 800d2c8:	0801b5d8 	.word	0x0801b5d8
 800d2cc:	0801b850 	.word	0x0801b850
 800d2d0:	0801b868 	.word	0x0801b868
 800d2d4:	0801b884 	.word	0x0801b884
 800d2d8:	0801b894 	.word	0x0801b894

0800d2dc <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800d2dc:	b580      	push	{r7, lr}
 800d2de:	b088      	sub	sp, #32
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	60f8      	str	r0, [r7, #12]
 800d2e4:	60b9      	str	r1, [r7, #8]
 800d2e6:	4611      	mov	r1, r2
 800d2e8:	461a      	mov	r2, r3
 800d2ea:	460b      	mov	r3, r1
 800d2ec:	80fb      	strh	r3, [r7, #6]
 800d2ee:	4613      	mov	r3, r2
 800d2f0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d108      	bne.n	800d312 <pbuf_copy_partial+0x36>
 800d300:	4b2b      	ldr	r3, [pc, #172]	@ (800d3b0 <pbuf_copy_partial+0xd4>)
 800d302:	f240 420a 	movw	r2, #1034	@ 0x40a
 800d306:	492b      	ldr	r1, [pc, #172]	@ (800d3b4 <pbuf_copy_partial+0xd8>)
 800d308:	482b      	ldr	r0, [pc, #172]	@ (800d3b8 <pbuf_copy_partial+0xdc>)
 800d30a:	f00b fd1b 	bl	8018d44 <iprintf>
 800d30e:	2300      	movs	r3, #0
 800d310:	e04a      	b.n	800d3a8 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800d312:	68bb      	ldr	r3, [r7, #8]
 800d314:	2b00      	cmp	r3, #0
 800d316:	d108      	bne.n	800d32a <pbuf_copy_partial+0x4e>
 800d318:	4b25      	ldr	r3, [pc, #148]	@ (800d3b0 <pbuf_copy_partial+0xd4>)
 800d31a:	f240 420b 	movw	r2, #1035	@ 0x40b
 800d31e:	4927      	ldr	r1, [pc, #156]	@ (800d3bc <pbuf_copy_partial+0xe0>)
 800d320:	4825      	ldr	r0, [pc, #148]	@ (800d3b8 <pbuf_copy_partial+0xdc>)
 800d322:	f00b fd0f 	bl	8018d44 <iprintf>
 800d326:	2300      	movs	r3, #0
 800d328:	e03e      	b.n	800d3a8 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	61fb      	str	r3, [r7, #28]
 800d32e:	e034      	b.n	800d39a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800d330:	88bb      	ldrh	r3, [r7, #4]
 800d332:	2b00      	cmp	r3, #0
 800d334:	d00a      	beq.n	800d34c <pbuf_copy_partial+0x70>
 800d336:	69fb      	ldr	r3, [r7, #28]
 800d338:	895b      	ldrh	r3, [r3, #10]
 800d33a:	88ba      	ldrh	r2, [r7, #4]
 800d33c:	429a      	cmp	r2, r3
 800d33e:	d305      	bcc.n	800d34c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800d340:	69fb      	ldr	r3, [r7, #28]
 800d342:	895b      	ldrh	r3, [r3, #10]
 800d344:	88ba      	ldrh	r2, [r7, #4]
 800d346:	1ad3      	subs	r3, r2, r3
 800d348:	80bb      	strh	r3, [r7, #4]
 800d34a:	e023      	b.n	800d394 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800d34c:	69fb      	ldr	r3, [r7, #28]
 800d34e:	895a      	ldrh	r2, [r3, #10]
 800d350:	88bb      	ldrh	r3, [r7, #4]
 800d352:	1ad3      	subs	r3, r2, r3
 800d354:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800d356:	8b3a      	ldrh	r2, [r7, #24]
 800d358:	88fb      	ldrh	r3, [r7, #6]
 800d35a:	429a      	cmp	r2, r3
 800d35c:	d901      	bls.n	800d362 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800d35e:	88fb      	ldrh	r3, [r7, #6]
 800d360:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800d362:	8b7b      	ldrh	r3, [r7, #26]
 800d364:	68ba      	ldr	r2, [r7, #8]
 800d366:	18d0      	adds	r0, r2, r3
 800d368:	69fb      	ldr	r3, [r7, #28]
 800d36a:	685a      	ldr	r2, [r3, #4]
 800d36c:	88bb      	ldrh	r3, [r7, #4]
 800d36e:	4413      	add	r3, r2
 800d370:	8b3a      	ldrh	r2, [r7, #24]
 800d372:	4619      	mov	r1, r3
 800d374:	f00b fee7 	bl	8019146 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800d378:	8afa      	ldrh	r2, [r7, #22]
 800d37a:	8b3b      	ldrh	r3, [r7, #24]
 800d37c:	4413      	add	r3, r2
 800d37e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800d380:	8b7a      	ldrh	r2, [r7, #26]
 800d382:	8b3b      	ldrh	r3, [r7, #24]
 800d384:	4413      	add	r3, r2
 800d386:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800d388:	88fa      	ldrh	r2, [r7, #6]
 800d38a:	8b3b      	ldrh	r3, [r7, #24]
 800d38c:	1ad3      	subs	r3, r2, r3
 800d38e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800d390:	2300      	movs	r3, #0
 800d392:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d394:	69fb      	ldr	r3, [r7, #28]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	61fb      	str	r3, [r7, #28]
 800d39a:	88fb      	ldrh	r3, [r7, #6]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d002      	beq.n	800d3a6 <pbuf_copy_partial+0xca>
 800d3a0:	69fb      	ldr	r3, [r7, #28]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d1c4      	bne.n	800d330 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800d3a6:	8afb      	ldrh	r3, [r7, #22]
}
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	3720      	adds	r7, #32
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	bd80      	pop	{r7, pc}
 800d3b0:	0801b578 	.word	0x0801b578
 800d3b4:	0801b8c0 	.word	0x0801b8c0
 800d3b8:	0801b5d8 	.word	0x0801b5d8
 800d3bc:	0801b8e0 	.word	0x0801b8e0

0800d3c0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b084      	sub	sp, #16
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	603a      	str	r2, [r7, #0]
 800d3ca:	71fb      	strb	r3, [r7, #7]
 800d3cc:	460b      	mov	r3, r1
 800d3ce:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800d3d0:	683b      	ldr	r3, [r7, #0]
 800d3d2:	8919      	ldrh	r1, [r3, #8]
 800d3d4:	88ba      	ldrh	r2, [r7, #4]
 800d3d6:	79fb      	ldrb	r3, [r7, #7]
 800d3d8:	4618      	mov	r0, r3
 800d3da:	f7ff fa95 	bl	800c908 <pbuf_alloc>
 800d3de:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d101      	bne.n	800d3ea <pbuf_clone+0x2a>
    return NULL;
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	e011      	b.n	800d40e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800d3ea:	6839      	ldr	r1, [r7, #0]
 800d3ec:	68f8      	ldr	r0, [r7, #12]
 800d3ee:	f7ff fea3 	bl	800d138 <pbuf_copy>
 800d3f2:	4603      	mov	r3, r0
 800d3f4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800d3f6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d006      	beq.n	800d40c <pbuf_clone+0x4c>
 800d3fe:	4b06      	ldr	r3, [pc, #24]	@ (800d418 <pbuf_clone+0x58>)
 800d400:	f240 5224 	movw	r2, #1316	@ 0x524
 800d404:	4905      	ldr	r1, [pc, #20]	@ (800d41c <pbuf_clone+0x5c>)
 800d406:	4806      	ldr	r0, [pc, #24]	@ (800d420 <pbuf_clone+0x60>)
 800d408:	f00b fc9c 	bl	8018d44 <iprintf>
  return q;
 800d40c:	68fb      	ldr	r3, [r7, #12]
}
 800d40e:	4618      	mov	r0, r3
 800d410:	3710      	adds	r7, #16
 800d412:	46bd      	mov	sp, r7
 800d414:	bd80      	pop	{r7, pc}
 800d416:	bf00      	nop
 800d418:	0801b578 	.word	0x0801b578
 800d41c:	0801b9ec 	.word	0x0801b9ec
 800d420:	0801b5d8 	.word	0x0801b5d8

0800d424 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800d424:	b580      	push	{r7, lr}
 800d426:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d428:	f00b fb8c 	bl	8018b44 <rand>
 800d42c:	4603      	mov	r3, r0
 800d42e:	b29b      	uxth	r3, r3
 800d430:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d434:	b29b      	uxth	r3, r3
 800d436:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800d43a:	b29a      	uxth	r2, r3
 800d43c:	4b01      	ldr	r3, [pc, #4]	@ (800d444 <tcp_init+0x20>)
 800d43e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d440:	bf00      	nop
 800d442:	bd80      	pop	{r7, pc}
 800d444:	20000024 	.word	0x20000024

0800d448 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800d448:	b580      	push	{r7, lr}
 800d44a:	b082      	sub	sp, #8
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	7d1b      	ldrb	r3, [r3, #20]
 800d454:	2b01      	cmp	r3, #1
 800d456:	d105      	bne.n	800d464 <tcp_free+0x1c>
 800d458:	4b06      	ldr	r3, [pc, #24]	@ (800d474 <tcp_free+0x2c>)
 800d45a:	22d4      	movs	r2, #212	@ 0xd4
 800d45c:	4906      	ldr	r1, [pc, #24]	@ (800d478 <tcp_free+0x30>)
 800d45e:	4807      	ldr	r0, [pc, #28]	@ (800d47c <tcp_free+0x34>)
 800d460:	f00b fc70 	bl	8018d44 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800d464:	6879      	ldr	r1, [r7, #4]
 800d466:	2001      	movs	r0, #1
 800d468:	f7fe fe82 	bl	800c170 <memp_free>
}
 800d46c:	bf00      	nop
 800d46e:	3708      	adds	r7, #8
 800d470:	46bd      	mov	sp, r7
 800d472:	bd80      	pop	{r7, pc}
 800d474:	0801ba78 	.word	0x0801ba78
 800d478:	0801baa8 	.word	0x0801baa8
 800d47c:	0801babc 	.word	0x0801babc

0800d480 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800d480:	b580      	push	{r7, lr}
 800d482:	b082      	sub	sp, #8
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	7d1b      	ldrb	r3, [r3, #20]
 800d48c:	2b01      	cmp	r3, #1
 800d48e:	d105      	bne.n	800d49c <tcp_free_listen+0x1c>
 800d490:	4b06      	ldr	r3, [pc, #24]	@ (800d4ac <tcp_free_listen+0x2c>)
 800d492:	22df      	movs	r2, #223	@ 0xdf
 800d494:	4906      	ldr	r1, [pc, #24]	@ (800d4b0 <tcp_free_listen+0x30>)
 800d496:	4807      	ldr	r0, [pc, #28]	@ (800d4b4 <tcp_free_listen+0x34>)
 800d498:	f00b fc54 	bl	8018d44 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800d49c:	6879      	ldr	r1, [r7, #4]
 800d49e:	2002      	movs	r0, #2
 800d4a0:	f7fe fe66 	bl	800c170 <memp_free>
}
 800d4a4:	bf00      	nop
 800d4a6:	3708      	adds	r7, #8
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	bd80      	pop	{r7, pc}
 800d4ac:	0801ba78 	.word	0x0801ba78
 800d4b0:	0801bae4 	.word	0x0801bae4
 800d4b4:	0801babc 	.word	0x0801babc

0800d4b8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800d4b8:	b580      	push	{r7, lr}
 800d4ba:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800d4bc:	f001 f9d2 	bl	800e864 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800d4c0:	4b07      	ldr	r3, [pc, #28]	@ (800d4e0 <tcp_tmr+0x28>)
 800d4c2:	781b      	ldrb	r3, [r3, #0]
 800d4c4:	3301      	adds	r3, #1
 800d4c6:	b2da      	uxtb	r2, r3
 800d4c8:	4b05      	ldr	r3, [pc, #20]	@ (800d4e0 <tcp_tmr+0x28>)
 800d4ca:	701a      	strb	r2, [r3, #0]
 800d4cc:	4b04      	ldr	r3, [pc, #16]	@ (800d4e0 <tcp_tmr+0x28>)
 800d4ce:	781b      	ldrb	r3, [r3, #0]
 800d4d0:	f003 0301 	and.w	r3, r3, #1
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d001      	beq.n	800d4dc <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800d4d8:	f000 fe82 	bl	800e1e0 <tcp_slowtmr>
  }
}
 800d4dc:	bf00      	nop
 800d4de:	bd80      	pop	{r7, pc}
 800d4e0:	20010e89 	.word	0x20010e89

0800d4e4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b084      	sub	sp, #16
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]
 800d4ec:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800d4ee:	683b      	ldr	r3, [r7, #0]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d105      	bne.n	800d500 <tcp_remove_listener+0x1c>
 800d4f4:	4b0d      	ldr	r3, [pc, #52]	@ (800d52c <tcp_remove_listener+0x48>)
 800d4f6:	22ff      	movs	r2, #255	@ 0xff
 800d4f8:	490d      	ldr	r1, [pc, #52]	@ (800d530 <tcp_remove_listener+0x4c>)
 800d4fa:	480e      	ldr	r0, [pc, #56]	@ (800d534 <tcp_remove_listener+0x50>)
 800d4fc:	f00b fc22 	bl	8018d44 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	60fb      	str	r3, [r7, #12]
 800d504:	e00a      	b.n	800d51c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d50a:	683a      	ldr	r2, [r7, #0]
 800d50c:	429a      	cmp	r2, r3
 800d50e:	d102      	bne.n	800d516 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	2200      	movs	r2, #0
 800d514:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	68db      	ldr	r3, [r3, #12]
 800d51a:	60fb      	str	r3, [r7, #12]
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d1f1      	bne.n	800d506 <tcp_remove_listener+0x22>
    }
  }
}
 800d522:	bf00      	nop
 800d524:	bf00      	nop
 800d526:	3710      	adds	r7, #16
 800d528:	46bd      	mov	sp, r7
 800d52a:	bd80      	pop	{r7, pc}
 800d52c:	0801ba78 	.word	0x0801ba78
 800d530:	0801bb00 	.word	0x0801bb00
 800d534:	0801babc 	.word	0x0801babc

0800d538 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800d538:	b580      	push	{r7, lr}
 800d53a:	b084      	sub	sp, #16
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d106      	bne.n	800d554 <tcp_listen_closed+0x1c>
 800d546:	4b14      	ldr	r3, [pc, #80]	@ (800d598 <tcp_listen_closed+0x60>)
 800d548:	f240 1211 	movw	r2, #273	@ 0x111
 800d54c:	4913      	ldr	r1, [pc, #76]	@ (800d59c <tcp_listen_closed+0x64>)
 800d54e:	4814      	ldr	r0, [pc, #80]	@ (800d5a0 <tcp_listen_closed+0x68>)
 800d550:	f00b fbf8 	bl	8018d44 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	7d1b      	ldrb	r3, [r3, #20]
 800d558:	2b01      	cmp	r3, #1
 800d55a:	d006      	beq.n	800d56a <tcp_listen_closed+0x32>
 800d55c:	4b0e      	ldr	r3, [pc, #56]	@ (800d598 <tcp_listen_closed+0x60>)
 800d55e:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800d562:	4910      	ldr	r1, [pc, #64]	@ (800d5a4 <tcp_listen_closed+0x6c>)
 800d564:	480e      	ldr	r0, [pc, #56]	@ (800d5a0 <tcp_listen_closed+0x68>)
 800d566:	f00b fbed 	bl	8018d44 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d56a:	2301      	movs	r3, #1
 800d56c:	60fb      	str	r3, [r7, #12]
 800d56e:	e00b      	b.n	800d588 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800d570:	4a0d      	ldr	r2, [pc, #52]	@ (800d5a8 <tcp_listen_closed+0x70>)
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	6879      	ldr	r1, [r7, #4]
 800d57c:	4618      	mov	r0, r3
 800d57e:	f7ff ffb1 	bl	800d4e4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	3301      	adds	r3, #1
 800d586:	60fb      	str	r3, [r7, #12]
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	2b03      	cmp	r3, #3
 800d58c:	d9f0      	bls.n	800d570 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800d58e:	bf00      	nop
 800d590:	bf00      	nop
 800d592:	3710      	adds	r7, #16
 800d594:	46bd      	mov	sp, r7
 800d596:	bd80      	pop	{r7, pc}
 800d598:	0801ba78 	.word	0x0801ba78
 800d59c:	0801bb28 	.word	0x0801bb28
 800d5a0:	0801babc 	.word	0x0801babc
 800d5a4:	0801bb34 	.word	0x0801bb34
 800d5a8:	08027f74 	.word	0x08027f74

0800d5ac <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800d5ac:	b5b0      	push	{r4, r5, r7, lr}
 800d5ae:	b088      	sub	sp, #32
 800d5b0:	af04      	add	r7, sp, #16
 800d5b2:	6078      	str	r0, [r7, #4]
 800d5b4:	460b      	mov	r3, r1
 800d5b6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d106      	bne.n	800d5cc <tcp_close_shutdown+0x20>
 800d5be:	4b63      	ldr	r3, [pc, #396]	@ (800d74c <tcp_close_shutdown+0x1a0>)
 800d5c0:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800d5c4:	4962      	ldr	r1, [pc, #392]	@ (800d750 <tcp_close_shutdown+0x1a4>)
 800d5c6:	4863      	ldr	r0, [pc, #396]	@ (800d754 <tcp_close_shutdown+0x1a8>)
 800d5c8:	f00b fbbc 	bl	8018d44 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800d5cc:	78fb      	ldrb	r3, [r7, #3]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d066      	beq.n	800d6a0 <tcp_close_shutdown+0xf4>
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	7d1b      	ldrb	r3, [r3, #20]
 800d5d6:	2b04      	cmp	r3, #4
 800d5d8:	d003      	beq.n	800d5e2 <tcp_close_shutdown+0x36>
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	7d1b      	ldrb	r3, [r3, #20]
 800d5de:	2b07      	cmp	r3, #7
 800d5e0:	d15e      	bne.n	800d6a0 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d104      	bne.n	800d5f4 <tcp_close_shutdown+0x48>
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d5ee:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800d5f2:	d055      	beq.n	800d6a0 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	8b5b      	ldrh	r3, [r3, #26]
 800d5f8:	f003 0310 	and.w	r3, r3, #16
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d106      	bne.n	800d60e <tcp_close_shutdown+0x62>
 800d600:	4b52      	ldr	r3, [pc, #328]	@ (800d74c <tcp_close_shutdown+0x1a0>)
 800d602:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800d606:	4954      	ldr	r1, [pc, #336]	@ (800d758 <tcp_close_shutdown+0x1ac>)
 800d608:	4852      	ldr	r0, [pc, #328]	@ (800d754 <tcp_close_shutdown+0x1a8>)
 800d60a:	f00b fb9b 	bl	8018d44 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800d616:	687d      	ldr	r5, [r7, #4]
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	3304      	adds	r3, #4
 800d61c:	687a      	ldr	r2, [r7, #4]
 800d61e:	8ad2      	ldrh	r2, [r2, #22]
 800d620:	6879      	ldr	r1, [r7, #4]
 800d622:	8b09      	ldrh	r1, [r1, #24]
 800d624:	9102      	str	r1, [sp, #8]
 800d626:	9201      	str	r2, [sp, #4]
 800d628:	9300      	str	r3, [sp, #0]
 800d62a:	462b      	mov	r3, r5
 800d62c:	4622      	mov	r2, r4
 800d62e:	4601      	mov	r1, r0
 800d630:	6878      	ldr	r0, [r7, #4]
 800d632:	f005 feff 	bl	8013434 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800d636:	6878      	ldr	r0, [r7, #4]
 800d638:	f001 fce2 	bl	800f000 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800d63c:	4b47      	ldr	r3, [pc, #284]	@ (800d75c <tcp_close_shutdown+0x1b0>)
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	687a      	ldr	r2, [r7, #4]
 800d642:	429a      	cmp	r2, r3
 800d644:	d105      	bne.n	800d652 <tcp_close_shutdown+0xa6>
 800d646:	4b45      	ldr	r3, [pc, #276]	@ (800d75c <tcp_close_shutdown+0x1b0>)
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	68db      	ldr	r3, [r3, #12]
 800d64c:	4a43      	ldr	r2, [pc, #268]	@ (800d75c <tcp_close_shutdown+0x1b0>)
 800d64e:	6013      	str	r3, [r2, #0]
 800d650:	e013      	b.n	800d67a <tcp_close_shutdown+0xce>
 800d652:	4b42      	ldr	r3, [pc, #264]	@ (800d75c <tcp_close_shutdown+0x1b0>)
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	60fb      	str	r3, [r7, #12]
 800d658:	e00c      	b.n	800d674 <tcp_close_shutdown+0xc8>
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	68db      	ldr	r3, [r3, #12]
 800d65e:	687a      	ldr	r2, [r7, #4]
 800d660:	429a      	cmp	r2, r3
 800d662:	d104      	bne.n	800d66e <tcp_close_shutdown+0xc2>
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	68da      	ldr	r2, [r3, #12]
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	60da      	str	r2, [r3, #12]
 800d66c:	e005      	b.n	800d67a <tcp_close_shutdown+0xce>
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	68db      	ldr	r3, [r3, #12]
 800d672:	60fb      	str	r3, [r7, #12]
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d1ef      	bne.n	800d65a <tcp_close_shutdown+0xae>
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	2200      	movs	r2, #0
 800d67e:	60da      	str	r2, [r3, #12]
 800d680:	4b37      	ldr	r3, [pc, #220]	@ (800d760 <tcp_close_shutdown+0x1b4>)
 800d682:	2201      	movs	r2, #1
 800d684:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800d686:	4b37      	ldr	r3, [pc, #220]	@ (800d764 <tcp_close_shutdown+0x1b8>)
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	687a      	ldr	r2, [r7, #4]
 800d68c:	429a      	cmp	r2, r3
 800d68e:	d102      	bne.n	800d696 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800d690:	f004 f976 	bl	8011980 <tcp_trigger_input_pcb_close>
 800d694:	e002      	b.n	800d69c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800d696:	6878      	ldr	r0, [r7, #4]
 800d698:	f7ff fed6 	bl	800d448 <tcp_free>
      }
      return ERR_OK;
 800d69c:	2300      	movs	r3, #0
 800d69e:	e050      	b.n	800d742 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	7d1b      	ldrb	r3, [r3, #20]
 800d6a4:	2b02      	cmp	r3, #2
 800d6a6:	d03b      	beq.n	800d720 <tcp_close_shutdown+0x174>
 800d6a8:	2b02      	cmp	r3, #2
 800d6aa:	dc44      	bgt.n	800d736 <tcp_close_shutdown+0x18a>
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d002      	beq.n	800d6b6 <tcp_close_shutdown+0x10a>
 800d6b0:	2b01      	cmp	r3, #1
 800d6b2:	d02a      	beq.n	800d70a <tcp_close_shutdown+0x15e>
 800d6b4:	e03f      	b.n	800d736 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	8adb      	ldrh	r3, [r3, #22]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d021      	beq.n	800d702 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d6be:	4b2a      	ldr	r3, [pc, #168]	@ (800d768 <tcp_close_shutdown+0x1bc>)
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	687a      	ldr	r2, [r7, #4]
 800d6c4:	429a      	cmp	r2, r3
 800d6c6:	d105      	bne.n	800d6d4 <tcp_close_shutdown+0x128>
 800d6c8:	4b27      	ldr	r3, [pc, #156]	@ (800d768 <tcp_close_shutdown+0x1bc>)
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	68db      	ldr	r3, [r3, #12]
 800d6ce:	4a26      	ldr	r2, [pc, #152]	@ (800d768 <tcp_close_shutdown+0x1bc>)
 800d6d0:	6013      	str	r3, [r2, #0]
 800d6d2:	e013      	b.n	800d6fc <tcp_close_shutdown+0x150>
 800d6d4:	4b24      	ldr	r3, [pc, #144]	@ (800d768 <tcp_close_shutdown+0x1bc>)
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	60bb      	str	r3, [r7, #8]
 800d6da:	e00c      	b.n	800d6f6 <tcp_close_shutdown+0x14a>
 800d6dc:	68bb      	ldr	r3, [r7, #8]
 800d6de:	68db      	ldr	r3, [r3, #12]
 800d6e0:	687a      	ldr	r2, [r7, #4]
 800d6e2:	429a      	cmp	r2, r3
 800d6e4:	d104      	bne.n	800d6f0 <tcp_close_shutdown+0x144>
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	68da      	ldr	r2, [r3, #12]
 800d6ea:	68bb      	ldr	r3, [r7, #8]
 800d6ec:	60da      	str	r2, [r3, #12]
 800d6ee:	e005      	b.n	800d6fc <tcp_close_shutdown+0x150>
 800d6f0:	68bb      	ldr	r3, [r7, #8]
 800d6f2:	68db      	ldr	r3, [r3, #12]
 800d6f4:	60bb      	str	r3, [r7, #8]
 800d6f6:	68bb      	ldr	r3, [r7, #8]
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d1ef      	bne.n	800d6dc <tcp_close_shutdown+0x130>
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	2200      	movs	r2, #0
 800d700:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800d702:	6878      	ldr	r0, [r7, #4]
 800d704:	f7ff fea0 	bl	800d448 <tcp_free>
      break;
 800d708:	e01a      	b.n	800d740 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800d70a:	6878      	ldr	r0, [r7, #4]
 800d70c:	f7ff ff14 	bl	800d538 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800d710:	6879      	ldr	r1, [r7, #4]
 800d712:	4816      	ldr	r0, [pc, #88]	@ (800d76c <tcp_close_shutdown+0x1c0>)
 800d714:	f001 fcc4 	bl	800f0a0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800d718:	6878      	ldr	r0, [r7, #4]
 800d71a:	f7ff feb1 	bl	800d480 <tcp_free_listen>
      break;
 800d71e:	e00f      	b.n	800d740 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d720:	6879      	ldr	r1, [r7, #4]
 800d722:	480e      	ldr	r0, [pc, #56]	@ (800d75c <tcp_close_shutdown+0x1b0>)
 800d724:	f001 fcbc 	bl	800f0a0 <tcp_pcb_remove>
 800d728:	4b0d      	ldr	r3, [pc, #52]	@ (800d760 <tcp_close_shutdown+0x1b4>)
 800d72a:	2201      	movs	r2, #1
 800d72c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800d72e:	6878      	ldr	r0, [r7, #4]
 800d730:	f7ff fe8a 	bl	800d448 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800d734:	e004      	b.n	800d740 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800d736:	6878      	ldr	r0, [r7, #4]
 800d738:	f000 f81a 	bl	800d770 <tcp_close_shutdown_fin>
 800d73c:	4603      	mov	r3, r0
 800d73e:	e000      	b.n	800d742 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800d740:	2300      	movs	r3, #0
}
 800d742:	4618      	mov	r0, r3
 800d744:	3710      	adds	r7, #16
 800d746:	46bd      	mov	sp, r7
 800d748:	bdb0      	pop	{r4, r5, r7, pc}
 800d74a:	bf00      	nop
 800d74c:	0801ba78 	.word	0x0801ba78
 800d750:	0801bb4c 	.word	0x0801bb4c
 800d754:	0801babc 	.word	0x0801babc
 800d758:	0801bb6c 	.word	0x0801bb6c
 800d75c:	20010e80 	.word	0x20010e80
 800d760:	20010e88 	.word	0x20010e88
 800d764:	20010ec0 	.word	0x20010ec0
 800d768:	20010e78 	.word	0x20010e78
 800d76c:	20010e7c 	.word	0x20010e7c

0800d770 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800d770:	b580      	push	{r7, lr}
 800d772:	b084      	sub	sp, #16
 800d774:	af00      	add	r7, sp, #0
 800d776:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d106      	bne.n	800d78c <tcp_close_shutdown_fin+0x1c>
 800d77e:	4b2e      	ldr	r3, [pc, #184]	@ (800d838 <tcp_close_shutdown_fin+0xc8>)
 800d780:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800d784:	492d      	ldr	r1, [pc, #180]	@ (800d83c <tcp_close_shutdown_fin+0xcc>)
 800d786:	482e      	ldr	r0, [pc, #184]	@ (800d840 <tcp_close_shutdown_fin+0xd0>)
 800d788:	f00b fadc 	bl	8018d44 <iprintf>

  switch (pcb->state) {
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	7d1b      	ldrb	r3, [r3, #20]
 800d790:	2b07      	cmp	r3, #7
 800d792:	d020      	beq.n	800d7d6 <tcp_close_shutdown_fin+0x66>
 800d794:	2b07      	cmp	r3, #7
 800d796:	dc2b      	bgt.n	800d7f0 <tcp_close_shutdown_fin+0x80>
 800d798:	2b03      	cmp	r3, #3
 800d79a:	d002      	beq.n	800d7a2 <tcp_close_shutdown_fin+0x32>
 800d79c:	2b04      	cmp	r3, #4
 800d79e:	d00d      	beq.n	800d7bc <tcp_close_shutdown_fin+0x4c>
 800d7a0:	e026      	b.n	800d7f0 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800d7a2:	6878      	ldr	r0, [r7, #4]
 800d7a4:	f004 ff54 	bl	8012650 <tcp_send_fin>
 800d7a8:	4603      	mov	r3, r0
 800d7aa:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d7ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d11f      	bne.n	800d7f4 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	2205      	movs	r2, #5
 800d7b8:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d7ba:	e01b      	b.n	800d7f4 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800d7bc:	6878      	ldr	r0, [r7, #4]
 800d7be:	f004 ff47 	bl	8012650 <tcp_send_fin>
 800d7c2:	4603      	mov	r3, r0
 800d7c4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d7c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d114      	bne.n	800d7f8 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	2205      	movs	r2, #5
 800d7d2:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d7d4:	e010      	b.n	800d7f8 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800d7d6:	6878      	ldr	r0, [r7, #4]
 800d7d8:	f004 ff3a 	bl	8012650 <tcp_send_fin>
 800d7dc:	4603      	mov	r3, r0
 800d7de:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d7e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d109      	bne.n	800d7fc <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	2209      	movs	r2, #9
 800d7ec:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d7ee:	e005      	b.n	800d7fc <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	e01c      	b.n	800d82e <tcp_close_shutdown_fin+0xbe>
      break;
 800d7f4:	bf00      	nop
 800d7f6:	e002      	b.n	800d7fe <tcp_close_shutdown_fin+0x8e>
      break;
 800d7f8:	bf00      	nop
 800d7fa:	e000      	b.n	800d7fe <tcp_close_shutdown_fin+0x8e>
      break;
 800d7fc:	bf00      	nop
  }

  if (err == ERR_OK) {
 800d7fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d802:	2b00      	cmp	r3, #0
 800d804:	d103      	bne.n	800d80e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800d806:	6878      	ldr	r0, [r7, #4]
 800d808:	f005 f860 	bl	80128cc <tcp_output>
 800d80c:	e00d      	b.n	800d82a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800d80e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d812:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d816:	d108      	bne.n	800d82a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	8b5b      	ldrh	r3, [r3, #26]
 800d81c:	f043 0308 	orr.w	r3, r3, #8
 800d820:	b29a      	uxth	r2, r3
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800d826:	2300      	movs	r3, #0
 800d828:	e001      	b.n	800d82e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800d82a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d82e:	4618      	mov	r0, r3
 800d830:	3710      	adds	r7, #16
 800d832:	46bd      	mov	sp, r7
 800d834:	bd80      	pop	{r7, pc}
 800d836:	bf00      	nop
 800d838:	0801ba78 	.word	0x0801ba78
 800d83c:	0801bb28 	.word	0x0801bb28
 800d840:	0801babc 	.word	0x0801babc

0800d844 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800d844:	b580      	push	{r7, lr}
 800d846:	b082      	sub	sp, #8
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d109      	bne.n	800d866 <tcp_close+0x22>
 800d852:	4b0f      	ldr	r3, [pc, #60]	@ (800d890 <tcp_close+0x4c>)
 800d854:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800d858:	490e      	ldr	r1, [pc, #56]	@ (800d894 <tcp_close+0x50>)
 800d85a:	480f      	ldr	r0, [pc, #60]	@ (800d898 <tcp_close+0x54>)
 800d85c:	f00b fa72 	bl	8018d44 <iprintf>
 800d860:	f06f 030f 	mvn.w	r3, #15
 800d864:	e00f      	b.n	800d886 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	7d1b      	ldrb	r3, [r3, #20]
 800d86a:	2b01      	cmp	r3, #1
 800d86c:	d006      	beq.n	800d87c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	8b5b      	ldrh	r3, [r3, #26]
 800d872:	f043 0310 	orr.w	r3, r3, #16
 800d876:	b29a      	uxth	r2, r3
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800d87c:	2101      	movs	r1, #1
 800d87e:	6878      	ldr	r0, [r7, #4]
 800d880:	f7ff fe94 	bl	800d5ac <tcp_close_shutdown>
 800d884:	4603      	mov	r3, r0
}
 800d886:	4618      	mov	r0, r3
 800d888:	3708      	adds	r7, #8
 800d88a:	46bd      	mov	sp, r7
 800d88c:	bd80      	pop	{r7, pc}
 800d88e:	bf00      	nop
 800d890:	0801ba78 	.word	0x0801ba78
 800d894:	0801bb88 	.word	0x0801bb88
 800d898:	0801babc 	.word	0x0801babc

0800d89c <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b084      	sub	sp, #16
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	60f8      	str	r0, [r7, #12]
 800d8a4:	60b9      	str	r1, [r7, #8]
 800d8a6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d109      	bne.n	800d8c2 <tcp_shutdown+0x26>
 800d8ae:	4b26      	ldr	r3, [pc, #152]	@ (800d948 <tcp_shutdown+0xac>)
 800d8b0:	f240 2207 	movw	r2, #519	@ 0x207
 800d8b4:	4925      	ldr	r1, [pc, #148]	@ (800d94c <tcp_shutdown+0xb0>)
 800d8b6:	4826      	ldr	r0, [pc, #152]	@ (800d950 <tcp_shutdown+0xb4>)
 800d8b8:	f00b fa44 	bl	8018d44 <iprintf>
 800d8bc:	f06f 030f 	mvn.w	r3, #15
 800d8c0:	e03d      	b.n	800d93e <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	7d1b      	ldrb	r3, [r3, #20]
 800d8c6:	2b01      	cmp	r3, #1
 800d8c8:	d102      	bne.n	800d8d0 <tcp_shutdown+0x34>
    return ERR_CONN;
 800d8ca:	f06f 030a 	mvn.w	r3, #10
 800d8ce:	e036      	b.n	800d93e <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800d8d0:	68bb      	ldr	r3, [r7, #8]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d01b      	beq.n	800d90e <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	8b5b      	ldrh	r3, [r3, #26]
 800d8da:	f043 0310 	orr.w	r3, r3, #16
 800d8de:	b29a      	uxth	r2, r3
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d005      	beq.n	800d8f6 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800d8ea:	2101      	movs	r1, #1
 800d8ec:	68f8      	ldr	r0, [r7, #12]
 800d8ee:	f7ff fe5d 	bl	800d5ac <tcp_close_shutdown>
 800d8f2:	4603      	mov	r3, r0
 800d8f4:	e023      	b.n	800d93e <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d007      	beq.n	800d90e <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d902:	4618      	mov	r0, r3
 800d904:	f7ff fae4 	bl	800ced0 <pbuf_free>
      pcb->refused_data = NULL;
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	2200      	movs	r2, #0
 800d90c:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }
  if (shut_tx) {
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d013      	beq.n	800d93c <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	7d1b      	ldrb	r3, [r3, #20]
 800d918:	2b04      	cmp	r3, #4
 800d91a:	dc02      	bgt.n	800d922 <tcp_shutdown+0x86>
 800d91c:	2b03      	cmp	r3, #3
 800d91e:	da02      	bge.n	800d926 <tcp_shutdown+0x8a>
 800d920:	e009      	b.n	800d936 <tcp_shutdown+0x9a>
 800d922:	2b07      	cmp	r3, #7
 800d924:	d107      	bne.n	800d936 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800d926:	68bb      	ldr	r3, [r7, #8]
 800d928:	b2db      	uxtb	r3, r3
 800d92a:	4619      	mov	r1, r3
 800d92c:	68f8      	ldr	r0, [r7, #12]
 800d92e:	f7ff fe3d 	bl	800d5ac <tcp_close_shutdown>
 800d932:	4603      	mov	r3, r0
 800d934:	e003      	b.n	800d93e <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800d936:	f06f 030a 	mvn.w	r3, #10
 800d93a:	e000      	b.n	800d93e <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800d93c:	2300      	movs	r3, #0
}
 800d93e:	4618      	mov	r0, r3
 800d940:	3710      	adds	r7, #16
 800d942:	46bd      	mov	sp, r7
 800d944:	bd80      	pop	{r7, pc}
 800d946:	bf00      	nop
 800d948:	0801ba78 	.word	0x0801ba78
 800d94c:	0801bba0 	.word	0x0801bba0
 800d950:	0801babc 	.word	0x0801babc

0800d954 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800d954:	b580      	push	{r7, lr}
 800d956:	b08e      	sub	sp, #56	@ 0x38
 800d958:	af04      	add	r7, sp, #16
 800d95a:	6078      	str	r0, [r7, #4]
 800d95c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d107      	bne.n	800d974 <tcp_abandon+0x20>
 800d964:	4b52      	ldr	r3, [pc, #328]	@ (800dab0 <tcp_abandon+0x15c>)
 800d966:	f240 223d 	movw	r2, #573	@ 0x23d
 800d96a:	4952      	ldr	r1, [pc, #328]	@ (800dab4 <tcp_abandon+0x160>)
 800d96c:	4852      	ldr	r0, [pc, #328]	@ (800dab8 <tcp_abandon+0x164>)
 800d96e:	f00b f9e9 	bl	8018d44 <iprintf>
 800d972:	e099      	b.n	800daa8 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	7d1b      	ldrb	r3, [r3, #20]
 800d978:	2b01      	cmp	r3, #1
 800d97a:	d106      	bne.n	800d98a <tcp_abandon+0x36>
 800d97c:	4b4c      	ldr	r3, [pc, #304]	@ (800dab0 <tcp_abandon+0x15c>)
 800d97e:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800d982:	494e      	ldr	r1, [pc, #312]	@ (800dabc <tcp_abandon+0x168>)
 800d984:	484c      	ldr	r0, [pc, #304]	@ (800dab8 <tcp_abandon+0x164>)
 800d986:	f00b f9dd 	bl	8018d44 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	7d1b      	ldrb	r3, [r3, #20]
 800d98e:	2b0a      	cmp	r3, #10
 800d990:	d107      	bne.n	800d9a2 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800d992:	6879      	ldr	r1, [r7, #4]
 800d994:	484a      	ldr	r0, [pc, #296]	@ (800dac0 <tcp_abandon+0x16c>)
 800d996:	f001 fb83 	bl	800f0a0 <tcp_pcb_remove>
    tcp_free(pcb);
 800d99a:	6878      	ldr	r0, [r7, #4]
 800d99c:	f7ff fd54 	bl	800d448 <tcp_free>
 800d9a0:	e082      	b.n	800daa8 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d9ae:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d9b4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d9bc:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	691b      	ldr	r3, [r3, #16]
 800d9c2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	7d1b      	ldrb	r3, [r3, #20]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d126      	bne.n	800da1a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	8adb      	ldrh	r3, [r3, #22]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d02e      	beq.n	800da32 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d9d4:	4b3b      	ldr	r3, [pc, #236]	@ (800dac4 <tcp_abandon+0x170>)
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	687a      	ldr	r2, [r7, #4]
 800d9da:	429a      	cmp	r2, r3
 800d9dc:	d105      	bne.n	800d9ea <tcp_abandon+0x96>
 800d9de:	4b39      	ldr	r3, [pc, #228]	@ (800dac4 <tcp_abandon+0x170>)
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	68db      	ldr	r3, [r3, #12]
 800d9e4:	4a37      	ldr	r2, [pc, #220]	@ (800dac4 <tcp_abandon+0x170>)
 800d9e6:	6013      	str	r3, [r2, #0]
 800d9e8:	e013      	b.n	800da12 <tcp_abandon+0xbe>
 800d9ea:	4b36      	ldr	r3, [pc, #216]	@ (800dac4 <tcp_abandon+0x170>)
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	61fb      	str	r3, [r7, #28]
 800d9f0:	e00c      	b.n	800da0c <tcp_abandon+0xb8>
 800d9f2:	69fb      	ldr	r3, [r7, #28]
 800d9f4:	68db      	ldr	r3, [r3, #12]
 800d9f6:	687a      	ldr	r2, [r7, #4]
 800d9f8:	429a      	cmp	r2, r3
 800d9fa:	d104      	bne.n	800da06 <tcp_abandon+0xb2>
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	68da      	ldr	r2, [r3, #12]
 800da00:	69fb      	ldr	r3, [r7, #28]
 800da02:	60da      	str	r2, [r3, #12]
 800da04:	e005      	b.n	800da12 <tcp_abandon+0xbe>
 800da06:	69fb      	ldr	r3, [r7, #28]
 800da08:	68db      	ldr	r3, [r3, #12]
 800da0a:	61fb      	str	r3, [r7, #28]
 800da0c:	69fb      	ldr	r3, [r7, #28]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d1ef      	bne.n	800d9f2 <tcp_abandon+0x9e>
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	2200      	movs	r2, #0
 800da16:	60da      	str	r2, [r3, #12]
 800da18:	e00b      	b.n	800da32 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800da1a:	683b      	ldr	r3, [r7, #0]
 800da1c:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	8adb      	ldrh	r3, [r3, #22]
 800da22:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800da24:	6879      	ldr	r1, [r7, #4]
 800da26:	4828      	ldr	r0, [pc, #160]	@ (800dac8 <tcp_abandon+0x174>)
 800da28:	f001 fb3a 	bl	800f0a0 <tcp_pcb_remove>
 800da2c:	4b27      	ldr	r3, [pc, #156]	@ (800dacc <tcp_abandon+0x178>)
 800da2e:	2201      	movs	r2, #1
 800da30:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800da36:	2b00      	cmp	r3, #0
 800da38:	d004      	beq.n	800da44 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800da3e:	4618      	mov	r0, r3
 800da40:	f000 fff0 	bl	800ea24 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d004      	beq.n	800da56 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800da50:	4618      	mov	r0, r3
 800da52:	f000 ffe7 	bl	800ea24 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d004      	beq.n	800da68 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800da62:	4618      	mov	r0, r3
 800da64:	f000 ffde 	bl	800ea24 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800da68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d00e      	beq.n	800da8c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800da6e:	6879      	ldr	r1, [r7, #4]
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	3304      	adds	r3, #4
 800da74:	687a      	ldr	r2, [r7, #4]
 800da76:	8b12      	ldrh	r2, [r2, #24]
 800da78:	9202      	str	r2, [sp, #8]
 800da7a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800da7c:	9201      	str	r2, [sp, #4]
 800da7e:	9300      	str	r3, [sp, #0]
 800da80:	460b      	mov	r3, r1
 800da82:	697a      	ldr	r2, [r7, #20]
 800da84:	69b9      	ldr	r1, [r7, #24]
 800da86:	6878      	ldr	r0, [r7, #4]
 800da88:	f005 fcd4 	bl	8013434 <tcp_rst>
    }
    last_state = pcb->state;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	7d1b      	ldrb	r3, [r3, #20]
 800da90:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800da92:	6878      	ldr	r0, [r7, #4]
 800da94:	f7ff fcd8 	bl	800d448 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800da98:	693b      	ldr	r3, [r7, #16]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d004      	beq.n	800daa8 <tcp_abandon+0x154>
 800da9e:	693b      	ldr	r3, [r7, #16]
 800daa0:	f06f 010c 	mvn.w	r1, #12
 800daa4:	68f8      	ldr	r0, [r7, #12]
 800daa6:	4798      	blx	r3
  }
}
 800daa8:	3728      	adds	r7, #40	@ 0x28
 800daaa:	46bd      	mov	sp, r7
 800daac:	bd80      	pop	{r7, pc}
 800daae:	bf00      	nop
 800dab0:	0801ba78 	.word	0x0801ba78
 800dab4:	0801bbbc 	.word	0x0801bbbc
 800dab8:	0801babc 	.word	0x0801babc
 800dabc:	0801bbd8 	.word	0x0801bbd8
 800dac0:	20010e84 	.word	0x20010e84
 800dac4:	20010e78 	.word	0x20010e78
 800dac8:	20010e80 	.word	0x20010e80
 800dacc:	20010e88 	.word	0x20010e88

0800dad0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b082      	sub	sp, #8
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800dad8:	2101      	movs	r1, #1
 800dada:	6878      	ldr	r0, [r7, #4]
 800dadc:	f7ff ff3a 	bl	800d954 <tcp_abandon>
}
 800dae0:	bf00      	nop
 800dae2:	3708      	adds	r7, #8
 800dae4:	46bd      	mov	sp, r7
 800dae6:	bd80      	pop	{r7, pc}

0800dae8 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800dae8:	b580      	push	{r7, lr}
 800daea:	b088      	sub	sp, #32
 800daec:	af00      	add	r7, sp, #0
 800daee:	60f8      	str	r0, [r7, #12]
 800daf0:	60b9      	str	r1, [r7, #8]
 800daf2:	4613      	mov	r3, r2
 800daf4:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800daf6:	2304      	movs	r3, #4
 800daf8:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800dafa:	68bb      	ldr	r3, [r7, #8]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d101      	bne.n	800db04 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800db00:	4b3e      	ldr	r3, [pc, #248]	@ (800dbfc <tcp_bind+0x114>)
 800db02:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d109      	bne.n	800db1e <tcp_bind+0x36>
 800db0a:	4b3d      	ldr	r3, [pc, #244]	@ (800dc00 <tcp_bind+0x118>)
 800db0c:	f240 22a9 	movw	r2, #681	@ 0x2a9
 800db10:	493c      	ldr	r1, [pc, #240]	@ (800dc04 <tcp_bind+0x11c>)
 800db12:	483d      	ldr	r0, [pc, #244]	@ (800dc08 <tcp_bind+0x120>)
 800db14:	f00b f916 	bl	8018d44 <iprintf>
 800db18:	f06f 030f 	mvn.w	r3, #15
 800db1c:	e06a      	b.n	800dbf4 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	7d1b      	ldrb	r3, [r3, #20]
 800db22:	2b00      	cmp	r3, #0
 800db24:	d009      	beq.n	800db3a <tcp_bind+0x52>
 800db26:	4b36      	ldr	r3, [pc, #216]	@ (800dc00 <tcp_bind+0x118>)
 800db28:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800db2c:	4937      	ldr	r1, [pc, #220]	@ (800dc0c <tcp_bind+0x124>)
 800db2e:	4836      	ldr	r0, [pc, #216]	@ (800dc08 <tcp_bind+0x120>)
 800db30:	f00b f908 	bl	8018d44 <iprintf>
 800db34:	f06f 0305 	mvn.w	r3, #5
 800db38:	e05c      	b.n	800dbf4 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800db3a:	88fb      	ldrh	r3, [r7, #6]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d109      	bne.n	800db54 <tcp_bind+0x6c>
    port = tcp_new_port();
 800db40:	f000 f9f0 	bl	800df24 <tcp_new_port>
 800db44:	4603      	mov	r3, r0
 800db46:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800db48:	88fb      	ldrh	r3, [r7, #6]
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d135      	bne.n	800dbba <tcp_bind+0xd2>
      return ERR_BUF;
 800db4e:	f06f 0301 	mvn.w	r3, #1
 800db52:	e04f      	b.n	800dbf4 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800db54:	2300      	movs	r3, #0
 800db56:	61fb      	str	r3, [r7, #28]
 800db58:	e02b      	b.n	800dbb2 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800db5a:	4a2d      	ldr	r2, [pc, #180]	@ (800dc10 <tcp_bind+0x128>)
 800db5c:	69fb      	ldr	r3, [r7, #28]
 800db5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	61bb      	str	r3, [r7, #24]
 800db66:	e01e      	b.n	800dba6 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800db68:	69bb      	ldr	r3, [r7, #24]
 800db6a:	8adb      	ldrh	r3, [r3, #22]
 800db6c:	88fa      	ldrh	r2, [r7, #6]
 800db6e:	429a      	cmp	r2, r3
 800db70:	d116      	bne.n	800dba0 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800db72:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800db74:	2b00      	cmp	r3, #0
 800db76:	d010      	beq.n	800db9a <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800db78:	69bb      	ldr	r3, [r7, #24]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d00c      	beq.n	800db9a <tcp_bind+0xb2>
 800db80:	68bb      	ldr	r3, [r7, #8]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d009      	beq.n	800db9a <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800db86:	68bb      	ldr	r3, [r7, #8]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d005      	beq.n	800db9a <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800db8e:	69bb      	ldr	r3, [r7, #24]
 800db90:	681a      	ldr	r2, [r3, #0]
 800db92:	68bb      	ldr	r3, [r7, #8]
 800db94:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800db96:	429a      	cmp	r2, r3
 800db98:	d102      	bne.n	800dba0 <tcp_bind+0xb8>
              return ERR_USE;
 800db9a:	f06f 0307 	mvn.w	r3, #7
 800db9e:	e029      	b.n	800dbf4 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800dba0:	69bb      	ldr	r3, [r7, #24]
 800dba2:	68db      	ldr	r3, [r3, #12]
 800dba4:	61bb      	str	r3, [r7, #24]
 800dba6:	69bb      	ldr	r3, [r7, #24]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d1dd      	bne.n	800db68 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800dbac:	69fb      	ldr	r3, [r7, #28]
 800dbae:	3301      	adds	r3, #1
 800dbb0:	61fb      	str	r3, [r7, #28]
 800dbb2:	69fa      	ldr	r2, [r7, #28]
 800dbb4:	697b      	ldr	r3, [r7, #20]
 800dbb6:	429a      	cmp	r2, r3
 800dbb8:	dbcf      	blt.n	800db5a <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800dbba:	68bb      	ldr	r3, [r7, #8]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d00c      	beq.n	800dbda <tcp_bind+0xf2>
 800dbc0:	68bb      	ldr	r3, [r7, #8]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d008      	beq.n	800dbda <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800dbc8:	68bb      	ldr	r3, [r7, #8]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d002      	beq.n	800dbd4 <tcp_bind+0xec>
 800dbce:	68bb      	ldr	r3, [r7, #8]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	e000      	b.n	800dbd6 <tcp_bind+0xee>
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	68fa      	ldr	r2, [r7, #12]
 800dbd8:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	88fa      	ldrh	r2, [r7, #6]
 800dbde:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800dbe0:	4b0c      	ldr	r3, [pc, #48]	@ (800dc14 <tcp_bind+0x12c>)
 800dbe2:	681a      	ldr	r2, [r3, #0]
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	60da      	str	r2, [r3, #12]
 800dbe8:	4a0a      	ldr	r2, [pc, #40]	@ (800dc14 <tcp_bind+0x12c>)
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	6013      	str	r3, [r2, #0]
 800dbee:	f005 fde3 	bl	80137b8 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800dbf2:	2300      	movs	r3, #0
}
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	3720      	adds	r7, #32
 800dbf8:	46bd      	mov	sp, r7
 800dbfa:	bd80      	pop	{r7, pc}
 800dbfc:	08027fac 	.word	0x08027fac
 800dc00:	0801ba78 	.word	0x0801ba78
 800dc04:	0801bc0c 	.word	0x0801bc0c
 800dc08:	0801babc 	.word	0x0801babc
 800dc0c:	0801bc24 	.word	0x0801bc24
 800dc10:	08027f74 	.word	0x08027f74
 800dc14:	20010e78 	.word	0x20010e78

0800dc18 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	b084      	sub	sp, #16
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	60f8      	str	r0, [r7, #12]
 800dc20:	60b9      	str	r1, [r7, #8]
 800dc22:	4613      	mov	r3, r2
 800dc24:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800dc26:	68bb      	ldr	r3, [r7, #8]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d106      	bne.n	800dc3a <tcp_accept_null+0x22>
 800dc2c:	4b07      	ldr	r3, [pc, #28]	@ (800dc4c <tcp_accept_null+0x34>)
 800dc2e:	f240 320f 	movw	r2, #783	@ 0x30f
 800dc32:	4907      	ldr	r1, [pc, #28]	@ (800dc50 <tcp_accept_null+0x38>)
 800dc34:	4807      	ldr	r0, [pc, #28]	@ (800dc54 <tcp_accept_null+0x3c>)
 800dc36:	f00b f885 	bl	8018d44 <iprintf>

  tcp_abort(pcb);
 800dc3a:	68b8      	ldr	r0, [r7, #8]
 800dc3c:	f7ff ff48 	bl	800dad0 <tcp_abort>

  return ERR_ABRT;
 800dc40:	f06f 030c 	mvn.w	r3, #12
}
 800dc44:	4618      	mov	r0, r3
 800dc46:	3710      	adds	r7, #16
 800dc48:	46bd      	mov	sp, r7
 800dc4a:	bd80      	pop	{r7, pc}
 800dc4c:	0801ba78 	.word	0x0801ba78
 800dc50:	0801bc4c 	.word	0x0801bc4c
 800dc54:	0801babc 	.word	0x0801babc

0800dc58 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b082      	sub	sp, #8
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	6078      	str	r0, [r7, #4]
 800dc60:	460b      	mov	r3, r1
 800dc62:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800dc64:	78fb      	ldrb	r3, [r7, #3]
 800dc66:	2200      	movs	r2, #0
 800dc68:	4619      	mov	r1, r3
 800dc6a:	6878      	ldr	r0, [r7, #4]
 800dc6c:	f000 f806 	bl	800dc7c <tcp_listen_with_backlog_and_err>
 800dc70:	4603      	mov	r3, r0
}
 800dc72:	4618      	mov	r0, r3
 800dc74:	3708      	adds	r7, #8
 800dc76:	46bd      	mov	sp, r7
 800dc78:	bd80      	pop	{r7, pc}
	...

0800dc7c <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	b088      	sub	sp, #32
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	60f8      	str	r0, [r7, #12]
 800dc84:	460b      	mov	r3, r1
 800dc86:	607a      	str	r2, [r7, #4]
 800dc88:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d109      	bne.n	800dca8 <tcp_listen_with_backlog_and_err+0x2c>
 800dc94:	4b47      	ldr	r3, [pc, #284]	@ (800ddb4 <tcp_listen_with_backlog_and_err+0x138>)
 800dc96:	f240 3259 	movw	r2, #857	@ 0x359
 800dc9a:	4947      	ldr	r1, [pc, #284]	@ (800ddb8 <tcp_listen_with_backlog_and_err+0x13c>)
 800dc9c:	4847      	ldr	r0, [pc, #284]	@ (800ddbc <tcp_listen_with_backlog_and_err+0x140>)
 800dc9e:	f00b f851 	bl	8018d44 <iprintf>
 800dca2:	23f0      	movs	r3, #240	@ 0xf0
 800dca4:	76fb      	strb	r3, [r7, #27]
 800dca6:	e079      	b.n	800dd9c <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	7d1b      	ldrb	r3, [r3, #20]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d009      	beq.n	800dcc4 <tcp_listen_with_backlog_and_err+0x48>
 800dcb0:	4b40      	ldr	r3, [pc, #256]	@ (800ddb4 <tcp_listen_with_backlog_and_err+0x138>)
 800dcb2:	f240 325a 	movw	r2, #858	@ 0x35a
 800dcb6:	4942      	ldr	r1, [pc, #264]	@ (800ddc0 <tcp_listen_with_backlog_and_err+0x144>)
 800dcb8:	4840      	ldr	r0, [pc, #256]	@ (800ddbc <tcp_listen_with_backlog_and_err+0x140>)
 800dcba:	f00b f843 	bl	8018d44 <iprintf>
 800dcbe:	23f1      	movs	r3, #241	@ 0xf1
 800dcc0:	76fb      	strb	r3, [r7, #27]
 800dcc2:	e06b      	b.n	800dd9c <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	7d1b      	ldrb	r3, [r3, #20]
 800dcc8:	2b01      	cmp	r3, #1
 800dcca:	d104      	bne.n	800dcd6 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800dcd0:	23f7      	movs	r3, #247	@ 0xf7
 800dcd2:	76fb      	strb	r3, [r7, #27]
    goto done;
 800dcd4:	e062      	b.n	800dd9c <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800dcd6:	2002      	movs	r0, #2
 800dcd8:	f7fe f9d4 	bl	800c084 <memp_malloc>
 800dcdc:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800dcde:	69fb      	ldr	r3, [r7, #28]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d102      	bne.n	800dcea <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800dce4:	23ff      	movs	r3, #255	@ 0xff
 800dce6:	76fb      	strb	r3, [r7, #27]
    goto done;
 800dce8:	e058      	b.n	800dd9c <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	691a      	ldr	r2, [r3, #16]
 800dcee:	69fb      	ldr	r3, [r7, #28]
 800dcf0:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	8ada      	ldrh	r2, [r3, #22]
 800dcf6:	69fb      	ldr	r3, [r7, #28]
 800dcf8:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800dcfa:	69fb      	ldr	r3, [r7, #28]
 800dcfc:	2201      	movs	r2, #1
 800dcfe:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	7d5a      	ldrb	r2, [r3, #21]
 800dd04:	69fb      	ldr	r3, [r7, #28]
 800dd06:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	7a5a      	ldrb	r2, [r3, #9]
 800dd0c:	69fb      	ldr	r3, [r7, #28]
 800dd0e:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800dd10:	69fb      	ldr	r3, [r7, #28]
 800dd12:	2200      	movs	r2, #0
 800dd14:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	7ada      	ldrb	r2, [r3, #11]
 800dd1a:	69fb      	ldr	r3, [r7, #28]
 800dd1c:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	7a9a      	ldrb	r2, [r3, #10]
 800dd22:	69fb      	ldr	r3, [r7, #28]
 800dd24:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	681a      	ldr	r2, [r3, #0]
 800dd2a:	69fb      	ldr	r3, [r7, #28]
 800dd2c:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	8adb      	ldrh	r3, [r3, #22]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d021      	beq.n	800dd7a <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800dd36:	4b23      	ldr	r3, [pc, #140]	@ (800ddc4 <tcp_listen_with_backlog_and_err+0x148>)
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	68fa      	ldr	r2, [r7, #12]
 800dd3c:	429a      	cmp	r2, r3
 800dd3e:	d105      	bne.n	800dd4c <tcp_listen_with_backlog_and_err+0xd0>
 800dd40:	4b20      	ldr	r3, [pc, #128]	@ (800ddc4 <tcp_listen_with_backlog_and_err+0x148>)
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	68db      	ldr	r3, [r3, #12]
 800dd46:	4a1f      	ldr	r2, [pc, #124]	@ (800ddc4 <tcp_listen_with_backlog_and_err+0x148>)
 800dd48:	6013      	str	r3, [r2, #0]
 800dd4a:	e013      	b.n	800dd74 <tcp_listen_with_backlog_and_err+0xf8>
 800dd4c:	4b1d      	ldr	r3, [pc, #116]	@ (800ddc4 <tcp_listen_with_backlog_and_err+0x148>)
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	617b      	str	r3, [r7, #20]
 800dd52:	e00c      	b.n	800dd6e <tcp_listen_with_backlog_and_err+0xf2>
 800dd54:	697b      	ldr	r3, [r7, #20]
 800dd56:	68db      	ldr	r3, [r3, #12]
 800dd58:	68fa      	ldr	r2, [r7, #12]
 800dd5a:	429a      	cmp	r2, r3
 800dd5c:	d104      	bne.n	800dd68 <tcp_listen_with_backlog_and_err+0xec>
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	68da      	ldr	r2, [r3, #12]
 800dd62:	697b      	ldr	r3, [r7, #20]
 800dd64:	60da      	str	r2, [r3, #12]
 800dd66:	e005      	b.n	800dd74 <tcp_listen_with_backlog_and_err+0xf8>
 800dd68:	697b      	ldr	r3, [r7, #20]
 800dd6a:	68db      	ldr	r3, [r3, #12]
 800dd6c:	617b      	str	r3, [r7, #20]
 800dd6e:	697b      	ldr	r3, [r7, #20]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d1ef      	bne.n	800dd54 <tcp_listen_with_backlog_and_err+0xd8>
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	2200      	movs	r2, #0
 800dd78:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800dd7a:	68f8      	ldr	r0, [r7, #12]
 800dd7c:	f7ff fb64 	bl	800d448 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800dd80:	69fb      	ldr	r3, [r7, #28]
 800dd82:	4a11      	ldr	r2, [pc, #68]	@ (800ddc8 <tcp_listen_with_backlog_and_err+0x14c>)
 800dd84:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800dd86:	4b11      	ldr	r3, [pc, #68]	@ (800ddcc <tcp_listen_with_backlog_and_err+0x150>)
 800dd88:	681a      	ldr	r2, [r3, #0]
 800dd8a:	69fb      	ldr	r3, [r7, #28]
 800dd8c:	60da      	str	r2, [r3, #12]
 800dd8e:	4a0f      	ldr	r2, [pc, #60]	@ (800ddcc <tcp_listen_with_backlog_and_err+0x150>)
 800dd90:	69fb      	ldr	r3, [r7, #28]
 800dd92:	6013      	str	r3, [r2, #0]
 800dd94:	f005 fd10 	bl	80137b8 <tcp_timer_needed>
  res = ERR_OK;
 800dd98:	2300      	movs	r3, #0
 800dd9a:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d002      	beq.n	800dda8 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	7efa      	ldrb	r2, [r7, #27]
 800dda6:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800dda8:	69fb      	ldr	r3, [r7, #28]
}
 800ddaa:	4618      	mov	r0, r3
 800ddac:	3720      	adds	r7, #32
 800ddae:	46bd      	mov	sp, r7
 800ddb0:	bd80      	pop	{r7, pc}
 800ddb2:	bf00      	nop
 800ddb4:	0801ba78 	.word	0x0801ba78
 800ddb8:	0801bc6c 	.word	0x0801bc6c
 800ddbc:	0801babc 	.word	0x0801babc
 800ddc0:	0801bc9c 	.word	0x0801bc9c
 800ddc4:	20010e78 	.word	0x20010e78
 800ddc8:	0800dc19 	.word	0x0800dc19
 800ddcc:	20010e7c 	.word	0x20010e7c

0800ddd0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800ddd0:	b580      	push	{r7, lr}
 800ddd2:	b084      	sub	sp, #16
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d106      	bne.n	800ddec <tcp_update_rcv_ann_wnd+0x1c>
 800ddde:	4b25      	ldr	r3, [pc, #148]	@ (800de74 <tcp_update_rcv_ann_wnd+0xa4>)
 800dde0:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800dde4:	4924      	ldr	r1, [pc, #144]	@ (800de78 <tcp_update_rcv_ann_wnd+0xa8>)
 800dde6:	4825      	ldr	r0, [pc, #148]	@ (800de7c <tcp_update_rcv_ann_wnd+0xac>)
 800dde8:	f00a ffac 	bl	8018d44 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ddf0:	687a      	ldr	r2, [r7, #4]
 800ddf2:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800ddf4:	4413      	add	r3, r2
 800ddf6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ddfc:	687a      	ldr	r2, [r7, #4]
 800ddfe:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800de00:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800de04:	bf28      	it	cs
 800de06:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800de0a:	b292      	uxth	r2, r2
 800de0c:	4413      	add	r3, r2
 800de0e:	68fa      	ldr	r2, [r7, #12]
 800de10:	1ad3      	subs	r3, r2, r3
 800de12:	2b00      	cmp	r3, #0
 800de14:	db08      	blt.n	800de28 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de22:	68fa      	ldr	r2, [r7, #12]
 800de24:	1ad3      	subs	r3, r2, r3
 800de26:	e020      	b.n	800de6a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de30:	1ad3      	subs	r3, r2, r3
 800de32:	2b00      	cmp	r3, #0
 800de34:	dd03      	ble.n	800de3e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	2200      	movs	r2, #0
 800de3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800de3c:	e014      	b.n	800de68 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de46:	1ad3      	subs	r3, r2, r3
 800de48:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800de4a:	68bb      	ldr	r3, [r7, #8]
 800de4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800de50:	d306      	bcc.n	800de60 <tcp_update_rcv_ann_wnd+0x90>
 800de52:	4b08      	ldr	r3, [pc, #32]	@ (800de74 <tcp_update_rcv_ann_wnd+0xa4>)
 800de54:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800de58:	4909      	ldr	r1, [pc, #36]	@ (800de80 <tcp_update_rcv_ann_wnd+0xb0>)
 800de5a:	4808      	ldr	r0, [pc, #32]	@ (800de7c <tcp_update_rcv_ann_wnd+0xac>)
 800de5c:	f00a ff72 	bl	8018d44 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800de60:	68bb      	ldr	r3, [r7, #8]
 800de62:	b29a      	uxth	r2, r3
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800de68:	2300      	movs	r3, #0
  }
}
 800de6a:	4618      	mov	r0, r3
 800de6c:	3710      	adds	r7, #16
 800de6e:	46bd      	mov	sp, r7
 800de70:	bd80      	pop	{r7, pc}
 800de72:	bf00      	nop
 800de74:	0801ba78 	.word	0x0801ba78
 800de78:	0801bcd4 	.word	0x0801bcd4
 800de7c:	0801babc 	.word	0x0801babc
 800de80:	0801bcf8 	.word	0x0801bcf8

0800de84 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800de84:	b580      	push	{r7, lr}
 800de86:	b084      	sub	sp, #16
 800de88:	af00      	add	r7, sp, #0
 800de8a:	6078      	str	r0, [r7, #4]
 800de8c:	460b      	mov	r3, r1
 800de8e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d107      	bne.n	800dea6 <tcp_recved+0x22>
 800de96:	4b1f      	ldr	r3, [pc, #124]	@ (800df14 <tcp_recved+0x90>)
 800de98:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800de9c:	491e      	ldr	r1, [pc, #120]	@ (800df18 <tcp_recved+0x94>)
 800de9e:	481f      	ldr	r0, [pc, #124]	@ (800df1c <tcp_recved+0x98>)
 800dea0:	f00a ff50 	bl	8018d44 <iprintf>
 800dea4:	e032      	b.n	800df0c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	7d1b      	ldrb	r3, [r3, #20]
 800deaa:	2b01      	cmp	r3, #1
 800deac:	d106      	bne.n	800debc <tcp_recved+0x38>
 800deae:	4b19      	ldr	r3, [pc, #100]	@ (800df14 <tcp_recved+0x90>)
 800deb0:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800deb4:	491a      	ldr	r1, [pc, #104]	@ (800df20 <tcp_recved+0x9c>)
 800deb6:	4819      	ldr	r0, [pc, #100]	@ (800df1c <tcp_recved+0x98>)
 800deb8:	f00a ff44 	bl	8018d44 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800dec0:	887b      	ldrh	r3, [r7, #2]
 800dec2:	4413      	add	r3, r2
 800dec4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800dec6:	89fb      	ldrh	r3, [r7, #14]
 800dec8:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800decc:	d804      	bhi.n	800ded8 <tcp_recved+0x54>
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ded2:	89fa      	ldrh	r2, [r7, #14]
 800ded4:	429a      	cmp	r2, r3
 800ded6:	d204      	bcs.n	800dee2 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800dede:	851a      	strh	r2, [r3, #40]	@ 0x28
 800dee0:	e002      	b.n	800dee8 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	89fa      	ldrh	r2, [r7, #14]
 800dee6:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800dee8:	6878      	ldr	r0, [r7, #4]
 800deea:	f7ff ff71 	bl	800ddd0 <tcp_update_rcv_ann_wnd>
 800deee:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800def0:	68bb      	ldr	r3, [r7, #8]
 800def2:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800def6:	d309      	bcc.n	800df0c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	8b5b      	ldrh	r3, [r3, #26]
 800defc:	f043 0302 	orr.w	r3, r3, #2
 800df00:	b29a      	uxth	r2, r3
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800df06:	6878      	ldr	r0, [r7, #4]
 800df08:	f004 fce0 	bl	80128cc <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800df0c:	3710      	adds	r7, #16
 800df0e:	46bd      	mov	sp, r7
 800df10:	bd80      	pop	{r7, pc}
 800df12:	bf00      	nop
 800df14:	0801ba78 	.word	0x0801ba78
 800df18:	0801bd14 	.word	0x0801bd14
 800df1c:	0801babc 	.word	0x0801babc
 800df20:	0801bd2c 	.word	0x0801bd2c

0800df24 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800df24:	b480      	push	{r7}
 800df26:	b083      	sub	sp, #12
 800df28:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800df2a:	2300      	movs	r3, #0
 800df2c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800df2e:	4b1e      	ldr	r3, [pc, #120]	@ (800dfa8 <tcp_new_port+0x84>)
 800df30:	881b      	ldrh	r3, [r3, #0]
 800df32:	3301      	adds	r3, #1
 800df34:	b29a      	uxth	r2, r3
 800df36:	4b1c      	ldr	r3, [pc, #112]	@ (800dfa8 <tcp_new_port+0x84>)
 800df38:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800df3a:	4b1b      	ldr	r3, [pc, #108]	@ (800dfa8 <tcp_new_port+0x84>)
 800df3c:	881b      	ldrh	r3, [r3, #0]
 800df3e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800df42:	4293      	cmp	r3, r2
 800df44:	d103      	bne.n	800df4e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800df46:	4b18      	ldr	r3, [pc, #96]	@ (800dfa8 <tcp_new_port+0x84>)
 800df48:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800df4c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800df4e:	2300      	movs	r3, #0
 800df50:	71fb      	strb	r3, [r7, #7]
 800df52:	e01e      	b.n	800df92 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800df54:	79fb      	ldrb	r3, [r7, #7]
 800df56:	4a15      	ldr	r2, [pc, #84]	@ (800dfac <tcp_new_port+0x88>)
 800df58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	603b      	str	r3, [r7, #0]
 800df60:	e011      	b.n	800df86 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800df62:	683b      	ldr	r3, [r7, #0]
 800df64:	8ada      	ldrh	r2, [r3, #22]
 800df66:	4b10      	ldr	r3, [pc, #64]	@ (800dfa8 <tcp_new_port+0x84>)
 800df68:	881b      	ldrh	r3, [r3, #0]
 800df6a:	429a      	cmp	r2, r3
 800df6c:	d108      	bne.n	800df80 <tcp_new_port+0x5c>
        n++;
 800df6e:	88bb      	ldrh	r3, [r7, #4]
 800df70:	3301      	adds	r3, #1
 800df72:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800df74:	88bb      	ldrh	r3, [r7, #4]
 800df76:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800df7a:	d3d8      	bcc.n	800df2e <tcp_new_port+0xa>
          return 0;
 800df7c:	2300      	movs	r3, #0
 800df7e:	e00d      	b.n	800df9c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800df80:	683b      	ldr	r3, [r7, #0]
 800df82:	68db      	ldr	r3, [r3, #12]
 800df84:	603b      	str	r3, [r7, #0]
 800df86:	683b      	ldr	r3, [r7, #0]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d1ea      	bne.n	800df62 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800df8c:	79fb      	ldrb	r3, [r7, #7]
 800df8e:	3301      	adds	r3, #1
 800df90:	71fb      	strb	r3, [r7, #7]
 800df92:	79fb      	ldrb	r3, [r7, #7]
 800df94:	2b03      	cmp	r3, #3
 800df96:	d9dd      	bls.n	800df54 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800df98:	4b03      	ldr	r3, [pc, #12]	@ (800dfa8 <tcp_new_port+0x84>)
 800df9a:	881b      	ldrh	r3, [r3, #0]
}
 800df9c:	4618      	mov	r0, r3
 800df9e:	370c      	adds	r7, #12
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa6:	4770      	bx	lr
 800dfa8:	20000024 	.word	0x20000024
 800dfac:	08027f74 	.word	0x08027f74

0800dfb0 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800dfb0:	b580      	push	{r7, lr}
 800dfb2:	b08a      	sub	sp, #40	@ 0x28
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	60f8      	str	r0, [r7, #12]
 800dfb8:	60b9      	str	r1, [r7, #8]
 800dfba:	603b      	str	r3, [r7, #0]
 800dfbc:	4613      	mov	r3, r2
 800dfbe:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800dfc0:	2300      	movs	r3, #0
 800dfc2:	627b      	str	r3, [r7, #36]	@ 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d109      	bne.n	800dfde <tcp_connect+0x2e>
 800dfca:	4b7d      	ldr	r3, [pc, #500]	@ (800e1c0 <tcp_connect+0x210>)
 800dfcc:	f240 4235 	movw	r2, #1077	@ 0x435
 800dfd0:	497c      	ldr	r1, [pc, #496]	@ (800e1c4 <tcp_connect+0x214>)
 800dfd2:	487d      	ldr	r0, [pc, #500]	@ (800e1c8 <tcp_connect+0x218>)
 800dfd4:	f00a feb6 	bl	8018d44 <iprintf>
 800dfd8:	f06f 030f 	mvn.w	r3, #15
 800dfdc:	e0ec      	b.n	800e1b8 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800dfde:	68bb      	ldr	r3, [r7, #8]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d109      	bne.n	800dff8 <tcp_connect+0x48>
 800dfe4:	4b76      	ldr	r3, [pc, #472]	@ (800e1c0 <tcp_connect+0x210>)
 800dfe6:	f240 4236 	movw	r2, #1078	@ 0x436
 800dfea:	4978      	ldr	r1, [pc, #480]	@ (800e1cc <tcp_connect+0x21c>)
 800dfec:	4876      	ldr	r0, [pc, #472]	@ (800e1c8 <tcp_connect+0x218>)
 800dfee:	f00a fea9 	bl	8018d44 <iprintf>
 800dff2:	f06f 030f 	mvn.w	r3, #15
 800dff6:	e0df      	b.n	800e1b8 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	7d1b      	ldrb	r3, [r3, #20]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d009      	beq.n	800e014 <tcp_connect+0x64>
 800e000:	4b6f      	ldr	r3, [pc, #444]	@ (800e1c0 <tcp_connect+0x210>)
 800e002:	f44f 6287 	mov.w	r2, #1080	@ 0x438
 800e006:	4972      	ldr	r1, [pc, #456]	@ (800e1d0 <tcp_connect+0x220>)
 800e008:	486f      	ldr	r0, [pc, #444]	@ (800e1c8 <tcp_connect+0x218>)
 800e00a:	f00a fe9b 	bl	8018d44 <iprintf>
 800e00e:	f06f 0309 	mvn.w	r3, #9
 800e012:	e0d1      	b.n	800e1b8 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800e014:	68bb      	ldr	r3, [r7, #8]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d002      	beq.n	800e020 <tcp_connect+0x70>
 800e01a:	68bb      	ldr	r3, [r7, #8]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	e000      	b.n	800e022 <tcp_connect+0x72>
 800e020:	2300      	movs	r3, #0
 800e022:	68fa      	ldr	r2, [r7, #12]
 800e024:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	88fa      	ldrh	r2, [r7, #6]
 800e02a:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	7a1b      	ldrb	r3, [r3, #8]
 800e030:	2b00      	cmp	r3, #0
 800e032:	d006      	beq.n	800e042 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	7a1b      	ldrb	r3, [r3, #8]
 800e038:	4618      	mov	r0, r3
 800e03a:	f7fe fbbb 	bl	800c7b4 <netif_get_by_index>
 800e03e:	6278      	str	r0, [r7, #36]	@ 0x24
 800e040:	e005      	b.n	800e04e <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	3304      	adds	r3, #4
 800e046:	4618      	mov	r0, r3
 800e048:	f009 f962 	bl	8017310 <ip4_route>
 800e04c:	6278      	str	r0, [r7, #36]	@ 0x24
  }
  if (netif == NULL) {
 800e04e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e050:	2b00      	cmp	r3, #0
 800e052:	d102      	bne.n	800e05a <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800e054:	f06f 0303 	mvn.w	r3, #3
 800e058:	e0ae      	b.n	800e1b8 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d003      	beq.n	800e068 <tcp_connect+0xb8>
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	2b00      	cmp	r3, #0
 800e066:	d111      	bne.n	800e08c <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800e068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d002      	beq.n	800e074 <tcp_connect+0xc4>
 800e06e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e070:	3304      	adds	r3, #4
 800e072:	e000      	b.n	800e076 <tcp_connect+0xc6>
 800e074:	2300      	movs	r3, #0
 800e076:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800e078:	69fb      	ldr	r3, [r7, #28]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d102      	bne.n	800e084 <tcp_connect+0xd4>
      return ERR_RTE;
 800e07e:	f06f 0303 	mvn.w	r3, #3
 800e082:	e099      	b.n	800e1b8 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800e084:	69fb      	ldr	r3, [r7, #28]
 800e086:	681a      	ldr	r2, [r3, #0]
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	8adb      	ldrh	r3, [r3, #22]
 800e090:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	8adb      	ldrh	r3, [r3, #22]
 800e096:	2b00      	cmp	r3, #0
 800e098:	d10c      	bne.n	800e0b4 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800e09a:	f7ff ff43 	bl	800df24 <tcp_new_port>
 800e09e:	4603      	mov	r3, r0
 800e0a0:	461a      	mov	r2, r3
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	8adb      	ldrh	r3, [r3, #22]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d102      	bne.n	800e0b4 <tcp_connect+0x104>
      return ERR_BUF;
 800e0ae:	f06f 0301 	mvn.w	r3, #1
 800e0b2:	e081      	b.n	800e1b8 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800e0b4:	68f8      	ldr	r0, [r7, #12]
 800e0b6:	f001 f887 	bl	800f1c8 <tcp_next_iss>
 800e0ba:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	2200      	movs	r2, #0
 800e0c0:	625a      	str	r2, [r3, #36]	@ 0x24
  pcb->snd_nxt = iss;
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	697a      	ldr	r2, [r7, #20]
 800e0c6:	651a      	str	r2, [r3, #80]	@ 0x50
  pcb->lastack = iss - 1;
 800e0c8:	697b      	ldr	r3, [r7, #20]
 800e0ca:	1e5a      	subs	r2, r3, #1
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	645a      	str	r2, [r3, #68]	@ 0x44
  pcb->snd_wl2 = iss - 1;
 800e0d0:	697b      	ldr	r3, [r7, #20]
 800e0d2:	1e5a      	subs	r2, r3, #1
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	659a      	str	r2, [r3, #88]	@ 0x58
  pcb->snd_lbb = iss - 1;
 800e0d8:	697b      	ldr	r3, [r7, #20]
 800e0da:	1e5a      	subs	r2, r3, #1
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800e0e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	851a      	strh	r2, [r3, #40]	@ 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  pcb->snd_wnd = TCP_WND;
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800e0fe:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800e108:	865a      	strh	r2, [r3, #50]	@ 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	8e58      	ldrh	r0, [r3, #50]	@ 0x32
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	3304      	adds	r3, #4
 800e112:	461a      	mov	r2, r3
 800e114:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e116:	f001 f87d 	bl	800f214 <tcp_eff_send_mss_netif>
 800e11a:	4603      	mov	r3, r0
 800e11c:	461a      	mov	r2, r3
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	2201      	movs	r2, #1
 800e126:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	683a      	ldr	r2, [r7, #0]
 800e12e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800e132:	2102      	movs	r1, #2
 800e134:	68f8      	ldr	r0, [r7, #12]
 800e136:	f004 fadb 	bl	80126f0 <tcp_enqueue_flags>
 800e13a:	4603      	mov	r3, r0
 800e13c:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800e13e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e142:	2b00      	cmp	r3, #0
 800e144:	d136      	bne.n	800e1b4 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	2202      	movs	r2, #2
 800e14a:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800e14c:	8b7b      	ldrh	r3, [r7, #26]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d021      	beq.n	800e196 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800e152:	4b20      	ldr	r3, [pc, #128]	@ (800e1d4 <tcp_connect+0x224>)
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	68fa      	ldr	r2, [r7, #12]
 800e158:	429a      	cmp	r2, r3
 800e15a:	d105      	bne.n	800e168 <tcp_connect+0x1b8>
 800e15c:	4b1d      	ldr	r3, [pc, #116]	@ (800e1d4 <tcp_connect+0x224>)
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	68db      	ldr	r3, [r3, #12]
 800e162:	4a1c      	ldr	r2, [pc, #112]	@ (800e1d4 <tcp_connect+0x224>)
 800e164:	6013      	str	r3, [r2, #0]
 800e166:	e013      	b.n	800e190 <tcp_connect+0x1e0>
 800e168:	4b1a      	ldr	r3, [pc, #104]	@ (800e1d4 <tcp_connect+0x224>)
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	623b      	str	r3, [r7, #32]
 800e16e:	e00c      	b.n	800e18a <tcp_connect+0x1da>
 800e170:	6a3b      	ldr	r3, [r7, #32]
 800e172:	68db      	ldr	r3, [r3, #12]
 800e174:	68fa      	ldr	r2, [r7, #12]
 800e176:	429a      	cmp	r2, r3
 800e178:	d104      	bne.n	800e184 <tcp_connect+0x1d4>
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	68da      	ldr	r2, [r3, #12]
 800e17e:	6a3b      	ldr	r3, [r7, #32]
 800e180:	60da      	str	r2, [r3, #12]
 800e182:	e005      	b.n	800e190 <tcp_connect+0x1e0>
 800e184:	6a3b      	ldr	r3, [r7, #32]
 800e186:	68db      	ldr	r3, [r3, #12]
 800e188:	623b      	str	r3, [r7, #32]
 800e18a:	6a3b      	ldr	r3, [r7, #32]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d1ef      	bne.n	800e170 <tcp_connect+0x1c0>
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	2200      	movs	r2, #0
 800e194:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800e196:	4b10      	ldr	r3, [pc, #64]	@ (800e1d8 <tcp_connect+0x228>)
 800e198:	681a      	ldr	r2, [r3, #0]
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	60da      	str	r2, [r3, #12]
 800e19e:	4a0e      	ldr	r2, [pc, #56]	@ (800e1d8 <tcp_connect+0x228>)
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	6013      	str	r3, [r2, #0]
 800e1a4:	f005 fb08 	bl	80137b8 <tcp_timer_needed>
 800e1a8:	4b0c      	ldr	r3, [pc, #48]	@ (800e1dc <tcp_connect+0x22c>)
 800e1aa:	2201      	movs	r2, #1
 800e1ac:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800e1ae:	68f8      	ldr	r0, [r7, #12]
 800e1b0:	f004 fb8c 	bl	80128cc <tcp_output>
  }
  return ret;
 800e1b4:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800e1b8:	4618      	mov	r0, r3
 800e1ba:	3728      	adds	r7, #40	@ 0x28
 800e1bc:	46bd      	mov	sp, r7
 800e1be:	bd80      	pop	{r7, pc}
 800e1c0:	0801ba78 	.word	0x0801ba78
 800e1c4:	0801bd54 	.word	0x0801bd54
 800e1c8:	0801babc 	.word	0x0801babc
 800e1cc:	0801bd70 	.word	0x0801bd70
 800e1d0:	0801bd8c 	.word	0x0801bd8c
 800e1d4:	20010e78 	.word	0x20010e78
 800e1d8:	20010e80 	.word	0x20010e80
 800e1dc:	20010e88 	.word	0x20010e88

0800e1e0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800e1e0:	b5b0      	push	{r4, r5, r7, lr}
 800e1e2:	b090      	sub	sp, #64	@ 0x40
 800e1e4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800e1e6:	2300      	movs	r3, #0
 800e1e8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800e1ec:	4b95      	ldr	r3, [pc, #596]	@ (800e444 <tcp_slowtmr+0x264>)
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	3301      	adds	r3, #1
 800e1f2:	4a94      	ldr	r2, [pc, #592]	@ (800e444 <tcp_slowtmr+0x264>)
 800e1f4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800e1f6:	4b94      	ldr	r3, [pc, #592]	@ (800e448 <tcp_slowtmr+0x268>)
 800e1f8:	781b      	ldrb	r3, [r3, #0]
 800e1fa:	3301      	adds	r3, #1
 800e1fc:	b2da      	uxtb	r2, r3
 800e1fe:	4b92      	ldr	r3, [pc, #584]	@ (800e448 <tcp_slowtmr+0x268>)
 800e200:	701a      	strb	r2, [r3, #0]
 800e202:	e000      	b.n	800e206 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800e204:	bf00      	nop
  prev = NULL;
 800e206:	2300      	movs	r3, #0
 800e208:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800e20a:	4b90      	ldr	r3, [pc, #576]	@ (800e44c <tcp_slowtmr+0x26c>)
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800e210:	e29f      	b.n	800e752 <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800e212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e214:	7d1b      	ldrb	r3, [r3, #20]
 800e216:	2b00      	cmp	r3, #0
 800e218:	d106      	bne.n	800e228 <tcp_slowtmr+0x48>
 800e21a:	4b8d      	ldr	r3, [pc, #564]	@ (800e450 <tcp_slowtmr+0x270>)
 800e21c:	f240 42be 	movw	r2, #1214	@ 0x4be
 800e220:	498c      	ldr	r1, [pc, #560]	@ (800e454 <tcp_slowtmr+0x274>)
 800e222:	488d      	ldr	r0, [pc, #564]	@ (800e458 <tcp_slowtmr+0x278>)
 800e224:	f00a fd8e 	bl	8018d44 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800e228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e22a:	7d1b      	ldrb	r3, [r3, #20]
 800e22c:	2b01      	cmp	r3, #1
 800e22e:	d106      	bne.n	800e23e <tcp_slowtmr+0x5e>
 800e230:	4b87      	ldr	r3, [pc, #540]	@ (800e450 <tcp_slowtmr+0x270>)
 800e232:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800e236:	4989      	ldr	r1, [pc, #548]	@ (800e45c <tcp_slowtmr+0x27c>)
 800e238:	4887      	ldr	r0, [pc, #540]	@ (800e458 <tcp_slowtmr+0x278>)
 800e23a:	f00a fd83 	bl	8018d44 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800e23e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e240:	7d1b      	ldrb	r3, [r3, #20]
 800e242:	2b0a      	cmp	r3, #10
 800e244:	d106      	bne.n	800e254 <tcp_slowtmr+0x74>
 800e246:	4b82      	ldr	r3, [pc, #520]	@ (800e450 <tcp_slowtmr+0x270>)
 800e248:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800e24c:	4984      	ldr	r1, [pc, #528]	@ (800e460 <tcp_slowtmr+0x280>)
 800e24e:	4882      	ldr	r0, [pc, #520]	@ (800e458 <tcp_slowtmr+0x278>)
 800e250:	f00a fd78 	bl	8018d44 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800e254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e256:	7f9a      	ldrb	r2, [r3, #30]
 800e258:	4b7b      	ldr	r3, [pc, #492]	@ (800e448 <tcp_slowtmr+0x268>)
 800e25a:	781b      	ldrb	r3, [r3, #0]
 800e25c:	429a      	cmp	r2, r3
 800e25e:	d105      	bne.n	800e26c <tcp_slowtmr+0x8c>
      prev = pcb;
 800e260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e262:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800e264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e266:	68db      	ldr	r3, [r3, #12]
 800e268:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800e26a:	e272      	b.n	800e752 <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 800e26c:	4b76      	ldr	r3, [pc, #472]	@ (800e448 <tcp_slowtmr+0x268>)
 800e26e:	781a      	ldrb	r2, [r3, #0]
 800e270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e272:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800e274:	2300      	movs	r3, #0
 800e276:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800e27a:	2300      	movs	r3, #0
 800e27c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800e280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e282:	7d1b      	ldrb	r3, [r3, #20]
 800e284:	2b02      	cmp	r3, #2
 800e286:	d10a      	bne.n	800e29e <tcp_slowtmr+0xbe>
 800e288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e28a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e28e:	2b05      	cmp	r3, #5
 800e290:	d905      	bls.n	800e29e <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800e292:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e296:	3301      	adds	r3, #1
 800e298:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e29c:	e11e      	b.n	800e4dc <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800e29e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2a0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e2a4:	2b0b      	cmp	r3, #11
 800e2a6:	d905      	bls.n	800e2b4 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800e2a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e2ac:	3301      	adds	r3, #1
 800e2ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e2b2:	e113      	b.n	800e4dc <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800e2b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2b6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d075      	beq.n	800e3aa <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800e2be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d006      	beq.n	800e2d4 <tcp_slowtmr+0xf4>
 800e2c6:	4b62      	ldr	r3, [pc, #392]	@ (800e450 <tcp_slowtmr+0x270>)
 800e2c8:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800e2cc:	4965      	ldr	r1, [pc, #404]	@ (800e464 <tcp_slowtmr+0x284>)
 800e2ce:	4862      	ldr	r0, [pc, #392]	@ (800e458 <tcp_slowtmr+0x278>)
 800e2d0:	f00a fd38 	bl	8018d44 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800e2d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d106      	bne.n	800e2ea <tcp_slowtmr+0x10a>
 800e2dc:	4b5c      	ldr	r3, [pc, #368]	@ (800e450 <tcp_slowtmr+0x270>)
 800e2de:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800e2e2:	4961      	ldr	r1, [pc, #388]	@ (800e468 <tcp_slowtmr+0x288>)
 800e2e4:	485c      	ldr	r0, [pc, #368]	@ (800e458 <tcp_slowtmr+0x278>)
 800e2e6:	f00a fd2d 	bl	8018d44 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800e2ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2ec:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800e2f0:	2b0b      	cmp	r3, #11
 800e2f2:	d905      	bls.n	800e300 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800e2f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e2f8:	3301      	adds	r3, #1
 800e2fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e2fe:	e0ed      	b.n	800e4dc <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800e300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e302:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800e306:	3b01      	subs	r3, #1
 800e308:	4a58      	ldr	r2, [pc, #352]	@ (800e46c <tcp_slowtmr+0x28c>)
 800e30a:	5cd3      	ldrb	r3, [r2, r3]
 800e30c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800e30e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e310:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800e314:	7c7a      	ldrb	r2, [r7, #17]
 800e316:	429a      	cmp	r2, r3
 800e318:	d907      	bls.n	800e32a <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800e31a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e31c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800e320:	3301      	adds	r3, #1
 800e322:	b2da      	uxtb	r2, r3
 800e324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e326:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800e32a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e32c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800e330:	7c7a      	ldrb	r2, [r7, #17]
 800e332:	429a      	cmp	r2, r3
 800e334:	f200 80d2 	bhi.w	800e4dc <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800e338:	2301      	movs	r3, #1
 800e33a:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800e33c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e33e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e342:	2b00      	cmp	r3, #0
 800e344:	d108      	bne.n	800e358 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800e346:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e348:	f005 f968 	bl	801361c <tcp_zero_window_probe>
 800e34c:	4603      	mov	r3, r0
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d014      	beq.n	800e37c <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800e352:	2300      	movs	r3, #0
 800e354:	623b      	str	r3, [r7, #32]
 800e356:	e011      	b.n	800e37c <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800e358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e35a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e35e:	4619      	mov	r1, r3
 800e360:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e362:	f004 f82d 	bl	80123c0 <tcp_split_unsent_seg>
 800e366:	4603      	mov	r3, r0
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d107      	bne.n	800e37c <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800e36c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e36e:	f004 faad 	bl	80128cc <tcp_output>
 800e372:	4603      	mov	r3, r0
 800e374:	2b00      	cmp	r3, #0
 800e376:	d101      	bne.n	800e37c <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800e378:	2300      	movs	r3, #0
 800e37a:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800e37c:	6a3b      	ldr	r3, [r7, #32]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	f000 80ac 	beq.w	800e4dc <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800e384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e386:	2200      	movs	r2, #0
 800e388:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800e38c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e38e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800e392:	2b06      	cmp	r3, #6
 800e394:	f200 80a2 	bhi.w	800e4dc <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800e398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e39a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800e39e:	3301      	adds	r3, #1
 800e3a0:	b2da      	uxtb	r2, r3
 800e3a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3a4:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800e3a8:	e098      	b.n	800e4dc <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800e3aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3ac:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	db0f      	blt.n	800e3d4 <tcp_slowtmr+0x1f4>
 800e3b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3b6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800e3ba:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800e3be:	4293      	cmp	r3, r2
 800e3c0:	d008      	beq.n	800e3d4 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800e3c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3c4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800e3c8:	b29b      	uxth	r3, r3
 800e3ca:	3301      	adds	r3, #1
 800e3cc:	b29b      	uxth	r3, r3
 800e3ce:	b21a      	sxth	r2, r3
 800e3d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3d2:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800e3d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3d6:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800e3da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3dc:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800e3e0:	429a      	cmp	r2, r3
 800e3e2:	db7b      	blt.n	800e4dc <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800e3e4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e3e6:	f004 fd65 	bl	8012eb4 <tcp_rexmit_rto_prepare>
 800e3ea:	4603      	mov	r3, r0
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d007      	beq.n	800e400 <tcp_slowtmr+0x220>
 800e3f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d171      	bne.n	800e4dc <tcp_slowtmr+0x2fc>
 800e3f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d06d      	beq.n	800e4dc <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800e400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e402:	7d1b      	ldrb	r3, [r3, #20]
 800e404:	2b02      	cmp	r3, #2
 800e406:	d03a      	beq.n	800e47e <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800e408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e40a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e40e:	2b0c      	cmp	r3, #12
 800e410:	bf28      	it	cs
 800e412:	230c      	movcs	r3, #12
 800e414:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800e416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e418:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800e41c:	10db      	asrs	r3, r3, #3
 800e41e:	b21b      	sxth	r3, r3
 800e420:	461a      	mov	r2, r3
 800e422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e424:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800e428:	4413      	add	r3, r2
 800e42a:	7efa      	ldrb	r2, [r7, #27]
 800e42c:	4910      	ldr	r1, [pc, #64]	@ (800e470 <tcp_slowtmr+0x290>)
 800e42e:	5c8a      	ldrb	r2, [r1, r2]
 800e430:	4093      	lsls	r3, r2
 800e432:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800e434:	697b      	ldr	r3, [r7, #20]
 800e436:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800e43a:	4293      	cmp	r3, r2
 800e43c:	dc1a      	bgt.n	800e474 <tcp_slowtmr+0x294>
 800e43e:	697b      	ldr	r3, [r7, #20]
 800e440:	b21a      	sxth	r2, r3
 800e442:	e019      	b.n	800e478 <tcp_slowtmr+0x298>
 800e444:	20010e74 	.word	0x20010e74
 800e448:	20010e8a 	.word	0x20010e8a
 800e44c:	20010e80 	.word	0x20010e80
 800e450:	0801ba78 	.word	0x0801ba78
 800e454:	0801bdbc 	.word	0x0801bdbc
 800e458:	0801babc 	.word	0x0801babc
 800e45c:	0801bde8 	.word	0x0801bde8
 800e460:	0801be14 	.word	0x0801be14
 800e464:	0801be44 	.word	0x0801be44
 800e468:	0801be78 	.word	0x0801be78
 800e46c:	08027f6c 	.word	0x08027f6c
 800e470:	08027f5c 	.word	0x08027f5c
 800e474:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800e478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e47a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800e47e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e480:	2200      	movs	r2, #0
 800e482:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800e484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e486:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800e48a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e48c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800e490:	4293      	cmp	r3, r2
 800e492:	bf28      	it	cs
 800e494:	4613      	movcs	r3, r2
 800e496:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800e498:	8a7b      	ldrh	r3, [r7, #18]
 800e49a:	085b      	lsrs	r3, r3, #1
 800e49c:	b29a      	uxth	r2, r3
 800e49e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4a0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800e4a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4a6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800e4aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4ac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e4ae:	005b      	lsls	r3, r3, #1
 800e4b0:	b29b      	uxth	r3, r3
 800e4b2:	429a      	cmp	r2, r3
 800e4b4:	d206      	bcs.n	800e4c4 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800e4b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4b8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e4ba:	005b      	lsls	r3, r3, #1
 800e4bc:	b29a      	uxth	r2, r3
 800e4be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4c0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800e4c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4c6:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800e4c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4ca:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800e4ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4d0:	2200      	movs	r2, #0
 800e4d2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800e4d6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e4d8:	f004 fd5c 	bl	8012f94 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800e4dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4de:	7d1b      	ldrb	r3, [r3, #20]
 800e4e0:	2b06      	cmp	r3, #6
 800e4e2:	d111      	bne.n	800e508 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800e4e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4e6:	8b5b      	ldrh	r3, [r3, #26]
 800e4e8:	f003 0310 	and.w	r3, r3, #16
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d00b      	beq.n	800e508 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e4f0:	4b9d      	ldr	r3, [pc, #628]	@ (800e768 <tcp_slowtmr+0x588>)
 800e4f2:	681a      	ldr	r2, [r3, #0]
 800e4f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4f6:	6a1b      	ldr	r3, [r3, #32]
 800e4f8:	1ad3      	subs	r3, r2, r3
 800e4fa:	2b28      	cmp	r3, #40	@ 0x28
 800e4fc:	d904      	bls.n	800e508 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800e4fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e502:	3301      	adds	r3, #1
 800e504:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e50a:	7a5b      	ldrb	r3, [r3, #9]
 800e50c:	f003 0308 	and.w	r3, r3, #8
 800e510:	2b00      	cmp	r3, #0
 800e512:	d04c      	beq.n	800e5ae <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 800e514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e516:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e518:	2b04      	cmp	r3, #4
 800e51a:	d003      	beq.n	800e524 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800e51c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e51e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800e520:	2b07      	cmp	r3, #7
 800e522:	d144      	bne.n	800e5ae <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e524:	4b90      	ldr	r3, [pc, #576]	@ (800e768 <tcp_slowtmr+0x588>)
 800e526:	681a      	ldr	r2, [r3, #0]
 800e528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e52a:	6a1b      	ldr	r3, [r3, #32]
 800e52c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800e52e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e530:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e534:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 800e538:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 800e53c:	498b      	ldr	r1, [pc, #556]	@ (800e76c <tcp_slowtmr+0x58c>)
 800e53e:	fba1 1303 	umull	r1, r3, r1, r3
 800e542:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e544:	429a      	cmp	r2, r3
 800e546:	d90a      	bls.n	800e55e <tcp_slowtmr+0x37e>
        ++pcb_remove;
 800e548:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e54c:	3301      	adds	r3, #1
 800e54e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800e552:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e556:	3301      	adds	r3, #1
 800e558:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800e55c:	e027      	b.n	800e5ae <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e55e:	4b82      	ldr	r3, [pc, #520]	@ (800e768 <tcp_slowtmr+0x588>)
 800e560:	681a      	ldr	r2, [r3, #0]
 800e562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e564:	6a1b      	ldr	r3, [r3, #32]
 800e566:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800e568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e56a:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800e56e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e570:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800e574:	4618      	mov	r0, r3
 800e576:	4b7e      	ldr	r3, [pc, #504]	@ (800e770 <tcp_slowtmr+0x590>)
 800e578:	fb00 f303 	mul.w	r3, r0, r3
 800e57c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800e57e:	497b      	ldr	r1, [pc, #492]	@ (800e76c <tcp_slowtmr+0x58c>)
 800e580:	fba1 1303 	umull	r1, r3, r1, r3
 800e584:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e586:	429a      	cmp	r2, r3
 800e588:	d911      	bls.n	800e5ae <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 800e58a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e58c:	f005 f806 	bl	801359c <tcp_keepalive>
 800e590:	4603      	mov	r3, r0
 800e592:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800e596:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d107      	bne.n	800e5ae <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 800e59e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5a0:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800e5a4:	3301      	adds	r3, #1
 800e5a6:	b2da      	uxtb	r2, r3
 800e5a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5aa:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800e5ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d011      	beq.n	800e5da <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800e5b6:	4b6c      	ldr	r3, [pc, #432]	@ (800e768 <tcp_slowtmr+0x588>)
 800e5b8:	681a      	ldr	r2, [r3, #0]
 800e5ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5bc:	6a1b      	ldr	r3, [r3, #32]
 800e5be:	1ad2      	subs	r2, r2, r3
 800e5c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5c2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800e5c6:	4619      	mov	r1, r3
 800e5c8:	460b      	mov	r3, r1
 800e5ca:	005b      	lsls	r3, r3, #1
 800e5cc:	440b      	add	r3, r1
 800e5ce:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800e5d0:	429a      	cmp	r2, r3
 800e5d2:	d302      	bcc.n	800e5da <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 800e5d4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e5d6:	f000 fec7 	bl	800f368 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800e5da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5dc:	7d1b      	ldrb	r3, [r3, #20]
 800e5de:	2b03      	cmp	r3, #3
 800e5e0:	d10b      	bne.n	800e5fa <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e5e2:	4b61      	ldr	r3, [pc, #388]	@ (800e768 <tcp_slowtmr+0x588>)
 800e5e4:	681a      	ldr	r2, [r3, #0]
 800e5e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5e8:	6a1b      	ldr	r3, [r3, #32]
 800e5ea:	1ad3      	subs	r3, r2, r3
 800e5ec:	2b28      	cmp	r3, #40	@ 0x28
 800e5ee:	d904      	bls.n	800e5fa <tcp_slowtmr+0x41a>
        ++pcb_remove;
 800e5f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e5f4:	3301      	adds	r3, #1
 800e5f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800e5fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5fc:	7d1b      	ldrb	r3, [r3, #20]
 800e5fe:	2b09      	cmp	r3, #9
 800e600:	d10b      	bne.n	800e61a <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e602:	4b59      	ldr	r3, [pc, #356]	@ (800e768 <tcp_slowtmr+0x588>)
 800e604:	681a      	ldr	r2, [r3, #0]
 800e606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e608:	6a1b      	ldr	r3, [r3, #32]
 800e60a:	1ad3      	subs	r3, r2, r3
 800e60c:	2bf0      	cmp	r3, #240	@ 0xf0
 800e60e:	d904      	bls.n	800e61a <tcp_slowtmr+0x43a>
        ++pcb_remove;
 800e610:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e614:	3301      	adds	r3, #1
 800e616:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800e61a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d060      	beq.n	800e6e4 <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 800e622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e624:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e628:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800e62a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e62c:	f000 fce8 	bl	800f000 <tcp_pcb_purge>
      if (prev != NULL) {
 800e630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e632:	2b00      	cmp	r3, #0
 800e634:	d010      	beq.n	800e658 <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800e636:	4b4f      	ldr	r3, [pc, #316]	@ (800e774 <tcp_slowtmr+0x594>)
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e63c:	429a      	cmp	r2, r3
 800e63e:	d106      	bne.n	800e64e <tcp_slowtmr+0x46e>
 800e640:	4b4d      	ldr	r3, [pc, #308]	@ (800e778 <tcp_slowtmr+0x598>)
 800e642:	f240 526d 	movw	r2, #1389	@ 0x56d
 800e646:	494d      	ldr	r1, [pc, #308]	@ (800e77c <tcp_slowtmr+0x59c>)
 800e648:	484d      	ldr	r0, [pc, #308]	@ (800e780 <tcp_slowtmr+0x5a0>)
 800e64a:	f00a fb7b 	bl	8018d44 <iprintf>
        prev->next = pcb->next;
 800e64e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e650:	68da      	ldr	r2, [r3, #12]
 800e652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e654:	60da      	str	r2, [r3, #12]
 800e656:	e00f      	b.n	800e678 <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800e658:	4b46      	ldr	r3, [pc, #280]	@ (800e774 <tcp_slowtmr+0x594>)
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e65e:	429a      	cmp	r2, r3
 800e660:	d006      	beq.n	800e670 <tcp_slowtmr+0x490>
 800e662:	4b45      	ldr	r3, [pc, #276]	@ (800e778 <tcp_slowtmr+0x598>)
 800e664:	f240 5271 	movw	r2, #1393	@ 0x571
 800e668:	4946      	ldr	r1, [pc, #280]	@ (800e784 <tcp_slowtmr+0x5a4>)
 800e66a:	4845      	ldr	r0, [pc, #276]	@ (800e780 <tcp_slowtmr+0x5a0>)
 800e66c:	f00a fb6a 	bl	8018d44 <iprintf>
        tcp_active_pcbs = pcb->next;
 800e670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e672:	68db      	ldr	r3, [r3, #12]
 800e674:	4a3f      	ldr	r2, [pc, #252]	@ (800e774 <tcp_slowtmr+0x594>)
 800e676:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800e678:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d013      	beq.n	800e6a8 <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e682:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800e684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e686:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800e688:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800e68a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e68c:	3304      	adds	r3, #4
 800e68e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e690:	8ad2      	ldrh	r2, [r2, #22]
 800e692:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e694:	8b09      	ldrh	r1, [r1, #24]
 800e696:	9102      	str	r1, [sp, #8]
 800e698:	9201      	str	r2, [sp, #4]
 800e69a:	9300      	str	r3, [sp, #0]
 800e69c:	462b      	mov	r3, r5
 800e69e:	4622      	mov	r2, r4
 800e6a0:	4601      	mov	r1, r0
 800e6a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e6a4:	f004 fec6 	bl	8013434 <tcp_rst>
      err_arg = pcb->callback_arg;
 800e6a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6aa:	691b      	ldr	r3, [r3, #16]
 800e6ac:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800e6ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6b0:	7d1b      	ldrb	r3, [r3, #20]
 800e6b2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800e6b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6b6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800e6b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6ba:	68db      	ldr	r3, [r3, #12]
 800e6bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800e6be:	6838      	ldr	r0, [r7, #0]
 800e6c0:	f7fe fec2 	bl	800d448 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800e6c4:	4b30      	ldr	r3, [pc, #192]	@ (800e788 <tcp_slowtmr+0x5a8>)
 800e6c6:	2200      	movs	r2, #0
 800e6c8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d004      	beq.n	800e6da <tcp_slowtmr+0x4fa>
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	f06f 010c 	mvn.w	r1, #12
 800e6d6:	68b8      	ldr	r0, [r7, #8]
 800e6d8:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800e6da:	4b2b      	ldr	r3, [pc, #172]	@ (800e788 <tcp_slowtmr+0x5a8>)
 800e6dc:	781b      	ldrb	r3, [r3, #0]
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d037      	beq.n	800e752 <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 800e6e2:	e590      	b.n	800e206 <tcp_slowtmr+0x26>
      prev = pcb;
 800e6e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6e6:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800e6e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6ea:	68db      	ldr	r3, [r3, #12]
 800e6ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800e6ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6f0:	7f1b      	ldrb	r3, [r3, #28]
 800e6f2:	3301      	adds	r3, #1
 800e6f4:	b2da      	uxtb	r2, r3
 800e6f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6f8:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800e6fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6fc:	7f1a      	ldrb	r2, [r3, #28]
 800e6fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e700:	7f5b      	ldrb	r3, [r3, #29]
 800e702:	429a      	cmp	r2, r3
 800e704:	d325      	bcc.n	800e752 <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 800e706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e708:	2200      	movs	r2, #0
 800e70a:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800e70c:	4b1e      	ldr	r3, [pc, #120]	@ (800e788 <tcp_slowtmr+0x5a8>)
 800e70e:	2200      	movs	r2, #0
 800e710:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800e712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e714:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d00b      	beq.n	800e734 <tcp_slowtmr+0x554>
 800e71c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e71e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e722:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e724:	6912      	ldr	r2, [r2, #16]
 800e726:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e728:	4610      	mov	r0, r2
 800e72a:	4798      	blx	r3
 800e72c:	4603      	mov	r3, r0
 800e72e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800e732:	e002      	b.n	800e73a <tcp_slowtmr+0x55a>
 800e734:	2300      	movs	r3, #0
 800e736:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800e73a:	4b13      	ldr	r3, [pc, #76]	@ (800e788 <tcp_slowtmr+0x5a8>)
 800e73c:	781b      	ldrb	r3, [r3, #0]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	f47f ad60 	bne.w	800e204 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800e744:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d102      	bne.n	800e752 <tcp_slowtmr+0x572>
          tcp_output(prev);
 800e74c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e74e:	f004 f8bd 	bl	80128cc <tcp_output>
  while (pcb != NULL) {
 800e752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e754:	2b00      	cmp	r3, #0
 800e756:	f47f ad5c 	bne.w	800e212 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800e75a:	2300      	movs	r3, #0
 800e75c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800e75e:	4b0b      	ldr	r3, [pc, #44]	@ (800e78c <tcp_slowtmr+0x5ac>)
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800e764:	e067      	b.n	800e836 <tcp_slowtmr+0x656>
 800e766:	bf00      	nop
 800e768:	20010e74 	.word	0x20010e74
 800e76c:	10624dd3 	.word	0x10624dd3
 800e770:	000124f8 	.word	0x000124f8
 800e774:	20010e80 	.word	0x20010e80
 800e778:	0801ba78 	.word	0x0801ba78
 800e77c:	0801beb0 	.word	0x0801beb0
 800e780:	0801babc 	.word	0x0801babc
 800e784:	0801bedc 	.word	0x0801bedc
 800e788:	20010e88 	.word	0x20010e88
 800e78c:	20010e84 	.word	0x20010e84
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e792:	7d1b      	ldrb	r3, [r3, #20]
 800e794:	2b0a      	cmp	r3, #10
 800e796:	d006      	beq.n	800e7a6 <tcp_slowtmr+0x5c6>
 800e798:	4b2b      	ldr	r3, [pc, #172]	@ (800e848 <tcp_slowtmr+0x668>)
 800e79a:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800e79e:	492b      	ldr	r1, [pc, #172]	@ (800e84c <tcp_slowtmr+0x66c>)
 800e7a0:	482b      	ldr	r0, [pc, #172]	@ (800e850 <tcp_slowtmr+0x670>)
 800e7a2:	f00a facf 	bl	8018d44 <iprintf>
    pcb_remove = 0;
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e7ac:	4b29      	ldr	r3, [pc, #164]	@ (800e854 <tcp_slowtmr+0x674>)
 800e7ae:	681a      	ldr	r2, [r3, #0]
 800e7b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7b2:	6a1b      	ldr	r3, [r3, #32]
 800e7b4:	1ad3      	subs	r3, r2, r3
 800e7b6:	2bf0      	cmp	r3, #240	@ 0xf0
 800e7b8:	d904      	bls.n	800e7c4 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800e7ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e7be:	3301      	adds	r3, #1
 800e7c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e7c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d02f      	beq.n	800e82c <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800e7cc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e7ce:	f000 fc17 	bl	800f000 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800e7d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d010      	beq.n	800e7fa <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800e7d8:	4b1f      	ldr	r3, [pc, #124]	@ (800e858 <tcp_slowtmr+0x678>)
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e7de:	429a      	cmp	r2, r3
 800e7e0:	d106      	bne.n	800e7f0 <tcp_slowtmr+0x610>
 800e7e2:	4b19      	ldr	r3, [pc, #100]	@ (800e848 <tcp_slowtmr+0x668>)
 800e7e4:	f240 52af 	movw	r2, #1455	@ 0x5af
 800e7e8:	491c      	ldr	r1, [pc, #112]	@ (800e85c <tcp_slowtmr+0x67c>)
 800e7ea:	4819      	ldr	r0, [pc, #100]	@ (800e850 <tcp_slowtmr+0x670>)
 800e7ec:	f00a faaa 	bl	8018d44 <iprintf>
        prev->next = pcb->next;
 800e7f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7f2:	68da      	ldr	r2, [r3, #12]
 800e7f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7f6:	60da      	str	r2, [r3, #12]
 800e7f8:	e00f      	b.n	800e81a <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800e7fa:	4b17      	ldr	r3, [pc, #92]	@ (800e858 <tcp_slowtmr+0x678>)
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e800:	429a      	cmp	r2, r3
 800e802:	d006      	beq.n	800e812 <tcp_slowtmr+0x632>
 800e804:	4b10      	ldr	r3, [pc, #64]	@ (800e848 <tcp_slowtmr+0x668>)
 800e806:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800e80a:	4915      	ldr	r1, [pc, #84]	@ (800e860 <tcp_slowtmr+0x680>)
 800e80c:	4810      	ldr	r0, [pc, #64]	@ (800e850 <tcp_slowtmr+0x670>)
 800e80e:	f00a fa99 	bl	8018d44 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800e812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e814:	68db      	ldr	r3, [r3, #12]
 800e816:	4a10      	ldr	r2, [pc, #64]	@ (800e858 <tcp_slowtmr+0x678>)
 800e818:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800e81a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e81c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800e81e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e820:	68db      	ldr	r3, [r3, #12]
 800e822:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800e824:	69f8      	ldr	r0, [r7, #28]
 800e826:	f7fe fe0f 	bl	800d448 <tcp_free>
 800e82a:	e004      	b.n	800e836 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800e82c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e82e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800e830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e832:	68db      	ldr	r3, [r3, #12]
 800e834:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800e836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d1a9      	bne.n	800e790 <tcp_slowtmr+0x5b0>
    }
  }
}
 800e83c:	bf00      	nop
 800e83e:	bf00      	nop
 800e840:	3730      	adds	r7, #48	@ 0x30
 800e842:	46bd      	mov	sp, r7
 800e844:	bdb0      	pop	{r4, r5, r7, pc}
 800e846:	bf00      	nop
 800e848:	0801ba78 	.word	0x0801ba78
 800e84c:	0801bf08 	.word	0x0801bf08
 800e850:	0801babc 	.word	0x0801babc
 800e854:	20010e74 	.word	0x20010e74
 800e858:	20010e84 	.word	0x20010e84
 800e85c:	0801bf38 	.word	0x0801bf38
 800e860:	0801bf60 	.word	0x0801bf60

0800e864 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800e864:	b580      	push	{r7, lr}
 800e866:	b082      	sub	sp, #8
 800e868:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800e86a:	4b2d      	ldr	r3, [pc, #180]	@ (800e920 <tcp_fasttmr+0xbc>)
 800e86c:	781b      	ldrb	r3, [r3, #0]
 800e86e:	3301      	adds	r3, #1
 800e870:	b2da      	uxtb	r2, r3
 800e872:	4b2b      	ldr	r3, [pc, #172]	@ (800e920 <tcp_fasttmr+0xbc>)
 800e874:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800e876:	4b2b      	ldr	r3, [pc, #172]	@ (800e924 <tcp_fasttmr+0xc0>)
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e87c:	e048      	b.n	800e910 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	7f9a      	ldrb	r2, [r3, #30]
 800e882:	4b27      	ldr	r3, [pc, #156]	@ (800e920 <tcp_fasttmr+0xbc>)
 800e884:	781b      	ldrb	r3, [r3, #0]
 800e886:	429a      	cmp	r2, r3
 800e888:	d03f      	beq.n	800e90a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800e88a:	4b25      	ldr	r3, [pc, #148]	@ (800e920 <tcp_fasttmr+0xbc>)
 800e88c:	781a      	ldrb	r2, [r3, #0]
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	8b5b      	ldrh	r3, [r3, #26]
 800e896:	f003 0301 	and.w	r3, r3, #1
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d010      	beq.n	800e8c0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	8b5b      	ldrh	r3, [r3, #26]
 800e8a2:	f043 0302 	orr.w	r3, r3, #2
 800e8a6:	b29a      	uxth	r2, r3
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800e8ac:	6878      	ldr	r0, [r7, #4]
 800e8ae:	f004 f80d 	bl	80128cc <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	8b5b      	ldrh	r3, [r3, #26]
 800e8b6:	f023 0303 	bic.w	r3, r3, #3
 800e8ba:	b29a      	uxth	r2, r3
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	8b5b      	ldrh	r3, [r3, #26]
 800e8c4:	f003 0308 	and.w	r3, r3, #8
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d009      	beq.n	800e8e0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	8b5b      	ldrh	r3, [r3, #26]
 800e8d0:	f023 0308 	bic.w	r3, r3, #8
 800e8d4:	b29a      	uxth	r2, r3
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800e8da:	6878      	ldr	r0, [r7, #4]
 800e8dc:	f7fe ff48 	bl	800d770 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	68db      	ldr	r3, [r3, #12]
 800e8e4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d00a      	beq.n	800e904 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800e8ee:	4b0e      	ldr	r3, [pc, #56]	@ (800e928 <tcp_fasttmr+0xc4>)
 800e8f0:	2200      	movs	r2, #0
 800e8f2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800e8f4:	6878      	ldr	r0, [r7, #4]
 800e8f6:	f000 f819 	bl	800e92c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800e8fa:	4b0b      	ldr	r3, [pc, #44]	@ (800e928 <tcp_fasttmr+0xc4>)
 800e8fc:	781b      	ldrb	r3, [r3, #0]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d000      	beq.n	800e904 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800e902:	e7b8      	b.n	800e876 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800e904:	683b      	ldr	r3, [r7, #0]
 800e906:	607b      	str	r3, [r7, #4]
 800e908:	e002      	b.n	800e910 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	68db      	ldr	r3, [r3, #12]
 800e90e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	2b00      	cmp	r3, #0
 800e914:	d1b3      	bne.n	800e87e <tcp_fasttmr+0x1a>
    }
  }
}
 800e916:	bf00      	nop
 800e918:	bf00      	nop
 800e91a:	3708      	adds	r7, #8
 800e91c:	46bd      	mov	sp, r7
 800e91e:	bd80      	pop	{r7, pc}
 800e920:	20010e8a 	.word	0x20010e8a
 800e924:	20010e80 	.word	0x20010e80
 800e928:	20010e88 	.word	0x20010e88

0800e92c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800e92c:	b590      	push	{r4, r7, lr}
 800e92e:	b085      	sub	sp, #20
 800e930:	af00      	add	r7, sp, #0
 800e932:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	2b00      	cmp	r3, #0
 800e938:	d109      	bne.n	800e94e <tcp_process_refused_data+0x22>
 800e93a:	4b37      	ldr	r3, [pc, #220]	@ (800ea18 <tcp_process_refused_data+0xec>)
 800e93c:	f240 6209 	movw	r2, #1545	@ 0x609
 800e940:	4936      	ldr	r1, [pc, #216]	@ (800ea1c <tcp_process_refused_data+0xf0>)
 800e942:	4837      	ldr	r0, [pc, #220]	@ (800ea20 <tcp_process_refused_data+0xf4>)
 800e944:	f00a f9fe 	bl	8018d44 <iprintf>
 800e948:	f06f 030f 	mvn.w	r3, #15
 800e94c:	e060      	b.n	800ea10 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e952:	7b5b      	ldrb	r3, [r3, #13]
 800e954:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e95a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	2200      	movs	r2, #0
 800e960:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d00b      	beq.n	800e984 <tcp_process_refused_data+0x58>
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	6918      	ldr	r0, [r3, #16]
 800e976:	2300      	movs	r3, #0
 800e978:	68ba      	ldr	r2, [r7, #8]
 800e97a:	6879      	ldr	r1, [r7, #4]
 800e97c:	47a0      	blx	r4
 800e97e:	4603      	mov	r3, r0
 800e980:	73fb      	strb	r3, [r7, #15]
 800e982:	e007      	b.n	800e994 <tcp_process_refused_data+0x68>
 800e984:	2300      	movs	r3, #0
 800e986:	68ba      	ldr	r2, [r7, #8]
 800e988:	6879      	ldr	r1, [r7, #4]
 800e98a:	2000      	movs	r0, #0
 800e98c:	f000 f8c2 	bl	800eb14 <tcp_recv_null>
 800e990:	4603      	mov	r3, r0
 800e992:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800e994:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d12a      	bne.n	800e9f2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800e99c:	7bbb      	ldrb	r3, [r7, #14]
 800e99e:	f003 0320 	and.w	r3, r3, #32
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d033      	beq.n	800ea0e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e9aa:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800e9ae:	d005      	beq.n	800e9bc <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e9b4:	3301      	adds	r3, #1
 800e9b6:	b29a      	uxth	r2, r3
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d00b      	beq.n	800e9de <tcp_process_refused_data+0xb2>
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	6918      	ldr	r0, [r3, #16]
 800e9d0:	2300      	movs	r3, #0
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	6879      	ldr	r1, [r7, #4]
 800e9d6:	47a0      	blx	r4
 800e9d8:	4603      	mov	r3, r0
 800e9da:	73fb      	strb	r3, [r7, #15]
 800e9dc:	e001      	b.n	800e9e2 <tcp_process_refused_data+0xb6>
 800e9de:	2300      	movs	r3, #0
 800e9e0:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800e9e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e9e6:	f113 0f0d 	cmn.w	r3, #13
 800e9ea:	d110      	bne.n	800ea0e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800e9ec:	f06f 030c 	mvn.w	r3, #12
 800e9f0:	e00e      	b.n	800ea10 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800e9f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e9f6:	f113 0f0d 	cmn.w	r3, #13
 800e9fa:	d102      	bne.n	800ea02 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800e9fc:	f06f 030c 	mvn.w	r3, #12
 800ea00:	e006      	b.n	800ea10 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	68ba      	ldr	r2, [r7, #8]
 800ea06:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800ea08:	f06f 0304 	mvn.w	r3, #4
 800ea0c:	e000      	b.n	800ea10 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800ea0e:	2300      	movs	r3, #0
}
 800ea10:	4618      	mov	r0, r3
 800ea12:	3714      	adds	r7, #20
 800ea14:	46bd      	mov	sp, r7
 800ea16:	bd90      	pop	{r4, r7, pc}
 800ea18:	0801ba78 	.word	0x0801ba78
 800ea1c:	0801bf88 	.word	0x0801bf88
 800ea20:	0801babc 	.word	0x0801babc

0800ea24 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800ea24:	b580      	push	{r7, lr}
 800ea26:	b084      	sub	sp, #16
 800ea28:	af00      	add	r7, sp, #0
 800ea2a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800ea2c:	e007      	b.n	800ea3e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800ea34:	6878      	ldr	r0, [r7, #4]
 800ea36:	f000 f80a 	bl	800ea4e <tcp_seg_free>
    seg = next;
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d1f4      	bne.n	800ea2e <tcp_segs_free+0xa>
  }
}
 800ea44:	bf00      	nop
 800ea46:	bf00      	nop
 800ea48:	3710      	adds	r7, #16
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	bd80      	pop	{r7, pc}

0800ea4e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800ea4e:	b580      	push	{r7, lr}
 800ea50:	b082      	sub	sp, #8
 800ea52:	af00      	add	r7, sp, #0
 800ea54:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d00c      	beq.n	800ea76 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	685b      	ldr	r3, [r3, #4]
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d004      	beq.n	800ea6e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	685b      	ldr	r3, [r3, #4]
 800ea68:	4618      	mov	r0, r3
 800ea6a:	f7fe fa31 	bl	800ced0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800ea6e:	6879      	ldr	r1, [r7, #4]
 800ea70:	2003      	movs	r0, #3
 800ea72:	f7fd fb7d 	bl	800c170 <memp_free>
  }
}
 800ea76:	bf00      	nop
 800ea78:	3708      	adds	r7, #8
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	bd80      	pop	{r7, pc}
	...

0800ea80 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800ea80:	b580      	push	{r7, lr}
 800ea82:	b082      	sub	sp, #8
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	6078      	str	r0, [r7, #4]
 800ea88:	460b      	mov	r3, r1
 800ea8a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d107      	bne.n	800eaa2 <tcp_setprio+0x22>
 800ea92:	4b07      	ldr	r3, [pc, #28]	@ (800eab0 <tcp_setprio+0x30>)
 800ea94:	f44f 62ce 	mov.w	r2, #1648	@ 0x670
 800ea98:	4906      	ldr	r1, [pc, #24]	@ (800eab4 <tcp_setprio+0x34>)
 800ea9a:	4807      	ldr	r0, [pc, #28]	@ (800eab8 <tcp_setprio+0x38>)
 800ea9c:	f00a f952 	bl	8018d44 <iprintf>
 800eaa0:	e002      	b.n	800eaa8 <tcp_setprio+0x28>

  pcb->prio = prio;
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	78fa      	ldrb	r2, [r7, #3]
 800eaa6:	755a      	strb	r2, [r3, #21]
}
 800eaa8:	3708      	adds	r7, #8
 800eaaa:	46bd      	mov	sp, r7
 800eaac:	bd80      	pop	{r7, pc}
 800eaae:	bf00      	nop
 800eab0:	0801ba78 	.word	0x0801ba78
 800eab4:	0801bfb0 	.word	0x0801bfb0
 800eab8:	0801babc 	.word	0x0801babc

0800eabc <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800eabc:	b580      	push	{r7, lr}
 800eabe:	b084      	sub	sp, #16
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d106      	bne.n	800ead8 <tcp_seg_copy+0x1c>
 800eaca:	4b0f      	ldr	r3, [pc, #60]	@ (800eb08 <tcp_seg_copy+0x4c>)
 800eacc:	f240 6282 	movw	r2, #1666	@ 0x682
 800ead0:	490e      	ldr	r1, [pc, #56]	@ (800eb0c <tcp_seg_copy+0x50>)
 800ead2:	480f      	ldr	r0, [pc, #60]	@ (800eb10 <tcp_seg_copy+0x54>)
 800ead4:	f00a f936 	bl	8018d44 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800ead8:	2003      	movs	r0, #3
 800eada:	f7fd fad3 	bl	800c084 <memp_malloc>
 800eade:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d101      	bne.n	800eaea <tcp_seg_copy+0x2e>
    return NULL;
 800eae6:	2300      	movs	r3, #0
 800eae8:	e00a      	b.n	800eb00 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800eaea:	2210      	movs	r2, #16
 800eaec:	6879      	ldr	r1, [r7, #4]
 800eaee:	68f8      	ldr	r0, [r7, #12]
 800eaf0:	f00a fb29 	bl	8019146 <memcpy>
  pbuf_ref(cseg->p);
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	685b      	ldr	r3, [r3, #4]
 800eaf8:	4618      	mov	r0, r3
 800eafa:	f7fe fa8f 	bl	800d01c <pbuf_ref>
  return cseg;
 800eafe:	68fb      	ldr	r3, [r7, #12]
}
 800eb00:	4618      	mov	r0, r3
 800eb02:	3710      	adds	r7, #16
 800eb04:	46bd      	mov	sp, r7
 800eb06:	bd80      	pop	{r7, pc}
 800eb08:	0801ba78 	.word	0x0801ba78
 800eb0c:	0801bfcc 	.word	0x0801bfcc
 800eb10:	0801babc 	.word	0x0801babc

0800eb14 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800eb14:	b580      	push	{r7, lr}
 800eb16:	b084      	sub	sp, #16
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	60f8      	str	r0, [r7, #12]
 800eb1c:	60b9      	str	r1, [r7, #8]
 800eb1e:	607a      	str	r2, [r7, #4]
 800eb20:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800eb22:	68bb      	ldr	r3, [r7, #8]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d109      	bne.n	800eb3c <tcp_recv_null+0x28>
 800eb28:	4b12      	ldr	r3, [pc, #72]	@ (800eb74 <tcp_recv_null+0x60>)
 800eb2a:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800eb2e:	4912      	ldr	r1, [pc, #72]	@ (800eb78 <tcp_recv_null+0x64>)
 800eb30:	4812      	ldr	r0, [pc, #72]	@ (800eb7c <tcp_recv_null+0x68>)
 800eb32:	f00a f907 	bl	8018d44 <iprintf>
 800eb36:	f06f 030f 	mvn.w	r3, #15
 800eb3a:	e016      	b.n	800eb6a <tcp_recv_null+0x56>

  if (p != NULL) {
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d009      	beq.n	800eb56 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	891b      	ldrh	r3, [r3, #8]
 800eb46:	4619      	mov	r1, r3
 800eb48:	68b8      	ldr	r0, [r7, #8]
 800eb4a:	f7ff f99b 	bl	800de84 <tcp_recved>
    pbuf_free(p);
 800eb4e:	6878      	ldr	r0, [r7, #4]
 800eb50:	f7fe f9be 	bl	800ced0 <pbuf_free>
 800eb54:	e008      	b.n	800eb68 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800eb56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d104      	bne.n	800eb68 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800eb5e:	68b8      	ldr	r0, [r7, #8]
 800eb60:	f7fe fe70 	bl	800d844 <tcp_close>
 800eb64:	4603      	mov	r3, r0
 800eb66:	e000      	b.n	800eb6a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800eb68:	2300      	movs	r3, #0
}
 800eb6a:	4618      	mov	r0, r3
 800eb6c:	3710      	adds	r7, #16
 800eb6e:	46bd      	mov	sp, r7
 800eb70:	bd80      	pop	{r7, pc}
 800eb72:	bf00      	nop
 800eb74:	0801ba78 	.word	0x0801ba78
 800eb78:	0801bfe8 	.word	0x0801bfe8
 800eb7c:	0801babc 	.word	0x0801babc

0800eb80 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800eb80:	b580      	push	{r7, lr}
 800eb82:	b086      	sub	sp, #24
 800eb84:	af00      	add	r7, sp, #0
 800eb86:	4603      	mov	r3, r0
 800eb88:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800eb8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	db01      	blt.n	800eb96 <tcp_kill_prio+0x16>
 800eb92:	79fb      	ldrb	r3, [r7, #7]
 800eb94:	e000      	b.n	800eb98 <tcp_kill_prio+0x18>
 800eb96:	237f      	movs	r3, #127	@ 0x7f
 800eb98:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800eb9a:	7afb      	ldrb	r3, [r7, #11]
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d034      	beq.n	800ec0a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800eba0:	7afb      	ldrb	r3, [r7, #11]
 800eba2:	3b01      	subs	r3, #1
 800eba4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800eba6:	2300      	movs	r3, #0
 800eba8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ebaa:	2300      	movs	r3, #0
 800ebac:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ebae:	4b19      	ldr	r3, [pc, #100]	@ (800ec14 <tcp_kill_prio+0x94>)
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	617b      	str	r3, [r7, #20]
 800ebb4:	e01f      	b.n	800ebf6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800ebb6:	697b      	ldr	r3, [r7, #20]
 800ebb8:	7d5b      	ldrb	r3, [r3, #21]
 800ebba:	7afa      	ldrb	r2, [r7, #11]
 800ebbc:	429a      	cmp	r2, r3
 800ebbe:	d80c      	bhi.n	800ebda <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ebc0:	697b      	ldr	r3, [r7, #20]
 800ebc2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800ebc4:	7afa      	ldrb	r2, [r7, #11]
 800ebc6:	429a      	cmp	r2, r3
 800ebc8:	d112      	bne.n	800ebf0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ebca:	4b13      	ldr	r3, [pc, #76]	@ (800ec18 <tcp_kill_prio+0x98>)
 800ebcc:	681a      	ldr	r2, [r3, #0]
 800ebce:	697b      	ldr	r3, [r7, #20]
 800ebd0:	6a1b      	ldr	r3, [r3, #32]
 800ebd2:	1ad3      	subs	r3, r2, r3
 800ebd4:	68fa      	ldr	r2, [r7, #12]
 800ebd6:	429a      	cmp	r2, r3
 800ebd8:	d80a      	bhi.n	800ebf0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800ebda:	4b0f      	ldr	r3, [pc, #60]	@ (800ec18 <tcp_kill_prio+0x98>)
 800ebdc:	681a      	ldr	r2, [r3, #0]
 800ebde:	697b      	ldr	r3, [r7, #20]
 800ebe0:	6a1b      	ldr	r3, [r3, #32]
 800ebe2:	1ad3      	subs	r3, r2, r3
 800ebe4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800ebe6:	697b      	ldr	r3, [r7, #20]
 800ebe8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800ebea:	697b      	ldr	r3, [r7, #20]
 800ebec:	7d5b      	ldrb	r3, [r3, #21]
 800ebee:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ebf0:	697b      	ldr	r3, [r7, #20]
 800ebf2:	68db      	ldr	r3, [r3, #12]
 800ebf4:	617b      	str	r3, [r7, #20]
 800ebf6:	697b      	ldr	r3, [r7, #20]
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d1dc      	bne.n	800ebb6 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800ebfc:	693b      	ldr	r3, [r7, #16]
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d004      	beq.n	800ec0c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ec02:	6938      	ldr	r0, [r7, #16]
 800ec04:	f7fe ff64 	bl	800dad0 <tcp_abort>
 800ec08:	e000      	b.n	800ec0c <tcp_kill_prio+0x8c>
    return;
 800ec0a:	bf00      	nop
  }
}
 800ec0c:	3718      	adds	r7, #24
 800ec0e:	46bd      	mov	sp, r7
 800ec10:	bd80      	pop	{r7, pc}
 800ec12:	bf00      	nop
 800ec14:	20010e80 	.word	0x20010e80
 800ec18:	20010e74 	.word	0x20010e74

0800ec1c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800ec1c:	b580      	push	{r7, lr}
 800ec1e:	b086      	sub	sp, #24
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	4603      	mov	r3, r0
 800ec24:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800ec26:	79fb      	ldrb	r3, [r7, #7]
 800ec28:	2b08      	cmp	r3, #8
 800ec2a:	d009      	beq.n	800ec40 <tcp_kill_state+0x24>
 800ec2c:	79fb      	ldrb	r3, [r7, #7]
 800ec2e:	2b09      	cmp	r3, #9
 800ec30:	d006      	beq.n	800ec40 <tcp_kill_state+0x24>
 800ec32:	4b1a      	ldr	r3, [pc, #104]	@ (800ec9c <tcp_kill_state+0x80>)
 800ec34:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800ec38:	4919      	ldr	r1, [pc, #100]	@ (800eca0 <tcp_kill_state+0x84>)
 800ec3a:	481a      	ldr	r0, [pc, #104]	@ (800eca4 <tcp_kill_state+0x88>)
 800ec3c:	f00a f882 	bl	8018d44 <iprintf>

  inactivity = 0;
 800ec40:	2300      	movs	r3, #0
 800ec42:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ec44:	2300      	movs	r3, #0
 800ec46:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ec48:	4b17      	ldr	r3, [pc, #92]	@ (800eca8 <tcp_kill_state+0x8c>)
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	617b      	str	r3, [r7, #20]
 800ec4e:	e017      	b.n	800ec80 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800ec50:	697b      	ldr	r3, [r7, #20]
 800ec52:	7d1b      	ldrb	r3, [r3, #20]
 800ec54:	79fa      	ldrb	r2, [r7, #7]
 800ec56:	429a      	cmp	r2, r3
 800ec58:	d10f      	bne.n	800ec7a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ec5a:	4b14      	ldr	r3, [pc, #80]	@ (800ecac <tcp_kill_state+0x90>)
 800ec5c:	681a      	ldr	r2, [r3, #0]
 800ec5e:	697b      	ldr	r3, [r7, #20]
 800ec60:	6a1b      	ldr	r3, [r3, #32]
 800ec62:	1ad3      	subs	r3, r2, r3
 800ec64:	68fa      	ldr	r2, [r7, #12]
 800ec66:	429a      	cmp	r2, r3
 800ec68:	d807      	bhi.n	800ec7a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800ec6a:	4b10      	ldr	r3, [pc, #64]	@ (800ecac <tcp_kill_state+0x90>)
 800ec6c:	681a      	ldr	r2, [r3, #0]
 800ec6e:	697b      	ldr	r3, [r7, #20]
 800ec70:	6a1b      	ldr	r3, [r3, #32]
 800ec72:	1ad3      	subs	r3, r2, r3
 800ec74:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800ec76:	697b      	ldr	r3, [r7, #20]
 800ec78:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ec7a:	697b      	ldr	r3, [r7, #20]
 800ec7c:	68db      	ldr	r3, [r3, #12]
 800ec7e:	617b      	str	r3, [r7, #20]
 800ec80:	697b      	ldr	r3, [r7, #20]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d1e4      	bne.n	800ec50 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800ec86:	693b      	ldr	r3, [r7, #16]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d003      	beq.n	800ec94 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800ec8c:	2100      	movs	r1, #0
 800ec8e:	6938      	ldr	r0, [r7, #16]
 800ec90:	f7fe fe60 	bl	800d954 <tcp_abandon>
  }
}
 800ec94:	bf00      	nop
 800ec96:	3718      	adds	r7, #24
 800ec98:	46bd      	mov	sp, r7
 800ec9a:	bd80      	pop	{r7, pc}
 800ec9c:	0801ba78 	.word	0x0801ba78
 800eca0:	0801c004 	.word	0x0801c004
 800eca4:	0801babc 	.word	0x0801babc
 800eca8:	20010e80 	.word	0x20010e80
 800ecac:	20010e74 	.word	0x20010e74

0800ecb0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800ecb0:	b580      	push	{r7, lr}
 800ecb2:	b084      	sub	sp, #16
 800ecb4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800ecb6:	2300      	movs	r3, #0
 800ecb8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800ecba:	2300      	movs	r3, #0
 800ecbc:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ecbe:	4b12      	ldr	r3, [pc, #72]	@ (800ed08 <tcp_kill_timewait+0x58>)
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	60fb      	str	r3, [r7, #12]
 800ecc4:	e012      	b.n	800ecec <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ecc6:	4b11      	ldr	r3, [pc, #68]	@ (800ed0c <tcp_kill_timewait+0x5c>)
 800ecc8:	681a      	ldr	r2, [r3, #0]
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	6a1b      	ldr	r3, [r3, #32]
 800ecce:	1ad3      	subs	r3, r2, r3
 800ecd0:	687a      	ldr	r2, [r7, #4]
 800ecd2:	429a      	cmp	r2, r3
 800ecd4:	d807      	bhi.n	800ece6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800ecd6:	4b0d      	ldr	r3, [pc, #52]	@ (800ed0c <tcp_kill_timewait+0x5c>)
 800ecd8:	681a      	ldr	r2, [r3, #0]
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	6a1b      	ldr	r3, [r3, #32]
 800ecde:	1ad3      	subs	r3, r2, r3
 800ece0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	68db      	ldr	r3, [r3, #12]
 800ecea:	60fb      	str	r3, [r7, #12]
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d1e9      	bne.n	800ecc6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800ecf2:	68bb      	ldr	r3, [r7, #8]
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d002      	beq.n	800ecfe <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ecf8:	68b8      	ldr	r0, [r7, #8]
 800ecfa:	f7fe fee9 	bl	800dad0 <tcp_abort>
  }
}
 800ecfe:	bf00      	nop
 800ed00:	3710      	adds	r7, #16
 800ed02:	46bd      	mov	sp, r7
 800ed04:	bd80      	pop	{r7, pc}
 800ed06:	bf00      	nop
 800ed08:	20010e84 	.word	0x20010e84
 800ed0c:	20010e74 	.word	0x20010e74

0800ed10 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800ed10:	b580      	push	{r7, lr}
 800ed12:	b082      	sub	sp, #8
 800ed14:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800ed16:	4b10      	ldr	r3, [pc, #64]	@ (800ed58 <tcp_handle_closepend+0x48>)
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ed1c:	e014      	b.n	800ed48 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	68db      	ldr	r3, [r3, #12]
 800ed22:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	8b5b      	ldrh	r3, [r3, #26]
 800ed28:	f003 0308 	and.w	r3, r3, #8
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d009      	beq.n	800ed44 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	8b5b      	ldrh	r3, [r3, #26]
 800ed34:	f023 0308 	bic.w	r3, r3, #8
 800ed38:	b29a      	uxth	r2, r3
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800ed3e:	6878      	ldr	r0, [r7, #4]
 800ed40:	f7fe fd16 	bl	800d770 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800ed44:	683b      	ldr	r3, [r7, #0]
 800ed46:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d1e7      	bne.n	800ed1e <tcp_handle_closepend+0xe>
  }
}
 800ed4e:	bf00      	nop
 800ed50:	bf00      	nop
 800ed52:	3708      	adds	r7, #8
 800ed54:	46bd      	mov	sp, r7
 800ed56:	bd80      	pop	{r7, pc}
 800ed58:	20010e80 	.word	0x20010e80

0800ed5c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800ed5c:	b580      	push	{r7, lr}
 800ed5e:	b084      	sub	sp, #16
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	4603      	mov	r3, r0
 800ed64:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ed66:	2001      	movs	r0, #1
 800ed68:	f7fd f98c 	bl	800c084 <memp_malloc>
 800ed6c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d126      	bne.n	800edc2 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800ed74:	f7ff ffcc 	bl	800ed10 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800ed78:	f7ff ff9a 	bl	800ecb0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ed7c:	2001      	movs	r0, #1
 800ed7e:	f7fd f981 	bl	800c084 <memp_malloc>
 800ed82:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d11b      	bne.n	800edc2 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800ed8a:	2009      	movs	r0, #9
 800ed8c:	f7ff ff46 	bl	800ec1c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ed90:	2001      	movs	r0, #1
 800ed92:	f7fd f977 	bl	800c084 <memp_malloc>
 800ed96:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d111      	bne.n	800edc2 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800ed9e:	2008      	movs	r0, #8
 800eda0:	f7ff ff3c 	bl	800ec1c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800eda4:	2001      	movs	r0, #1
 800eda6:	f7fd f96d 	bl	800c084 <memp_malloc>
 800edaa:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d107      	bne.n	800edc2 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800edb2:	79fb      	ldrb	r3, [r7, #7]
 800edb4:	4618      	mov	r0, r3
 800edb6:	f7ff fee3 	bl	800eb80 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800edba:	2001      	movs	r0, #1
 800edbc:	f7fd f962 	bl	800c084 <memp_malloc>
 800edc0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d03f      	beq.n	800ee48 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800edc8:	229c      	movs	r2, #156	@ 0x9c
 800edca:	2100      	movs	r1, #0
 800edcc:	68f8      	ldr	r0, [r7, #12]
 800edce:	f00a f858 	bl	8018e82 <memset>
    pcb->prio = prio;
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	79fa      	ldrb	r2, [r7, #7]
 800edd6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800edde:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800ede8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	22ff      	movs	r2, #255	@ 0xff
 800edf6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800edfe:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	2206      	movs	r2, #6
 800ee04:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	2206      	movs	r2, #6
 800ee0c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ee14:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	2201      	movs	r2, #1
 800ee1a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800ee1e:	4b0d      	ldr	r3, [pc, #52]	@ (800ee54 <tcp_alloc+0xf8>)
 800ee20:	681a      	ldr	r2, [r3, #0]
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800ee26:	4b0c      	ldr	r3, [pc, #48]	@ (800ee58 <tcp_alloc+0xfc>)
 800ee28:	781a      	ldrb	r2, [r3, #0]
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800ee34:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	4a08      	ldr	r2, [pc, #32]	@ (800ee5c <tcp_alloc+0x100>)
 800ee3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	4a07      	ldr	r2, [pc, #28]	@ (800ee60 <tcp_alloc+0x104>)
 800ee44:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800ee48:	68fb      	ldr	r3, [r7, #12]
}
 800ee4a:	4618      	mov	r0, r3
 800ee4c:	3710      	adds	r7, #16
 800ee4e:	46bd      	mov	sp, r7
 800ee50:	bd80      	pop	{r7, pc}
 800ee52:	bf00      	nop
 800ee54:	20010e74 	.word	0x20010e74
 800ee58:	20010e8a 	.word	0x20010e8a
 800ee5c:	0800eb15 	.word	0x0800eb15
 800ee60:	006ddd00 	.word	0x006ddd00

0800ee64 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800ee64:	b580      	push	{r7, lr}
 800ee66:	b084      	sub	sp, #16
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	4603      	mov	r3, r0
 800ee6c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800ee6e:	2040      	movs	r0, #64	@ 0x40
 800ee70:	f7ff ff74 	bl	800ed5c <tcp_alloc>
 800ee74:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800ee76:	68fb      	ldr	r3, [r7, #12]
}
 800ee78:	4618      	mov	r0, r3
 800ee7a:	3710      	adds	r7, #16
 800ee7c:	46bd      	mov	sp, r7
 800ee7e:	bd80      	pop	{r7, pc}

0800ee80 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800ee80:	b480      	push	{r7}
 800ee82:	b083      	sub	sp, #12
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	6078      	str	r0, [r7, #4]
 800ee88:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d002      	beq.n	800ee96 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	683a      	ldr	r2, [r7, #0]
 800ee94:	611a      	str	r2, [r3, #16]
  }
}
 800ee96:	bf00      	nop
 800ee98:	370c      	adds	r7, #12
 800ee9a:	46bd      	mov	sp, r7
 800ee9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea0:	4770      	bx	lr
	...

0800eea4 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800eea4:	b580      	push	{r7, lr}
 800eea6:	b082      	sub	sp, #8
 800eea8:	af00      	add	r7, sp, #0
 800eeaa:	6078      	str	r0, [r7, #4]
 800eeac:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d00e      	beq.n	800eed2 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	7d1b      	ldrb	r3, [r3, #20]
 800eeb8:	2b01      	cmp	r3, #1
 800eeba:	d106      	bne.n	800eeca <tcp_recv+0x26>
 800eebc:	4b07      	ldr	r3, [pc, #28]	@ (800eedc <tcp_recv+0x38>)
 800eebe:	f240 72df 	movw	r2, #2015	@ 0x7df
 800eec2:	4907      	ldr	r1, [pc, #28]	@ (800eee0 <tcp_recv+0x3c>)
 800eec4:	4807      	ldr	r0, [pc, #28]	@ (800eee4 <tcp_recv+0x40>)
 800eec6:	f009 ff3d 	bl	8018d44 <iprintf>
    pcb->recv = recv;
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	683a      	ldr	r2, [r7, #0]
 800eece:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 800eed2:	bf00      	nop
 800eed4:	3708      	adds	r7, #8
 800eed6:	46bd      	mov	sp, r7
 800eed8:	bd80      	pop	{r7, pc}
 800eeda:	bf00      	nop
 800eedc:	0801ba78 	.word	0x0801ba78
 800eee0:	0801c014 	.word	0x0801c014
 800eee4:	0801babc 	.word	0x0801babc

0800eee8 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800eee8:	b580      	push	{r7, lr}
 800eeea:	b082      	sub	sp, #8
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	6078      	str	r0, [r7, #4]
 800eef0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d00e      	beq.n	800ef16 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	7d1b      	ldrb	r3, [r3, #20]
 800eefc:	2b01      	cmp	r3, #1
 800eefe:	d106      	bne.n	800ef0e <tcp_sent+0x26>
 800ef00:	4b07      	ldr	r3, [pc, #28]	@ (800ef20 <tcp_sent+0x38>)
 800ef02:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 800ef06:	4907      	ldr	r1, [pc, #28]	@ (800ef24 <tcp_sent+0x3c>)
 800ef08:	4807      	ldr	r0, [pc, #28]	@ (800ef28 <tcp_sent+0x40>)
 800ef0a:	f009 ff1b 	bl	8018d44 <iprintf>
    pcb->sent = sent;
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	683a      	ldr	r2, [r7, #0]
 800ef12:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 800ef16:	bf00      	nop
 800ef18:	3708      	adds	r7, #8
 800ef1a:	46bd      	mov	sp, r7
 800ef1c:	bd80      	pop	{r7, pc}
 800ef1e:	bf00      	nop
 800ef20:	0801ba78 	.word	0x0801ba78
 800ef24:	0801c03c 	.word	0x0801c03c
 800ef28:	0801babc 	.word	0x0801babc

0800ef2c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800ef2c:	b580      	push	{r7, lr}
 800ef2e:	b082      	sub	sp, #8
 800ef30:	af00      	add	r7, sp, #0
 800ef32:	6078      	str	r0, [r7, #4]
 800ef34:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d00e      	beq.n	800ef5a <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	7d1b      	ldrb	r3, [r3, #20]
 800ef40:	2b01      	cmp	r3, #1
 800ef42:	d106      	bne.n	800ef52 <tcp_err+0x26>
 800ef44:	4b07      	ldr	r3, [pc, #28]	@ (800ef64 <tcp_err+0x38>)
 800ef46:	f640 020d 	movw	r2, #2061	@ 0x80d
 800ef4a:	4907      	ldr	r1, [pc, #28]	@ (800ef68 <tcp_err+0x3c>)
 800ef4c:	4807      	ldr	r0, [pc, #28]	@ (800ef6c <tcp_err+0x40>)
 800ef4e:	f009 fef9 	bl	8018d44 <iprintf>
    pcb->errf = err;
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	683a      	ldr	r2, [r7, #0]
 800ef56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 800ef5a:	bf00      	nop
 800ef5c:	3708      	adds	r7, #8
 800ef5e:	46bd      	mov	sp, r7
 800ef60:	bd80      	pop	{r7, pc}
 800ef62:	bf00      	nop
 800ef64:	0801ba78 	.word	0x0801ba78
 800ef68:	0801c064 	.word	0x0801c064
 800ef6c:	0801babc 	.word	0x0801babc

0800ef70 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800ef70:	b480      	push	{r7}
 800ef72:	b085      	sub	sp, #20
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	6078      	str	r0, [r7, #4]
 800ef78:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d008      	beq.n	800ef92 <tcp_accept+0x22>
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	7d1b      	ldrb	r3, [r3, #20]
 800ef84:	2b01      	cmp	r3, #1
 800ef86:	d104      	bne.n	800ef92 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	683a      	ldr	r2, [r7, #0]
 800ef90:	619a      	str	r2, [r3, #24]
  }
}
 800ef92:	bf00      	nop
 800ef94:	3714      	adds	r7, #20
 800ef96:	46bd      	mov	sp, r7
 800ef98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef9c:	4770      	bx	lr
	...

0800efa0 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800efa0:	b580      	push	{r7, lr}
 800efa2:	b084      	sub	sp, #16
 800efa4:	af00      	add	r7, sp, #0
 800efa6:	60f8      	str	r0, [r7, #12]
 800efa8:	60b9      	str	r1, [r7, #8]
 800efaa:	4613      	mov	r3, r2
 800efac:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d107      	bne.n	800efc4 <tcp_poll+0x24>
 800efb4:	4b0e      	ldr	r3, [pc, #56]	@ (800eff0 <tcp_poll+0x50>)
 800efb6:	f640 023d 	movw	r2, #2109	@ 0x83d
 800efba:	490e      	ldr	r1, [pc, #56]	@ (800eff4 <tcp_poll+0x54>)
 800efbc:	480e      	ldr	r0, [pc, #56]	@ (800eff8 <tcp_poll+0x58>)
 800efbe:	f009 fec1 	bl	8018d44 <iprintf>
 800efc2:	e011      	b.n	800efe8 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	7d1b      	ldrb	r3, [r3, #20]
 800efc8:	2b01      	cmp	r3, #1
 800efca:	d106      	bne.n	800efda <tcp_poll+0x3a>
 800efcc:	4b08      	ldr	r3, [pc, #32]	@ (800eff0 <tcp_poll+0x50>)
 800efce:	f640 023e 	movw	r2, #2110	@ 0x83e
 800efd2:	490a      	ldr	r1, [pc, #40]	@ (800effc <tcp_poll+0x5c>)
 800efd4:	4808      	ldr	r0, [pc, #32]	@ (800eff8 <tcp_poll+0x58>)
 800efd6:	f009 feb5 	bl	8018d44 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	68ba      	ldr	r2, [r7, #8]
 800efde:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	79fa      	ldrb	r2, [r7, #7]
 800efe6:	775a      	strb	r2, [r3, #29]
}
 800efe8:	3710      	adds	r7, #16
 800efea:	46bd      	mov	sp, r7
 800efec:	bd80      	pop	{r7, pc}
 800efee:	bf00      	nop
 800eff0:	0801ba78 	.word	0x0801ba78
 800eff4:	0801c08c 	.word	0x0801c08c
 800eff8:	0801babc 	.word	0x0801babc
 800effc:	0801c0a4 	.word	0x0801c0a4

0800f000 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800f000:	b580      	push	{r7, lr}
 800f002:	b082      	sub	sp, #8
 800f004:	af00      	add	r7, sp, #0
 800f006:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d107      	bne.n	800f01e <tcp_pcb_purge+0x1e>
 800f00e:	4b21      	ldr	r3, [pc, #132]	@ (800f094 <tcp_pcb_purge+0x94>)
 800f010:	f640 0251 	movw	r2, #2129	@ 0x851
 800f014:	4920      	ldr	r1, [pc, #128]	@ (800f098 <tcp_pcb_purge+0x98>)
 800f016:	4821      	ldr	r0, [pc, #132]	@ (800f09c <tcp_pcb_purge+0x9c>)
 800f018:	f009 fe94 	bl	8018d44 <iprintf>
 800f01c:	e037      	b.n	800f08e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	7d1b      	ldrb	r3, [r3, #20]
 800f022:	2b00      	cmp	r3, #0
 800f024:	d033      	beq.n	800f08e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800f02a:	2b0a      	cmp	r3, #10
 800f02c:	d02f      	beq.n	800f08e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800f032:	2b01      	cmp	r3, #1
 800f034:	d02b      	beq.n	800f08e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d007      	beq.n	800f04e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f042:	4618      	mov	r0, r3
 800f044:	f7fd ff44 	bl	800ced0 <pbuf_free>
      pcb->refused_data = NULL;
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	2200      	movs	r2, #0
 800f04c:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f052:	2b00      	cmp	r3, #0
 800f054:	d002      	beq.n	800f05c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800f056:	6878      	ldr	r0, [r7, #4]
 800f058:	f000 f986 	bl	800f368 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f062:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f068:	4618      	mov	r0, r3
 800f06a:	f7ff fcdb 	bl	800ea24 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f072:	4618      	mov	r0, r3
 800f074:	f7ff fcd6 	bl	800ea24 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	2200      	movs	r2, #0
 800f07c:	66da      	str	r2, [r3, #108]	@ 0x6c
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	2200      	movs	r2, #0
 800f08a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800f08e:	3708      	adds	r7, #8
 800f090:	46bd      	mov	sp, r7
 800f092:	bd80      	pop	{r7, pc}
 800f094:	0801ba78 	.word	0x0801ba78
 800f098:	0801c0c4 	.word	0x0801c0c4
 800f09c:	0801babc 	.word	0x0801babc

0800f0a0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800f0a0:	b580      	push	{r7, lr}
 800f0a2:	b084      	sub	sp, #16
 800f0a4:	af00      	add	r7, sp, #0
 800f0a6:	6078      	str	r0, [r7, #4]
 800f0a8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800f0aa:	683b      	ldr	r3, [r7, #0]
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d106      	bne.n	800f0be <tcp_pcb_remove+0x1e>
 800f0b0:	4b3e      	ldr	r3, [pc, #248]	@ (800f1ac <tcp_pcb_remove+0x10c>)
 800f0b2:	f640 0283 	movw	r2, #2179	@ 0x883
 800f0b6:	493e      	ldr	r1, [pc, #248]	@ (800f1b0 <tcp_pcb_remove+0x110>)
 800f0b8:	483e      	ldr	r0, [pc, #248]	@ (800f1b4 <tcp_pcb_remove+0x114>)
 800f0ba:	f009 fe43 	bl	8018d44 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d106      	bne.n	800f0d2 <tcp_pcb_remove+0x32>
 800f0c4:	4b39      	ldr	r3, [pc, #228]	@ (800f1ac <tcp_pcb_remove+0x10c>)
 800f0c6:	f640 0284 	movw	r2, #2180	@ 0x884
 800f0ca:	493b      	ldr	r1, [pc, #236]	@ (800f1b8 <tcp_pcb_remove+0x118>)
 800f0cc:	4839      	ldr	r0, [pc, #228]	@ (800f1b4 <tcp_pcb_remove+0x114>)
 800f0ce:	f009 fe39 	bl	8018d44 <iprintf>

  TCP_RMV(pcblist, pcb);
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	683a      	ldr	r2, [r7, #0]
 800f0d8:	429a      	cmp	r2, r3
 800f0da:	d105      	bne.n	800f0e8 <tcp_pcb_remove+0x48>
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	68da      	ldr	r2, [r3, #12]
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	601a      	str	r2, [r3, #0]
 800f0e6:	e013      	b.n	800f110 <tcp_pcb_remove+0x70>
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	60fb      	str	r3, [r7, #12]
 800f0ee:	e00c      	b.n	800f10a <tcp_pcb_remove+0x6a>
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	68db      	ldr	r3, [r3, #12]
 800f0f4:	683a      	ldr	r2, [r7, #0]
 800f0f6:	429a      	cmp	r2, r3
 800f0f8:	d104      	bne.n	800f104 <tcp_pcb_remove+0x64>
 800f0fa:	683b      	ldr	r3, [r7, #0]
 800f0fc:	68da      	ldr	r2, [r3, #12]
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	60da      	str	r2, [r3, #12]
 800f102:	e005      	b.n	800f110 <tcp_pcb_remove+0x70>
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	68db      	ldr	r3, [r3, #12]
 800f108:	60fb      	str	r3, [r7, #12]
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d1ef      	bne.n	800f0f0 <tcp_pcb_remove+0x50>
 800f110:	683b      	ldr	r3, [r7, #0]
 800f112:	2200      	movs	r2, #0
 800f114:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800f116:	6838      	ldr	r0, [r7, #0]
 800f118:	f7ff ff72 	bl	800f000 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800f11c:	683b      	ldr	r3, [r7, #0]
 800f11e:	7d1b      	ldrb	r3, [r3, #20]
 800f120:	2b0a      	cmp	r3, #10
 800f122:	d013      	beq.n	800f14c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800f124:	683b      	ldr	r3, [r7, #0]
 800f126:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800f128:	2b01      	cmp	r3, #1
 800f12a:	d00f      	beq.n	800f14c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800f12c:	683b      	ldr	r3, [r7, #0]
 800f12e:	8b5b      	ldrh	r3, [r3, #26]
 800f130:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800f134:	2b00      	cmp	r3, #0
 800f136:	d009      	beq.n	800f14c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800f138:	683b      	ldr	r3, [r7, #0]
 800f13a:	8b5b      	ldrh	r3, [r3, #26]
 800f13c:	f043 0302 	orr.w	r3, r3, #2
 800f140:	b29a      	uxth	r2, r3
 800f142:	683b      	ldr	r3, [r7, #0]
 800f144:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f146:	6838      	ldr	r0, [r7, #0]
 800f148:	f003 fbc0 	bl	80128cc <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800f14c:	683b      	ldr	r3, [r7, #0]
 800f14e:	7d1b      	ldrb	r3, [r3, #20]
 800f150:	2b01      	cmp	r3, #1
 800f152:	d020      	beq.n	800f196 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800f154:	683b      	ldr	r3, [r7, #0]
 800f156:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d006      	beq.n	800f16a <tcp_pcb_remove+0xca>
 800f15c:	4b13      	ldr	r3, [pc, #76]	@ (800f1ac <tcp_pcb_remove+0x10c>)
 800f15e:	f640 0293 	movw	r2, #2195	@ 0x893
 800f162:	4916      	ldr	r1, [pc, #88]	@ (800f1bc <tcp_pcb_remove+0x11c>)
 800f164:	4813      	ldr	r0, [pc, #76]	@ (800f1b4 <tcp_pcb_remove+0x114>)
 800f166:	f009 fded 	bl	8018d44 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800f16a:	683b      	ldr	r3, [r7, #0]
 800f16c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d006      	beq.n	800f180 <tcp_pcb_remove+0xe0>
 800f172:	4b0e      	ldr	r3, [pc, #56]	@ (800f1ac <tcp_pcb_remove+0x10c>)
 800f174:	f640 0294 	movw	r2, #2196	@ 0x894
 800f178:	4911      	ldr	r1, [pc, #68]	@ (800f1c0 <tcp_pcb_remove+0x120>)
 800f17a:	480e      	ldr	r0, [pc, #56]	@ (800f1b4 <tcp_pcb_remove+0x114>)
 800f17c:	f009 fde2 	bl	8018d44 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800f180:	683b      	ldr	r3, [r7, #0]
 800f182:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f184:	2b00      	cmp	r3, #0
 800f186:	d006      	beq.n	800f196 <tcp_pcb_remove+0xf6>
 800f188:	4b08      	ldr	r3, [pc, #32]	@ (800f1ac <tcp_pcb_remove+0x10c>)
 800f18a:	f640 0296 	movw	r2, #2198	@ 0x896
 800f18e:	490d      	ldr	r1, [pc, #52]	@ (800f1c4 <tcp_pcb_remove+0x124>)
 800f190:	4808      	ldr	r0, [pc, #32]	@ (800f1b4 <tcp_pcb_remove+0x114>)
 800f192:	f009 fdd7 	bl	8018d44 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800f196:	683b      	ldr	r3, [r7, #0]
 800f198:	2200      	movs	r2, #0
 800f19a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800f19c:	683b      	ldr	r3, [r7, #0]
 800f19e:	2200      	movs	r2, #0
 800f1a0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800f1a2:	bf00      	nop
 800f1a4:	3710      	adds	r7, #16
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	bd80      	pop	{r7, pc}
 800f1aa:	bf00      	nop
 800f1ac:	0801ba78 	.word	0x0801ba78
 800f1b0:	0801c0e0 	.word	0x0801c0e0
 800f1b4:	0801babc 	.word	0x0801babc
 800f1b8:	0801c0fc 	.word	0x0801c0fc
 800f1bc:	0801c11c 	.word	0x0801c11c
 800f1c0:	0801c134 	.word	0x0801c134
 800f1c4:	0801c150 	.word	0x0801c150

0800f1c8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800f1c8:	b580      	push	{r7, lr}
 800f1ca:	b082      	sub	sp, #8
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d106      	bne.n	800f1e4 <tcp_next_iss+0x1c>
 800f1d6:	4b0a      	ldr	r3, [pc, #40]	@ (800f200 <tcp_next_iss+0x38>)
 800f1d8:	f640 02af 	movw	r2, #2223	@ 0x8af
 800f1dc:	4909      	ldr	r1, [pc, #36]	@ (800f204 <tcp_next_iss+0x3c>)
 800f1de:	480a      	ldr	r0, [pc, #40]	@ (800f208 <tcp_next_iss+0x40>)
 800f1e0:	f009 fdb0 	bl	8018d44 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800f1e4:	4b09      	ldr	r3, [pc, #36]	@ (800f20c <tcp_next_iss+0x44>)
 800f1e6:	681a      	ldr	r2, [r3, #0]
 800f1e8:	4b09      	ldr	r3, [pc, #36]	@ (800f210 <tcp_next_iss+0x48>)
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	4413      	add	r3, r2
 800f1ee:	4a07      	ldr	r2, [pc, #28]	@ (800f20c <tcp_next_iss+0x44>)
 800f1f0:	6013      	str	r3, [r2, #0]
  return iss;
 800f1f2:	4b06      	ldr	r3, [pc, #24]	@ (800f20c <tcp_next_iss+0x44>)
 800f1f4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800f1f6:	4618      	mov	r0, r3
 800f1f8:	3708      	adds	r7, #8
 800f1fa:	46bd      	mov	sp, r7
 800f1fc:	bd80      	pop	{r7, pc}
 800f1fe:	bf00      	nop
 800f200:	0801ba78 	.word	0x0801ba78
 800f204:	0801c168 	.word	0x0801c168
 800f208:	0801babc 	.word	0x0801babc
 800f20c:	20000028 	.word	0x20000028
 800f210:	20010e74 	.word	0x20010e74

0800f214 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800f214:	b580      	push	{r7, lr}
 800f216:	b086      	sub	sp, #24
 800f218:	af00      	add	r7, sp, #0
 800f21a:	4603      	mov	r3, r0
 800f21c:	60b9      	str	r1, [r7, #8]
 800f21e:	607a      	str	r2, [r7, #4]
 800f220:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	2b00      	cmp	r3, #0
 800f226:	d106      	bne.n	800f236 <tcp_eff_send_mss_netif+0x22>
 800f228:	4b14      	ldr	r3, [pc, #80]	@ (800f27c <tcp_eff_send_mss_netif+0x68>)
 800f22a:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800f22e:	4914      	ldr	r1, [pc, #80]	@ (800f280 <tcp_eff_send_mss_netif+0x6c>)
 800f230:	4814      	ldr	r0, [pc, #80]	@ (800f284 <tcp_eff_send_mss_netif+0x70>)
 800f232:	f009 fd87 	bl	8018d44 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800f236:	68bb      	ldr	r3, [r7, #8]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d101      	bne.n	800f240 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800f23c:	89fb      	ldrh	r3, [r7, #14]
 800f23e:	e019      	b.n	800f274 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800f240:	68bb      	ldr	r3, [r7, #8]
 800f242:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f244:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800f246:	8afb      	ldrh	r3, [r7, #22]
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d012      	beq.n	800f272 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800f24c:	2328      	movs	r3, #40	@ 0x28
 800f24e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800f250:	8afa      	ldrh	r2, [r7, #22]
 800f252:	8abb      	ldrh	r3, [r7, #20]
 800f254:	429a      	cmp	r2, r3
 800f256:	d904      	bls.n	800f262 <tcp_eff_send_mss_netif+0x4e>
 800f258:	8afa      	ldrh	r2, [r7, #22]
 800f25a:	8abb      	ldrh	r3, [r7, #20]
 800f25c:	1ad3      	subs	r3, r2, r3
 800f25e:	b29b      	uxth	r3, r3
 800f260:	e000      	b.n	800f264 <tcp_eff_send_mss_netif+0x50>
 800f262:	2300      	movs	r3, #0
 800f264:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800f266:	8a7a      	ldrh	r2, [r7, #18]
 800f268:	89fb      	ldrh	r3, [r7, #14]
 800f26a:	4293      	cmp	r3, r2
 800f26c:	bf28      	it	cs
 800f26e:	4613      	movcs	r3, r2
 800f270:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800f272:	89fb      	ldrh	r3, [r7, #14]
}
 800f274:	4618      	mov	r0, r3
 800f276:	3718      	adds	r7, #24
 800f278:	46bd      	mov	sp, r7
 800f27a:	bd80      	pop	{r7, pc}
 800f27c:	0801ba78 	.word	0x0801ba78
 800f280:	0801c184 	.word	0x0801c184
 800f284:	0801babc 	.word	0x0801babc

0800f288 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800f288:	b580      	push	{r7, lr}
 800f28a:	b084      	sub	sp, #16
 800f28c:	af00      	add	r7, sp, #0
 800f28e:	6078      	str	r0, [r7, #4]
 800f290:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800f292:	683b      	ldr	r3, [r7, #0]
 800f294:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d119      	bne.n	800f2d0 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800f29c:	4b10      	ldr	r3, [pc, #64]	@ (800f2e0 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800f29e:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800f2a2:	4910      	ldr	r1, [pc, #64]	@ (800f2e4 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800f2a4:	4810      	ldr	r0, [pc, #64]	@ (800f2e8 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800f2a6:	f009 fd4d 	bl	8018d44 <iprintf>

  while (pcb != NULL) {
 800f2aa:	e011      	b.n	800f2d0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	681a      	ldr	r2, [r3, #0]
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	429a      	cmp	r2, r3
 800f2b6:	d108      	bne.n	800f2ca <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	68db      	ldr	r3, [r3, #12]
 800f2bc:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800f2be:	68f8      	ldr	r0, [r7, #12]
 800f2c0:	f7fe fc06 	bl	800dad0 <tcp_abort>
      pcb = next;
 800f2c4:	68bb      	ldr	r3, [r7, #8]
 800f2c6:	60fb      	str	r3, [r7, #12]
 800f2c8:	e002      	b.n	800f2d0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	68db      	ldr	r3, [r3, #12]
 800f2ce:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d1ea      	bne.n	800f2ac <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800f2d6:	bf00      	nop
 800f2d8:	bf00      	nop
 800f2da:	3710      	adds	r7, #16
 800f2dc:	46bd      	mov	sp, r7
 800f2de:	bd80      	pop	{r7, pc}
 800f2e0:	0801ba78 	.word	0x0801ba78
 800f2e4:	0801c1ac 	.word	0x0801c1ac
 800f2e8:	0801babc 	.word	0x0801babc

0800f2ec <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f2ec:	b580      	push	{r7, lr}
 800f2ee:	b084      	sub	sp, #16
 800f2f0:	af00      	add	r7, sp, #0
 800f2f2:	6078      	str	r0, [r7, #4]
 800f2f4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d02a      	beq.n	800f352 <tcp_netif_ip_addr_changed+0x66>
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	2b00      	cmp	r3, #0
 800f302:	d026      	beq.n	800f352 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800f304:	4b15      	ldr	r3, [pc, #84]	@ (800f35c <tcp_netif_ip_addr_changed+0x70>)
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	4619      	mov	r1, r3
 800f30a:	6878      	ldr	r0, [r7, #4]
 800f30c:	f7ff ffbc 	bl	800f288 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800f310:	4b13      	ldr	r3, [pc, #76]	@ (800f360 <tcp_netif_ip_addr_changed+0x74>)
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	4619      	mov	r1, r3
 800f316:	6878      	ldr	r0, [r7, #4]
 800f318:	f7ff ffb6 	bl	800f288 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800f31c:	683b      	ldr	r3, [r7, #0]
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d017      	beq.n	800f352 <tcp_netif_ip_addr_changed+0x66>
 800f322:	683b      	ldr	r3, [r7, #0]
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	2b00      	cmp	r3, #0
 800f328:	d013      	beq.n	800f352 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f32a:	4b0e      	ldr	r3, [pc, #56]	@ (800f364 <tcp_netif_ip_addr_changed+0x78>)
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	60fb      	str	r3, [r7, #12]
 800f330:	e00c      	b.n	800f34c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	681a      	ldr	r2, [r3, #0]
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	429a      	cmp	r2, r3
 800f33c:	d103      	bne.n	800f346 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800f33e:	683b      	ldr	r3, [r7, #0]
 800f340:	681a      	ldr	r2, [r3, #0]
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	68db      	ldr	r3, [r3, #12]
 800f34a:	60fb      	str	r3, [r7, #12]
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d1ef      	bne.n	800f332 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800f352:	bf00      	nop
 800f354:	3710      	adds	r7, #16
 800f356:	46bd      	mov	sp, r7
 800f358:	bd80      	pop	{r7, pc}
 800f35a:	bf00      	nop
 800f35c:	20010e80 	.word	0x20010e80
 800f360:	20010e78 	.word	0x20010e78
 800f364:	20010e7c 	.word	0x20010e7c

0800f368 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800f368:	b580      	push	{r7, lr}
 800f36a:	b082      	sub	sp, #8
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f374:	2b00      	cmp	r3, #0
 800f376:	d007      	beq.n	800f388 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f37c:	4618      	mov	r0, r3
 800f37e:	f7ff fb51 	bl	800ea24 <tcp_segs_free>
    pcb->ooseq = NULL;
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	2200      	movs	r2, #0
 800f386:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800f388:	bf00      	nop
 800f38a:	3708      	adds	r7, #8
 800f38c:	46bd      	mov	sp, r7
 800f38e:	bd80      	pop	{r7, pc}

0800f390 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800f390:	b590      	push	{r4, r7, lr}
 800f392:	b08d      	sub	sp, #52	@ 0x34
 800f394:	af04      	add	r7, sp, #16
 800f396:	6078      	str	r0, [r7, #4]
 800f398:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d105      	bne.n	800f3ac <tcp_input+0x1c>
 800f3a0:	4b9b      	ldr	r3, [pc, #620]	@ (800f610 <tcp_input+0x280>)
 800f3a2:	2283      	movs	r2, #131	@ 0x83
 800f3a4:	499b      	ldr	r1, [pc, #620]	@ (800f614 <tcp_input+0x284>)
 800f3a6:	489c      	ldr	r0, [pc, #624]	@ (800f618 <tcp_input+0x288>)
 800f3a8:	f009 fccc 	bl	8018d44 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	685b      	ldr	r3, [r3, #4]
 800f3b0:	4a9a      	ldr	r2, [pc, #616]	@ (800f61c <tcp_input+0x28c>)
 800f3b2:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	895b      	ldrh	r3, [r3, #10]
 800f3b8:	2b13      	cmp	r3, #19
 800f3ba:	f240 83d1 	bls.w	800fb60 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f3be:	4b98      	ldr	r3, [pc, #608]	@ (800f620 <tcp_input+0x290>)
 800f3c0:	695b      	ldr	r3, [r3, #20]
 800f3c2:	4a97      	ldr	r2, [pc, #604]	@ (800f620 <tcp_input+0x290>)
 800f3c4:	6812      	ldr	r2, [r2, #0]
 800f3c6:	4611      	mov	r1, r2
 800f3c8:	4618      	mov	r0, r3
 800f3ca:	f008 fa55 	bl	8017878 <ip4_addr_isbroadcast_u32>
 800f3ce:	4603      	mov	r3, r0
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	f040 83c7 	bne.w	800fb64 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800f3d6:	4b92      	ldr	r3, [pc, #584]	@ (800f620 <tcp_input+0x290>)
 800f3d8:	695b      	ldr	r3, [r3, #20]
 800f3da:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f3de:	2be0      	cmp	r3, #224	@ 0xe0
 800f3e0:	f000 83c0 	beq.w	800fb64 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800f3e4:	4b8d      	ldr	r3, [pc, #564]	@ (800f61c <tcp_input+0x28c>)
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	899b      	ldrh	r3, [r3, #12]
 800f3ea:	b29b      	uxth	r3, r3
 800f3ec:	4618      	mov	r0, r3
 800f3ee:	f7fc f93b 	bl	800b668 <lwip_htons>
 800f3f2:	4603      	mov	r3, r0
 800f3f4:	0b1b      	lsrs	r3, r3, #12
 800f3f6:	b29b      	uxth	r3, r3
 800f3f8:	b2db      	uxtb	r3, r3
 800f3fa:	009b      	lsls	r3, r3, #2
 800f3fc:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800f3fe:	7cbb      	ldrb	r3, [r7, #18]
 800f400:	2b13      	cmp	r3, #19
 800f402:	f240 83b1 	bls.w	800fb68 <tcp_input+0x7d8>
 800f406:	7cbb      	ldrb	r3, [r7, #18]
 800f408:	b29a      	uxth	r2, r3
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	891b      	ldrh	r3, [r3, #8]
 800f40e:	429a      	cmp	r2, r3
 800f410:	f200 83aa 	bhi.w	800fb68 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800f414:	7cbb      	ldrb	r3, [r7, #18]
 800f416:	b29b      	uxth	r3, r3
 800f418:	3b14      	subs	r3, #20
 800f41a:	b29a      	uxth	r2, r3
 800f41c:	4b81      	ldr	r3, [pc, #516]	@ (800f624 <tcp_input+0x294>)
 800f41e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800f420:	4b81      	ldr	r3, [pc, #516]	@ (800f628 <tcp_input+0x298>)
 800f422:	2200      	movs	r2, #0
 800f424:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	895a      	ldrh	r2, [r3, #10]
 800f42a:	7cbb      	ldrb	r3, [r7, #18]
 800f42c:	b29b      	uxth	r3, r3
 800f42e:	429a      	cmp	r2, r3
 800f430:	d309      	bcc.n	800f446 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800f432:	4b7c      	ldr	r3, [pc, #496]	@ (800f624 <tcp_input+0x294>)
 800f434:	881a      	ldrh	r2, [r3, #0]
 800f436:	4b7d      	ldr	r3, [pc, #500]	@ (800f62c <tcp_input+0x29c>)
 800f438:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800f43a:	7cbb      	ldrb	r3, [r7, #18]
 800f43c:	4619      	mov	r1, r3
 800f43e:	6878      	ldr	r0, [r7, #4]
 800f440:	f7fd fcc0 	bl	800cdc4 <pbuf_remove_header>
 800f444:	e04e      	b.n	800f4e4 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d105      	bne.n	800f45a <tcp_input+0xca>
 800f44e:	4b70      	ldr	r3, [pc, #448]	@ (800f610 <tcp_input+0x280>)
 800f450:	22c2      	movs	r2, #194	@ 0xc2
 800f452:	4977      	ldr	r1, [pc, #476]	@ (800f630 <tcp_input+0x2a0>)
 800f454:	4870      	ldr	r0, [pc, #448]	@ (800f618 <tcp_input+0x288>)
 800f456:	f009 fc75 	bl	8018d44 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800f45a:	2114      	movs	r1, #20
 800f45c:	6878      	ldr	r0, [r7, #4]
 800f45e:	f7fd fcb1 	bl	800cdc4 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	895a      	ldrh	r2, [r3, #10]
 800f466:	4b71      	ldr	r3, [pc, #452]	@ (800f62c <tcp_input+0x29c>)
 800f468:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800f46a:	4b6e      	ldr	r3, [pc, #440]	@ (800f624 <tcp_input+0x294>)
 800f46c:	881a      	ldrh	r2, [r3, #0]
 800f46e:	4b6f      	ldr	r3, [pc, #444]	@ (800f62c <tcp_input+0x29c>)
 800f470:	881b      	ldrh	r3, [r3, #0]
 800f472:	1ad3      	subs	r3, r2, r3
 800f474:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800f476:	4b6d      	ldr	r3, [pc, #436]	@ (800f62c <tcp_input+0x29c>)
 800f478:	881b      	ldrh	r3, [r3, #0]
 800f47a:	4619      	mov	r1, r3
 800f47c:	6878      	ldr	r0, [r7, #4]
 800f47e:	f7fd fca1 	bl	800cdc4 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	895b      	ldrh	r3, [r3, #10]
 800f488:	8a3a      	ldrh	r2, [r7, #16]
 800f48a:	429a      	cmp	r2, r3
 800f48c:	f200 836e 	bhi.w	800fb6c <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	685b      	ldr	r3, [r3, #4]
 800f496:	4a64      	ldr	r2, [pc, #400]	@ (800f628 <tcp_input+0x298>)
 800f498:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	8a3a      	ldrh	r2, [r7, #16]
 800f4a0:	4611      	mov	r1, r2
 800f4a2:	4618      	mov	r0, r3
 800f4a4:	f7fd fc8e 	bl	800cdc4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	891a      	ldrh	r2, [r3, #8]
 800f4ac:	8a3b      	ldrh	r3, [r7, #16]
 800f4ae:	1ad3      	subs	r3, r2, r3
 800f4b0:	b29a      	uxth	r2, r3
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	895b      	ldrh	r3, [r3, #10]
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d005      	beq.n	800f4ca <tcp_input+0x13a>
 800f4be:	4b54      	ldr	r3, [pc, #336]	@ (800f610 <tcp_input+0x280>)
 800f4c0:	22df      	movs	r2, #223	@ 0xdf
 800f4c2:	495c      	ldr	r1, [pc, #368]	@ (800f634 <tcp_input+0x2a4>)
 800f4c4:	4854      	ldr	r0, [pc, #336]	@ (800f618 <tcp_input+0x288>)
 800f4c6:	f009 fc3d 	bl	8018d44 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	891a      	ldrh	r2, [r3, #8]
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	891b      	ldrh	r3, [r3, #8]
 800f4d4:	429a      	cmp	r2, r3
 800f4d6:	d005      	beq.n	800f4e4 <tcp_input+0x154>
 800f4d8:	4b4d      	ldr	r3, [pc, #308]	@ (800f610 <tcp_input+0x280>)
 800f4da:	22e0      	movs	r2, #224	@ 0xe0
 800f4dc:	4956      	ldr	r1, [pc, #344]	@ (800f638 <tcp_input+0x2a8>)
 800f4de:	484e      	ldr	r0, [pc, #312]	@ (800f618 <tcp_input+0x288>)
 800f4e0:	f009 fc30 	bl	8018d44 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800f4e4:	4b4d      	ldr	r3, [pc, #308]	@ (800f61c <tcp_input+0x28c>)
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	881b      	ldrh	r3, [r3, #0]
 800f4ea:	b29b      	uxth	r3, r3
 800f4ec:	4a4b      	ldr	r2, [pc, #300]	@ (800f61c <tcp_input+0x28c>)
 800f4ee:	6814      	ldr	r4, [r2, #0]
 800f4f0:	4618      	mov	r0, r3
 800f4f2:	f7fc f8b9 	bl	800b668 <lwip_htons>
 800f4f6:	4603      	mov	r3, r0
 800f4f8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800f4fa:	4b48      	ldr	r3, [pc, #288]	@ (800f61c <tcp_input+0x28c>)
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	885b      	ldrh	r3, [r3, #2]
 800f500:	b29b      	uxth	r3, r3
 800f502:	4a46      	ldr	r2, [pc, #280]	@ (800f61c <tcp_input+0x28c>)
 800f504:	6814      	ldr	r4, [r2, #0]
 800f506:	4618      	mov	r0, r3
 800f508:	f7fc f8ae 	bl	800b668 <lwip_htons>
 800f50c:	4603      	mov	r3, r0
 800f50e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f510:	4b42      	ldr	r3, [pc, #264]	@ (800f61c <tcp_input+0x28c>)
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	685b      	ldr	r3, [r3, #4]
 800f516:	4a41      	ldr	r2, [pc, #260]	@ (800f61c <tcp_input+0x28c>)
 800f518:	6814      	ldr	r4, [r2, #0]
 800f51a:	4618      	mov	r0, r3
 800f51c:	f7fc f8b9 	bl	800b692 <lwip_htonl>
 800f520:	4603      	mov	r3, r0
 800f522:	6063      	str	r3, [r4, #4]
 800f524:	6863      	ldr	r3, [r4, #4]
 800f526:	4a45      	ldr	r2, [pc, #276]	@ (800f63c <tcp_input+0x2ac>)
 800f528:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f52a:	4b3c      	ldr	r3, [pc, #240]	@ (800f61c <tcp_input+0x28c>)
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	689b      	ldr	r3, [r3, #8]
 800f530:	4a3a      	ldr	r2, [pc, #232]	@ (800f61c <tcp_input+0x28c>)
 800f532:	6814      	ldr	r4, [r2, #0]
 800f534:	4618      	mov	r0, r3
 800f536:	f7fc f8ac 	bl	800b692 <lwip_htonl>
 800f53a:	4603      	mov	r3, r0
 800f53c:	60a3      	str	r3, [r4, #8]
 800f53e:	68a3      	ldr	r3, [r4, #8]
 800f540:	4a3f      	ldr	r2, [pc, #252]	@ (800f640 <tcp_input+0x2b0>)
 800f542:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f544:	4b35      	ldr	r3, [pc, #212]	@ (800f61c <tcp_input+0x28c>)
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	89db      	ldrh	r3, [r3, #14]
 800f54a:	b29b      	uxth	r3, r3
 800f54c:	4a33      	ldr	r2, [pc, #204]	@ (800f61c <tcp_input+0x28c>)
 800f54e:	6814      	ldr	r4, [r2, #0]
 800f550:	4618      	mov	r0, r3
 800f552:	f7fc f889 	bl	800b668 <lwip_htons>
 800f556:	4603      	mov	r3, r0
 800f558:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800f55a:	4b30      	ldr	r3, [pc, #192]	@ (800f61c <tcp_input+0x28c>)
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	899b      	ldrh	r3, [r3, #12]
 800f560:	b29b      	uxth	r3, r3
 800f562:	4618      	mov	r0, r3
 800f564:	f7fc f880 	bl	800b668 <lwip_htons>
 800f568:	4603      	mov	r3, r0
 800f56a:	b2db      	uxtb	r3, r3
 800f56c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f570:	b2da      	uxtb	r2, r3
 800f572:	4b34      	ldr	r3, [pc, #208]	@ (800f644 <tcp_input+0x2b4>)
 800f574:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	891a      	ldrh	r2, [r3, #8]
 800f57a:	4b33      	ldr	r3, [pc, #204]	@ (800f648 <tcp_input+0x2b8>)
 800f57c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800f57e:	4b31      	ldr	r3, [pc, #196]	@ (800f644 <tcp_input+0x2b4>)
 800f580:	781b      	ldrb	r3, [r3, #0]
 800f582:	f003 0303 	and.w	r3, r3, #3
 800f586:	2b00      	cmp	r3, #0
 800f588:	d00c      	beq.n	800f5a4 <tcp_input+0x214>
    tcplen++;
 800f58a:	4b2f      	ldr	r3, [pc, #188]	@ (800f648 <tcp_input+0x2b8>)
 800f58c:	881b      	ldrh	r3, [r3, #0]
 800f58e:	3301      	adds	r3, #1
 800f590:	b29a      	uxth	r2, r3
 800f592:	4b2d      	ldr	r3, [pc, #180]	@ (800f648 <tcp_input+0x2b8>)
 800f594:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	891a      	ldrh	r2, [r3, #8]
 800f59a:	4b2b      	ldr	r3, [pc, #172]	@ (800f648 <tcp_input+0x2b8>)
 800f59c:	881b      	ldrh	r3, [r3, #0]
 800f59e:	429a      	cmp	r2, r3
 800f5a0:	f200 82e6 	bhi.w	800fb70 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800f5a4:	2300      	movs	r3, #0
 800f5a6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f5a8:	4b28      	ldr	r3, [pc, #160]	@ (800f64c <tcp_input+0x2bc>)
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	61fb      	str	r3, [r7, #28]
 800f5ae:	e09d      	b.n	800f6ec <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800f5b0:	69fb      	ldr	r3, [r7, #28]
 800f5b2:	7d1b      	ldrb	r3, [r3, #20]
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d105      	bne.n	800f5c4 <tcp_input+0x234>
 800f5b8:	4b15      	ldr	r3, [pc, #84]	@ (800f610 <tcp_input+0x280>)
 800f5ba:	22fb      	movs	r2, #251	@ 0xfb
 800f5bc:	4924      	ldr	r1, [pc, #144]	@ (800f650 <tcp_input+0x2c0>)
 800f5be:	4816      	ldr	r0, [pc, #88]	@ (800f618 <tcp_input+0x288>)
 800f5c0:	f009 fbc0 	bl	8018d44 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f5c4:	69fb      	ldr	r3, [r7, #28]
 800f5c6:	7d1b      	ldrb	r3, [r3, #20]
 800f5c8:	2b0a      	cmp	r3, #10
 800f5ca:	d105      	bne.n	800f5d8 <tcp_input+0x248>
 800f5cc:	4b10      	ldr	r3, [pc, #64]	@ (800f610 <tcp_input+0x280>)
 800f5ce:	22fc      	movs	r2, #252	@ 0xfc
 800f5d0:	4920      	ldr	r1, [pc, #128]	@ (800f654 <tcp_input+0x2c4>)
 800f5d2:	4811      	ldr	r0, [pc, #68]	@ (800f618 <tcp_input+0x288>)
 800f5d4:	f009 fbb6 	bl	8018d44 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800f5d8:	69fb      	ldr	r3, [r7, #28]
 800f5da:	7d1b      	ldrb	r3, [r3, #20]
 800f5dc:	2b01      	cmp	r3, #1
 800f5de:	d105      	bne.n	800f5ec <tcp_input+0x25c>
 800f5e0:	4b0b      	ldr	r3, [pc, #44]	@ (800f610 <tcp_input+0x280>)
 800f5e2:	22fd      	movs	r2, #253	@ 0xfd
 800f5e4:	491c      	ldr	r1, [pc, #112]	@ (800f658 <tcp_input+0x2c8>)
 800f5e6:	480c      	ldr	r0, [pc, #48]	@ (800f618 <tcp_input+0x288>)
 800f5e8:	f009 fbac 	bl	8018d44 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f5ec:	69fb      	ldr	r3, [r7, #28]
 800f5ee:	7a1b      	ldrb	r3, [r3, #8]
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d033      	beq.n	800f65c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f5f4:	69fb      	ldr	r3, [r7, #28]
 800f5f6:	7a1a      	ldrb	r2, [r3, #8]
 800f5f8:	4b09      	ldr	r3, [pc, #36]	@ (800f620 <tcp_input+0x290>)
 800f5fa:	685b      	ldr	r3, [r3, #4]
 800f5fc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800f600:	3301      	adds	r3, #1
 800f602:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f604:	429a      	cmp	r2, r3
 800f606:	d029      	beq.n	800f65c <tcp_input+0x2cc>
      prev = pcb;
 800f608:	69fb      	ldr	r3, [r7, #28]
 800f60a:	61bb      	str	r3, [r7, #24]
      continue;
 800f60c:	e06b      	b.n	800f6e6 <tcp_input+0x356>
 800f60e:	bf00      	nop
 800f610:	0801c1e0 	.word	0x0801c1e0
 800f614:	0801c214 	.word	0x0801c214
 800f618:	0801c22c 	.word	0x0801c22c
 800f61c:	20010e9c 	.word	0x20010e9c
 800f620:	2000d700 	.word	0x2000d700
 800f624:	20010ea0 	.word	0x20010ea0
 800f628:	20010ea4 	.word	0x20010ea4
 800f62c:	20010ea2 	.word	0x20010ea2
 800f630:	0801c254 	.word	0x0801c254
 800f634:	0801c264 	.word	0x0801c264
 800f638:	0801c270 	.word	0x0801c270
 800f63c:	20010eac 	.word	0x20010eac
 800f640:	20010eb0 	.word	0x20010eb0
 800f644:	20010eb8 	.word	0x20010eb8
 800f648:	20010eb6 	.word	0x20010eb6
 800f64c:	20010e80 	.word	0x20010e80
 800f650:	0801c290 	.word	0x0801c290
 800f654:	0801c2b8 	.word	0x0801c2b8
 800f658:	0801c2e4 	.word	0x0801c2e4
    }

    if (pcb->remote_port == tcphdr->src &&
 800f65c:	69fb      	ldr	r3, [r7, #28]
 800f65e:	8b1a      	ldrh	r2, [r3, #24]
 800f660:	4b72      	ldr	r3, [pc, #456]	@ (800f82c <tcp_input+0x49c>)
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	881b      	ldrh	r3, [r3, #0]
 800f666:	b29b      	uxth	r3, r3
 800f668:	429a      	cmp	r2, r3
 800f66a:	d13a      	bne.n	800f6e2 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800f66c:	69fb      	ldr	r3, [r7, #28]
 800f66e:	8ada      	ldrh	r2, [r3, #22]
 800f670:	4b6e      	ldr	r3, [pc, #440]	@ (800f82c <tcp_input+0x49c>)
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	885b      	ldrh	r3, [r3, #2]
 800f676:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800f678:	429a      	cmp	r2, r3
 800f67a:	d132      	bne.n	800f6e2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f67c:	69fb      	ldr	r3, [r7, #28]
 800f67e:	685a      	ldr	r2, [r3, #4]
 800f680:	4b6b      	ldr	r3, [pc, #428]	@ (800f830 <tcp_input+0x4a0>)
 800f682:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800f684:	429a      	cmp	r2, r3
 800f686:	d12c      	bne.n	800f6e2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f688:	69fb      	ldr	r3, [r7, #28]
 800f68a:	681a      	ldr	r2, [r3, #0]
 800f68c:	4b68      	ldr	r3, [pc, #416]	@ (800f830 <tcp_input+0x4a0>)
 800f68e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f690:	429a      	cmp	r2, r3
 800f692:	d126      	bne.n	800f6e2 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800f694:	69fb      	ldr	r3, [r7, #28]
 800f696:	68db      	ldr	r3, [r3, #12]
 800f698:	69fa      	ldr	r2, [r7, #28]
 800f69a:	429a      	cmp	r2, r3
 800f69c:	d106      	bne.n	800f6ac <tcp_input+0x31c>
 800f69e:	4b65      	ldr	r3, [pc, #404]	@ (800f834 <tcp_input+0x4a4>)
 800f6a0:	f240 120d 	movw	r2, #269	@ 0x10d
 800f6a4:	4964      	ldr	r1, [pc, #400]	@ (800f838 <tcp_input+0x4a8>)
 800f6a6:	4865      	ldr	r0, [pc, #404]	@ (800f83c <tcp_input+0x4ac>)
 800f6a8:	f009 fb4c 	bl	8018d44 <iprintf>
      if (prev != NULL) {
 800f6ac:	69bb      	ldr	r3, [r7, #24]
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d00a      	beq.n	800f6c8 <tcp_input+0x338>
        prev->next = pcb->next;
 800f6b2:	69fb      	ldr	r3, [r7, #28]
 800f6b4:	68da      	ldr	r2, [r3, #12]
 800f6b6:	69bb      	ldr	r3, [r7, #24]
 800f6b8:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800f6ba:	4b61      	ldr	r3, [pc, #388]	@ (800f840 <tcp_input+0x4b0>)
 800f6bc:	681a      	ldr	r2, [r3, #0]
 800f6be:	69fb      	ldr	r3, [r7, #28]
 800f6c0:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800f6c2:	4a5f      	ldr	r2, [pc, #380]	@ (800f840 <tcp_input+0x4b0>)
 800f6c4:	69fb      	ldr	r3, [r7, #28]
 800f6c6:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800f6c8:	69fb      	ldr	r3, [r7, #28]
 800f6ca:	68db      	ldr	r3, [r3, #12]
 800f6cc:	69fa      	ldr	r2, [r7, #28]
 800f6ce:	429a      	cmp	r2, r3
 800f6d0:	d111      	bne.n	800f6f6 <tcp_input+0x366>
 800f6d2:	4b58      	ldr	r3, [pc, #352]	@ (800f834 <tcp_input+0x4a4>)
 800f6d4:	f240 1215 	movw	r2, #277	@ 0x115
 800f6d8:	495a      	ldr	r1, [pc, #360]	@ (800f844 <tcp_input+0x4b4>)
 800f6da:	4858      	ldr	r0, [pc, #352]	@ (800f83c <tcp_input+0x4ac>)
 800f6dc:	f009 fb32 	bl	8018d44 <iprintf>
      break;
 800f6e0:	e009      	b.n	800f6f6 <tcp_input+0x366>
    }
    prev = pcb;
 800f6e2:	69fb      	ldr	r3, [r7, #28]
 800f6e4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f6e6:	69fb      	ldr	r3, [r7, #28]
 800f6e8:	68db      	ldr	r3, [r3, #12]
 800f6ea:	61fb      	str	r3, [r7, #28]
 800f6ec:	69fb      	ldr	r3, [r7, #28]
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	f47f af5e 	bne.w	800f5b0 <tcp_input+0x220>
 800f6f4:	e000      	b.n	800f6f8 <tcp_input+0x368>
      break;
 800f6f6:	bf00      	nop
  }

  if (pcb == NULL) {
 800f6f8:	69fb      	ldr	r3, [r7, #28]
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	f040 80aa 	bne.w	800f854 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f700:	4b51      	ldr	r3, [pc, #324]	@ (800f848 <tcp_input+0x4b8>)
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	61fb      	str	r3, [r7, #28]
 800f706:	e03f      	b.n	800f788 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f708:	69fb      	ldr	r3, [r7, #28]
 800f70a:	7d1b      	ldrb	r3, [r3, #20]
 800f70c:	2b0a      	cmp	r3, #10
 800f70e:	d006      	beq.n	800f71e <tcp_input+0x38e>
 800f710:	4b48      	ldr	r3, [pc, #288]	@ (800f834 <tcp_input+0x4a4>)
 800f712:	f240 121f 	movw	r2, #287	@ 0x11f
 800f716:	494d      	ldr	r1, [pc, #308]	@ (800f84c <tcp_input+0x4bc>)
 800f718:	4848      	ldr	r0, [pc, #288]	@ (800f83c <tcp_input+0x4ac>)
 800f71a:	f009 fb13 	bl	8018d44 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f71e:	69fb      	ldr	r3, [r7, #28]
 800f720:	7a1b      	ldrb	r3, [r3, #8]
 800f722:	2b00      	cmp	r3, #0
 800f724:	d009      	beq.n	800f73a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f726:	69fb      	ldr	r3, [r7, #28]
 800f728:	7a1a      	ldrb	r2, [r3, #8]
 800f72a:	4b41      	ldr	r3, [pc, #260]	@ (800f830 <tcp_input+0x4a0>)
 800f72c:	685b      	ldr	r3, [r3, #4]
 800f72e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800f732:	3301      	adds	r3, #1
 800f734:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f736:	429a      	cmp	r2, r3
 800f738:	d122      	bne.n	800f780 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800f73a:	69fb      	ldr	r3, [r7, #28]
 800f73c:	8b1a      	ldrh	r2, [r3, #24]
 800f73e:	4b3b      	ldr	r3, [pc, #236]	@ (800f82c <tcp_input+0x49c>)
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	881b      	ldrh	r3, [r3, #0]
 800f744:	b29b      	uxth	r3, r3
 800f746:	429a      	cmp	r2, r3
 800f748:	d11b      	bne.n	800f782 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800f74a:	69fb      	ldr	r3, [r7, #28]
 800f74c:	8ada      	ldrh	r2, [r3, #22]
 800f74e:	4b37      	ldr	r3, [pc, #220]	@ (800f82c <tcp_input+0x49c>)
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	885b      	ldrh	r3, [r3, #2]
 800f754:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800f756:	429a      	cmp	r2, r3
 800f758:	d113      	bne.n	800f782 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f75a:	69fb      	ldr	r3, [r7, #28]
 800f75c:	685a      	ldr	r2, [r3, #4]
 800f75e:	4b34      	ldr	r3, [pc, #208]	@ (800f830 <tcp_input+0x4a0>)
 800f760:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800f762:	429a      	cmp	r2, r3
 800f764:	d10d      	bne.n	800f782 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f766:	69fb      	ldr	r3, [r7, #28]
 800f768:	681a      	ldr	r2, [r3, #0]
 800f76a:	4b31      	ldr	r3, [pc, #196]	@ (800f830 <tcp_input+0x4a0>)
 800f76c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f76e:	429a      	cmp	r2, r3
 800f770:	d107      	bne.n	800f782 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800f772:	69f8      	ldr	r0, [r7, #28]
 800f774:	f000 fb56 	bl	800fe24 <tcp_timewait_input>
        }
        pbuf_free(p);
 800f778:	6878      	ldr	r0, [r7, #4]
 800f77a:	f7fd fba9 	bl	800ced0 <pbuf_free>
        return;
 800f77e:	e1fd      	b.n	800fb7c <tcp_input+0x7ec>
        continue;
 800f780:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f782:	69fb      	ldr	r3, [r7, #28]
 800f784:	68db      	ldr	r3, [r3, #12]
 800f786:	61fb      	str	r3, [r7, #28]
 800f788:	69fb      	ldr	r3, [r7, #28]
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d1bc      	bne.n	800f708 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800f78e:	2300      	movs	r3, #0
 800f790:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f792:	4b2f      	ldr	r3, [pc, #188]	@ (800f850 <tcp_input+0x4c0>)
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	617b      	str	r3, [r7, #20]
 800f798:	e02a      	b.n	800f7f0 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f79a:	697b      	ldr	r3, [r7, #20]
 800f79c:	7a1b      	ldrb	r3, [r3, #8]
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d00c      	beq.n	800f7bc <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f7a2:	697b      	ldr	r3, [r7, #20]
 800f7a4:	7a1a      	ldrb	r2, [r3, #8]
 800f7a6:	4b22      	ldr	r3, [pc, #136]	@ (800f830 <tcp_input+0x4a0>)
 800f7a8:	685b      	ldr	r3, [r3, #4]
 800f7aa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800f7ae:	3301      	adds	r3, #1
 800f7b0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f7b2:	429a      	cmp	r2, r3
 800f7b4:	d002      	beq.n	800f7bc <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800f7b6:	697b      	ldr	r3, [r7, #20]
 800f7b8:	61bb      	str	r3, [r7, #24]
        continue;
 800f7ba:	e016      	b.n	800f7ea <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800f7bc:	697b      	ldr	r3, [r7, #20]
 800f7be:	8ada      	ldrh	r2, [r3, #22]
 800f7c0:	4b1a      	ldr	r3, [pc, #104]	@ (800f82c <tcp_input+0x49c>)
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	885b      	ldrh	r3, [r3, #2]
 800f7c6:	b29b      	uxth	r3, r3
 800f7c8:	429a      	cmp	r2, r3
 800f7ca:	d10c      	bne.n	800f7e6 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800f7cc:	697b      	ldr	r3, [r7, #20]
 800f7ce:	681a      	ldr	r2, [r3, #0]
 800f7d0:	4b17      	ldr	r3, [pc, #92]	@ (800f830 <tcp_input+0x4a0>)
 800f7d2:	695b      	ldr	r3, [r3, #20]
 800f7d4:	429a      	cmp	r2, r3
 800f7d6:	d00f      	beq.n	800f7f8 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800f7d8:	697b      	ldr	r3, [r7, #20]
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d00d      	beq.n	800f7fa <tcp_input+0x46a>
 800f7de:	697b      	ldr	r3, [r7, #20]
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d009      	beq.n	800f7fa <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800f7e6:	697b      	ldr	r3, [r7, #20]
 800f7e8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f7ea:	697b      	ldr	r3, [r7, #20]
 800f7ec:	68db      	ldr	r3, [r3, #12]
 800f7ee:	617b      	str	r3, [r7, #20]
 800f7f0:	697b      	ldr	r3, [r7, #20]
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d1d1      	bne.n	800f79a <tcp_input+0x40a>
 800f7f6:	e000      	b.n	800f7fa <tcp_input+0x46a>
            break;
 800f7f8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800f7fa:	697b      	ldr	r3, [r7, #20]
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d029      	beq.n	800f854 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800f800:	69bb      	ldr	r3, [r7, #24]
 800f802:	2b00      	cmp	r3, #0
 800f804:	d00a      	beq.n	800f81c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800f806:	697b      	ldr	r3, [r7, #20]
 800f808:	68da      	ldr	r2, [r3, #12]
 800f80a:	69bb      	ldr	r3, [r7, #24]
 800f80c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800f80e:	4b10      	ldr	r3, [pc, #64]	@ (800f850 <tcp_input+0x4c0>)
 800f810:	681a      	ldr	r2, [r3, #0]
 800f812:	697b      	ldr	r3, [r7, #20]
 800f814:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800f816:	4a0e      	ldr	r2, [pc, #56]	@ (800f850 <tcp_input+0x4c0>)
 800f818:	697b      	ldr	r3, [r7, #20]
 800f81a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800f81c:	6978      	ldr	r0, [r7, #20]
 800f81e:	f000 fa03 	bl	800fc28 <tcp_listen_input>
      }
      pbuf_free(p);
 800f822:	6878      	ldr	r0, [r7, #4]
 800f824:	f7fd fb54 	bl	800ced0 <pbuf_free>
      return;
 800f828:	e1a8      	b.n	800fb7c <tcp_input+0x7ec>
 800f82a:	bf00      	nop
 800f82c:	20010e9c 	.word	0x20010e9c
 800f830:	2000d700 	.word	0x2000d700
 800f834:	0801c1e0 	.word	0x0801c1e0
 800f838:	0801c30c 	.word	0x0801c30c
 800f83c:	0801c22c 	.word	0x0801c22c
 800f840:	20010e80 	.word	0x20010e80
 800f844:	0801c338 	.word	0x0801c338
 800f848:	20010e84 	.word	0x20010e84
 800f84c:	0801c364 	.word	0x0801c364
 800f850:	20010e7c 	.word	0x20010e7c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800f854:	69fb      	ldr	r3, [r7, #28]
 800f856:	2b00      	cmp	r3, #0
 800f858:	f000 8158 	beq.w	800fb0c <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800f85c:	4b95      	ldr	r3, [pc, #596]	@ (800fab4 <tcp_input+0x724>)
 800f85e:	2200      	movs	r2, #0
 800f860:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	891a      	ldrh	r2, [r3, #8]
 800f866:	4b93      	ldr	r3, [pc, #588]	@ (800fab4 <tcp_input+0x724>)
 800f868:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800f86a:	4a92      	ldr	r2, [pc, #584]	@ (800fab4 <tcp_input+0x724>)
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800f870:	4b91      	ldr	r3, [pc, #580]	@ (800fab8 <tcp_input+0x728>)
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	4a8f      	ldr	r2, [pc, #572]	@ (800fab4 <tcp_input+0x724>)
 800f876:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800f878:	4b90      	ldr	r3, [pc, #576]	@ (800fabc <tcp_input+0x72c>)
 800f87a:	2200      	movs	r2, #0
 800f87c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800f87e:	4b90      	ldr	r3, [pc, #576]	@ (800fac0 <tcp_input+0x730>)
 800f880:	2200      	movs	r2, #0
 800f882:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800f884:	4b8f      	ldr	r3, [pc, #572]	@ (800fac4 <tcp_input+0x734>)
 800f886:	2200      	movs	r2, #0
 800f888:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800f88a:	4b8f      	ldr	r3, [pc, #572]	@ (800fac8 <tcp_input+0x738>)
 800f88c:	781b      	ldrb	r3, [r3, #0]
 800f88e:	f003 0308 	and.w	r3, r3, #8
 800f892:	2b00      	cmp	r3, #0
 800f894:	d006      	beq.n	800f8a4 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	7b5b      	ldrb	r3, [r3, #13]
 800f89a:	f043 0301 	orr.w	r3, r3, #1
 800f89e:	b2da      	uxtb	r2, r3
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800f8a4:	69fb      	ldr	r3, [r7, #28]
 800f8a6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d017      	beq.n	800f8dc <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f8ac:	69f8      	ldr	r0, [r7, #28]
 800f8ae:	f7ff f83d 	bl	800e92c <tcp_process_refused_data>
 800f8b2:	4603      	mov	r3, r0
 800f8b4:	f113 0f0d 	cmn.w	r3, #13
 800f8b8:	d007      	beq.n	800f8ca <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f8ba:	69fb      	ldr	r3, [r7, #28]
 800f8bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d00c      	beq.n	800f8dc <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f8c2:	4b82      	ldr	r3, [pc, #520]	@ (800facc <tcp_input+0x73c>)
 800f8c4:	881b      	ldrh	r3, [r3, #0]
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d008      	beq.n	800f8dc <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800f8ca:	69fb      	ldr	r3, [r7, #28]
 800f8cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	f040 80e3 	bne.w	800fa9a <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800f8d4:	69f8      	ldr	r0, [r7, #28]
 800f8d6:	f003 fdff 	bl	80134d8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800f8da:	e0de      	b.n	800fa9a <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800f8dc:	4a7c      	ldr	r2, [pc, #496]	@ (800fad0 <tcp_input+0x740>)
 800f8de:	69fb      	ldr	r3, [r7, #28]
 800f8e0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800f8e2:	69f8      	ldr	r0, [r7, #28]
 800f8e4:	f000 fb18 	bl	800ff18 <tcp_process>
 800f8e8:	4603      	mov	r3, r0
 800f8ea:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800f8ec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f8f0:	f113 0f0d 	cmn.w	r3, #13
 800f8f4:	f000 80d3 	beq.w	800fa9e <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800f8f8:	4b71      	ldr	r3, [pc, #452]	@ (800fac0 <tcp_input+0x730>)
 800f8fa:	781b      	ldrb	r3, [r3, #0]
 800f8fc:	f003 0308 	and.w	r3, r3, #8
 800f900:	2b00      	cmp	r3, #0
 800f902:	d015      	beq.n	800f930 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800f904:	69fb      	ldr	r3, [r7, #28]
 800f906:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d008      	beq.n	800f920 <tcp_input+0x590>
 800f90e:	69fb      	ldr	r3, [r7, #28]
 800f910:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f914:	69fa      	ldr	r2, [r7, #28]
 800f916:	6912      	ldr	r2, [r2, #16]
 800f918:	f06f 010d 	mvn.w	r1, #13
 800f91c:	4610      	mov	r0, r2
 800f91e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f920:	69f9      	ldr	r1, [r7, #28]
 800f922:	486c      	ldr	r0, [pc, #432]	@ (800fad4 <tcp_input+0x744>)
 800f924:	f7ff fbbc 	bl	800f0a0 <tcp_pcb_remove>
        tcp_free(pcb);
 800f928:	69f8      	ldr	r0, [r7, #28]
 800f92a:	f7fd fd8d 	bl	800d448 <tcp_free>
 800f92e:	e0da      	b.n	800fae6 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800f930:	2300      	movs	r3, #0
 800f932:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800f934:	4b63      	ldr	r3, [pc, #396]	@ (800fac4 <tcp_input+0x734>)
 800f936:	881b      	ldrh	r3, [r3, #0]
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d01d      	beq.n	800f978 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800f93c:	4b61      	ldr	r3, [pc, #388]	@ (800fac4 <tcp_input+0x734>)
 800f93e:	881b      	ldrh	r3, [r3, #0]
 800f940:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800f942:	69fb      	ldr	r3, [r7, #28]
 800f944:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d00a      	beq.n	800f962 <tcp_input+0x5d2>
 800f94c:	69fb      	ldr	r3, [r7, #28]
 800f94e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f952:	69fa      	ldr	r2, [r7, #28]
 800f954:	6910      	ldr	r0, [r2, #16]
 800f956:	89fa      	ldrh	r2, [r7, #14]
 800f958:	69f9      	ldr	r1, [r7, #28]
 800f95a:	4798      	blx	r3
 800f95c:	4603      	mov	r3, r0
 800f95e:	74fb      	strb	r3, [r7, #19]
 800f960:	e001      	b.n	800f966 <tcp_input+0x5d6>
 800f962:	2300      	movs	r3, #0
 800f964:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f966:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f96a:	f113 0f0d 	cmn.w	r3, #13
 800f96e:	f000 8098 	beq.w	800faa2 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800f972:	4b54      	ldr	r3, [pc, #336]	@ (800fac4 <tcp_input+0x734>)
 800f974:	2200      	movs	r2, #0
 800f976:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800f978:	69f8      	ldr	r0, [r7, #28]
 800f97a:	f000 f915 	bl	800fba8 <tcp_input_delayed_close>
 800f97e:	4603      	mov	r3, r0
 800f980:	2b00      	cmp	r3, #0
 800f982:	f040 8090 	bne.w	800faa6 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800f986:	4b4d      	ldr	r3, [pc, #308]	@ (800fabc <tcp_input+0x72c>)
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d041      	beq.n	800fa12 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800f98e:	69fb      	ldr	r3, [r7, #28]
 800f990:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f992:	2b00      	cmp	r3, #0
 800f994:	d006      	beq.n	800f9a4 <tcp_input+0x614>
 800f996:	4b50      	ldr	r3, [pc, #320]	@ (800fad8 <tcp_input+0x748>)
 800f998:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800f99c:	494f      	ldr	r1, [pc, #316]	@ (800fadc <tcp_input+0x74c>)
 800f99e:	4850      	ldr	r0, [pc, #320]	@ (800fae0 <tcp_input+0x750>)
 800f9a0:	f009 f9d0 	bl	8018d44 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800f9a4:	69fb      	ldr	r3, [r7, #28]
 800f9a6:	8b5b      	ldrh	r3, [r3, #26]
 800f9a8:	f003 0310 	and.w	r3, r3, #16
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d008      	beq.n	800f9c2 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800f9b0:	4b42      	ldr	r3, [pc, #264]	@ (800fabc <tcp_input+0x72c>)
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	4618      	mov	r0, r3
 800f9b6:	f7fd fa8b 	bl	800ced0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800f9ba:	69f8      	ldr	r0, [r7, #28]
 800f9bc:	f7fe f888 	bl	800dad0 <tcp_abort>
            goto aborted;
 800f9c0:	e091      	b.n	800fae6 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800f9c2:	69fb      	ldr	r3, [r7, #28]
 800f9c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d00c      	beq.n	800f9e6 <tcp_input+0x656>
 800f9cc:	69fb      	ldr	r3, [r7, #28]
 800f9ce:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800f9d2:	69fb      	ldr	r3, [r7, #28]
 800f9d4:	6918      	ldr	r0, [r3, #16]
 800f9d6:	4b39      	ldr	r3, [pc, #228]	@ (800fabc <tcp_input+0x72c>)
 800f9d8:	681a      	ldr	r2, [r3, #0]
 800f9da:	2300      	movs	r3, #0
 800f9dc:	69f9      	ldr	r1, [r7, #28]
 800f9de:	47a0      	blx	r4
 800f9e0:	4603      	mov	r3, r0
 800f9e2:	74fb      	strb	r3, [r7, #19]
 800f9e4:	e008      	b.n	800f9f8 <tcp_input+0x668>
 800f9e6:	4b35      	ldr	r3, [pc, #212]	@ (800fabc <tcp_input+0x72c>)
 800f9e8:	681a      	ldr	r2, [r3, #0]
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	69f9      	ldr	r1, [r7, #28]
 800f9ee:	2000      	movs	r0, #0
 800f9f0:	f7ff f890 	bl	800eb14 <tcp_recv_null>
 800f9f4:	4603      	mov	r3, r0
 800f9f6:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800f9f8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f9fc:	f113 0f0d 	cmn.w	r3, #13
 800fa00:	d053      	beq.n	800faaa <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800fa02:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d003      	beq.n	800fa12 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800fa0a:	4b2c      	ldr	r3, [pc, #176]	@ (800fabc <tcp_input+0x72c>)
 800fa0c:	681a      	ldr	r2, [r3, #0]
 800fa0e:	69fb      	ldr	r3, [r7, #28]
 800fa10:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800fa12:	4b2b      	ldr	r3, [pc, #172]	@ (800fac0 <tcp_input+0x730>)
 800fa14:	781b      	ldrb	r3, [r3, #0]
 800fa16:	f003 0320 	and.w	r3, r3, #32
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d030      	beq.n	800fa80 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800fa1e:	69fb      	ldr	r3, [r7, #28]
 800fa20:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d009      	beq.n	800fa3a <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800fa26:	69fb      	ldr	r3, [r7, #28]
 800fa28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fa2a:	7b5a      	ldrb	r2, [r3, #13]
 800fa2c:	69fb      	ldr	r3, [r7, #28]
 800fa2e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fa30:	f042 0220 	orr.w	r2, r2, #32
 800fa34:	b2d2      	uxtb	r2, r2
 800fa36:	735a      	strb	r2, [r3, #13]
 800fa38:	e022      	b.n	800fa80 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800fa3a:	69fb      	ldr	r3, [r7, #28]
 800fa3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fa3e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800fa42:	d005      	beq.n	800fa50 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800fa44:	69fb      	ldr	r3, [r7, #28]
 800fa46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fa48:	3301      	adds	r3, #1
 800fa4a:	b29a      	uxth	r2, r3
 800fa4c:	69fb      	ldr	r3, [r7, #28]
 800fa4e:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800fa50:	69fb      	ldr	r3, [r7, #28]
 800fa52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d00b      	beq.n	800fa72 <tcp_input+0x6e2>
 800fa5a:	69fb      	ldr	r3, [r7, #28]
 800fa5c:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800fa60:	69fb      	ldr	r3, [r7, #28]
 800fa62:	6918      	ldr	r0, [r3, #16]
 800fa64:	2300      	movs	r3, #0
 800fa66:	2200      	movs	r2, #0
 800fa68:	69f9      	ldr	r1, [r7, #28]
 800fa6a:	47a0      	blx	r4
 800fa6c:	4603      	mov	r3, r0
 800fa6e:	74fb      	strb	r3, [r7, #19]
 800fa70:	e001      	b.n	800fa76 <tcp_input+0x6e6>
 800fa72:	2300      	movs	r3, #0
 800fa74:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800fa76:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fa7a:	f113 0f0d 	cmn.w	r3, #13
 800fa7e:	d016      	beq.n	800faae <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800fa80:	4b13      	ldr	r3, [pc, #76]	@ (800fad0 <tcp_input+0x740>)
 800fa82:	2200      	movs	r2, #0
 800fa84:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800fa86:	69f8      	ldr	r0, [r7, #28]
 800fa88:	f000 f88e 	bl	800fba8 <tcp_input_delayed_close>
 800fa8c:	4603      	mov	r3, r0
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d128      	bne.n	800fae4 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800fa92:	69f8      	ldr	r0, [r7, #28]
 800fa94:	f002 ff1a 	bl	80128cc <tcp_output>
 800fa98:	e025      	b.n	800fae6 <tcp_input+0x756>
        goto aborted;
 800fa9a:	bf00      	nop
 800fa9c:	e023      	b.n	800fae6 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800fa9e:	bf00      	nop
 800faa0:	e021      	b.n	800fae6 <tcp_input+0x756>
              goto aborted;
 800faa2:	bf00      	nop
 800faa4:	e01f      	b.n	800fae6 <tcp_input+0x756>
          goto aborted;
 800faa6:	bf00      	nop
 800faa8:	e01d      	b.n	800fae6 <tcp_input+0x756>
            goto aborted;
 800faaa:	bf00      	nop
 800faac:	e01b      	b.n	800fae6 <tcp_input+0x756>
              goto aborted;
 800faae:	bf00      	nop
 800fab0:	e019      	b.n	800fae6 <tcp_input+0x756>
 800fab2:	bf00      	nop
 800fab4:	20010e8c 	.word	0x20010e8c
 800fab8:	20010e9c 	.word	0x20010e9c
 800fabc:	20010ebc 	.word	0x20010ebc
 800fac0:	20010eb9 	.word	0x20010eb9
 800fac4:	20010eb4 	.word	0x20010eb4
 800fac8:	20010eb8 	.word	0x20010eb8
 800facc:	20010eb6 	.word	0x20010eb6
 800fad0:	20010ec0 	.word	0x20010ec0
 800fad4:	20010e80 	.word	0x20010e80
 800fad8:	0801c1e0 	.word	0x0801c1e0
 800fadc:	0801c394 	.word	0x0801c394
 800fae0:	0801c22c 	.word	0x0801c22c
          goto aborted;
 800fae4:	bf00      	nop
    tcp_input_pcb = NULL;
 800fae6:	4b27      	ldr	r3, [pc, #156]	@ (800fb84 <tcp_input+0x7f4>)
 800fae8:	2200      	movs	r2, #0
 800faea:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800faec:	4b26      	ldr	r3, [pc, #152]	@ (800fb88 <tcp_input+0x7f8>)
 800faee:	2200      	movs	r2, #0
 800faf0:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800faf2:	4b26      	ldr	r3, [pc, #152]	@ (800fb8c <tcp_input+0x7fc>)
 800faf4:	685b      	ldr	r3, [r3, #4]
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d03f      	beq.n	800fb7a <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800fafa:	4b24      	ldr	r3, [pc, #144]	@ (800fb8c <tcp_input+0x7fc>)
 800fafc:	685b      	ldr	r3, [r3, #4]
 800fafe:	4618      	mov	r0, r3
 800fb00:	f7fd f9e6 	bl	800ced0 <pbuf_free>
      inseg.p = NULL;
 800fb04:	4b21      	ldr	r3, [pc, #132]	@ (800fb8c <tcp_input+0x7fc>)
 800fb06:	2200      	movs	r2, #0
 800fb08:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800fb0a:	e036      	b.n	800fb7a <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800fb0c:	4b20      	ldr	r3, [pc, #128]	@ (800fb90 <tcp_input+0x800>)
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	899b      	ldrh	r3, [r3, #12]
 800fb12:	b29b      	uxth	r3, r3
 800fb14:	4618      	mov	r0, r3
 800fb16:	f7fb fda7 	bl	800b668 <lwip_htons>
 800fb1a:	4603      	mov	r3, r0
 800fb1c:	b2db      	uxtb	r3, r3
 800fb1e:	f003 0304 	and.w	r3, r3, #4
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d118      	bne.n	800fb58 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fb26:	4b1b      	ldr	r3, [pc, #108]	@ (800fb94 <tcp_input+0x804>)
 800fb28:	6819      	ldr	r1, [r3, #0]
 800fb2a:	4b1b      	ldr	r3, [pc, #108]	@ (800fb98 <tcp_input+0x808>)
 800fb2c:	881b      	ldrh	r3, [r3, #0]
 800fb2e:	461a      	mov	r2, r3
 800fb30:	4b1a      	ldr	r3, [pc, #104]	@ (800fb9c <tcp_input+0x80c>)
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fb36:	4b16      	ldr	r3, [pc, #88]	@ (800fb90 <tcp_input+0x800>)
 800fb38:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fb3a:	885b      	ldrh	r3, [r3, #2]
 800fb3c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fb3e:	4a14      	ldr	r2, [pc, #80]	@ (800fb90 <tcp_input+0x800>)
 800fb40:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fb42:	8812      	ldrh	r2, [r2, #0]
 800fb44:	b292      	uxth	r2, r2
 800fb46:	9202      	str	r2, [sp, #8]
 800fb48:	9301      	str	r3, [sp, #4]
 800fb4a:	4b15      	ldr	r3, [pc, #84]	@ (800fba0 <tcp_input+0x810>)
 800fb4c:	9300      	str	r3, [sp, #0]
 800fb4e:	4b15      	ldr	r3, [pc, #84]	@ (800fba4 <tcp_input+0x814>)
 800fb50:	4602      	mov	r2, r0
 800fb52:	2000      	movs	r0, #0
 800fb54:	f003 fc6e 	bl	8013434 <tcp_rst>
    pbuf_free(p);
 800fb58:	6878      	ldr	r0, [r7, #4]
 800fb5a:	f7fd f9b9 	bl	800ced0 <pbuf_free>
  return;
 800fb5e:	e00c      	b.n	800fb7a <tcp_input+0x7ea>
    goto dropped;
 800fb60:	bf00      	nop
 800fb62:	e006      	b.n	800fb72 <tcp_input+0x7e2>
    goto dropped;
 800fb64:	bf00      	nop
 800fb66:	e004      	b.n	800fb72 <tcp_input+0x7e2>
    goto dropped;
 800fb68:	bf00      	nop
 800fb6a:	e002      	b.n	800fb72 <tcp_input+0x7e2>
      goto dropped;
 800fb6c:	bf00      	nop
 800fb6e:	e000      	b.n	800fb72 <tcp_input+0x7e2>
      goto dropped;
 800fb70:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800fb72:	6878      	ldr	r0, [r7, #4]
 800fb74:	f7fd f9ac 	bl	800ced0 <pbuf_free>
 800fb78:	e000      	b.n	800fb7c <tcp_input+0x7ec>
  return;
 800fb7a:	bf00      	nop
}
 800fb7c:	3724      	adds	r7, #36	@ 0x24
 800fb7e:	46bd      	mov	sp, r7
 800fb80:	bd90      	pop	{r4, r7, pc}
 800fb82:	bf00      	nop
 800fb84:	20010ec0 	.word	0x20010ec0
 800fb88:	20010ebc 	.word	0x20010ebc
 800fb8c:	20010e8c 	.word	0x20010e8c
 800fb90:	20010e9c 	.word	0x20010e9c
 800fb94:	20010eb0 	.word	0x20010eb0
 800fb98:	20010eb6 	.word	0x20010eb6
 800fb9c:	20010eac 	.word	0x20010eac
 800fba0:	2000d710 	.word	0x2000d710
 800fba4:	2000d714 	.word	0x2000d714

0800fba8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800fba8:	b580      	push	{r7, lr}
 800fbaa:	b082      	sub	sp, #8
 800fbac:	af00      	add	r7, sp, #0
 800fbae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d106      	bne.n	800fbc4 <tcp_input_delayed_close+0x1c>
 800fbb6:	4b17      	ldr	r3, [pc, #92]	@ (800fc14 <tcp_input_delayed_close+0x6c>)
 800fbb8:	f240 225a 	movw	r2, #602	@ 0x25a
 800fbbc:	4916      	ldr	r1, [pc, #88]	@ (800fc18 <tcp_input_delayed_close+0x70>)
 800fbbe:	4817      	ldr	r0, [pc, #92]	@ (800fc1c <tcp_input_delayed_close+0x74>)
 800fbc0:	f009 f8c0 	bl	8018d44 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800fbc4:	4b16      	ldr	r3, [pc, #88]	@ (800fc20 <tcp_input_delayed_close+0x78>)
 800fbc6:	781b      	ldrb	r3, [r3, #0]
 800fbc8:	f003 0310 	and.w	r3, r3, #16
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d01c      	beq.n	800fc0a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	8b5b      	ldrh	r3, [r3, #26]
 800fbd4:	f003 0310 	and.w	r3, r3, #16
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d10d      	bne.n	800fbf8 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d008      	beq.n	800fbf8 <tcp_input_delayed_close+0x50>
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fbec:	687a      	ldr	r2, [r7, #4]
 800fbee:	6912      	ldr	r2, [r2, #16]
 800fbf0:	f06f 010e 	mvn.w	r1, #14
 800fbf4:	4610      	mov	r0, r2
 800fbf6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800fbf8:	6879      	ldr	r1, [r7, #4]
 800fbfa:	480a      	ldr	r0, [pc, #40]	@ (800fc24 <tcp_input_delayed_close+0x7c>)
 800fbfc:	f7ff fa50 	bl	800f0a0 <tcp_pcb_remove>
    tcp_free(pcb);
 800fc00:	6878      	ldr	r0, [r7, #4]
 800fc02:	f7fd fc21 	bl	800d448 <tcp_free>
    return 1;
 800fc06:	2301      	movs	r3, #1
 800fc08:	e000      	b.n	800fc0c <tcp_input_delayed_close+0x64>
  }
  return 0;
 800fc0a:	2300      	movs	r3, #0
}
 800fc0c:	4618      	mov	r0, r3
 800fc0e:	3708      	adds	r7, #8
 800fc10:	46bd      	mov	sp, r7
 800fc12:	bd80      	pop	{r7, pc}
 800fc14:	0801c1e0 	.word	0x0801c1e0
 800fc18:	0801c3b0 	.word	0x0801c3b0
 800fc1c:	0801c22c 	.word	0x0801c22c
 800fc20:	20010eb9 	.word	0x20010eb9
 800fc24:	20010e80 	.word	0x20010e80

0800fc28 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800fc28:	b590      	push	{r4, r7, lr}
 800fc2a:	b08b      	sub	sp, #44	@ 0x2c
 800fc2c:	af04      	add	r7, sp, #16
 800fc2e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800fc30:	4b6f      	ldr	r3, [pc, #444]	@ (800fdf0 <tcp_listen_input+0x1c8>)
 800fc32:	781b      	ldrb	r3, [r3, #0]
 800fc34:	f003 0304 	and.w	r3, r3, #4
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	f040 80d2 	bne.w	800fde2 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d106      	bne.n	800fc52 <tcp_listen_input+0x2a>
 800fc44:	4b6b      	ldr	r3, [pc, #428]	@ (800fdf4 <tcp_listen_input+0x1cc>)
 800fc46:	f240 2281 	movw	r2, #641	@ 0x281
 800fc4a:	496b      	ldr	r1, [pc, #428]	@ (800fdf8 <tcp_listen_input+0x1d0>)
 800fc4c:	486b      	ldr	r0, [pc, #428]	@ (800fdfc <tcp_listen_input+0x1d4>)
 800fc4e:	f009 f879 	bl	8018d44 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800fc52:	4b67      	ldr	r3, [pc, #412]	@ (800fdf0 <tcp_listen_input+0x1c8>)
 800fc54:	781b      	ldrb	r3, [r3, #0]
 800fc56:	f003 0310 	and.w	r3, r3, #16
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d019      	beq.n	800fc92 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fc5e:	4b68      	ldr	r3, [pc, #416]	@ (800fe00 <tcp_listen_input+0x1d8>)
 800fc60:	6819      	ldr	r1, [r3, #0]
 800fc62:	4b68      	ldr	r3, [pc, #416]	@ (800fe04 <tcp_listen_input+0x1dc>)
 800fc64:	881b      	ldrh	r3, [r3, #0]
 800fc66:	461a      	mov	r2, r3
 800fc68:	4b67      	ldr	r3, [pc, #412]	@ (800fe08 <tcp_listen_input+0x1e0>)
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fc6e:	4b67      	ldr	r3, [pc, #412]	@ (800fe0c <tcp_listen_input+0x1e4>)
 800fc70:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fc72:	885b      	ldrh	r3, [r3, #2]
 800fc74:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fc76:	4a65      	ldr	r2, [pc, #404]	@ (800fe0c <tcp_listen_input+0x1e4>)
 800fc78:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fc7a:	8812      	ldrh	r2, [r2, #0]
 800fc7c:	b292      	uxth	r2, r2
 800fc7e:	9202      	str	r2, [sp, #8]
 800fc80:	9301      	str	r3, [sp, #4]
 800fc82:	4b63      	ldr	r3, [pc, #396]	@ (800fe10 <tcp_listen_input+0x1e8>)
 800fc84:	9300      	str	r3, [sp, #0]
 800fc86:	4b63      	ldr	r3, [pc, #396]	@ (800fe14 <tcp_listen_input+0x1ec>)
 800fc88:	4602      	mov	r2, r0
 800fc8a:	6878      	ldr	r0, [r7, #4]
 800fc8c:	f003 fbd2 	bl	8013434 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800fc90:	e0a9      	b.n	800fde6 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800fc92:	4b57      	ldr	r3, [pc, #348]	@ (800fdf0 <tcp_listen_input+0x1c8>)
 800fc94:	781b      	ldrb	r3, [r3, #0]
 800fc96:	f003 0302 	and.w	r3, r3, #2
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	f000 80a3 	beq.w	800fde6 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	7d5b      	ldrb	r3, [r3, #21]
 800fca4:	4618      	mov	r0, r3
 800fca6:	f7ff f859 	bl	800ed5c <tcp_alloc>
 800fcaa:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800fcac:	697b      	ldr	r3, [r7, #20]
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d111      	bne.n	800fcd6 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	699b      	ldr	r3, [r3, #24]
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d00a      	beq.n	800fcd0 <tcp_listen_input+0xa8>
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	699b      	ldr	r3, [r3, #24]
 800fcbe:	687a      	ldr	r2, [r7, #4]
 800fcc0:	6910      	ldr	r0, [r2, #16]
 800fcc2:	f04f 32ff 	mov.w	r2, #4294967295
 800fcc6:	2100      	movs	r1, #0
 800fcc8:	4798      	blx	r3
 800fcca:	4603      	mov	r3, r0
 800fccc:	73bb      	strb	r3, [r7, #14]
      return;
 800fcce:	e08b      	b.n	800fde8 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fcd0:	23f0      	movs	r3, #240	@ 0xf0
 800fcd2:	73bb      	strb	r3, [r7, #14]
      return;
 800fcd4:	e088      	b.n	800fde8 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800fcd6:	4b50      	ldr	r3, [pc, #320]	@ (800fe18 <tcp_listen_input+0x1f0>)
 800fcd8:	695a      	ldr	r2, [r3, #20]
 800fcda:	697b      	ldr	r3, [r7, #20]
 800fcdc:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800fcde:	4b4e      	ldr	r3, [pc, #312]	@ (800fe18 <tcp_listen_input+0x1f0>)
 800fce0:	691a      	ldr	r2, [r3, #16]
 800fce2:	697b      	ldr	r3, [r7, #20]
 800fce4:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	8ada      	ldrh	r2, [r3, #22]
 800fcea:	697b      	ldr	r3, [r7, #20]
 800fcec:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800fcee:	4b47      	ldr	r3, [pc, #284]	@ (800fe0c <tcp_listen_input+0x1e4>)
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	881b      	ldrh	r3, [r3, #0]
 800fcf4:	b29a      	uxth	r2, r3
 800fcf6:	697b      	ldr	r3, [r7, #20]
 800fcf8:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800fcfa:	697b      	ldr	r3, [r7, #20]
 800fcfc:	2203      	movs	r2, #3
 800fcfe:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800fd00:	4b41      	ldr	r3, [pc, #260]	@ (800fe08 <tcp_listen_input+0x1e0>)
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	1c5a      	adds	r2, r3, #1
 800fd06:	697b      	ldr	r3, [r7, #20]
 800fd08:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800fd0a:	697b      	ldr	r3, [r7, #20]
 800fd0c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fd0e:	697b      	ldr	r3, [r7, #20]
 800fd10:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800fd12:	6978      	ldr	r0, [r7, #20]
 800fd14:	f7ff fa58 	bl	800f1c8 <tcp_next_iss>
 800fd18:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800fd1a:	697b      	ldr	r3, [r7, #20]
 800fd1c:	693a      	ldr	r2, [r7, #16]
 800fd1e:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800fd20:	697b      	ldr	r3, [r7, #20]
 800fd22:	693a      	ldr	r2, [r7, #16]
 800fd24:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800fd26:	697b      	ldr	r3, [r7, #20]
 800fd28:	693a      	ldr	r2, [r7, #16]
 800fd2a:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800fd2c:	697b      	ldr	r3, [r7, #20]
 800fd2e:	693a      	ldr	r2, [r7, #16]
 800fd30:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800fd32:	4b35      	ldr	r3, [pc, #212]	@ (800fe08 <tcp_listen_input+0x1e0>)
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	1e5a      	subs	r2, r3, #1
 800fd38:	697b      	ldr	r3, [r7, #20]
 800fd3a:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	691a      	ldr	r2, [r3, #16]
 800fd40:	697b      	ldr	r3, [r7, #20]
 800fd42:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800fd44:	697b      	ldr	r3, [r7, #20]
 800fd46:	687a      	ldr	r2, [r7, #4]
 800fd48:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	7a5b      	ldrb	r3, [r3, #9]
 800fd4e:	f003 030c 	and.w	r3, r3, #12
 800fd52:	b2da      	uxtb	r2, r3
 800fd54:	697b      	ldr	r3, [r7, #20]
 800fd56:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	7a1a      	ldrb	r2, [r3, #8]
 800fd5c:	697b      	ldr	r3, [r7, #20]
 800fd5e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800fd60:	4b2e      	ldr	r3, [pc, #184]	@ (800fe1c <tcp_listen_input+0x1f4>)
 800fd62:	681a      	ldr	r2, [r3, #0]
 800fd64:	697b      	ldr	r3, [r7, #20]
 800fd66:	60da      	str	r2, [r3, #12]
 800fd68:	4a2c      	ldr	r2, [pc, #176]	@ (800fe1c <tcp_listen_input+0x1f4>)
 800fd6a:	697b      	ldr	r3, [r7, #20]
 800fd6c:	6013      	str	r3, [r2, #0]
 800fd6e:	f003 fd23 	bl	80137b8 <tcp_timer_needed>
 800fd72:	4b2b      	ldr	r3, [pc, #172]	@ (800fe20 <tcp_listen_input+0x1f8>)
 800fd74:	2201      	movs	r2, #1
 800fd76:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800fd78:	6978      	ldr	r0, [r7, #20]
 800fd7a:	f001 fd8b 	bl	8011894 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800fd7e:	4b23      	ldr	r3, [pc, #140]	@ (800fe0c <tcp_listen_input+0x1e4>)
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	89db      	ldrh	r3, [r3, #14]
 800fd84:	b29a      	uxth	r2, r3
 800fd86:	697b      	ldr	r3, [r7, #20]
 800fd88:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800fd8c:	697b      	ldr	r3, [r7, #20]
 800fd8e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800fd92:	697b      	ldr	r3, [r7, #20]
 800fd94:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800fd98:	697b      	ldr	r3, [r7, #20]
 800fd9a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800fd9c:	697b      	ldr	r3, [r7, #20]
 800fd9e:	3304      	adds	r3, #4
 800fda0:	4618      	mov	r0, r3
 800fda2:	f007 fab5 	bl	8017310 <ip4_route>
 800fda6:	4601      	mov	r1, r0
 800fda8:	697b      	ldr	r3, [r7, #20]
 800fdaa:	3304      	adds	r3, #4
 800fdac:	461a      	mov	r2, r3
 800fdae:	4620      	mov	r0, r4
 800fdb0:	f7ff fa30 	bl	800f214 <tcp_eff_send_mss_netif>
 800fdb4:	4603      	mov	r3, r0
 800fdb6:	461a      	mov	r2, r3
 800fdb8:	697b      	ldr	r3, [r7, #20]
 800fdba:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800fdbc:	2112      	movs	r1, #18
 800fdbe:	6978      	ldr	r0, [r7, #20]
 800fdc0:	f002 fc96 	bl	80126f0 <tcp_enqueue_flags>
 800fdc4:	4603      	mov	r3, r0
 800fdc6:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800fdc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d004      	beq.n	800fdda <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800fdd0:	2100      	movs	r1, #0
 800fdd2:	6978      	ldr	r0, [r7, #20]
 800fdd4:	f7fd fdbe 	bl	800d954 <tcp_abandon>
      return;
 800fdd8:	e006      	b.n	800fde8 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800fdda:	6978      	ldr	r0, [r7, #20]
 800fddc:	f002 fd76 	bl	80128cc <tcp_output>
  return;
 800fde0:	e001      	b.n	800fde6 <tcp_listen_input+0x1be>
    return;
 800fde2:	bf00      	nop
 800fde4:	e000      	b.n	800fde8 <tcp_listen_input+0x1c0>
  return;
 800fde6:	bf00      	nop
}
 800fde8:	371c      	adds	r7, #28
 800fdea:	46bd      	mov	sp, r7
 800fdec:	bd90      	pop	{r4, r7, pc}
 800fdee:	bf00      	nop
 800fdf0:	20010eb8 	.word	0x20010eb8
 800fdf4:	0801c1e0 	.word	0x0801c1e0
 800fdf8:	0801c3d8 	.word	0x0801c3d8
 800fdfc:	0801c22c 	.word	0x0801c22c
 800fe00:	20010eb0 	.word	0x20010eb0
 800fe04:	20010eb6 	.word	0x20010eb6
 800fe08:	20010eac 	.word	0x20010eac
 800fe0c:	20010e9c 	.word	0x20010e9c
 800fe10:	2000d710 	.word	0x2000d710
 800fe14:	2000d714 	.word	0x2000d714
 800fe18:	2000d700 	.word	0x2000d700
 800fe1c:	20010e80 	.word	0x20010e80
 800fe20:	20010e88 	.word	0x20010e88

0800fe24 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800fe24:	b580      	push	{r7, lr}
 800fe26:	b086      	sub	sp, #24
 800fe28:	af04      	add	r7, sp, #16
 800fe2a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800fe2c:	4b2f      	ldr	r3, [pc, #188]	@ (800feec <tcp_timewait_input+0xc8>)
 800fe2e:	781b      	ldrb	r3, [r3, #0]
 800fe30:	f003 0304 	and.w	r3, r3, #4
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d153      	bne.n	800fee0 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d106      	bne.n	800fe4c <tcp_timewait_input+0x28>
 800fe3e:	4b2c      	ldr	r3, [pc, #176]	@ (800fef0 <tcp_timewait_input+0xcc>)
 800fe40:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800fe44:	492b      	ldr	r1, [pc, #172]	@ (800fef4 <tcp_timewait_input+0xd0>)
 800fe46:	482c      	ldr	r0, [pc, #176]	@ (800fef8 <tcp_timewait_input+0xd4>)
 800fe48:	f008 ff7c 	bl	8018d44 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800fe4c:	4b27      	ldr	r3, [pc, #156]	@ (800feec <tcp_timewait_input+0xc8>)
 800fe4e:	781b      	ldrb	r3, [r3, #0]
 800fe50:	f003 0302 	and.w	r3, r3, #2
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d02a      	beq.n	800feae <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800fe58:	4b28      	ldr	r3, [pc, #160]	@ (800fefc <tcp_timewait_input+0xd8>)
 800fe5a:	681a      	ldr	r2, [r3, #0]
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe60:	1ad3      	subs	r3, r2, r3
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	db2d      	blt.n	800fec2 <tcp_timewait_input+0x9e>
 800fe66:	4b25      	ldr	r3, [pc, #148]	@ (800fefc <tcp_timewait_input+0xd8>)
 800fe68:	681a      	ldr	r2, [r3, #0]
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe6e:	6879      	ldr	r1, [r7, #4]
 800fe70:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800fe72:	440b      	add	r3, r1
 800fe74:	1ad3      	subs	r3, r2, r3
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	dc23      	bgt.n	800fec2 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fe7a:	4b21      	ldr	r3, [pc, #132]	@ (800ff00 <tcp_timewait_input+0xdc>)
 800fe7c:	6819      	ldr	r1, [r3, #0]
 800fe7e:	4b21      	ldr	r3, [pc, #132]	@ (800ff04 <tcp_timewait_input+0xe0>)
 800fe80:	881b      	ldrh	r3, [r3, #0]
 800fe82:	461a      	mov	r2, r3
 800fe84:	4b1d      	ldr	r3, [pc, #116]	@ (800fefc <tcp_timewait_input+0xd8>)
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fe8a:	4b1f      	ldr	r3, [pc, #124]	@ (800ff08 <tcp_timewait_input+0xe4>)
 800fe8c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fe8e:	885b      	ldrh	r3, [r3, #2]
 800fe90:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fe92:	4a1d      	ldr	r2, [pc, #116]	@ (800ff08 <tcp_timewait_input+0xe4>)
 800fe94:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fe96:	8812      	ldrh	r2, [r2, #0]
 800fe98:	b292      	uxth	r2, r2
 800fe9a:	9202      	str	r2, [sp, #8]
 800fe9c:	9301      	str	r3, [sp, #4]
 800fe9e:	4b1b      	ldr	r3, [pc, #108]	@ (800ff0c <tcp_timewait_input+0xe8>)
 800fea0:	9300      	str	r3, [sp, #0]
 800fea2:	4b1b      	ldr	r3, [pc, #108]	@ (800ff10 <tcp_timewait_input+0xec>)
 800fea4:	4602      	mov	r2, r0
 800fea6:	6878      	ldr	r0, [r7, #4]
 800fea8:	f003 fac4 	bl	8013434 <tcp_rst>
      return;
 800feac:	e01b      	b.n	800fee6 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800feae:	4b0f      	ldr	r3, [pc, #60]	@ (800feec <tcp_timewait_input+0xc8>)
 800feb0:	781b      	ldrb	r3, [r3, #0]
 800feb2:	f003 0301 	and.w	r3, r3, #1
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d003      	beq.n	800fec2 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800feba:	4b16      	ldr	r3, [pc, #88]	@ (800ff14 <tcp_timewait_input+0xf0>)
 800febc:	681a      	ldr	r2, [r3, #0]
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800fec2:	4b10      	ldr	r3, [pc, #64]	@ (800ff04 <tcp_timewait_input+0xe0>)
 800fec4:	881b      	ldrh	r3, [r3, #0]
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d00c      	beq.n	800fee4 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	8b5b      	ldrh	r3, [r3, #26]
 800fece:	f043 0302 	orr.w	r3, r3, #2
 800fed2:	b29a      	uxth	r2, r3
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800fed8:	6878      	ldr	r0, [r7, #4]
 800feda:	f002 fcf7 	bl	80128cc <tcp_output>
  }
  return;
 800fede:	e001      	b.n	800fee4 <tcp_timewait_input+0xc0>
    return;
 800fee0:	bf00      	nop
 800fee2:	e000      	b.n	800fee6 <tcp_timewait_input+0xc2>
  return;
 800fee4:	bf00      	nop
}
 800fee6:	3708      	adds	r7, #8
 800fee8:	46bd      	mov	sp, r7
 800feea:	bd80      	pop	{r7, pc}
 800feec:	20010eb8 	.word	0x20010eb8
 800fef0:	0801c1e0 	.word	0x0801c1e0
 800fef4:	0801c3f8 	.word	0x0801c3f8
 800fef8:	0801c22c 	.word	0x0801c22c
 800fefc:	20010eac 	.word	0x20010eac
 800ff00:	20010eb0 	.word	0x20010eb0
 800ff04:	20010eb6 	.word	0x20010eb6
 800ff08:	20010e9c 	.word	0x20010e9c
 800ff0c:	2000d710 	.word	0x2000d710
 800ff10:	2000d714 	.word	0x2000d714
 800ff14:	20010e74 	.word	0x20010e74

0800ff18 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800ff18:	b590      	push	{r4, r7, lr}
 800ff1a:	b08d      	sub	sp, #52	@ 0x34
 800ff1c:	af04      	add	r7, sp, #16
 800ff1e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800ff20:	2300      	movs	r3, #0
 800ff22:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800ff24:	2300      	movs	r3, #0
 800ff26:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d106      	bne.n	800ff3c <tcp_process+0x24>
 800ff2e:	4b9d      	ldr	r3, [pc, #628]	@ (80101a4 <tcp_process+0x28c>)
 800ff30:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800ff34:	499c      	ldr	r1, [pc, #624]	@ (80101a8 <tcp_process+0x290>)
 800ff36:	489d      	ldr	r0, [pc, #628]	@ (80101ac <tcp_process+0x294>)
 800ff38:	f008 ff04 	bl	8018d44 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800ff3c:	4b9c      	ldr	r3, [pc, #624]	@ (80101b0 <tcp_process+0x298>)
 800ff3e:	781b      	ldrb	r3, [r3, #0]
 800ff40:	f003 0304 	and.w	r3, r3, #4
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d04e      	beq.n	800ffe6 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	7d1b      	ldrb	r3, [r3, #20]
 800ff4c:	2b02      	cmp	r3, #2
 800ff4e:	d108      	bne.n	800ff62 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ff54:	4b97      	ldr	r3, [pc, #604]	@ (80101b4 <tcp_process+0x29c>)
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	429a      	cmp	r2, r3
 800ff5a:	d123      	bne.n	800ffa4 <tcp_process+0x8c>
        acceptable = 1;
 800ff5c:	2301      	movs	r3, #1
 800ff5e:	76fb      	strb	r3, [r7, #27]
 800ff60:	e020      	b.n	800ffa4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ff66:	4b94      	ldr	r3, [pc, #592]	@ (80101b8 <tcp_process+0x2a0>)
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	429a      	cmp	r2, r3
 800ff6c:	d102      	bne.n	800ff74 <tcp_process+0x5c>
        acceptable = 1;
 800ff6e:	2301      	movs	r3, #1
 800ff70:	76fb      	strb	r3, [r7, #27]
 800ff72:	e017      	b.n	800ffa4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ff74:	4b90      	ldr	r3, [pc, #576]	@ (80101b8 <tcp_process+0x2a0>)
 800ff76:	681a      	ldr	r2, [r3, #0]
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff7c:	1ad3      	subs	r3, r2, r3
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	db10      	blt.n	800ffa4 <tcp_process+0x8c>
 800ff82:	4b8d      	ldr	r3, [pc, #564]	@ (80101b8 <tcp_process+0x2a0>)
 800ff84:	681a      	ldr	r2, [r3, #0]
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff8a:	6879      	ldr	r1, [r7, #4]
 800ff8c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800ff8e:	440b      	add	r3, r1
 800ff90:	1ad3      	subs	r3, r2, r3
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	dc06      	bgt.n	800ffa4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	8b5b      	ldrh	r3, [r3, #26]
 800ff9a:	f043 0302 	orr.w	r3, r3, #2
 800ff9e:	b29a      	uxth	r2, r3
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800ffa4:	7efb      	ldrb	r3, [r7, #27]
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d01b      	beq.n	800ffe2 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	7d1b      	ldrb	r3, [r3, #20]
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d106      	bne.n	800ffc0 <tcp_process+0xa8>
 800ffb2:	4b7c      	ldr	r3, [pc, #496]	@ (80101a4 <tcp_process+0x28c>)
 800ffb4:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800ffb8:	4980      	ldr	r1, [pc, #512]	@ (80101bc <tcp_process+0x2a4>)
 800ffba:	487c      	ldr	r0, [pc, #496]	@ (80101ac <tcp_process+0x294>)
 800ffbc:	f008 fec2 	bl	8018d44 <iprintf>
      recv_flags |= TF_RESET;
 800ffc0:	4b7f      	ldr	r3, [pc, #508]	@ (80101c0 <tcp_process+0x2a8>)
 800ffc2:	781b      	ldrb	r3, [r3, #0]
 800ffc4:	f043 0308 	orr.w	r3, r3, #8
 800ffc8:	b2da      	uxtb	r2, r3
 800ffca:	4b7d      	ldr	r3, [pc, #500]	@ (80101c0 <tcp_process+0x2a8>)
 800ffcc:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	8b5b      	ldrh	r3, [r3, #26]
 800ffd2:	f023 0301 	bic.w	r3, r3, #1
 800ffd6:	b29a      	uxth	r2, r3
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800ffdc:	f06f 030d 	mvn.w	r3, #13
 800ffe0:	e37a      	b.n	80106d8 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800ffe2:	2300      	movs	r3, #0
 800ffe4:	e378      	b.n	80106d8 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800ffe6:	4b72      	ldr	r3, [pc, #456]	@ (80101b0 <tcp_process+0x298>)
 800ffe8:	781b      	ldrb	r3, [r3, #0]
 800ffea:	f003 0302 	and.w	r3, r3, #2
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d010      	beq.n	8010014 <tcp_process+0xfc>
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	7d1b      	ldrb	r3, [r3, #20]
 800fff6:	2b02      	cmp	r3, #2
 800fff8:	d00c      	beq.n	8010014 <tcp_process+0xfc>
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	7d1b      	ldrb	r3, [r3, #20]
 800fffe:	2b03      	cmp	r3, #3
 8010000:	d008      	beq.n	8010014 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	8b5b      	ldrh	r3, [r3, #26]
 8010006:	f043 0302 	orr.w	r3, r3, #2
 801000a:	b29a      	uxth	r2, r3
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8010010:	2300      	movs	r3, #0
 8010012:	e361      	b.n	80106d8 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	8b5b      	ldrh	r3, [r3, #26]
 8010018:	f003 0310 	and.w	r3, r3, #16
 801001c:	2b00      	cmp	r3, #0
 801001e:	d103      	bne.n	8010028 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8010020:	4b68      	ldr	r3, [pc, #416]	@ (80101c4 <tcp_process+0x2ac>)
 8010022:	681a      	ldr	r2, [r3, #0]
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	2200      	movs	r2, #0
 801002c:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	2200      	movs	r2, #0
 8010034:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8010038:	6878      	ldr	r0, [r7, #4]
 801003a:	f001 fc2b 	bl	8011894 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	7d1b      	ldrb	r3, [r3, #20]
 8010042:	3b02      	subs	r3, #2
 8010044:	2b07      	cmp	r3, #7
 8010046:	f200 8337 	bhi.w	80106b8 <tcp_process+0x7a0>
 801004a:	a201      	add	r2, pc, #4	@ (adr r2, 8010050 <tcp_process+0x138>)
 801004c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010050:	08010071 	.word	0x08010071
 8010054:	080102a1 	.word	0x080102a1
 8010058:	08010419 	.word	0x08010419
 801005c:	08010443 	.word	0x08010443
 8010060:	08010567 	.word	0x08010567
 8010064:	08010419 	.word	0x08010419
 8010068:	080105f3 	.word	0x080105f3
 801006c:	08010683 	.word	0x08010683
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8010070:	4b4f      	ldr	r3, [pc, #316]	@ (80101b0 <tcp_process+0x298>)
 8010072:	781b      	ldrb	r3, [r3, #0]
 8010074:	f003 0310 	and.w	r3, r3, #16
 8010078:	2b00      	cmp	r3, #0
 801007a:	f000 80e4 	beq.w	8010246 <tcp_process+0x32e>
 801007e:	4b4c      	ldr	r3, [pc, #304]	@ (80101b0 <tcp_process+0x298>)
 8010080:	781b      	ldrb	r3, [r3, #0]
 8010082:	f003 0302 	and.w	r3, r3, #2
 8010086:	2b00      	cmp	r3, #0
 8010088:	f000 80dd 	beq.w	8010246 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010090:	1c5a      	adds	r2, r3, #1
 8010092:	4b48      	ldr	r3, [pc, #288]	@ (80101b4 <tcp_process+0x29c>)
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	429a      	cmp	r2, r3
 8010098:	f040 80d5 	bne.w	8010246 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 801009c:	4b46      	ldr	r3, [pc, #280]	@ (80101b8 <tcp_process+0x2a0>)
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	1c5a      	adds	r2, r3, #1
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 80100ae:	4b41      	ldr	r3, [pc, #260]	@ (80101b4 <tcp_process+0x29c>)
 80100b0:	681a      	ldr	r2, [r3, #0]
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80100b6:	4b44      	ldr	r3, [pc, #272]	@ (80101c8 <tcp_process+0x2b0>)
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	89db      	ldrh	r3, [r3, #14]
 80100bc:	b29a      	uxth	r2, r3
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80100d0:	4b39      	ldr	r3, [pc, #228]	@ (80101b8 <tcp_process+0x2a0>)
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	1e5a      	subs	r2, r3, #1
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	2204      	movs	r2, #4
 80100de:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	3304      	adds	r3, #4
 80100e8:	4618      	mov	r0, r3
 80100ea:	f007 f911 	bl	8017310 <ip4_route>
 80100ee:	4601      	mov	r1, r0
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	3304      	adds	r3, #4
 80100f4:	461a      	mov	r2, r3
 80100f6:	4620      	mov	r0, r4
 80100f8:	f7ff f88c 	bl	800f214 <tcp_eff_send_mss_netif>
 80100fc:	4603      	mov	r3, r0
 80100fe:	461a      	mov	r2, r3
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010108:	009a      	lsls	r2, r3, #2
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801010e:	005b      	lsls	r3, r3, #1
 8010110:	f241 111c 	movw	r1, #4380	@ 0x111c
 8010114:	428b      	cmp	r3, r1
 8010116:	bf38      	it	cc
 8010118:	460b      	movcc	r3, r1
 801011a:	429a      	cmp	r2, r3
 801011c:	d204      	bcs.n	8010128 <tcp_process+0x210>
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010122:	009b      	lsls	r3, r3, #2
 8010124:	b29b      	uxth	r3, r3
 8010126:	e00d      	b.n	8010144 <tcp_process+0x22c>
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801012c:	005b      	lsls	r3, r3, #1
 801012e:	f241 121c 	movw	r2, #4380	@ 0x111c
 8010132:	4293      	cmp	r3, r2
 8010134:	d904      	bls.n	8010140 <tcp_process+0x228>
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801013a:	005b      	lsls	r3, r3, #1
 801013c:	b29b      	uxth	r3, r3
 801013e:	e001      	b.n	8010144 <tcp_process+0x22c>
 8010140:	f241 131c 	movw	r3, #4380	@ 0x111c
 8010144:	687a      	ldr	r2, [r7, #4]
 8010146:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010150:	2b00      	cmp	r3, #0
 8010152:	d106      	bne.n	8010162 <tcp_process+0x24a>
 8010154:	4b13      	ldr	r3, [pc, #76]	@ (80101a4 <tcp_process+0x28c>)
 8010156:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 801015a:	491c      	ldr	r1, [pc, #112]	@ (80101cc <tcp_process+0x2b4>)
 801015c:	4813      	ldr	r0, [pc, #76]	@ (80101ac <tcp_process+0x294>)
 801015e:	f008 fdf1 	bl	8018d44 <iprintf>
        --pcb->snd_queuelen;
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010168:	3b01      	subs	r3, #1
 801016a:	b29a      	uxth	r2, r3
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010176:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8010178:	69fb      	ldr	r3, [r7, #28]
 801017a:	2b00      	cmp	r3, #0
 801017c:	d12a      	bne.n	80101d4 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010182:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8010184:	69fb      	ldr	r3, [r7, #28]
 8010186:	2b00      	cmp	r3, #0
 8010188:	d106      	bne.n	8010198 <tcp_process+0x280>
 801018a:	4b06      	ldr	r3, [pc, #24]	@ (80101a4 <tcp_process+0x28c>)
 801018c:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8010190:	490f      	ldr	r1, [pc, #60]	@ (80101d0 <tcp_process+0x2b8>)
 8010192:	4806      	ldr	r0, [pc, #24]	@ (80101ac <tcp_process+0x294>)
 8010194:	f008 fdd6 	bl	8018d44 <iprintf>
          pcb->unsent = rseg->next;
 8010198:	69fb      	ldr	r3, [r7, #28]
 801019a:	681a      	ldr	r2, [r3, #0]
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	66da      	str	r2, [r3, #108]	@ 0x6c
 80101a0:	e01c      	b.n	80101dc <tcp_process+0x2c4>
 80101a2:	bf00      	nop
 80101a4:	0801c1e0 	.word	0x0801c1e0
 80101a8:	0801c418 	.word	0x0801c418
 80101ac:	0801c22c 	.word	0x0801c22c
 80101b0:	20010eb8 	.word	0x20010eb8
 80101b4:	20010eb0 	.word	0x20010eb0
 80101b8:	20010eac 	.word	0x20010eac
 80101bc:	0801c434 	.word	0x0801c434
 80101c0:	20010eb9 	.word	0x20010eb9
 80101c4:	20010e74 	.word	0x20010e74
 80101c8:	20010e9c 	.word	0x20010e9c
 80101cc:	0801c454 	.word	0x0801c454
 80101d0:	0801c46c 	.word	0x0801c46c
        } else {
          pcb->unacked = rseg->next;
 80101d4:	69fb      	ldr	r3, [r7, #28]
 80101d6:	681a      	ldr	r2, [r3, #0]
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 80101dc:	69f8      	ldr	r0, [r7, #28]
 80101de:	f7fe fc36 	bl	800ea4e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d104      	bne.n	80101f4 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80101f0:	861a      	strh	r2, [r3, #48]	@ 0x30
 80101f2:	e006      	b.n	8010202 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	2200      	movs	r2, #0
 80101f8:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	2200      	movs	r2, #0
 80101fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010208:	2b00      	cmp	r3, #0
 801020a:	d00a      	beq.n	8010222 <tcp_process+0x30a>
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010212:	687a      	ldr	r2, [r7, #4]
 8010214:	6910      	ldr	r0, [r2, #16]
 8010216:	2200      	movs	r2, #0
 8010218:	6879      	ldr	r1, [r7, #4]
 801021a:	4798      	blx	r3
 801021c:	4603      	mov	r3, r0
 801021e:	76bb      	strb	r3, [r7, #26]
 8010220:	e001      	b.n	8010226 <tcp_process+0x30e>
 8010222:	2300      	movs	r3, #0
 8010224:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8010226:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801022a:	f113 0f0d 	cmn.w	r3, #13
 801022e:	d102      	bne.n	8010236 <tcp_process+0x31e>
          return ERR_ABRT;
 8010230:	f06f 030c 	mvn.w	r3, #12
 8010234:	e250      	b.n	80106d8 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	8b5b      	ldrh	r3, [r3, #26]
 801023a:	f043 0302 	orr.w	r3, r3, #2
 801023e:	b29a      	uxth	r2, r3
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8010244:	e23a      	b.n	80106bc <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8010246:	4b98      	ldr	r3, [pc, #608]	@ (80104a8 <tcp_process+0x590>)
 8010248:	781b      	ldrb	r3, [r3, #0]
 801024a:	f003 0310 	and.w	r3, r3, #16
 801024e:	2b00      	cmp	r3, #0
 8010250:	f000 8234 	beq.w	80106bc <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010254:	4b95      	ldr	r3, [pc, #596]	@ (80104ac <tcp_process+0x594>)
 8010256:	6819      	ldr	r1, [r3, #0]
 8010258:	4b95      	ldr	r3, [pc, #596]	@ (80104b0 <tcp_process+0x598>)
 801025a:	881b      	ldrh	r3, [r3, #0]
 801025c:	461a      	mov	r2, r3
 801025e:	4b95      	ldr	r3, [pc, #596]	@ (80104b4 <tcp_process+0x59c>)
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010264:	4b94      	ldr	r3, [pc, #592]	@ (80104b8 <tcp_process+0x5a0>)
 8010266:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010268:	885b      	ldrh	r3, [r3, #2]
 801026a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801026c:	4a92      	ldr	r2, [pc, #584]	@ (80104b8 <tcp_process+0x5a0>)
 801026e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010270:	8812      	ldrh	r2, [r2, #0]
 8010272:	b292      	uxth	r2, r2
 8010274:	9202      	str	r2, [sp, #8]
 8010276:	9301      	str	r3, [sp, #4]
 8010278:	4b90      	ldr	r3, [pc, #576]	@ (80104bc <tcp_process+0x5a4>)
 801027a:	9300      	str	r3, [sp, #0]
 801027c:	4b90      	ldr	r3, [pc, #576]	@ (80104c0 <tcp_process+0x5a8>)
 801027e:	4602      	mov	r2, r0
 8010280:	6878      	ldr	r0, [r7, #4]
 8010282:	f003 f8d7 	bl	8013434 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801028c:	2b05      	cmp	r3, #5
 801028e:	f200 8215 	bhi.w	80106bc <tcp_process+0x7a4>
          pcb->rtime = 0;
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	2200      	movs	r2, #0
 8010296:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8010298:	6878      	ldr	r0, [r7, #4]
 801029a:	f002 fea3 	bl	8012fe4 <tcp_rexmit_rto>
      break;
 801029e:	e20d      	b.n	80106bc <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80102a0:	4b81      	ldr	r3, [pc, #516]	@ (80104a8 <tcp_process+0x590>)
 80102a2:	781b      	ldrb	r3, [r3, #0]
 80102a4:	f003 0310 	and.w	r3, r3, #16
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	f000 80a1 	beq.w	80103f0 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80102ae:	4b7f      	ldr	r3, [pc, #508]	@ (80104ac <tcp_process+0x594>)
 80102b0:	681a      	ldr	r2, [r3, #0]
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80102b6:	1ad3      	subs	r3, r2, r3
 80102b8:	3b01      	subs	r3, #1
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	db7e      	blt.n	80103bc <tcp_process+0x4a4>
 80102be:	4b7b      	ldr	r3, [pc, #492]	@ (80104ac <tcp_process+0x594>)
 80102c0:	681a      	ldr	r2, [r3, #0]
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80102c6:	1ad3      	subs	r3, r2, r3
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	dc77      	bgt.n	80103bc <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	2204      	movs	r2, #4
 80102d0:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d102      	bne.n	80102e0 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80102da:	23fa      	movs	r3, #250	@ 0xfa
 80102dc:	76bb      	strb	r3, [r7, #26]
 80102de:	e01d      	b.n	801031c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80102e4:	699b      	ldr	r3, [r3, #24]
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d106      	bne.n	80102f8 <tcp_process+0x3e0>
 80102ea:	4b76      	ldr	r3, [pc, #472]	@ (80104c4 <tcp_process+0x5ac>)
 80102ec:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 80102f0:	4975      	ldr	r1, [pc, #468]	@ (80104c8 <tcp_process+0x5b0>)
 80102f2:	4876      	ldr	r0, [pc, #472]	@ (80104cc <tcp_process+0x5b4>)
 80102f4:	f008 fd26 	bl	8018d44 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80102fc:	699b      	ldr	r3, [r3, #24]
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d00a      	beq.n	8010318 <tcp_process+0x400>
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010306:	699b      	ldr	r3, [r3, #24]
 8010308:	687a      	ldr	r2, [r7, #4]
 801030a:	6910      	ldr	r0, [r2, #16]
 801030c:	2200      	movs	r2, #0
 801030e:	6879      	ldr	r1, [r7, #4]
 8010310:	4798      	blx	r3
 8010312:	4603      	mov	r3, r0
 8010314:	76bb      	strb	r3, [r7, #26]
 8010316:	e001      	b.n	801031c <tcp_process+0x404>
 8010318:	23f0      	movs	r3, #240	@ 0xf0
 801031a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 801031c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010320:	2b00      	cmp	r3, #0
 8010322:	d00a      	beq.n	801033a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8010324:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010328:	f113 0f0d 	cmn.w	r3, #13
 801032c:	d002      	beq.n	8010334 <tcp_process+0x41c>
              tcp_abort(pcb);
 801032e:	6878      	ldr	r0, [r7, #4]
 8010330:	f7fd fbce 	bl	800dad0 <tcp_abort>
            }
            return ERR_ABRT;
 8010334:	f06f 030c 	mvn.w	r3, #12
 8010338:	e1ce      	b.n	80106d8 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801033a:	6878      	ldr	r0, [r7, #4]
 801033c:	f000 fae0 	bl	8010900 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8010340:	4b63      	ldr	r3, [pc, #396]	@ (80104d0 <tcp_process+0x5b8>)
 8010342:	881b      	ldrh	r3, [r3, #0]
 8010344:	2b00      	cmp	r3, #0
 8010346:	d005      	beq.n	8010354 <tcp_process+0x43c>
            recv_acked--;
 8010348:	4b61      	ldr	r3, [pc, #388]	@ (80104d0 <tcp_process+0x5b8>)
 801034a:	881b      	ldrh	r3, [r3, #0]
 801034c:	3b01      	subs	r3, #1
 801034e:	b29a      	uxth	r2, r3
 8010350:	4b5f      	ldr	r3, [pc, #380]	@ (80104d0 <tcp_process+0x5b8>)
 8010352:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010358:	009a      	lsls	r2, r3, #2
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801035e:	005b      	lsls	r3, r3, #1
 8010360:	f241 111c 	movw	r1, #4380	@ 0x111c
 8010364:	428b      	cmp	r3, r1
 8010366:	bf38      	it	cc
 8010368:	460b      	movcc	r3, r1
 801036a:	429a      	cmp	r2, r3
 801036c:	d204      	bcs.n	8010378 <tcp_process+0x460>
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010372:	009b      	lsls	r3, r3, #2
 8010374:	b29b      	uxth	r3, r3
 8010376:	e00d      	b.n	8010394 <tcp_process+0x47c>
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801037c:	005b      	lsls	r3, r3, #1
 801037e:	f241 121c 	movw	r2, #4380	@ 0x111c
 8010382:	4293      	cmp	r3, r2
 8010384:	d904      	bls.n	8010390 <tcp_process+0x478>
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801038a:	005b      	lsls	r3, r3, #1
 801038c:	b29b      	uxth	r3, r3
 801038e:	e001      	b.n	8010394 <tcp_process+0x47c>
 8010390:	f241 131c 	movw	r3, #4380	@ 0x111c
 8010394:	687a      	ldr	r2, [r7, #4]
 8010396:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801039a:	4b4e      	ldr	r3, [pc, #312]	@ (80104d4 <tcp_process+0x5bc>)
 801039c:	781b      	ldrb	r3, [r3, #0]
 801039e:	f003 0320 	and.w	r3, r3, #32
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d037      	beq.n	8010416 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	8b5b      	ldrh	r3, [r3, #26]
 80103aa:	f043 0302 	orr.w	r3, r3, #2
 80103ae:	b29a      	uxth	r2, r3
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	2207      	movs	r2, #7
 80103b8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80103ba:	e02c      	b.n	8010416 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80103bc:	4b3b      	ldr	r3, [pc, #236]	@ (80104ac <tcp_process+0x594>)
 80103be:	6819      	ldr	r1, [r3, #0]
 80103c0:	4b3b      	ldr	r3, [pc, #236]	@ (80104b0 <tcp_process+0x598>)
 80103c2:	881b      	ldrh	r3, [r3, #0]
 80103c4:	461a      	mov	r2, r3
 80103c6:	4b3b      	ldr	r3, [pc, #236]	@ (80104b4 <tcp_process+0x59c>)
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80103cc:	4b3a      	ldr	r3, [pc, #232]	@ (80104b8 <tcp_process+0x5a0>)
 80103ce:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80103d0:	885b      	ldrh	r3, [r3, #2]
 80103d2:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80103d4:	4a38      	ldr	r2, [pc, #224]	@ (80104b8 <tcp_process+0x5a0>)
 80103d6:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80103d8:	8812      	ldrh	r2, [r2, #0]
 80103da:	b292      	uxth	r2, r2
 80103dc:	9202      	str	r2, [sp, #8]
 80103de:	9301      	str	r3, [sp, #4]
 80103e0:	4b36      	ldr	r3, [pc, #216]	@ (80104bc <tcp_process+0x5a4>)
 80103e2:	9300      	str	r3, [sp, #0]
 80103e4:	4b36      	ldr	r3, [pc, #216]	@ (80104c0 <tcp_process+0x5a8>)
 80103e6:	4602      	mov	r2, r0
 80103e8:	6878      	ldr	r0, [r7, #4]
 80103ea:	f003 f823 	bl	8013434 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80103ee:	e167      	b.n	80106c0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80103f0:	4b2d      	ldr	r3, [pc, #180]	@ (80104a8 <tcp_process+0x590>)
 80103f2:	781b      	ldrb	r3, [r3, #0]
 80103f4:	f003 0302 	and.w	r3, r3, #2
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	f000 8161 	beq.w	80106c0 <tcp_process+0x7a8>
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010402:	1e5a      	subs	r2, r3, #1
 8010404:	4b2b      	ldr	r3, [pc, #172]	@ (80104b4 <tcp_process+0x59c>)
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	429a      	cmp	r2, r3
 801040a:	f040 8159 	bne.w	80106c0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801040e:	6878      	ldr	r0, [r7, #4]
 8010410:	f002 fe0a 	bl	8013028 <tcp_rexmit>
      break;
 8010414:	e154      	b.n	80106c0 <tcp_process+0x7a8>
 8010416:	e153      	b.n	80106c0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8010418:	6878      	ldr	r0, [r7, #4]
 801041a:	f000 fa71 	bl	8010900 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801041e:	4b2d      	ldr	r3, [pc, #180]	@ (80104d4 <tcp_process+0x5bc>)
 8010420:	781b      	ldrb	r3, [r3, #0]
 8010422:	f003 0320 	and.w	r3, r3, #32
 8010426:	2b00      	cmp	r3, #0
 8010428:	f000 814c 	beq.w	80106c4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	8b5b      	ldrh	r3, [r3, #26]
 8010430:	f043 0302 	orr.w	r3, r3, #2
 8010434:	b29a      	uxth	r2, r3
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	2207      	movs	r2, #7
 801043e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010440:	e140      	b.n	80106c4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8010442:	6878      	ldr	r0, [r7, #4]
 8010444:	f000 fa5c 	bl	8010900 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010448:	4b22      	ldr	r3, [pc, #136]	@ (80104d4 <tcp_process+0x5bc>)
 801044a:	781b      	ldrb	r3, [r3, #0]
 801044c:	f003 0320 	and.w	r3, r3, #32
 8010450:	2b00      	cmp	r3, #0
 8010452:	d071      	beq.n	8010538 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010454:	4b14      	ldr	r3, [pc, #80]	@ (80104a8 <tcp_process+0x590>)
 8010456:	781b      	ldrb	r3, [r3, #0]
 8010458:	f003 0310 	and.w	r3, r3, #16
 801045c:	2b00      	cmp	r3, #0
 801045e:	d060      	beq.n	8010522 <tcp_process+0x60a>
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010464:	4b11      	ldr	r3, [pc, #68]	@ (80104ac <tcp_process+0x594>)
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	429a      	cmp	r2, r3
 801046a:	d15a      	bne.n	8010522 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010470:	2b00      	cmp	r3, #0
 8010472:	d156      	bne.n	8010522 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	8b5b      	ldrh	r3, [r3, #26]
 8010478:	f043 0302 	orr.w	r3, r3, #2
 801047c:	b29a      	uxth	r2, r3
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8010482:	6878      	ldr	r0, [r7, #4]
 8010484:	f7fe fdbc 	bl	800f000 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8010488:	4b13      	ldr	r3, [pc, #76]	@ (80104d8 <tcp_process+0x5c0>)
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	687a      	ldr	r2, [r7, #4]
 801048e:	429a      	cmp	r2, r3
 8010490:	d105      	bne.n	801049e <tcp_process+0x586>
 8010492:	4b11      	ldr	r3, [pc, #68]	@ (80104d8 <tcp_process+0x5c0>)
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	68db      	ldr	r3, [r3, #12]
 8010498:	4a0f      	ldr	r2, [pc, #60]	@ (80104d8 <tcp_process+0x5c0>)
 801049a:	6013      	str	r3, [r2, #0]
 801049c:	e02e      	b.n	80104fc <tcp_process+0x5e4>
 801049e:	4b0e      	ldr	r3, [pc, #56]	@ (80104d8 <tcp_process+0x5c0>)
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	617b      	str	r3, [r7, #20]
 80104a4:	e027      	b.n	80104f6 <tcp_process+0x5de>
 80104a6:	bf00      	nop
 80104a8:	20010eb8 	.word	0x20010eb8
 80104ac:	20010eb0 	.word	0x20010eb0
 80104b0:	20010eb6 	.word	0x20010eb6
 80104b4:	20010eac 	.word	0x20010eac
 80104b8:	20010e9c 	.word	0x20010e9c
 80104bc:	2000d710 	.word	0x2000d710
 80104c0:	2000d714 	.word	0x2000d714
 80104c4:	0801c1e0 	.word	0x0801c1e0
 80104c8:	0801c480 	.word	0x0801c480
 80104cc:	0801c22c 	.word	0x0801c22c
 80104d0:	20010eb4 	.word	0x20010eb4
 80104d4:	20010eb9 	.word	0x20010eb9
 80104d8:	20010e80 	.word	0x20010e80
 80104dc:	697b      	ldr	r3, [r7, #20]
 80104de:	68db      	ldr	r3, [r3, #12]
 80104e0:	687a      	ldr	r2, [r7, #4]
 80104e2:	429a      	cmp	r2, r3
 80104e4:	d104      	bne.n	80104f0 <tcp_process+0x5d8>
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	68da      	ldr	r2, [r3, #12]
 80104ea:	697b      	ldr	r3, [r7, #20]
 80104ec:	60da      	str	r2, [r3, #12]
 80104ee:	e005      	b.n	80104fc <tcp_process+0x5e4>
 80104f0:	697b      	ldr	r3, [r7, #20]
 80104f2:	68db      	ldr	r3, [r3, #12]
 80104f4:	617b      	str	r3, [r7, #20]
 80104f6:	697b      	ldr	r3, [r7, #20]
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d1ef      	bne.n	80104dc <tcp_process+0x5c4>
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	2200      	movs	r2, #0
 8010500:	60da      	str	r2, [r3, #12]
 8010502:	4b77      	ldr	r3, [pc, #476]	@ (80106e0 <tcp_process+0x7c8>)
 8010504:	2201      	movs	r2, #1
 8010506:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	220a      	movs	r2, #10
 801050c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801050e:	4b75      	ldr	r3, [pc, #468]	@ (80106e4 <tcp_process+0x7cc>)
 8010510:	681a      	ldr	r2, [r3, #0]
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	60da      	str	r2, [r3, #12]
 8010516:	4a73      	ldr	r2, [pc, #460]	@ (80106e4 <tcp_process+0x7cc>)
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	6013      	str	r3, [r2, #0]
 801051c:	f003 f94c 	bl	80137b8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8010520:	e0d2      	b.n	80106c8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	8b5b      	ldrh	r3, [r3, #26]
 8010526:	f043 0302 	orr.w	r3, r3, #2
 801052a:	b29a      	uxth	r2, r3
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	2208      	movs	r2, #8
 8010534:	751a      	strb	r2, [r3, #20]
      break;
 8010536:	e0c7      	b.n	80106c8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010538:	4b6b      	ldr	r3, [pc, #428]	@ (80106e8 <tcp_process+0x7d0>)
 801053a:	781b      	ldrb	r3, [r3, #0]
 801053c:	f003 0310 	and.w	r3, r3, #16
 8010540:	2b00      	cmp	r3, #0
 8010542:	f000 80c1 	beq.w	80106c8 <tcp_process+0x7b0>
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801054a:	4b68      	ldr	r3, [pc, #416]	@ (80106ec <tcp_process+0x7d4>)
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	429a      	cmp	r2, r3
 8010550:	f040 80ba 	bne.w	80106c8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010558:	2b00      	cmp	r3, #0
 801055a:	f040 80b5 	bne.w	80106c8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	2206      	movs	r2, #6
 8010562:	751a      	strb	r2, [r3, #20]
      break;
 8010564:	e0b0      	b.n	80106c8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8010566:	6878      	ldr	r0, [r7, #4]
 8010568:	f000 f9ca 	bl	8010900 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801056c:	4b60      	ldr	r3, [pc, #384]	@ (80106f0 <tcp_process+0x7d8>)
 801056e:	781b      	ldrb	r3, [r3, #0]
 8010570:	f003 0320 	and.w	r3, r3, #32
 8010574:	2b00      	cmp	r3, #0
 8010576:	f000 80a9 	beq.w	80106cc <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	8b5b      	ldrh	r3, [r3, #26]
 801057e:	f043 0302 	orr.w	r3, r3, #2
 8010582:	b29a      	uxth	r2, r3
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8010588:	6878      	ldr	r0, [r7, #4]
 801058a:	f7fe fd39 	bl	800f000 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801058e:	4b59      	ldr	r3, [pc, #356]	@ (80106f4 <tcp_process+0x7dc>)
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	687a      	ldr	r2, [r7, #4]
 8010594:	429a      	cmp	r2, r3
 8010596:	d105      	bne.n	80105a4 <tcp_process+0x68c>
 8010598:	4b56      	ldr	r3, [pc, #344]	@ (80106f4 <tcp_process+0x7dc>)
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	68db      	ldr	r3, [r3, #12]
 801059e:	4a55      	ldr	r2, [pc, #340]	@ (80106f4 <tcp_process+0x7dc>)
 80105a0:	6013      	str	r3, [r2, #0]
 80105a2:	e013      	b.n	80105cc <tcp_process+0x6b4>
 80105a4:	4b53      	ldr	r3, [pc, #332]	@ (80106f4 <tcp_process+0x7dc>)
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	613b      	str	r3, [r7, #16]
 80105aa:	e00c      	b.n	80105c6 <tcp_process+0x6ae>
 80105ac:	693b      	ldr	r3, [r7, #16]
 80105ae:	68db      	ldr	r3, [r3, #12]
 80105b0:	687a      	ldr	r2, [r7, #4]
 80105b2:	429a      	cmp	r2, r3
 80105b4:	d104      	bne.n	80105c0 <tcp_process+0x6a8>
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	68da      	ldr	r2, [r3, #12]
 80105ba:	693b      	ldr	r3, [r7, #16]
 80105bc:	60da      	str	r2, [r3, #12]
 80105be:	e005      	b.n	80105cc <tcp_process+0x6b4>
 80105c0:	693b      	ldr	r3, [r7, #16]
 80105c2:	68db      	ldr	r3, [r3, #12]
 80105c4:	613b      	str	r3, [r7, #16]
 80105c6:	693b      	ldr	r3, [r7, #16]
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d1ef      	bne.n	80105ac <tcp_process+0x694>
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	2200      	movs	r2, #0
 80105d0:	60da      	str	r2, [r3, #12]
 80105d2:	4b43      	ldr	r3, [pc, #268]	@ (80106e0 <tcp_process+0x7c8>)
 80105d4:	2201      	movs	r2, #1
 80105d6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	220a      	movs	r2, #10
 80105dc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80105de:	4b41      	ldr	r3, [pc, #260]	@ (80106e4 <tcp_process+0x7cc>)
 80105e0:	681a      	ldr	r2, [r3, #0]
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	60da      	str	r2, [r3, #12]
 80105e6:	4a3f      	ldr	r2, [pc, #252]	@ (80106e4 <tcp_process+0x7cc>)
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	6013      	str	r3, [r2, #0]
 80105ec:	f003 f8e4 	bl	80137b8 <tcp_timer_needed>
      }
      break;
 80105f0:	e06c      	b.n	80106cc <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80105f2:	6878      	ldr	r0, [r7, #4]
 80105f4:	f000 f984 	bl	8010900 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80105f8:	4b3b      	ldr	r3, [pc, #236]	@ (80106e8 <tcp_process+0x7d0>)
 80105fa:	781b      	ldrb	r3, [r3, #0]
 80105fc:	f003 0310 	and.w	r3, r3, #16
 8010600:	2b00      	cmp	r3, #0
 8010602:	d065      	beq.n	80106d0 <tcp_process+0x7b8>
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010608:	4b38      	ldr	r3, [pc, #224]	@ (80106ec <tcp_process+0x7d4>)
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	429a      	cmp	r2, r3
 801060e:	d15f      	bne.n	80106d0 <tcp_process+0x7b8>
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010614:	2b00      	cmp	r3, #0
 8010616:	d15b      	bne.n	80106d0 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8010618:	6878      	ldr	r0, [r7, #4]
 801061a:	f7fe fcf1 	bl	800f000 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801061e:	4b35      	ldr	r3, [pc, #212]	@ (80106f4 <tcp_process+0x7dc>)
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	687a      	ldr	r2, [r7, #4]
 8010624:	429a      	cmp	r2, r3
 8010626:	d105      	bne.n	8010634 <tcp_process+0x71c>
 8010628:	4b32      	ldr	r3, [pc, #200]	@ (80106f4 <tcp_process+0x7dc>)
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	68db      	ldr	r3, [r3, #12]
 801062e:	4a31      	ldr	r2, [pc, #196]	@ (80106f4 <tcp_process+0x7dc>)
 8010630:	6013      	str	r3, [r2, #0]
 8010632:	e013      	b.n	801065c <tcp_process+0x744>
 8010634:	4b2f      	ldr	r3, [pc, #188]	@ (80106f4 <tcp_process+0x7dc>)
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	60fb      	str	r3, [r7, #12]
 801063a:	e00c      	b.n	8010656 <tcp_process+0x73e>
 801063c:	68fb      	ldr	r3, [r7, #12]
 801063e:	68db      	ldr	r3, [r3, #12]
 8010640:	687a      	ldr	r2, [r7, #4]
 8010642:	429a      	cmp	r2, r3
 8010644:	d104      	bne.n	8010650 <tcp_process+0x738>
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	68da      	ldr	r2, [r3, #12]
 801064a:	68fb      	ldr	r3, [r7, #12]
 801064c:	60da      	str	r2, [r3, #12]
 801064e:	e005      	b.n	801065c <tcp_process+0x744>
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	68db      	ldr	r3, [r3, #12]
 8010654:	60fb      	str	r3, [r7, #12]
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	2b00      	cmp	r3, #0
 801065a:	d1ef      	bne.n	801063c <tcp_process+0x724>
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	2200      	movs	r2, #0
 8010660:	60da      	str	r2, [r3, #12]
 8010662:	4b1f      	ldr	r3, [pc, #124]	@ (80106e0 <tcp_process+0x7c8>)
 8010664:	2201      	movs	r2, #1
 8010666:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	220a      	movs	r2, #10
 801066c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801066e:	4b1d      	ldr	r3, [pc, #116]	@ (80106e4 <tcp_process+0x7cc>)
 8010670:	681a      	ldr	r2, [r3, #0]
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	60da      	str	r2, [r3, #12]
 8010676:	4a1b      	ldr	r2, [pc, #108]	@ (80106e4 <tcp_process+0x7cc>)
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	6013      	str	r3, [r2, #0]
 801067c:	f003 f89c 	bl	80137b8 <tcp_timer_needed>
      }
      break;
 8010680:	e026      	b.n	80106d0 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8010682:	6878      	ldr	r0, [r7, #4]
 8010684:	f000 f93c 	bl	8010900 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010688:	4b17      	ldr	r3, [pc, #92]	@ (80106e8 <tcp_process+0x7d0>)
 801068a:	781b      	ldrb	r3, [r3, #0]
 801068c:	f003 0310 	and.w	r3, r3, #16
 8010690:	2b00      	cmp	r3, #0
 8010692:	d01f      	beq.n	80106d4 <tcp_process+0x7bc>
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010698:	4b14      	ldr	r3, [pc, #80]	@ (80106ec <tcp_process+0x7d4>)
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	429a      	cmp	r2, r3
 801069e:	d119      	bne.n	80106d4 <tcp_process+0x7bc>
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d115      	bne.n	80106d4 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80106a8:	4b11      	ldr	r3, [pc, #68]	@ (80106f0 <tcp_process+0x7d8>)
 80106aa:	781b      	ldrb	r3, [r3, #0]
 80106ac:	f043 0310 	orr.w	r3, r3, #16
 80106b0:	b2da      	uxtb	r2, r3
 80106b2:	4b0f      	ldr	r3, [pc, #60]	@ (80106f0 <tcp_process+0x7d8>)
 80106b4:	701a      	strb	r2, [r3, #0]
      }
      break;
 80106b6:	e00d      	b.n	80106d4 <tcp_process+0x7bc>
    default:
      break;
 80106b8:	bf00      	nop
 80106ba:	e00c      	b.n	80106d6 <tcp_process+0x7be>
      break;
 80106bc:	bf00      	nop
 80106be:	e00a      	b.n	80106d6 <tcp_process+0x7be>
      break;
 80106c0:	bf00      	nop
 80106c2:	e008      	b.n	80106d6 <tcp_process+0x7be>
      break;
 80106c4:	bf00      	nop
 80106c6:	e006      	b.n	80106d6 <tcp_process+0x7be>
      break;
 80106c8:	bf00      	nop
 80106ca:	e004      	b.n	80106d6 <tcp_process+0x7be>
      break;
 80106cc:	bf00      	nop
 80106ce:	e002      	b.n	80106d6 <tcp_process+0x7be>
      break;
 80106d0:	bf00      	nop
 80106d2:	e000      	b.n	80106d6 <tcp_process+0x7be>
      break;
 80106d4:	bf00      	nop
  }
  return ERR_OK;
 80106d6:	2300      	movs	r3, #0
}
 80106d8:	4618      	mov	r0, r3
 80106da:	3724      	adds	r7, #36	@ 0x24
 80106dc:	46bd      	mov	sp, r7
 80106de:	bd90      	pop	{r4, r7, pc}
 80106e0:	20010e88 	.word	0x20010e88
 80106e4:	20010e84 	.word	0x20010e84
 80106e8:	20010eb8 	.word	0x20010eb8
 80106ec:	20010eb0 	.word	0x20010eb0
 80106f0:	20010eb9 	.word	0x20010eb9
 80106f4:	20010e80 	.word	0x20010e80

080106f8 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80106f8:	b590      	push	{r4, r7, lr}
 80106fa:	b085      	sub	sp, #20
 80106fc:	af00      	add	r7, sp, #0
 80106fe:	6078      	str	r0, [r7, #4]
 8010700:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	2b00      	cmp	r3, #0
 8010706:	d106      	bne.n	8010716 <tcp_oos_insert_segment+0x1e>
 8010708:	4b3b      	ldr	r3, [pc, #236]	@ (80107f8 <tcp_oos_insert_segment+0x100>)
 801070a:	f240 421f 	movw	r2, #1055	@ 0x41f
 801070e:	493b      	ldr	r1, [pc, #236]	@ (80107fc <tcp_oos_insert_segment+0x104>)
 8010710:	483b      	ldr	r0, [pc, #236]	@ (8010800 <tcp_oos_insert_segment+0x108>)
 8010712:	f008 fb17 	bl	8018d44 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	68db      	ldr	r3, [r3, #12]
 801071a:	899b      	ldrh	r3, [r3, #12]
 801071c:	b29b      	uxth	r3, r3
 801071e:	4618      	mov	r0, r3
 8010720:	f7fa ffa2 	bl	800b668 <lwip_htons>
 8010724:	4603      	mov	r3, r0
 8010726:	b2db      	uxtb	r3, r3
 8010728:	f003 0301 	and.w	r3, r3, #1
 801072c:	2b00      	cmp	r3, #0
 801072e:	d028      	beq.n	8010782 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8010730:	6838      	ldr	r0, [r7, #0]
 8010732:	f7fe f977 	bl	800ea24 <tcp_segs_free>
    next = NULL;
 8010736:	2300      	movs	r3, #0
 8010738:	603b      	str	r3, [r7, #0]
 801073a:	e056      	b.n	80107ea <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801073c:	683b      	ldr	r3, [r7, #0]
 801073e:	68db      	ldr	r3, [r3, #12]
 8010740:	899b      	ldrh	r3, [r3, #12]
 8010742:	b29b      	uxth	r3, r3
 8010744:	4618      	mov	r0, r3
 8010746:	f7fa ff8f 	bl	800b668 <lwip_htons>
 801074a:	4603      	mov	r3, r0
 801074c:	b2db      	uxtb	r3, r3
 801074e:	f003 0301 	and.w	r3, r3, #1
 8010752:	2b00      	cmp	r3, #0
 8010754:	d00d      	beq.n	8010772 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	68db      	ldr	r3, [r3, #12]
 801075a:	899b      	ldrh	r3, [r3, #12]
 801075c:	b29c      	uxth	r4, r3
 801075e:	2001      	movs	r0, #1
 8010760:	f7fa ff82 	bl	800b668 <lwip_htons>
 8010764:	4603      	mov	r3, r0
 8010766:	461a      	mov	r2, r3
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	68db      	ldr	r3, [r3, #12]
 801076c:	4322      	orrs	r2, r4
 801076e:	b292      	uxth	r2, r2
 8010770:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8010772:	683b      	ldr	r3, [r7, #0]
 8010774:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8010776:	683b      	ldr	r3, [r7, #0]
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801077c:	68f8      	ldr	r0, [r7, #12]
 801077e:	f7fe f966 	bl	800ea4e <tcp_seg_free>
    while (next &&
 8010782:	683b      	ldr	r3, [r7, #0]
 8010784:	2b00      	cmp	r3, #0
 8010786:	d00e      	beq.n	80107a6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	891b      	ldrh	r3, [r3, #8]
 801078c:	461a      	mov	r2, r3
 801078e:	4b1d      	ldr	r3, [pc, #116]	@ (8010804 <tcp_oos_insert_segment+0x10c>)
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	441a      	add	r2, r3
 8010794:	683b      	ldr	r3, [r7, #0]
 8010796:	68db      	ldr	r3, [r3, #12]
 8010798:	685b      	ldr	r3, [r3, #4]
 801079a:	6839      	ldr	r1, [r7, #0]
 801079c:	8909      	ldrh	r1, [r1, #8]
 801079e:	440b      	add	r3, r1
 80107a0:	1ad3      	subs	r3, r2, r3
    while (next &&
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	daca      	bge.n	801073c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80107a6:	683b      	ldr	r3, [r7, #0]
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d01e      	beq.n	80107ea <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	891b      	ldrh	r3, [r3, #8]
 80107b0:	461a      	mov	r2, r3
 80107b2:	4b14      	ldr	r3, [pc, #80]	@ (8010804 <tcp_oos_insert_segment+0x10c>)
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	441a      	add	r2, r3
 80107b8:	683b      	ldr	r3, [r7, #0]
 80107ba:	68db      	ldr	r3, [r3, #12]
 80107bc:	685b      	ldr	r3, [r3, #4]
 80107be:	1ad3      	subs	r3, r2, r3
    if (next &&
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	dd12      	ble.n	80107ea <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80107c4:	683b      	ldr	r3, [r7, #0]
 80107c6:	68db      	ldr	r3, [r3, #12]
 80107c8:	685b      	ldr	r3, [r3, #4]
 80107ca:	b29a      	uxth	r2, r3
 80107cc:	4b0d      	ldr	r3, [pc, #52]	@ (8010804 <tcp_oos_insert_segment+0x10c>)
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	b29b      	uxth	r3, r3
 80107d2:	1ad3      	subs	r3, r2, r3
 80107d4:	b29a      	uxth	r2, r3
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	685a      	ldr	r2, [r3, #4]
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	891b      	ldrh	r3, [r3, #8]
 80107e2:	4619      	mov	r1, r3
 80107e4:	4610      	mov	r0, r2
 80107e6:	f7fc f9ed 	bl	800cbc4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	683a      	ldr	r2, [r7, #0]
 80107ee:	601a      	str	r2, [r3, #0]
}
 80107f0:	bf00      	nop
 80107f2:	3714      	adds	r7, #20
 80107f4:	46bd      	mov	sp, r7
 80107f6:	bd90      	pop	{r4, r7, pc}
 80107f8:	0801c1e0 	.word	0x0801c1e0
 80107fc:	0801c4a0 	.word	0x0801c4a0
 8010800:	0801c22c 	.word	0x0801c22c
 8010804:	20010eac 	.word	0x20010eac

08010808 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8010808:	b5b0      	push	{r4, r5, r7, lr}
 801080a:	b086      	sub	sp, #24
 801080c:	af00      	add	r7, sp, #0
 801080e:	60f8      	str	r0, [r7, #12]
 8010810:	60b9      	str	r1, [r7, #8]
 8010812:	607a      	str	r2, [r7, #4]
 8010814:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8010816:	e03e      	b.n	8010896 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8010818:	68bb      	ldr	r3, [r7, #8]
 801081a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801081c:	68bb      	ldr	r3, [r7, #8]
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8010822:	697b      	ldr	r3, [r7, #20]
 8010824:	685b      	ldr	r3, [r3, #4]
 8010826:	4618      	mov	r0, r3
 8010828:	f7fc fbe0 	bl	800cfec <pbuf_clen>
 801082c:	4603      	mov	r3, r0
 801082e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010836:	8a7a      	ldrh	r2, [r7, #18]
 8010838:	429a      	cmp	r2, r3
 801083a:	d906      	bls.n	801084a <tcp_free_acked_segments+0x42>
 801083c:	4b2a      	ldr	r3, [pc, #168]	@ (80108e8 <tcp_free_acked_segments+0xe0>)
 801083e:	f240 4257 	movw	r2, #1111	@ 0x457
 8010842:	492a      	ldr	r1, [pc, #168]	@ (80108ec <tcp_free_acked_segments+0xe4>)
 8010844:	482a      	ldr	r0, [pc, #168]	@ (80108f0 <tcp_free_acked_segments+0xe8>)
 8010846:	f008 fa7d 	bl	8018d44 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8010850:	8a7b      	ldrh	r3, [r7, #18]
 8010852:	1ad3      	subs	r3, r2, r3
 8010854:	b29a      	uxth	r2, r3
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801085c:	697b      	ldr	r3, [r7, #20]
 801085e:	891a      	ldrh	r2, [r3, #8]
 8010860:	4b24      	ldr	r3, [pc, #144]	@ (80108f4 <tcp_free_acked_segments+0xec>)
 8010862:	881b      	ldrh	r3, [r3, #0]
 8010864:	4413      	add	r3, r2
 8010866:	b29a      	uxth	r2, r3
 8010868:	4b22      	ldr	r3, [pc, #136]	@ (80108f4 <tcp_free_acked_segments+0xec>)
 801086a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801086c:	6978      	ldr	r0, [r7, #20]
 801086e:	f7fe f8ee 	bl	800ea4e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010878:	2b00      	cmp	r3, #0
 801087a:	d00c      	beq.n	8010896 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801087c:	68bb      	ldr	r3, [r7, #8]
 801087e:	2b00      	cmp	r3, #0
 8010880:	d109      	bne.n	8010896 <tcp_free_acked_segments+0x8e>
 8010882:	683b      	ldr	r3, [r7, #0]
 8010884:	2b00      	cmp	r3, #0
 8010886:	d106      	bne.n	8010896 <tcp_free_acked_segments+0x8e>
 8010888:	4b17      	ldr	r3, [pc, #92]	@ (80108e8 <tcp_free_acked_segments+0xe0>)
 801088a:	f240 4261 	movw	r2, #1121	@ 0x461
 801088e:	491a      	ldr	r1, [pc, #104]	@ (80108f8 <tcp_free_acked_segments+0xf0>)
 8010890:	4817      	ldr	r0, [pc, #92]	@ (80108f0 <tcp_free_acked_segments+0xe8>)
 8010892:	f008 fa57 	bl	8018d44 <iprintf>
  while (seg_list != NULL &&
 8010896:	68bb      	ldr	r3, [r7, #8]
 8010898:	2b00      	cmp	r3, #0
 801089a:	d020      	beq.n	80108de <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801089c:	68bb      	ldr	r3, [r7, #8]
 801089e:	68db      	ldr	r3, [r3, #12]
 80108a0:	685b      	ldr	r3, [r3, #4]
 80108a2:	4618      	mov	r0, r3
 80108a4:	f7fa fef5 	bl	800b692 <lwip_htonl>
 80108a8:	4604      	mov	r4, r0
 80108aa:	68bb      	ldr	r3, [r7, #8]
 80108ac:	891b      	ldrh	r3, [r3, #8]
 80108ae:	461d      	mov	r5, r3
 80108b0:	68bb      	ldr	r3, [r7, #8]
 80108b2:	68db      	ldr	r3, [r3, #12]
 80108b4:	899b      	ldrh	r3, [r3, #12]
 80108b6:	b29b      	uxth	r3, r3
 80108b8:	4618      	mov	r0, r3
 80108ba:	f7fa fed5 	bl	800b668 <lwip_htons>
 80108be:	4603      	mov	r3, r0
 80108c0:	b2db      	uxtb	r3, r3
 80108c2:	f003 0303 	and.w	r3, r3, #3
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d001      	beq.n	80108ce <tcp_free_acked_segments+0xc6>
 80108ca:	2301      	movs	r3, #1
 80108cc:	e000      	b.n	80108d0 <tcp_free_acked_segments+0xc8>
 80108ce:	2300      	movs	r3, #0
 80108d0:	442b      	add	r3, r5
 80108d2:	18e2      	adds	r2, r4, r3
 80108d4:	4b09      	ldr	r3, [pc, #36]	@ (80108fc <tcp_free_acked_segments+0xf4>)
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80108da:	2b00      	cmp	r3, #0
 80108dc:	dd9c      	ble.n	8010818 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80108de:	68bb      	ldr	r3, [r7, #8]
}
 80108e0:	4618      	mov	r0, r3
 80108e2:	3718      	adds	r7, #24
 80108e4:	46bd      	mov	sp, r7
 80108e6:	bdb0      	pop	{r4, r5, r7, pc}
 80108e8:	0801c1e0 	.word	0x0801c1e0
 80108ec:	0801c4c8 	.word	0x0801c4c8
 80108f0:	0801c22c 	.word	0x0801c22c
 80108f4:	20010eb4 	.word	0x20010eb4
 80108f8:	0801c4f0 	.word	0x0801c4f0
 80108fc:	20010eb0 	.word	0x20010eb0

08010900 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8010900:	b5b0      	push	{r4, r5, r7, lr}
 8010902:	b094      	sub	sp, #80	@ 0x50
 8010904:	af00      	add	r7, sp, #0
 8010906:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8010908:	2300      	movs	r3, #0
 801090a:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	2b00      	cmp	r3, #0
 8010910:	d106      	bne.n	8010920 <tcp_receive+0x20>
 8010912:	4b91      	ldr	r3, [pc, #580]	@ (8010b58 <tcp_receive+0x258>)
 8010914:	f240 427b 	movw	r2, #1147	@ 0x47b
 8010918:	4990      	ldr	r1, [pc, #576]	@ (8010b5c <tcp_receive+0x25c>)
 801091a:	4891      	ldr	r0, [pc, #580]	@ (8010b60 <tcp_receive+0x260>)
 801091c:	f008 fa12 	bl	8018d44 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	7d1b      	ldrb	r3, [r3, #20]
 8010924:	2b03      	cmp	r3, #3
 8010926:	d806      	bhi.n	8010936 <tcp_receive+0x36>
 8010928:	4b8b      	ldr	r3, [pc, #556]	@ (8010b58 <tcp_receive+0x258>)
 801092a:	f240 427c 	movw	r2, #1148	@ 0x47c
 801092e:	498d      	ldr	r1, [pc, #564]	@ (8010b64 <tcp_receive+0x264>)
 8010930:	488b      	ldr	r0, [pc, #556]	@ (8010b60 <tcp_receive+0x260>)
 8010932:	f008 fa07 	bl	8018d44 <iprintf>

  if (flags & TCP_ACK) {
 8010936:	4b8c      	ldr	r3, [pc, #560]	@ (8010b68 <tcp_receive+0x268>)
 8010938:	781b      	ldrb	r3, [r3, #0]
 801093a:	f003 0310 	and.w	r3, r3, #16
 801093e:	2b00      	cmp	r3, #0
 8010940:	f000 8264 	beq.w	8010e0c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801094a:	461a      	mov	r2, r3
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010950:	4413      	add	r3, r2
 8010952:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8010958:	4b84      	ldr	r3, [pc, #528]	@ (8010b6c <tcp_receive+0x26c>)
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	1ad3      	subs	r3, r2, r3
 801095e:	2b00      	cmp	r3, #0
 8010960:	db1b      	blt.n	801099a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8010966:	4b81      	ldr	r3, [pc, #516]	@ (8010b6c <tcp_receive+0x26c>)
 8010968:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801096a:	429a      	cmp	r2, r3
 801096c:	d106      	bne.n	801097c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8010972:	4b7f      	ldr	r3, [pc, #508]	@ (8010b70 <tcp_receive+0x270>)
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	1ad3      	subs	r3, r2, r3
 8010978:	2b00      	cmp	r3, #0
 801097a:	db0e      	blt.n	801099a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8010980:	4b7b      	ldr	r3, [pc, #492]	@ (8010b70 <tcp_receive+0x270>)
 8010982:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010984:	429a      	cmp	r2, r3
 8010986:	d125      	bne.n	80109d4 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010988:	4b7a      	ldr	r3, [pc, #488]	@ (8010b74 <tcp_receive+0x274>)
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	89db      	ldrh	r3, [r3, #14]
 801098e:	b29a      	uxth	r2, r3
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010996:	429a      	cmp	r2, r3
 8010998:	d91c      	bls.n	80109d4 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801099a:	4b76      	ldr	r3, [pc, #472]	@ (8010b74 <tcp_receive+0x274>)
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	89db      	ldrh	r3, [r3, #14]
 80109a0:	b29a      	uxth	r2, r3
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80109b4:	429a      	cmp	r2, r3
 80109b6:	d205      	bcs.n	80109c4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 80109c4:	4b69      	ldr	r3, [pc, #420]	@ (8010b6c <tcp_receive+0x26c>)
 80109c6:	681a      	ldr	r2, [r3, #0]
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 80109cc:	4b68      	ldr	r3, [pc, #416]	@ (8010b70 <tcp_receive+0x270>)
 80109ce:	681a      	ldr	r2, [r3, #0]
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80109d4:	4b66      	ldr	r3, [pc, #408]	@ (8010b70 <tcp_receive+0x270>)
 80109d6:	681a      	ldr	r2, [r3, #0]
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80109dc:	1ad3      	subs	r3, r2, r3
 80109de:	2b00      	cmp	r3, #0
 80109e0:	dc58      	bgt.n	8010a94 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80109e2:	4b65      	ldr	r3, [pc, #404]	@ (8010b78 <tcp_receive+0x278>)
 80109e4:	881b      	ldrh	r3, [r3, #0]
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d14b      	bne.n	8010a82 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80109ee:	687a      	ldr	r2, [r7, #4]
 80109f0:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 80109f4:	4413      	add	r3, r2
 80109f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80109f8:	429a      	cmp	r2, r3
 80109fa:	d142      	bne.n	8010a82 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	db3d      	blt.n	8010a82 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010a0a:	4b59      	ldr	r3, [pc, #356]	@ (8010b70 <tcp_receive+0x270>)
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	429a      	cmp	r2, r3
 8010a10:	d137      	bne.n	8010a82 <tcp_receive+0x182>
              found_dupack = 1;
 8010a12:	2301      	movs	r3, #1
 8010a14:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010a1c:	2bff      	cmp	r3, #255	@ 0xff
 8010a1e:	d007      	beq.n	8010a30 <tcp_receive+0x130>
                ++pcb->dupacks;
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010a26:	3301      	adds	r3, #1
 8010a28:	b2da      	uxtb	r2, r3
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010a36:	2b03      	cmp	r3, #3
 8010a38:	d91b      	bls.n	8010a72 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010a44:	4413      	add	r3, r2
 8010a46:	b29a      	uxth	r2, r3
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010a4e:	429a      	cmp	r2, r3
 8010a50:	d30a      	bcc.n	8010a68 <tcp_receive+0x168>
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010a5c:	4413      	add	r3, r2
 8010a5e:	b29a      	uxth	r2, r3
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8010a66:	e004      	b.n	8010a72 <tcp_receive+0x172>
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010a6e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010a78:	2b02      	cmp	r3, #2
 8010a7a:	d902      	bls.n	8010a82 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8010a7c:	6878      	ldr	r0, [r7, #4]
 8010a7e:	f002 fb3f 	bl	8013100 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8010a82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	f040 8161 	bne.w	8010d4c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	2200      	movs	r2, #0
 8010a8e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8010a92:	e15b      	b.n	8010d4c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010a94:	4b36      	ldr	r3, [pc, #216]	@ (8010b70 <tcp_receive+0x270>)
 8010a96:	681a      	ldr	r2, [r3, #0]
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010a9c:	1ad3      	subs	r3, r2, r3
 8010a9e:	3b01      	subs	r3, #1
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	f2c0 814e 	blt.w	8010d42 <tcp_receive+0x442>
 8010aa6:	4b32      	ldr	r3, [pc, #200]	@ (8010b70 <tcp_receive+0x270>)
 8010aa8:	681a      	ldr	r2, [r3, #0]
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010aae:	1ad3      	subs	r3, r2, r3
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	f300 8146 	bgt.w	8010d42 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	8b5b      	ldrh	r3, [r3, #26]
 8010aba:	f003 0304 	and.w	r3, r3, #4
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d010      	beq.n	8010ae4 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	8b5b      	ldrh	r3, [r3, #26]
 8010ac6:	f023 0304 	bic.w	r3, r3, #4
 8010aca:	b29a      	uxth	r2, r3
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	2200      	movs	r2, #0
 8010ae0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	2200      	movs	r2, #0
 8010ae8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8010af2:	10db      	asrs	r3, r3, #3
 8010af4:	b21b      	sxth	r3, r3
 8010af6:	b29a      	uxth	r2, r3
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8010afe:	b29b      	uxth	r3, r3
 8010b00:	4413      	add	r3, r2
 8010b02:	b29b      	uxth	r3, r3
 8010b04:	b21a      	sxth	r2, r3
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8010b0c:	4b18      	ldr	r3, [pc, #96]	@ (8010b70 <tcp_receive+0x270>)
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	b29a      	uxth	r2, r3
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010b16:	b29b      	uxth	r3, r3
 8010b18:	1ad3      	subs	r3, r2, r3
 8010b1a:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	2200      	movs	r2, #0
 8010b20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8010b24:	4b12      	ldr	r3, [pc, #72]	@ (8010b70 <tcp_receive+0x270>)
 8010b26:	681a      	ldr	r2, [r3, #0]
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	7d1b      	ldrb	r3, [r3, #20]
 8010b30:	2b03      	cmp	r3, #3
 8010b32:	f240 8097 	bls.w	8010c64 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8010b42:	429a      	cmp	r2, r3
 8010b44:	d245      	bcs.n	8010bd2 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	8b5b      	ldrh	r3, [r3, #26]
 8010b4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d014      	beq.n	8010b7c <tcp_receive+0x27c>
 8010b52:	2301      	movs	r3, #1
 8010b54:	e013      	b.n	8010b7e <tcp_receive+0x27e>
 8010b56:	bf00      	nop
 8010b58:	0801c1e0 	.word	0x0801c1e0
 8010b5c:	0801c510 	.word	0x0801c510
 8010b60:	0801c22c 	.word	0x0801c22c
 8010b64:	0801c52c 	.word	0x0801c52c
 8010b68:	20010eb8 	.word	0x20010eb8
 8010b6c:	20010eac 	.word	0x20010eac
 8010b70:	20010eb0 	.word	0x20010eb0
 8010b74:	20010e9c 	.word	0x20010e9c
 8010b78:	20010eb6 	.word	0x20010eb6
 8010b7c:	2302      	movs	r3, #2
 8010b7e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8010b82:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8010b86:	b29a      	uxth	r2, r3
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010b8c:	fb12 f303 	smulbb	r3, r2, r3
 8010b90:	b29b      	uxth	r3, r3
 8010b92:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8010b94:	4293      	cmp	r3, r2
 8010b96:	bf28      	it	cs
 8010b98:	4613      	movcs	r3, r2
 8010b9a:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010ba2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010ba4:	4413      	add	r3, r2
 8010ba6:	b29a      	uxth	r2, r3
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010bae:	429a      	cmp	r2, r3
 8010bb0:	d309      	bcc.n	8010bc6 <tcp_receive+0x2c6>
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010bb8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010bba:	4413      	add	r3, r2
 8010bbc:	b29a      	uxth	r2, r3
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8010bc4:	e04e      	b.n	8010c64 <tcp_receive+0x364>
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010bcc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8010bd0:	e048      	b.n	8010c64 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8010bd8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010bda:	4413      	add	r3, r2
 8010bdc:	b29a      	uxth	r2, r3
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010be4:	429a      	cmp	r2, r3
 8010be6:	d309      	bcc.n	8010bfc <tcp_receive+0x2fc>
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8010bee:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010bf0:	4413      	add	r3, r2
 8010bf2:	b29a      	uxth	r2, r3
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8010bfa:	e004      	b.n	8010c06 <tcp_receive+0x306>
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010c02:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010c12:	429a      	cmp	r2, r3
 8010c14:	d326      	bcc.n	8010c64 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010c22:	1ad3      	subs	r3, r2, r3
 8010c24:	b29a      	uxth	r2, r3
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010c36:	4413      	add	r3, r2
 8010c38:	b29a      	uxth	r2, r3
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010c40:	429a      	cmp	r2, r3
 8010c42:	d30a      	bcc.n	8010c5a <tcp_receive+0x35a>
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010c4e:	4413      	add	r3, r2
 8010c50:	b29a      	uxth	r2, r3
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8010c58:	e004      	b.n	8010c64 <tcp_receive+0x364>
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010c60:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010c6c:	4a98      	ldr	r2, [pc, #608]	@ (8010ed0 <tcp_receive+0x5d0>)
 8010c6e:	6878      	ldr	r0, [r7, #4]
 8010c70:	f7ff fdca 	bl	8010808 <tcp_free_acked_segments>
 8010c74:	4602      	mov	r2, r0
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010c82:	4a94      	ldr	r2, [pc, #592]	@ (8010ed4 <tcp_receive+0x5d4>)
 8010c84:	6878      	ldr	r0, [r7, #4]
 8010c86:	f7ff fdbf 	bl	8010808 <tcp_free_acked_segments>
 8010c8a:	4602      	mov	r2, r0
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d104      	bne.n	8010ca2 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010c9e:	861a      	strh	r2, [r3, #48]	@ 0x30
 8010ca0:	e002      	b.n	8010ca8 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	2200      	movs	r2, #0
 8010ca6:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	2200      	movs	r2, #0
 8010cac:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d103      	bne.n	8010cbe <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	2200      	movs	r2, #0
 8010cba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8010cc4:	4b84      	ldr	r3, [pc, #528]	@ (8010ed8 <tcp_receive+0x5d8>)
 8010cc6:	881b      	ldrh	r3, [r3, #0]
 8010cc8:	4413      	add	r3, r2
 8010cca:	b29a      	uxth	r2, r3
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	8b5b      	ldrh	r3, [r3, #26]
 8010cd6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d035      	beq.n	8010d4a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d118      	bne.n	8010d18 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d00c      	beq.n	8010d08 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010cf6:	68db      	ldr	r3, [r3, #12]
 8010cf8:	685b      	ldr	r3, [r3, #4]
 8010cfa:	4618      	mov	r0, r3
 8010cfc:	f7fa fcc9 	bl	800b692 <lwip_htonl>
 8010d00:	4603      	mov	r3, r0
 8010d02:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	dc20      	bgt.n	8010d4a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	8b5b      	ldrh	r3, [r3, #26]
 8010d0c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010d10:	b29a      	uxth	r2, r3
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010d16:	e018      	b.n	8010d4a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010d20:	68db      	ldr	r3, [r3, #12]
 8010d22:	685b      	ldr	r3, [r3, #4]
 8010d24:	4618      	mov	r0, r3
 8010d26:	f7fa fcb4 	bl	800b692 <lwip_htonl>
 8010d2a:	4603      	mov	r3, r0
 8010d2c:	1ae3      	subs	r3, r4, r3
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	dc0b      	bgt.n	8010d4a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	8b5b      	ldrh	r3, [r3, #26]
 8010d36:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010d3a:	b29a      	uxth	r2, r3
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010d40:	e003      	b.n	8010d4a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8010d42:	6878      	ldr	r0, [r7, #4]
 8010d44:	f002 fbc8 	bl	80134d8 <tcp_send_empty_ack>
 8010d48:	e000      	b.n	8010d4c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010d4a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d05b      	beq.n	8010e0c <tcp_receive+0x50c>
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010d58:	4b60      	ldr	r3, [pc, #384]	@ (8010edc <tcp_receive+0x5dc>)
 8010d5a:	681b      	ldr	r3, [r3, #0]
 8010d5c:	1ad3      	subs	r3, r2, r3
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	da54      	bge.n	8010e0c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8010d62:	4b5f      	ldr	r3, [pc, #380]	@ (8010ee0 <tcp_receive+0x5e0>)
 8010d64:	681b      	ldr	r3, [r3, #0]
 8010d66:	b29a      	uxth	r2, r3
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010d6c:	b29b      	uxth	r3, r3
 8010d6e:	1ad3      	subs	r3, r2, r3
 8010d70:	b29b      	uxth	r3, r3
 8010d72:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8010d76:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8010d80:	10db      	asrs	r3, r3, #3
 8010d82:	b21b      	sxth	r3, r3
 8010d84:	b29b      	uxth	r3, r3
 8010d86:	1ad3      	subs	r3, r2, r3
 8010d88:	b29b      	uxth	r3, r3
 8010d8a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8010d94:	b29a      	uxth	r2, r3
 8010d96:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8010d9a:	4413      	add	r3, r2
 8010d9c:	b29b      	uxth	r3, r3
 8010d9e:	b21a      	sxth	r2, r3
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8010da4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	da05      	bge.n	8010db8 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8010dac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8010db0:	425b      	negs	r3, r3
 8010db2:	b29b      	uxth	r3, r3
 8010db4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8010db8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8010dc2:	109b      	asrs	r3, r3, #2
 8010dc4:	b21b      	sxth	r3, r3
 8010dc6:	b29b      	uxth	r3, r3
 8010dc8:	1ad3      	subs	r3, r2, r3
 8010dca:	b29b      	uxth	r3, r3
 8010dcc:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8010dd6:	b29a      	uxth	r2, r3
 8010dd8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8010ddc:	4413      	add	r3, r2
 8010dde:	b29b      	uxth	r3, r3
 8010de0:	b21a      	sxth	r2, r3
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8010dec:	10db      	asrs	r3, r3, #3
 8010dee:	b21b      	sxth	r3, r3
 8010df0:	b29a      	uxth	r2, r3
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8010df8:	b29b      	uxth	r3, r3
 8010dfa:	4413      	add	r3, r2
 8010dfc:	b29b      	uxth	r3, r3
 8010dfe:	b21a      	sxth	r2, r3
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	2200      	movs	r2, #0
 8010e0a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8010e0c:	4b35      	ldr	r3, [pc, #212]	@ (8010ee4 <tcp_receive+0x5e4>)
 8010e0e:	881b      	ldrh	r3, [r3, #0]
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	f000 84df 	beq.w	80117d4 <tcp_receive+0xed4>
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	7d1b      	ldrb	r3, [r3, #20]
 8010e1a:	2b06      	cmp	r3, #6
 8010e1c:	f200 84da 	bhi.w	80117d4 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010e24:	4b30      	ldr	r3, [pc, #192]	@ (8010ee8 <tcp_receive+0x5e8>)
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	1ad3      	subs	r3, r2, r3
 8010e2a:	3b01      	subs	r3, #1
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	f2c0 808f 	blt.w	8010f50 <tcp_receive+0x650>
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010e36:	4b2b      	ldr	r3, [pc, #172]	@ (8010ee4 <tcp_receive+0x5e4>)
 8010e38:	881b      	ldrh	r3, [r3, #0]
 8010e3a:	4619      	mov	r1, r3
 8010e3c:	4b2a      	ldr	r3, [pc, #168]	@ (8010ee8 <tcp_receive+0x5e8>)
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	440b      	add	r3, r1
 8010e42:	1ad3      	subs	r3, r2, r3
 8010e44:	3301      	adds	r3, #1
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	f300 8082 	bgt.w	8010f50 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8010e4c:	4b27      	ldr	r3, [pc, #156]	@ (8010eec <tcp_receive+0x5ec>)
 8010e4e:	685b      	ldr	r3, [r3, #4]
 8010e50:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010e56:	4b24      	ldr	r3, [pc, #144]	@ (8010ee8 <tcp_receive+0x5e8>)
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	1ad3      	subs	r3, r2, r3
 8010e5c:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8010e5e:	4b23      	ldr	r3, [pc, #140]	@ (8010eec <tcp_receive+0x5ec>)
 8010e60:	685b      	ldr	r3, [r3, #4]
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d106      	bne.n	8010e74 <tcp_receive+0x574>
 8010e66:	4b22      	ldr	r3, [pc, #136]	@ (8010ef0 <tcp_receive+0x5f0>)
 8010e68:	f240 5294 	movw	r2, #1428	@ 0x594
 8010e6c:	4921      	ldr	r1, [pc, #132]	@ (8010ef4 <tcp_receive+0x5f4>)
 8010e6e:	4822      	ldr	r0, [pc, #136]	@ (8010ef8 <tcp_receive+0x5f8>)
 8010e70:	f007 ff68 	bl	8018d44 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8010e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e76:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8010e7a:	4293      	cmp	r3, r2
 8010e7c:	d906      	bls.n	8010e8c <tcp_receive+0x58c>
 8010e7e:	4b1c      	ldr	r3, [pc, #112]	@ (8010ef0 <tcp_receive+0x5f0>)
 8010e80:	f240 5295 	movw	r2, #1429	@ 0x595
 8010e84:	491d      	ldr	r1, [pc, #116]	@ (8010efc <tcp_receive+0x5fc>)
 8010e86:	481c      	ldr	r0, [pc, #112]	@ (8010ef8 <tcp_receive+0x5f8>)
 8010e88:	f007 ff5c 	bl	8018d44 <iprintf>
      off = (u16_t)off32;
 8010e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e8e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8010e92:	4b16      	ldr	r3, [pc, #88]	@ (8010eec <tcp_receive+0x5ec>)
 8010e94:	685b      	ldr	r3, [r3, #4]
 8010e96:	891b      	ldrh	r3, [r3, #8]
 8010e98:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010e9c:	429a      	cmp	r2, r3
 8010e9e:	d906      	bls.n	8010eae <tcp_receive+0x5ae>
 8010ea0:	4b13      	ldr	r3, [pc, #76]	@ (8010ef0 <tcp_receive+0x5f0>)
 8010ea2:	f240 5297 	movw	r2, #1431	@ 0x597
 8010ea6:	4916      	ldr	r1, [pc, #88]	@ (8010f00 <tcp_receive+0x600>)
 8010ea8:	4813      	ldr	r0, [pc, #76]	@ (8010ef8 <tcp_receive+0x5f8>)
 8010eaa:	f007 ff4b 	bl	8018d44 <iprintf>
      inseg.len -= off;
 8010eae:	4b0f      	ldr	r3, [pc, #60]	@ (8010eec <tcp_receive+0x5ec>)
 8010eb0:	891a      	ldrh	r2, [r3, #8]
 8010eb2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010eb6:	1ad3      	subs	r3, r2, r3
 8010eb8:	b29a      	uxth	r2, r3
 8010eba:	4b0c      	ldr	r3, [pc, #48]	@ (8010eec <tcp_receive+0x5ec>)
 8010ebc:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8010ebe:	4b0b      	ldr	r3, [pc, #44]	@ (8010eec <tcp_receive+0x5ec>)
 8010ec0:	685b      	ldr	r3, [r3, #4]
 8010ec2:	891a      	ldrh	r2, [r3, #8]
 8010ec4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010ec8:	1ad3      	subs	r3, r2, r3
 8010eca:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8010ecc:	e02a      	b.n	8010f24 <tcp_receive+0x624>
 8010ece:	bf00      	nop
 8010ed0:	0801c548 	.word	0x0801c548
 8010ed4:	0801c550 	.word	0x0801c550
 8010ed8:	20010eb4 	.word	0x20010eb4
 8010edc:	20010eb0 	.word	0x20010eb0
 8010ee0:	20010e74 	.word	0x20010e74
 8010ee4:	20010eb6 	.word	0x20010eb6
 8010ee8:	20010eac 	.word	0x20010eac
 8010eec:	20010e8c 	.word	0x20010e8c
 8010ef0:	0801c1e0 	.word	0x0801c1e0
 8010ef4:	0801c558 	.word	0x0801c558
 8010ef8:	0801c22c 	.word	0x0801c22c
 8010efc:	0801c568 	.word	0x0801c568
 8010f00:	0801c578 	.word	0x0801c578
        off -= p->len;
 8010f04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010f06:	895b      	ldrh	r3, [r3, #10]
 8010f08:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010f0c:	1ad3      	subs	r3, r2, r3
 8010f0e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8010f12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010f14:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8010f16:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8010f18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010f1a:	2200      	movs	r2, #0
 8010f1c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8010f1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8010f24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010f26:	895b      	ldrh	r3, [r3, #10]
 8010f28:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010f2c:	429a      	cmp	r2, r3
 8010f2e:	d8e9      	bhi.n	8010f04 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8010f30:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010f34:	4619      	mov	r1, r3
 8010f36:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8010f38:	f7fb ff44 	bl	800cdc4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f40:	4a90      	ldr	r2, [pc, #576]	@ (8011184 <tcp_receive+0x884>)
 8010f42:	6013      	str	r3, [r2, #0]
 8010f44:	4b90      	ldr	r3, [pc, #576]	@ (8011188 <tcp_receive+0x888>)
 8010f46:	68db      	ldr	r3, [r3, #12]
 8010f48:	4a8e      	ldr	r2, [pc, #568]	@ (8011184 <tcp_receive+0x884>)
 8010f4a:	6812      	ldr	r2, [r2, #0]
 8010f4c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010f4e:	e00d      	b.n	8010f6c <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8010f50:	4b8c      	ldr	r3, [pc, #560]	@ (8011184 <tcp_receive+0x884>)
 8010f52:	681a      	ldr	r2, [r3, #0]
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f58:	1ad3      	subs	r3, r2, r3
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	da06      	bge.n	8010f6c <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	8b5b      	ldrh	r3, [r3, #26]
 8010f62:	f043 0302 	orr.w	r3, r3, #2
 8010f66:	b29a      	uxth	r2, r3
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010f6c:	4b85      	ldr	r3, [pc, #532]	@ (8011184 <tcp_receive+0x884>)
 8010f6e:	681a      	ldr	r2, [r3, #0]
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f74:	1ad3      	subs	r3, r2, r3
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	f2c0 8427 	blt.w	80117ca <tcp_receive+0xeca>
 8010f7c:	4b81      	ldr	r3, [pc, #516]	@ (8011184 <tcp_receive+0x884>)
 8010f7e:	681a      	ldr	r2, [r3, #0]
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f84:	6879      	ldr	r1, [r7, #4]
 8010f86:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8010f88:	440b      	add	r3, r1
 8010f8a:	1ad3      	subs	r3, r2, r3
 8010f8c:	3301      	adds	r3, #1
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	f300 841b 	bgt.w	80117ca <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010f98:	4b7a      	ldr	r3, [pc, #488]	@ (8011184 <tcp_receive+0x884>)
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	429a      	cmp	r2, r3
 8010f9e:	f040 8298 	bne.w	80114d2 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8010fa2:	4b79      	ldr	r3, [pc, #484]	@ (8011188 <tcp_receive+0x888>)
 8010fa4:	891c      	ldrh	r4, [r3, #8]
 8010fa6:	4b78      	ldr	r3, [pc, #480]	@ (8011188 <tcp_receive+0x888>)
 8010fa8:	68db      	ldr	r3, [r3, #12]
 8010faa:	899b      	ldrh	r3, [r3, #12]
 8010fac:	b29b      	uxth	r3, r3
 8010fae:	4618      	mov	r0, r3
 8010fb0:	f7fa fb5a 	bl	800b668 <lwip_htons>
 8010fb4:	4603      	mov	r3, r0
 8010fb6:	b2db      	uxtb	r3, r3
 8010fb8:	f003 0303 	and.w	r3, r3, #3
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d001      	beq.n	8010fc4 <tcp_receive+0x6c4>
 8010fc0:	2301      	movs	r3, #1
 8010fc2:	e000      	b.n	8010fc6 <tcp_receive+0x6c6>
 8010fc4:	2300      	movs	r3, #0
 8010fc6:	4423      	add	r3, r4
 8010fc8:	b29a      	uxth	r2, r3
 8010fca:	4b70      	ldr	r3, [pc, #448]	@ (801118c <tcp_receive+0x88c>)
 8010fcc:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8010fd2:	4b6e      	ldr	r3, [pc, #440]	@ (801118c <tcp_receive+0x88c>)
 8010fd4:	881b      	ldrh	r3, [r3, #0]
 8010fd6:	429a      	cmp	r2, r3
 8010fd8:	d274      	bcs.n	80110c4 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010fda:	4b6b      	ldr	r3, [pc, #428]	@ (8011188 <tcp_receive+0x888>)
 8010fdc:	68db      	ldr	r3, [r3, #12]
 8010fde:	899b      	ldrh	r3, [r3, #12]
 8010fe0:	b29b      	uxth	r3, r3
 8010fe2:	4618      	mov	r0, r3
 8010fe4:	f7fa fb40 	bl	800b668 <lwip_htons>
 8010fe8:	4603      	mov	r3, r0
 8010fea:	b2db      	uxtb	r3, r3
 8010fec:	f003 0301 	and.w	r3, r3, #1
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d01e      	beq.n	8011032 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8010ff4:	4b64      	ldr	r3, [pc, #400]	@ (8011188 <tcp_receive+0x888>)
 8010ff6:	68db      	ldr	r3, [r3, #12]
 8010ff8:	899b      	ldrh	r3, [r3, #12]
 8010ffa:	b29b      	uxth	r3, r3
 8010ffc:	b21b      	sxth	r3, r3
 8010ffe:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8011002:	b21c      	sxth	r4, r3
 8011004:	4b60      	ldr	r3, [pc, #384]	@ (8011188 <tcp_receive+0x888>)
 8011006:	68db      	ldr	r3, [r3, #12]
 8011008:	899b      	ldrh	r3, [r3, #12]
 801100a:	b29b      	uxth	r3, r3
 801100c:	4618      	mov	r0, r3
 801100e:	f7fa fb2b 	bl	800b668 <lwip_htons>
 8011012:	4603      	mov	r3, r0
 8011014:	b2db      	uxtb	r3, r3
 8011016:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801101a:	b29b      	uxth	r3, r3
 801101c:	4618      	mov	r0, r3
 801101e:	f7fa fb23 	bl	800b668 <lwip_htons>
 8011022:	4603      	mov	r3, r0
 8011024:	b21b      	sxth	r3, r3
 8011026:	4323      	orrs	r3, r4
 8011028:	b21a      	sxth	r2, r3
 801102a:	4b57      	ldr	r3, [pc, #348]	@ (8011188 <tcp_receive+0x888>)
 801102c:	68db      	ldr	r3, [r3, #12]
 801102e:	b292      	uxth	r2, r2
 8011030:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8011036:	4b54      	ldr	r3, [pc, #336]	@ (8011188 <tcp_receive+0x888>)
 8011038:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801103a:	4b53      	ldr	r3, [pc, #332]	@ (8011188 <tcp_receive+0x888>)
 801103c:	68db      	ldr	r3, [r3, #12]
 801103e:	899b      	ldrh	r3, [r3, #12]
 8011040:	b29b      	uxth	r3, r3
 8011042:	4618      	mov	r0, r3
 8011044:	f7fa fb10 	bl	800b668 <lwip_htons>
 8011048:	4603      	mov	r3, r0
 801104a:	b2db      	uxtb	r3, r3
 801104c:	f003 0302 	and.w	r3, r3, #2
 8011050:	2b00      	cmp	r3, #0
 8011052:	d005      	beq.n	8011060 <tcp_receive+0x760>
            inseg.len -= 1;
 8011054:	4b4c      	ldr	r3, [pc, #304]	@ (8011188 <tcp_receive+0x888>)
 8011056:	891b      	ldrh	r3, [r3, #8]
 8011058:	3b01      	subs	r3, #1
 801105a:	b29a      	uxth	r2, r3
 801105c:	4b4a      	ldr	r3, [pc, #296]	@ (8011188 <tcp_receive+0x888>)
 801105e:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8011060:	4b49      	ldr	r3, [pc, #292]	@ (8011188 <tcp_receive+0x888>)
 8011062:	685b      	ldr	r3, [r3, #4]
 8011064:	4a48      	ldr	r2, [pc, #288]	@ (8011188 <tcp_receive+0x888>)
 8011066:	8912      	ldrh	r2, [r2, #8]
 8011068:	4611      	mov	r1, r2
 801106a:	4618      	mov	r0, r3
 801106c:	f7fb fdaa 	bl	800cbc4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8011070:	4b45      	ldr	r3, [pc, #276]	@ (8011188 <tcp_receive+0x888>)
 8011072:	891c      	ldrh	r4, [r3, #8]
 8011074:	4b44      	ldr	r3, [pc, #272]	@ (8011188 <tcp_receive+0x888>)
 8011076:	68db      	ldr	r3, [r3, #12]
 8011078:	899b      	ldrh	r3, [r3, #12]
 801107a:	b29b      	uxth	r3, r3
 801107c:	4618      	mov	r0, r3
 801107e:	f7fa faf3 	bl	800b668 <lwip_htons>
 8011082:	4603      	mov	r3, r0
 8011084:	b2db      	uxtb	r3, r3
 8011086:	f003 0303 	and.w	r3, r3, #3
 801108a:	2b00      	cmp	r3, #0
 801108c:	d001      	beq.n	8011092 <tcp_receive+0x792>
 801108e:	2301      	movs	r3, #1
 8011090:	e000      	b.n	8011094 <tcp_receive+0x794>
 8011092:	2300      	movs	r3, #0
 8011094:	4423      	add	r3, r4
 8011096:	b29a      	uxth	r2, r3
 8011098:	4b3c      	ldr	r3, [pc, #240]	@ (801118c <tcp_receive+0x88c>)
 801109a:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801109c:	4b3b      	ldr	r3, [pc, #236]	@ (801118c <tcp_receive+0x88c>)
 801109e:	881b      	ldrh	r3, [r3, #0]
 80110a0:	461a      	mov	r2, r3
 80110a2:	4b38      	ldr	r3, [pc, #224]	@ (8011184 <tcp_receive+0x884>)
 80110a4:	681b      	ldr	r3, [r3, #0]
 80110a6:	441a      	add	r2, r3
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80110ac:	6879      	ldr	r1, [r7, #4]
 80110ae:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80110b0:	440b      	add	r3, r1
 80110b2:	429a      	cmp	r2, r3
 80110b4:	d006      	beq.n	80110c4 <tcp_receive+0x7c4>
 80110b6:	4b36      	ldr	r3, [pc, #216]	@ (8011190 <tcp_receive+0x890>)
 80110b8:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 80110bc:	4935      	ldr	r1, [pc, #212]	@ (8011194 <tcp_receive+0x894>)
 80110be:	4836      	ldr	r0, [pc, #216]	@ (8011198 <tcp_receive+0x898>)
 80110c0:	f007 fe40 	bl	8018d44 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	f000 80e6 	beq.w	801129a <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80110ce:	4b2e      	ldr	r3, [pc, #184]	@ (8011188 <tcp_receive+0x888>)
 80110d0:	68db      	ldr	r3, [r3, #12]
 80110d2:	899b      	ldrh	r3, [r3, #12]
 80110d4:	b29b      	uxth	r3, r3
 80110d6:	4618      	mov	r0, r3
 80110d8:	f7fa fac6 	bl	800b668 <lwip_htons>
 80110dc:	4603      	mov	r3, r0
 80110de:	b2db      	uxtb	r3, r3
 80110e0:	f003 0301 	and.w	r3, r3, #1
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d010      	beq.n	801110a <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80110e8:	e00a      	b.n	8011100 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80110ee:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80110f4:	681a      	ldr	r2, [r3, #0]
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 80110fa:	68f8      	ldr	r0, [r7, #12]
 80110fc:	f7fd fca7 	bl	800ea4e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011104:	2b00      	cmp	r3, #0
 8011106:	d1f0      	bne.n	80110ea <tcp_receive+0x7ea>
 8011108:	e0c7      	b.n	801129a <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801110e:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8011110:	e051      	b.n	80111b6 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011112:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011114:	68db      	ldr	r3, [r3, #12]
 8011116:	899b      	ldrh	r3, [r3, #12]
 8011118:	b29b      	uxth	r3, r3
 801111a:	4618      	mov	r0, r3
 801111c:	f7fa faa4 	bl	800b668 <lwip_htons>
 8011120:	4603      	mov	r3, r0
 8011122:	b2db      	uxtb	r3, r3
 8011124:	f003 0301 	and.w	r3, r3, #1
 8011128:	2b00      	cmp	r3, #0
 801112a:	d03c      	beq.n	80111a6 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801112c:	4b16      	ldr	r3, [pc, #88]	@ (8011188 <tcp_receive+0x888>)
 801112e:	68db      	ldr	r3, [r3, #12]
 8011130:	899b      	ldrh	r3, [r3, #12]
 8011132:	b29b      	uxth	r3, r3
 8011134:	4618      	mov	r0, r3
 8011136:	f7fa fa97 	bl	800b668 <lwip_htons>
 801113a:	4603      	mov	r3, r0
 801113c:	b2db      	uxtb	r3, r3
 801113e:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011142:	2b00      	cmp	r3, #0
 8011144:	d12f      	bne.n	80111a6 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8011146:	4b10      	ldr	r3, [pc, #64]	@ (8011188 <tcp_receive+0x888>)
 8011148:	68db      	ldr	r3, [r3, #12]
 801114a:	899b      	ldrh	r3, [r3, #12]
 801114c:	b29c      	uxth	r4, r3
 801114e:	2001      	movs	r0, #1
 8011150:	f7fa fa8a 	bl	800b668 <lwip_htons>
 8011154:	4603      	mov	r3, r0
 8011156:	461a      	mov	r2, r3
 8011158:	4b0b      	ldr	r3, [pc, #44]	@ (8011188 <tcp_receive+0x888>)
 801115a:	68db      	ldr	r3, [r3, #12]
 801115c:	4322      	orrs	r2, r4
 801115e:	b292      	uxth	r2, r2
 8011160:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8011162:	4b09      	ldr	r3, [pc, #36]	@ (8011188 <tcp_receive+0x888>)
 8011164:	891c      	ldrh	r4, [r3, #8]
 8011166:	4b08      	ldr	r3, [pc, #32]	@ (8011188 <tcp_receive+0x888>)
 8011168:	68db      	ldr	r3, [r3, #12]
 801116a:	899b      	ldrh	r3, [r3, #12]
 801116c:	b29b      	uxth	r3, r3
 801116e:	4618      	mov	r0, r3
 8011170:	f7fa fa7a 	bl	800b668 <lwip_htons>
 8011174:	4603      	mov	r3, r0
 8011176:	b2db      	uxtb	r3, r3
 8011178:	f003 0303 	and.w	r3, r3, #3
 801117c:	2b00      	cmp	r3, #0
 801117e:	d00d      	beq.n	801119c <tcp_receive+0x89c>
 8011180:	2301      	movs	r3, #1
 8011182:	e00c      	b.n	801119e <tcp_receive+0x89e>
 8011184:	20010eac 	.word	0x20010eac
 8011188:	20010e8c 	.word	0x20010e8c
 801118c:	20010eb6 	.word	0x20010eb6
 8011190:	0801c1e0 	.word	0x0801c1e0
 8011194:	0801c588 	.word	0x0801c588
 8011198:	0801c22c 	.word	0x0801c22c
 801119c:	2300      	movs	r3, #0
 801119e:	4423      	add	r3, r4
 80111a0:	b29a      	uxth	r2, r3
 80111a2:	4b98      	ldr	r3, [pc, #608]	@ (8011404 <tcp_receive+0xb04>)
 80111a4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80111a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80111a8:	613b      	str	r3, [r7, #16]
              next = next->next;
 80111aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80111ac:	681b      	ldr	r3, [r3, #0]
 80111ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 80111b0:	6938      	ldr	r0, [r7, #16]
 80111b2:	f7fd fc4c 	bl	800ea4e <tcp_seg_free>
            while (next &&
 80111b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d00e      	beq.n	80111da <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80111bc:	4b91      	ldr	r3, [pc, #580]	@ (8011404 <tcp_receive+0xb04>)
 80111be:	881b      	ldrh	r3, [r3, #0]
 80111c0:	461a      	mov	r2, r3
 80111c2:	4b91      	ldr	r3, [pc, #580]	@ (8011408 <tcp_receive+0xb08>)
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	441a      	add	r2, r3
 80111c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80111ca:	68db      	ldr	r3, [r3, #12]
 80111cc:	685b      	ldr	r3, [r3, #4]
 80111ce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80111d0:	8909      	ldrh	r1, [r1, #8]
 80111d2:	440b      	add	r3, r1
 80111d4:	1ad3      	subs	r3, r2, r3
            while (next &&
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	da9b      	bge.n	8011112 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80111da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d059      	beq.n	8011294 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 80111e0:	4b88      	ldr	r3, [pc, #544]	@ (8011404 <tcp_receive+0xb04>)
 80111e2:	881b      	ldrh	r3, [r3, #0]
 80111e4:	461a      	mov	r2, r3
 80111e6:	4b88      	ldr	r3, [pc, #544]	@ (8011408 <tcp_receive+0xb08>)
 80111e8:	681b      	ldr	r3, [r3, #0]
 80111ea:	441a      	add	r2, r3
 80111ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80111ee:	68db      	ldr	r3, [r3, #12]
 80111f0:	685b      	ldr	r3, [r3, #4]
 80111f2:	1ad3      	subs	r3, r2, r3
            if (next &&
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	dd4d      	ble.n	8011294 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80111f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80111fa:	68db      	ldr	r3, [r3, #12]
 80111fc:	685b      	ldr	r3, [r3, #4]
 80111fe:	b29a      	uxth	r2, r3
 8011200:	4b81      	ldr	r3, [pc, #516]	@ (8011408 <tcp_receive+0xb08>)
 8011202:	681b      	ldr	r3, [r3, #0]
 8011204:	b29b      	uxth	r3, r3
 8011206:	1ad3      	subs	r3, r2, r3
 8011208:	b29a      	uxth	r2, r3
 801120a:	4b80      	ldr	r3, [pc, #512]	@ (801140c <tcp_receive+0xb0c>)
 801120c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801120e:	4b7f      	ldr	r3, [pc, #508]	@ (801140c <tcp_receive+0xb0c>)
 8011210:	68db      	ldr	r3, [r3, #12]
 8011212:	899b      	ldrh	r3, [r3, #12]
 8011214:	b29b      	uxth	r3, r3
 8011216:	4618      	mov	r0, r3
 8011218:	f7fa fa26 	bl	800b668 <lwip_htons>
 801121c:	4603      	mov	r3, r0
 801121e:	b2db      	uxtb	r3, r3
 8011220:	f003 0302 	and.w	r3, r3, #2
 8011224:	2b00      	cmp	r3, #0
 8011226:	d005      	beq.n	8011234 <tcp_receive+0x934>
                inseg.len -= 1;
 8011228:	4b78      	ldr	r3, [pc, #480]	@ (801140c <tcp_receive+0xb0c>)
 801122a:	891b      	ldrh	r3, [r3, #8]
 801122c:	3b01      	subs	r3, #1
 801122e:	b29a      	uxth	r2, r3
 8011230:	4b76      	ldr	r3, [pc, #472]	@ (801140c <tcp_receive+0xb0c>)
 8011232:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8011234:	4b75      	ldr	r3, [pc, #468]	@ (801140c <tcp_receive+0xb0c>)
 8011236:	685b      	ldr	r3, [r3, #4]
 8011238:	4a74      	ldr	r2, [pc, #464]	@ (801140c <tcp_receive+0xb0c>)
 801123a:	8912      	ldrh	r2, [r2, #8]
 801123c:	4611      	mov	r1, r2
 801123e:	4618      	mov	r0, r3
 8011240:	f7fb fcc0 	bl	800cbc4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8011244:	4b71      	ldr	r3, [pc, #452]	@ (801140c <tcp_receive+0xb0c>)
 8011246:	891c      	ldrh	r4, [r3, #8]
 8011248:	4b70      	ldr	r3, [pc, #448]	@ (801140c <tcp_receive+0xb0c>)
 801124a:	68db      	ldr	r3, [r3, #12]
 801124c:	899b      	ldrh	r3, [r3, #12]
 801124e:	b29b      	uxth	r3, r3
 8011250:	4618      	mov	r0, r3
 8011252:	f7fa fa09 	bl	800b668 <lwip_htons>
 8011256:	4603      	mov	r3, r0
 8011258:	b2db      	uxtb	r3, r3
 801125a:	f003 0303 	and.w	r3, r3, #3
 801125e:	2b00      	cmp	r3, #0
 8011260:	d001      	beq.n	8011266 <tcp_receive+0x966>
 8011262:	2301      	movs	r3, #1
 8011264:	e000      	b.n	8011268 <tcp_receive+0x968>
 8011266:	2300      	movs	r3, #0
 8011268:	4423      	add	r3, r4
 801126a:	b29a      	uxth	r2, r3
 801126c:	4b65      	ldr	r3, [pc, #404]	@ (8011404 <tcp_receive+0xb04>)
 801126e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8011270:	4b64      	ldr	r3, [pc, #400]	@ (8011404 <tcp_receive+0xb04>)
 8011272:	881b      	ldrh	r3, [r3, #0]
 8011274:	461a      	mov	r2, r3
 8011276:	4b64      	ldr	r3, [pc, #400]	@ (8011408 <tcp_receive+0xb08>)
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	441a      	add	r2, r3
 801127c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801127e:	68db      	ldr	r3, [r3, #12]
 8011280:	685b      	ldr	r3, [r3, #4]
 8011282:	429a      	cmp	r2, r3
 8011284:	d006      	beq.n	8011294 <tcp_receive+0x994>
 8011286:	4b62      	ldr	r3, [pc, #392]	@ (8011410 <tcp_receive+0xb10>)
 8011288:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 801128c:	4961      	ldr	r1, [pc, #388]	@ (8011414 <tcp_receive+0xb14>)
 801128e:	4862      	ldr	r0, [pc, #392]	@ (8011418 <tcp_receive+0xb18>)
 8011290:	f007 fd58 	bl	8018d44 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8011298:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801129a:	4b5a      	ldr	r3, [pc, #360]	@ (8011404 <tcp_receive+0xb04>)
 801129c:	881b      	ldrh	r3, [r3, #0]
 801129e:	461a      	mov	r2, r3
 80112a0:	4b59      	ldr	r3, [pc, #356]	@ (8011408 <tcp_receive+0xb08>)
 80112a2:	681b      	ldr	r3, [r3, #0]
 80112a4:	441a      	add	r2, r3
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80112ae:	4b55      	ldr	r3, [pc, #340]	@ (8011404 <tcp_receive+0xb04>)
 80112b0:	881b      	ldrh	r3, [r3, #0]
 80112b2:	429a      	cmp	r2, r3
 80112b4:	d206      	bcs.n	80112c4 <tcp_receive+0x9c4>
 80112b6:	4b56      	ldr	r3, [pc, #344]	@ (8011410 <tcp_receive+0xb10>)
 80112b8:	f240 6207 	movw	r2, #1543	@ 0x607
 80112bc:	4957      	ldr	r1, [pc, #348]	@ (801141c <tcp_receive+0xb1c>)
 80112be:	4856      	ldr	r0, [pc, #344]	@ (8011418 <tcp_receive+0xb18>)
 80112c0:	f007 fd40 	bl	8018d44 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80112c8:	4b4e      	ldr	r3, [pc, #312]	@ (8011404 <tcp_receive+0xb04>)
 80112ca:	881b      	ldrh	r3, [r3, #0]
 80112cc:	1ad3      	subs	r3, r2, r3
 80112ce:	b29a      	uxth	r2, r3
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80112d4:	6878      	ldr	r0, [r7, #4]
 80112d6:	f7fc fd7b 	bl	800ddd0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80112da:	4b4c      	ldr	r3, [pc, #304]	@ (801140c <tcp_receive+0xb0c>)
 80112dc:	685b      	ldr	r3, [r3, #4]
 80112de:	891b      	ldrh	r3, [r3, #8]
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d006      	beq.n	80112f2 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 80112e4:	4b49      	ldr	r3, [pc, #292]	@ (801140c <tcp_receive+0xb0c>)
 80112e6:	685b      	ldr	r3, [r3, #4]
 80112e8:	4a4d      	ldr	r2, [pc, #308]	@ (8011420 <tcp_receive+0xb20>)
 80112ea:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80112ec:	4b47      	ldr	r3, [pc, #284]	@ (801140c <tcp_receive+0xb0c>)
 80112ee:	2200      	movs	r2, #0
 80112f0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80112f2:	4b46      	ldr	r3, [pc, #280]	@ (801140c <tcp_receive+0xb0c>)
 80112f4:	68db      	ldr	r3, [r3, #12]
 80112f6:	899b      	ldrh	r3, [r3, #12]
 80112f8:	b29b      	uxth	r3, r3
 80112fa:	4618      	mov	r0, r3
 80112fc:	f7fa f9b4 	bl	800b668 <lwip_htons>
 8011300:	4603      	mov	r3, r0
 8011302:	b2db      	uxtb	r3, r3
 8011304:	f003 0301 	and.w	r3, r3, #1
 8011308:	2b00      	cmp	r3, #0
 801130a:	f000 80b8 	beq.w	801147e <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801130e:	4b45      	ldr	r3, [pc, #276]	@ (8011424 <tcp_receive+0xb24>)
 8011310:	781b      	ldrb	r3, [r3, #0]
 8011312:	f043 0320 	orr.w	r3, r3, #32
 8011316:	b2da      	uxtb	r2, r3
 8011318:	4b42      	ldr	r3, [pc, #264]	@ (8011424 <tcp_receive+0xb24>)
 801131a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801131c:	e0af      	b.n	801147e <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011322:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011328:	68db      	ldr	r3, [r3, #12]
 801132a:	685b      	ldr	r3, [r3, #4]
 801132c:	4a36      	ldr	r2, [pc, #216]	@ (8011408 <tcp_receive+0xb08>)
 801132e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8011330:	68bb      	ldr	r3, [r7, #8]
 8011332:	891b      	ldrh	r3, [r3, #8]
 8011334:	461c      	mov	r4, r3
 8011336:	68bb      	ldr	r3, [r7, #8]
 8011338:	68db      	ldr	r3, [r3, #12]
 801133a:	899b      	ldrh	r3, [r3, #12]
 801133c:	b29b      	uxth	r3, r3
 801133e:	4618      	mov	r0, r3
 8011340:	f7fa f992 	bl	800b668 <lwip_htons>
 8011344:	4603      	mov	r3, r0
 8011346:	b2db      	uxtb	r3, r3
 8011348:	f003 0303 	and.w	r3, r3, #3
 801134c:	2b00      	cmp	r3, #0
 801134e:	d001      	beq.n	8011354 <tcp_receive+0xa54>
 8011350:	2301      	movs	r3, #1
 8011352:	e000      	b.n	8011356 <tcp_receive+0xa56>
 8011354:	2300      	movs	r3, #0
 8011356:	191a      	adds	r2, r3, r4
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801135c:	441a      	add	r2, r3
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011366:	461c      	mov	r4, r3
 8011368:	68bb      	ldr	r3, [r7, #8]
 801136a:	891b      	ldrh	r3, [r3, #8]
 801136c:	461d      	mov	r5, r3
 801136e:	68bb      	ldr	r3, [r7, #8]
 8011370:	68db      	ldr	r3, [r3, #12]
 8011372:	899b      	ldrh	r3, [r3, #12]
 8011374:	b29b      	uxth	r3, r3
 8011376:	4618      	mov	r0, r3
 8011378:	f7fa f976 	bl	800b668 <lwip_htons>
 801137c:	4603      	mov	r3, r0
 801137e:	b2db      	uxtb	r3, r3
 8011380:	f003 0303 	and.w	r3, r3, #3
 8011384:	2b00      	cmp	r3, #0
 8011386:	d001      	beq.n	801138c <tcp_receive+0xa8c>
 8011388:	2301      	movs	r3, #1
 801138a:	e000      	b.n	801138e <tcp_receive+0xa8e>
 801138c:	2300      	movs	r3, #0
 801138e:	442b      	add	r3, r5
 8011390:	429c      	cmp	r4, r3
 8011392:	d206      	bcs.n	80113a2 <tcp_receive+0xaa2>
 8011394:	4b1e      	ldr	r3, [pc, #120]	@ (8011410 <tcp_receive+0xb10>)
 8011396:	f240 622b 	movw	r2, #1579	@ 0x62b
 801139a:	4923      	ldr	r1, [pc, #140]	@ (8011428 <tcp_receive+0xb28>)
 801139c:	481e      	ldr	r0, [pc, #120]	@ (8011418 <tcp_receive+0xb18>)
 801139e:	f007 fcd1 	bl	8018d44 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80113a2:	68bb      	ldr	r3, [r7, #8]
 80113a4:	891b      	ldrh	r3, [r3, #8]
 80113a6:	461c      	mov	r4, r3
 80113a8:	68bb      	ldr	r3, [r7, #8]
 80113aa:	68db      	ldr	r3, [r3, #12]
 80113ac:	899b      	ldrh	r3, [r3, #12]
 80113ae:	b29b      	uxth	r3, r3
 80113b0:	4618      	mov	r0, r3
 80113b2:	f7fa f959 	bl	800b668 <lwip_htons>
 80113b6:	4603      	mov	r3, r0
 80113b8:	b2db      	uxtb	r3, r3
 80113ba:	f003 0303 	and.w	r3, r3, #3
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d001      	beq.n	80113c6 <tcp_receive+0xac6>
 80113c2:	2301      	movs	r3, #1
 80113c4:	e000      	b.n	80113c8 <tcp_receive+0xac8>
 80113c6:	2300      	movs	r3, #0
 80113c8:	1919      	adds	r1, r3, r4
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80113ce:	b28b      	uxth	r3, r1
 80113d0:	1ad3      	subs	r3, r2, r3
 80113d2:	b29a      	uxth	r2, r3
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80113d8:	6878      	ldr	r0, [r7, #4]
 80113da:	f7fc fcf9 	bl	800ddd0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80113de:	68bb      	ldr	r3, [r7, #8]
 80113e0:	685b      	ldr	r3, [r3, #4]
 80113e2:	891b      	ldrh	r3, [r3, #8]
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	d028      	beq.n	801143a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80113e8:	4b0d      	ldr	r3, [pc, #52]	@ (8011420 <tcp_receive+0xb20>)
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d01d      	beq.n	801142c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 80113f0:	4b0b      	ldr	r3, [pc, #44]	@ (8011420 <tcp_receive+0xb20>)
 80113f2:	681a      	ldr	r2, [r3, #0]
 80113f4:	68bb      	ldr	r3, [r7, #8]
 80113f6:	685b      	ldr	r3, [r3, #4]
 80113f8:	4619      	mov	r1, r3
 80113fa:	4610      	mov	r0, r2
 80113fc:	f7fb fe36 	bl	800d06c <pbuf_cat>
 8011400:	e018      	b.n	8011434 <tcp_receive+0xb34>
 8011402:	bf00      	nop
 8011404:	20010eb6 	.word	0x20010eb6
 8011408:	20010eac 	.word	0x20010eac
 801140c:	20010e8c 	.word	0x20010e8c
 8011410:	0801c1e0 	.word	0x0801c1e0
 8011414:	0801c5c0 	.word	0x0801c5c0
 8011418:	0801c22c 	.word	0x0801c22c
 801141c:	0801c5fc 	.word	0x0801c5fc
 8011420:	20010ebc 	.word	0x20010ebc
 8011424:	20010eb9 	.word	0x20010eb9
 8011428:	0801c61c 	.word	0x0801c61c
            } else {
              recv_data = cseg->p;
 801142c:	68bb      	ldr	r3, [r7, #8]
 801142e:	685b      	ldr	r3, [r3, #4]
 8011430:	4a70      	ldr	r2, [pc, #448]	@ (80115f4 <tcp_receive+0xcf4>)
 8011432:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8011434:	68bb      	ldr	r3, [r7, #8]
 8011436:	2200      	movs	r2, #0
 8011438:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801143a:	68bb      	ldr	r3, [r7, #8]
 801143c:	68db      	ldr	r3, [r3, #12]
 801143e:	899b      	ldrh	r3, [r3, #12]
 8011440:	b29b      	uxth	r3, r3
 8011442:	4618      	mov	r0, r3
 8011444:	f7fa f910 	bl	800b668 <lwip_htons>
 8011448:	4603      	mov	r3, r0
 801144a:	b2db      	uxtb	r3, r3
 801144c:	f003 0301 	and.w	r3, r3, #1
 8011450:	2b00      	cmp	r3, #0
 8011452:	d00d      	beq.n	8011470 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8011454:	4b68      	ldr	r3, [pc, #416]	@ (80115f8 <tcp_receive+0xcf8>)
 8011456:	781b      	ldrb	r3, [r3, #0]
 8011458:	f043 0320 	orr.w	r3, r3, #32
 801145c:	b2da      	uxtb	r2, r3
 801145e:	4b66      	ldr	r3, [pc, #408]	@ (80115f8 <tcp_receive+0xcf8>)
 8011460:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	7d1b      	ldrb	r3, [r3, #20]
 8011466:	2b04      	cmp	r3, #4
 8011468:	d102      	bne.n	8011470 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	2207      	movs	r2, #7
 801146e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8011470:	68bb      	ldr	r3, [r7, #8]
 8011472:	681a      	ldr	r2, [r3, #0]
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8011478:	68b8      	ldr	r0, [r7, #8]
 801147a:	f7fd fae8 	bl	800ea4e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011482:	2b00      	cmp	r3, #0
 8011484:	d008      	beq.n	8011498 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801148a:	68db      	ldr	r3, [r3, #12]
 801148c:	685a      	ldr	r2, [r3, #4]
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8011492:	429a      	cmp	r2, r3
 8011494:	f43f af43 	beq.w	801131e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	8b5b      	ldrh	r3, [r3, #26]
 801149c:	f003 0301 	and.w	r3, r3, #1
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d00e      	beq.n	80114c2 <tcp_receive+0xbc2>
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	8b5b      	ldrh	r3, [r3, #26]
 80114a8:	f023 0301 	bic.w	r3, r3, #1
 80114ac:	b29a      	uxth	r2, r3
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	835a      	strh	r2, [r3, #26]
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	8b5b      	ldrh	r3, [r3, #26]
 80114b6:	f043 0302 	orr.w	r3, r3, #2
 80114ba:	b29a      	uxth	r2, r3
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80114c0:	e187      	b.n	80117d2 <tcp_receive+0xed2>
        tcp_ack(pcb);
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	8b5b      	ldrh	r3, [r3, #26]
 80114c6:	f043 0301 	orr.w	r3, r3, #1
 80114ca:	b29a      	uxth	r2, r3
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80114d0:	e17f      	b.n	80117d2 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d106      	bne.n	80114e8 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80114da:	4848      	ldr	r0, [pc, #288]	@ (80115fc <tcp_receive+0xcfc>)
 80114dc:	f7fd faee 	bl	800eabc <tcp_seg_copy>
 80114e0:	4602      	mov	r2, r0
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	675a      	str	r2, [r3, #116]	@ 0x74
 80114e6:	e16c      	b.n	80117c2 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80114e8:	2300      	movs	r3, #0
 80114ea:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80114f0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80114f2:	e156      	b.n	80117a2 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 80114f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114f6:	68db      	ldr	r3, [r3, #12]
 80114f8:	685a      	ldr	r2, [r3, #4]
 80114fa:	4b41      	ldr	r3, [pc, #260]	@ (8011600 <tcp_receive+0xd00>)
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	429a      	cmp	r2, r3
 8011500:	d11d      	bne.n	801153e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8011502:	4b3e      	ldr	r3, [pc, #248]	@ (80115fc <tcp_receive+0xcfc>)
 8011504:	891a      	ldrh	r2, [r3, #8]
 8011506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011508:	891b      	ldrh	r3, [r3, #8]
 801150a:	429a      	cmp	r2, r3
 801150c:	f240 814e 	bls.w	80117ac <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011510:	483a      	ldr	r0, [pc, #232]	@ (80115fc <tcp_receive+0xcfc>)
 8011512:	f7fd fad3 	bl	800eabc <tcp_seg_copy>
 8011516:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8011518:	697b      	ldr	r3, [r7, #20]
 801151a:	2b00      	cmp	r3, #0
 801151c:	f000 8148 	beq.w	80117b0 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8011520:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011522:	2b00      	cmp	r3, #0
 8011524:	d003      	beq.n	801152e <tcp_receive+0xc2e>
                    prev->next = cseg;
 8011526:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011528:	697a      	ldr	r2, [r7, #20]
 801152a:	601a      	str	r2, [r3, #0]
 801152c:	e002      	b.n	8011534 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	697a      	ldr	r2, [r7, #20]
 8011532:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8011534:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011536:	6978      	ldr	r0, [r7, #20]
 8011538:	f7ff f8de 	bl	80106f8 <tcp_oos_insert_segment>
                }
                break;
 801153c:	e138      	b.n	80117b0 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801153e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011540:	2b00      	cmp	r3, #0
 8011542:	d117      	bne.n	8011574 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8011544:	4b2e      	ldr	r3, [pc, #184]	@ (8011600 <tcp_receive+0xd00>)
 8011546:	681a      	ldr	r2, [r3, #0]
 8011548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801154a:	68db      	ldr	r3, [r3, #12]
 801154c:	685b      	ldr	r3, [r3, #4]
 801154e:	1ad3      	subs	r3, r2, r3
 8011550:	2b00      	cmp	r3, #0
 8011552:	da57      	bge.n	8011604 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011554:	4829      	ldr	r0, [pc, #164]	@ (80115fc <tcp_receive+0xcfc>)
 8011556:	f7fd fab1 	bl	800eabc <tcp_seg_copy>
 801155a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801155c:	69bb      	ldr	r3, [r7, #24]
 801155e:	2b00      	cmp	r3, #0
 8011560:	f000 8128 	beq.w	80117b4 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	69ba      	ldr	r2, [r7, #24]
 8011568:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 801156a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801156c:	69b8      	ldr	r0, [r7, #24]
 801156e:	f7ff f8c3 	bl	80106f8 <tcp_oos_insert_segment>
                  }
                  break;
 8011572:	e11f      	b.n	80117b4 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8011574:	4b22      	ldr	r3, [pc, #136]	@ (8011600 <tcp_receive+0xd00>)
 8011576:	681a      	ldr	r2, [r3, #0]
 8011578:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801157a:	68db      	ldr	r3, [r3, #12]
 801157c:	685b      	ldr	r3, [r3, #4]
 801157e:	1ad3      	subs	r3, r2, r3
 8011580:	3b01      	subs	r3, #1
 8011582:	2b00      	cmp	r3, #0
 8011584:	db3e      	blt.n	8011604 <tcp_receive+0xd04>
 8011586:	4b1e      	ldr	r3, [pc, #120]	@ (8011600 <tcp_receive+0xd00>)
 8011588:	681a      	ldr	r2, [r3, #0]
 801158a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801158c:	68db      	ldr	r3, [r3, #12]
 801158e:	685b      	ldr	r3, [r3, #4]
 8011590:	1ad3      	subs	r3, r2, r3
 8011592:	3301      	adds	r3, #1
 8011594:	2b00      	cmp	r3, #0
 8011596:	dc35      	bgt.n	8011604 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011598:	4818      	ldr	r0, [pc, #96]	@ (80115fc <tcp_receive+0xcfc>)
 801159a:	f7fd fa8f 	bl	800eabc <tcp_seg_copy>
 801159e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80115a0:	69fb      	ldr	r3, [r7, #28]
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	f000 8108 	beq.w	80117b8 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80115a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80115aa:	68db      	ldr	r3, [r3, #12]
 80115ac:	685b      	ldr	r3, [r3, #4]
 80115ae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80115b0:	8912      	ldrh	r2, [r2, #8]
 80115b2:	441a      	add	r2, r3
 80115b4:	4b12      	ldr	r3, [pc, #72]	@ (8011600 <tcp_receive+0xd00>)
 80115b6:	681b      	ldr	r3, [r3, #0]
 80115b8:	1ad3      	subs	r3, r2, r3
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	dd12      	ble.n	80115e4 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80115be:	4b10      	ldr	r3, [pc, #64]	@ (8011600 <tcp_receive+0xd00>)
 80115c0:	681b      	ldr	r3, [r3, #0]
 80115c2:	b29a      	uxth	r2, r3
 80115c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80115c6:	68db      	ldr	r3, [r3, #12]
 80115c8:	685b      	ldr	r3, [r3, #4]
 80115ca:	b29b      	uxth	r3, r3
 80115cc:	1ad3      	subs	r3, r2, r3
 80115ce:	b29a      	uxth	r2, r3
 80115d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80115d2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80115d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80115d6:	685a      	ldr	r2, [r3, #4]
 80115d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80115da:	891b      	ldrh	r3, [r3, #8]
 80115dc:	4619      	mov	r1, r3
 80115de:	4610      	mov	r0, r2
 80115e0:	f7fb faf0 	bl	800cbc4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80115e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80115e6:	69fa      	ldr	r2, [r7, #28]
 80115e8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80115ea:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80115ec:	69f8      	ldr	r0, [r7, #28]
 80115ee:	f7ff f883 	bl	80106f8 <tcp_oos_insert_segment>
                  }
                  break;
 80115f2:	e0e1      	b.n	80117b8 <tcp_receive+0xeb8>
 80115f4:	20010ebc 	.word	0x20010ebc
 80115f8:	20010eb9 	.word	0x20010eb9
 80115fc:	20010e8c 	.word	0x20010e8c
 8011600:	20010eac 	.word	0x20010eac
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8011604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011606:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8011608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	2b00      	cmp	r3, #0
 801160e:	f040 80c5 	bne.w	801179c <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8011612:	4b7f      	ldr	r3, [pc, #508]	@ (8011810 <tcp_receive+0xf10>)
 8011614:	681a      	ldr	r2, [r3, #0]
 8011616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011618:	68db      	ldr	r3, [r3, #12]
 801161a:	685b      	ldr	r3, [r3, #4]
 801161c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801161e:	2b00      	cmp	r3, #0
 8011620:	f340 80bc 	ble.w	801179c <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011626:	68db      	ldr	r3, [r3, #12]
 8011628:	899b      	ldrh	r3, [r3, #12]
 801162a:	b29b      	uxth	r3, r3
 801162c:	4618      	mov	r0, r3
 801162e:	f7fa f81b 	bl	800b668 <lwip_htons>
 8011632:	4603      	mov	r3, r0
 8011634:	b2db      	uxtb	r3, r3
 8011636:	f003 0301 	and.w	r3, r3, #1
 801163a:	2b00      	cmp	r3, #0
 801163c:	f040 80be 	bne.w	80117bc <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8011640:	4874      	ldr	r0, [pc, #464]	@ (8011814 <tcp_receive+0xf14>)
 8011642:	f7fd fa3b 	bl	800eabc <tcp_seg_copy>
 8011646:	4602      	mov	r2, r0
 8011648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801164a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801164c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801164e:	681b      	ldr	r3, [r3, #0]
 8011650:	2b00      	cmp	r3, #0
 8011652:	f000 80b5 	beq.w	80117c0 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8011656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011658:	68db      	ldr	r3, [r3, #12]
 801165a:	685b      	ldr	r3, [r3, #4]
 801165c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801165e:	8912      	ldrh	r2, [r2, #8]
 8011660:	441a      	add	r2, r3
 8011662:	4b6b      	ldr	r3, [pc, #428]	@ (8011810 <tcp_receive+0xf10>)
 8011664:	681b      	ldr	r3, [r3, #0]
 8011666:	1ad3      	subs	r3, r2, r3
 8011668:	2b00      	cmp	r3, #0
 801166a:	dd12      	ble.n	8011692 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801166c:	4b68      	ldr	r3, [pc, #416]	@ (8011810 <tcp_receive+0xf10>)
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	b29a      	uxth	r2, r3
 8011672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011674:	68db      	ldr	r3, [r3, #12]
 8011676:	685b      	ldr	r3, [r3, #4]
 8011678:	b29b      	uxth	r3, r3
 801167a:	1ad3      	subs	r3, r2, r3
 801167c:	b29a      	uxth	r2, r3
 801167e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011680:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8011682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011684:	685a      	ldr	r2, [r3, #4]
 8011686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011688:	891b      	ldrh	r3, [r3, #8]
 801168a:	4619      	mov	r1, r3
 801168c:	4610      	mov	r0, r2
 801168e:	f7fb fa99 	bl	800cbc4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8011692:	4b61      	ldr	r3, [pc, #388]	@ (8011818 <tcp_receive+0xf18>)
 8011694:	881b      	ldrh	r3, [r3, #0]
 8011696:	461a      	mov	r2, r3
 8011698:	4b5d      	ldr	r3, [pc, #372]	@ (8011810 <tcp_receive+0xf10>)
 801169a:	681b      	ldr	r3, [r3, #0]
 801169c:	441a      	add	r2, r3
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80116a2:	6879      	ldr	r1, [r7, #4]
 80116a4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80116a6:	440b      	add	r3, r1
 80116a8:	1ad3      	subs	r3, r2, r3
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	f340 8088 	ble.w	80117c0 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80116b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116b2:	681b      	ldr	r3, [r3, #0]
 80116b4:	68db      	ldr	r3, [r3, #12]
 80116b6:	899b      	ldrh	r3, [r3, #12]
 80116b8:	b29b      	uxth	r3, r3
 80116ba:	4618      	mov	r0, r3
 80116bc:	f7f9 ffd4 	bl	800b668 <lwip_htons>
 80116c0:	4603      	mov	r3, r0
 80116c2:	b2db      	uxtb	r3, r3
 80116c4:	f003 0301 	and.w	r3, r3, #1
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d021      	beq.n	8011710 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80116cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116ce:	681b      	ldr	r3, [r3, #0]
 80116d0:	68db      	ldr	r3, [r3, #12]
 80116d2:	899b      	ldrh	r3, [r3, #12]
 80116d4:	b29b      	uxth	r3, r3
 80116d6:	b21b      	sxth	r3, r3
 80116d8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80116dc:	b21c      	sxth	r4, r3
 80116de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	68db      	ldr	r3, [r3, #12]
 80116e4:	899b      	ldrh	r3, [r3, #12]
 80116e6:	b29b      	uxth	r3, r3
 80116e8:	4618      	mov	r0, r3
 80116ea:	f7f9 ffbd 	bl	800b668 <lwip_htons>
 80116ee:	4603      	mov	r3, r0
 80116f0:	b2db      	uxtb	r3, r3
 80116f2:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80116f6:	b29b      	uxth	r3, r3
 80116f8:	4618      	mov	r0, r3
 80116fa:	f7f9 ffb5 	bl	800b668 <lwip_htons>
 80116fe:	4603      	mov	r3, r0
 8011700:	b21b      	sxth	r3, r3
 8011702:	4323      	orrs	r3, r4
 8011704:	b21a      	sxth	r2, r3
 8011706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011708:	681b      	ldr	r3, [r3, #0]
 801170a:	68db      	ldr	r3, [r3, #12]
 801170c:	b292      	uxth	r2, r2
 801170e:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011714:	b29a      	uxth	r2, r3
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801171a:	4413      	add	r3, r2
 801171c:	b299      	uxth	r1, r3
 801171e:	4b3c      	ldr	r3, [pc, #240]	@ (8011810 <tcp_receive+0xf10>)
 8011720:	681b      	ldr	r3, [r3, #0]
 8011722:	b29a      	uxth	r2, r3
 8011724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011726:	681b      	ldr	r3, [r3, #0]
 8011728:	1a8a      	subs	r2, r1, r2
 801172a:	b292      	uxth	r2, r2
 801172c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801172e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011730:	681b      	ldr	r3, [r3, #0]
 8011732:	685a      	ldr	r2, [r3, #4]
 8011734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	891b      	ldrh	r3, [r3, #8]
 801173a:	4619      	mov	r1, r3
 801173c:	4610      	mov	r0, r2
 801173e:	f7fb fa41 	bl	800cbc4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8011742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011744:	681b      	ldr	r3, [r3, #0]
 8011746:	891c      	ldrh	r4, [r3, #8]
 8011748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801174a:	681b      	ldr	r3, [r3, #0]
 801174c:	68db      	ldr	r3, [r3, #12]
 801174e:	899b      	ldrh	r3, [r3, #12]
 8011750:	b29b      	uxth	r3, r3
 8011752:	4618      	mov	r0, r3
 8011754:	f7f9 ff88 	bl	800b668 <lwip_htons>
 8011758:	4603      	mov	r3, r0
 801175a:	b2db      	uxtb	r3, r3
 801175c:	f003 0303 	and.w	r3, r3, #3
 8011760:	2b00      	cmp	r3, #0
 8011762:	d001      	beq.n	8011768 <tcp_receive+0xe68>
 8011764:	2301      	movs	r3, #1
 8011766:	e000      	b.n	801176a <tcp_receive+0xe6a>
 8011768:	2300      	movs	r3, #0
 801176a:	4423      	add	r3, r4
 801176c:	b29a      	uxth	r2, r3
 801176e:	4b2a      	ldr	r3, [pc, #168]	@ (8011818 <tcp_receive+0xf18>)
 8011770:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011772:	4b29      	ldr	r3, [pc, #164]	@ (8011818 <tcp_receive+0xf18>)
 8011774:	881b      	ldrh	r3, [r3, #0]
 8011776:	461a      	mov	r2, r3
 8011778:	4b25      	ldr	r3, [pc, #148]	@ (8011810 <tcp_receive+0xf10>)
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	441a      	add	r2, r3
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011782:	6879      	ldr	r1, [r7, #4]
 8011784:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011786:	440b      	add	r3, r1
 8011788:	429a      	cmp	r2, r3
 801178a:	d019      	beq.n	80117c0 <tcp_receive+0xec0>
 801178c:	4b23      	ldr	r3, [pc, #140]	@ (801181c <tcp_receive+0xf1c>)
 801178e:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8011792:	4923      	ldr	r1, [pc, #140]	@ (8011820 <tcp_receive+0xf20>)
 8011794:	4823      	ldr	r0, [pc, #140]	@ (8011824 <tcp_receive+0xf24>)
 8011796:	f007 fad5 	bl	8018d44 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801179a:	e011      	b.n	80117c0 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801179c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801179e:	681b      	ldr	r3, [r3, #0]
 80117a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80117a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	f47f aea5 	bne.w	80114f4 <tcp_receive+0xbf4>
 80117aa:	e00a      	b.n	80117c2 <tcp_receive+0xec2>
                break;
 80117ac:	bf00      	nop
 80117ae:	e008      	b.n	80117c2 <tcp_receive+0xec2>
                break;
 80117b0:	bf00      	nop
 80117b2:	e006      	b.n	80117c2 <tcp_receive+0xec2>
                  break;
 80117b4:	bf00      	nop
 80117b6:	e004      	b.n	80117c2 <tcp_receive+0xec2>
                  break;
 80117b8:	bf00      	nop
 80117ba:	e002      	b.n	80117c2 <tcp_receive+0xec2>
                  break;
 80117bc:	bf00      	nop
 80117be:	e000      	b.n	80117c2 <tcp_receive+0xec2>
                break;
 80117c0:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80117c2:	6878      	ldr	r0, [r7, #4]
 80117c4:	f001 fe88 	bl	80134d8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80117c8:	e003      	b.n	80117d2 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80117ca:	6878      	ldr	r0, [r7, #4]
 80117cc:	f001 fe84 	bl	80134d8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80117d0:	e01a      	b.n	8011808 <tcp_receive+0xf08>
 80117d2:	e019      	b.n	8011808 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80117d4:	4b0e      	ldr	r3, [pc, #56]	@ (8011810 <tcp_receive+0xf10>)
 80117d6:	681a      	ldr	r2, [r3, #0]
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80117dc:	1ad3      	subs	r3, r2, r3
 80117de:	2b00      	cmp	r3, #0
 80117e0:	db0a      	blt.n	80117f8 <tcp_receive+0xef8>
 80117e2:	4b0b      	ldr	r3, [pc, #44]	@ (8011810 <tcp_receive+0xf10>)
 80117e4:	681a      	ldr	r2, [r3, #0]
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80117ea:	6879      	ldr	r1, [r7, #4]
 80117ec:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80117ee:	440b      	add	r3, r1
 80117f0:	1ad3      	subs	r3, r2, r3
 80117f2:	3301      	adds	r3, #1
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	dd07      	ble.n	8011808 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	8b5b      	ldrh	r3, [r3, #26]
 80117fc:	f043 0302 	orr.w	r3, r3, #2
 8011800:	b29a      	uxth	r2, r3
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8011806:	e7ff      	b.n	8011808 <tcp_receive+0xf08>
 8011808:	bf00      	nop
 801180a:	3750      	adds	r7, #80	@ 0x50
 801180c:	46bd      	mov	sp, r7
 801180e:	bdb0      	pop	{r4, r5, r7, pc}
 8011810:	20010eac 	.word	0x20010eac
 8011814:	20010e8c 	.word	0x20010e8c
 8011818:	20010eb6 	.word	0x20010eb6
 801181c:	0801c1e0 	.word	0x0801c1e0
 8011820:	0801c588 	.word	0x0801c588
 8011824:	0801c22c 	.word	0x0801c22c

08011828 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8011828:	b480      	push	{r7}
 801182a:	b083      	sub	sp, #12
 801182c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801182e:	4b15      	ldr	r3, [pc, #84]	@ (8011884 <tcp_get_next_optbyte+0x5c>)
 8011830:	881b      	ldrh	r3, [r3, #0]
 8011832:	1c5a      	adds	r2, r3, #1
 8011834:	b291      	uxth	r1, r2
 8011836:	4a13      	ldr	r2, [pc, #76]	@ (8011884 <tcp_get_next_optbyte+0x5c>)
 8011838:	8011      	strh	r1, [r2, #0]
 801183a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801183c:	4b12      	ldr	r3, [pc, #72]	@ (8011888 <tcp_get_next_optbyte+0x60>)
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	2b00      	cmp	r3, #0
 8011842:	d004      	beq.n	801184e <tcp_get_next_optbyte+0x26>
 8011844:	4b11      	ldr	r3, [pc, #68]	@ (801188c <tcp_get_next_optbyte+0x64>)
 8011846:	881b      	ldrh	r3, [r3, #0]
 8011848:	88fa      	ldrh	r2, [r7, #6]
 801184a:	429a      	cmp	r2, r3
 801184c:	d208      	bcs.n	8011860 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801184e:	4b10      	ldr	r3, [pc, #64]	@ (8011890 <tcp_get_next_optbyte+0x68>)
 8011850:	681b      	ldr	r3, [r3, #0]
 8011852:	3314      	adds	r3, #20
 8011854:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8011856:	88fb      	ldrh	r3, [r7, #6]
 8011858:	683a      	ldr	r2, [r7, #0]
 801185a:	4413      	add	r3, r2
 801185c:	781b      	ldrb	r3, [r3, #0]
 801185e:	e00b      	b.n	8011878 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8011860:	88fb      	ldrh	r3, [r7, #6]
 8011862:	b2da      	uxtb	r2, r3
 8011864:	4b09      	ldr	r3, [pc, #36]	@ (801188c <tcp_get_next_optbyte+0x64>)
 8011866:	881b      	ldrh	r3, [r3, #0]
 8011868:	b2db      	uxtb	r3, r3
 801186a:	1ad3      	subs	r3, r2, r3
 801186c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801186e:	4b06      	ldr	r3, [pc, #24]	@ (8011888 <tcp_get_next_optbyte+0x60>)
 8011870:	681a      	ldr	r2, [r3, #0]
 8011872:	797b      	ldrb	r3, [r7, #5]
 8011874:	4413      	add	r3, r2
 8011876:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011878:	4618      	mov	r0, r3
 801187a:	370c      	adds	r7, #12
 801187c:	46bd      	mov	sp, r7
 801187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011882:	4770      	bx	lr
 8011884:	20010ea8 	.word	0x20010ea8
 8011888:	20010ea4 	.word	0x20010ea4
 801188c:	20010ea2 	.word	0x20010ea2
 8011890:	20010e9c 	.word	0x20010e9c

08011894 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8011894:	b580      	push	{r7, lr}
 8011896:	b084      	sub	sp, #16
 8011898:	af00      	add	r7, sp, #0
 801189a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d106      	bne.n	80118b0 <tcp_parseopt+0x1c>
 80118a2:	4b32      	ldr	r3, [pc, #200]	@ (801196c <tcp_parseopt+0xd8>)
 80118a4:	f240 727d 	movw	r2, #1917	@ 0x77d
 80118a8:	4931      	ldr	r1, [pc, #196]	@ (8011970 <tcp_parseopt+0xdc>)
 80118aa:	4832      	ldr	r0, [pc, #200]	@ (8011974 <tcp_parseopt+0xe0>)
 80118ac:	f007 fa4a 	bl	8018d44 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80118b0:	4b31      	ldr	r3, [pc, #196]	@ (8011978 <tcp_parseopt+0xe4>)
 80118b2:	881b      	ldrh	r3, [r3, #0]
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d056      	beq.n	8011966 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80118b8:	4b30      	ldr	r3, [pc, #192]	@ (801197c <tcp_parseopt+0xe8>)
 80118ba:	2200      	movs	r2, #0
 80118bc:	801a      	strh	r2, [r3, #0]
 80118be:	e046      	b.n	801194e <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 80118c0:	f7ff ffb2 	bl	8011828 <tcp_get_next_optbyte>
 80118c4:	4603      	mov	r3, r0
 80118c6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80118c8:	7bfb      	ldrb	r3, [r7, #15]
 80118ca:	2b02      	cmp	r3, #2
 80118cc:	d006      	beq.n	80118dc <tcp_parseopt+0x48>
 80118ce:	2b02      	cmp	r3, #2
 80118d0:	dc2a      	bgt.n	8011928 <tcp_parseopt+0x94>
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	d042      	beq.n	801195c <tcp_parseopt+0xc8>
 80118d6:	2b01      	cmp	r3, #1
 80118d8:	d038      	beq.n	801194c <tcp_parseopt+0xb8>
 80118da:	e025      	b.n	8011928 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80118dc:	f7ff ffa4 	bl	8011828 <tcp_get_next_optbyte>
 80118e0:	4603      	mov	r3, r0
 80118e2:	2b04      	cmp	r3, #4
 80118e4:	d13c      	bne.n	8011960 <tcp_parseopt+0xcc>
 80118e6:	4b25      	ldr	r3, [pc, #148]	@ (801197c <tcp_parseopt+0xe8>)
 80118e8:	881b      	ldrh	r3, [r3, #0]
 80118ea:	3301      	adds	r3, #1
 80118ec:	4a22      	ldr	r2, [pc, #136]	@ (8011978 <tcp_parseopt+0xe4>)
 80118ee:	8812      	ldrh	r2, [r2, #0]
 80118f0:	4293      	cmp	r3, r2
 80118f2:	da35      	bge.n	8011960 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80118f4:	f7ff ff98 	bl	8011828 <tcp_get_next_optbyte>
 80118f8:	4603      	mov	r3, r0
 80118fa:	021b      	lsls	r3, r3, #8
 80118fc:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80118fe:	f7ff ff93 	bl	8011828 <tcp_get_next_optbyte>
 8011902:	4603      	mov	r3, r0
 8011904:	461a      	mov	r2, r3
 8011906:	89bb      	ldrh	r3, [r7, #12]
 8011908:	4313      	orrs	r3, r2
 801190a:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801190c:	89bb      	ldrh	r3, [r7, #12]
 801190e:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8011912:	d804      	bhi.n	801191e <tcp_parseopt+0x8a>
 8011914:	89bb      	ldrh	r3, [r7, #12]
 8011916:	2b00      	cmp	r3, #0
 8011918:	d001      	beq.n	801191e <tcp_parseopt+0x8a>
 801191a:	89ba      	ldrh	r2, [r7, #12]
 801191c:	e001      	b.n	8011922 <tcp_parseopt+0x8e>
 801191e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8011926:	e012      	b.n	801194e <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8011928:	f7ff ff7e 	bl	8011828 <tcp_get_next_optbyte>
 801192c:	4603      	mov	r3, r0
 801192e:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8011930:	7afb      	ldrb	r3, [r7, #11]
 8011932:	2b01      	cmp	r3, #1
 8011934:	d916      	bls.n	8011964 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8011936:	7afb      	ldrb	r3, [r7, #11]
 8011938:	b29a      	uxth	r2, r3
 801193a:	4b10      	ldr	r3, [pc, #64]	@ (801197c <tcp_parseopt+0xe8>)
 801193c:	881b      	ldrh	r3, [r3, #0]
 801193e:	4413      	add	r3, r2
 8011940:	b29b      	uxth	r3, r3
 8011942:	3b02      	subs	r3, #2
 8011944:	b29a      	uxth	r2, r3
 8011946:	4b0d      	ldr	r3, [pc, #52]	@ (801197c <tcp_parseopt+0xe8>)
 8011948:	801a      	strh	r2, [r3, #0]
 801194a:	e000      	b.n	801194e <tcp_parseopt+0xba>
          break;
 801194c:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801194e:	4b0b      	ldr	r3, [pc, #44]	@ (801197c <tcp_parseopt+0xe8>)
 8011950:	881a      	ldrh	r2, [r3, #0]
 8011952:	4b09      	ldr	r3, [pc, #36]	@ (8011978 <tcp_parseopt+0xe4>)
 8011954:	881b      	ldrh	r3, [r3, #0]
 8011956:	429a      	cmp	r2, r3
 8011958:	d3b2      	bcc.n	80118c0 <tcp_parseopt+0x2c>
 801195a:	e004      	b.n	8011966 <tcp_parseopt+0xd2>
          return;
 801195c:	bf00      	nop
 801195e:	e002      	b.n	8011966 <tcp_parseopt+0xd2>
            return;
 8011960:	bf00      	nop
 8011962:	e000      	b.n	8011966 <tcp_parseopt+0xd2>
            return;
 8011964:	bf00      	nop
      }
    }
  }
}
 8011966:	3710      	adds	r7, #16
 8011968:	46bd      	mov	sp, r7
 801196a:	bd80      	pop	{r7, pc}
 801196c:	0801c1e0 	.word	0x0801c1e0
 8011970:	0801c644 	.word	0x0801c644
 8011974:	0801c22c 	.word	0x0801c22c
 8011978:	20010ea0 	.word	0x20010ea0
 801197c:	20010ea8 	.word	0x20010ea8

08011980 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8011980:	b480      	push	{r7}
 8011982:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8011984:	4b05      	ldr	r3, [pc, #20]	@ (801199c <tcp_trigger_input_pcb_close+0x1c>)
 8011986:	781b      	ldrb	r3, [r3, #0]
 8011988:	f043 0310 	orr.w	r3, r3, #16
 801198c:	b2da      	uxtb	r2, r3
 801198e:	4b03      	ldr	r3, [pc, #12]	@ (801199c <tcp_trigger_input_pcb_close+0x1c>)
 8011990:	701a      	strb	r2, [r3, #0]
}
 8011992:	bf00      	nop
 8011994:	46bd      	mov	sp, r7
 8011996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801199a:	4770      	bx	lr
 801199c:	20010eb9 	.word	0x20010eb9

080119a0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80119a0:	b580      	push	{r7, lr}
 80119a2:	b084      	sub	sp, #16
 80119a4:	af00      	add	r7, sp, #0
 80119a6:	60f8      	str	r0, [r7, #12]
 80119a8:	60b9      	str	r1, [r7, #8]
 80119aa:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80119ac:	68fb      	ldr	r3, [r7, #12]
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d00a      	beq.n	80119c8 <tcp_route+0x28>
 80119b2:	68fb      	ldr	r3, [r7, #12]
 80119b4:	7a1b      	ldrb	r3, [r3, #8]
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d006      	beq.n	80119c8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80119ba:	68fb      	ldr	r3, [r7, #12]
 80119bc:	7a1b      	ldrb	r3, [r3, #8]
 80119be:	4618      	mov	r0, r3
 80119c0:	f7fa fef8 	bl	800c7b4 <netif_get_by_index>
 80119c4:	4603      	mov	r3, r0
 80119c6:	e003      	b.n	80119d0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80119c8:	6878      	ldr	r0, [r7, #4]
 80119ca:	f005 fca1 	bl	8017310 <ip4_route>
 80119ce:	4603      	mov	r3, r0
  }
}
 80119d0:	4618      	mov	r0, r3
 80119d2:	3710      	adds	r7, #16
 80119d4:	46bd      	mov	sp, r7
 80119d6:	bd80      	pop	{r7, pc}

080119d8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80119d8:	b590      	push	{r4, r7, lr}
 80119da:	b087      	sub	sp, #28
 80119dc:	af00      	add	r7, sp, #0
 80119de:	60f8      	str	r0, [r7, #12]
 80119e0:	60b9      	str	r1, [r7, #8]
 80119e2:	603b      	str	r3, [r7, #0]
 80119e4:	4613      	mov	r3, r2
 80119e6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80119e8:	68fb      	ldr	r3, [r7, #12]
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d105      	bne.n	80119fa <tcp_create_segment+0x22>
 80119ee:	4b43      	ldr	r3, [pc, #268]	@ (8011afc <tcp_create_segment+0x124>)
 80119f0:	22a3      	movs	r2, #163	@ 0xa3
 80119f2:	4943      	ldr	r1, [pc, #268]	@ (8011b00 <tcp_create_segment+0x128>)
 80119f4:	4843      	ldr	r0, [pc, #268]	@ (8011b04 <tcp_create_segment+0x12c>)
 80119f6:	f007 f9a5 	bl	8018d44 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80119fa:	68bb      	ldr	r3, [r7, #8]
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d105      	bne.n	8011a0c <tcp_create_segment+0x34>
 8011a00:	4b3e      	ldr	r3, [pc, #248]	@ (8011afc <tcp_create_segment+0x124>)
 8011a02:	22a4      	movs	r2, #164	@ 0xa4
 8011a04:	4940      	ldr	r1, [pc, #256]	@ (8011b08 <tcp_create_segment+0x130>)
 8011a06:	483f      	ldr	r0, [pc, #252]	@ (8011b04 <tcp_create_segment+0x12c>)
 8011a08:	f007 f99c 	bl	8018d44 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011a0c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8011a10:	009b      	lsls	r3, r3, #2
 8011a12:	b2db      	uxtb	r3, r3
 8011a14:	f003 0304 	and.w	r3, r3, #4
 8011a18:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8011a1a:	2003      	movs	r0, #3
 8011a1c:	f7fa fb32 	bl	800c084 <memp_malloc>
 8011a20:	6138      	str	r0, [r7, #16]
 8011a22:	693b      	ldr	r3, [r7, #16]
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d104      	bne.n	8011a32 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8011a28:	68b8      	ldr	r0, [r7, #8]
 8011a2a:	f7fb fa51 	bl	800ced0 <pbuf_free>
    return NULL;
 8011a2e:	2300      	movs	r3, #0
 8011a30:	e060      	b.n	8011af4 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 8011a32:	693b      	ldr	r3, [r7, #16]
 8011a34:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8011a38:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8011a3a:	693b      	ldr	r3, [r7, #16]
 8011a3c:	2200      	movs	r2, #0
 8011a3e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8011a40:	693b      	ldr	r3, [r7, #16]
 8011a42:	68ba      	ldr	r2, [r7, #8]
 8011a44:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8011a46:	68bb      	ldr	r3, [r7, #8]
 8011a48:	891a      	ldrh	r2, [r3, #8]
 8011a4a:	7dfb      	ldrb	r3, [r7, #23]
 8011a4c:	b29b      	uxth	r3, r3
 8011a4e:	429a      	cmp	r2, r3
 8011a50:	d205      	bcs.n	8011a5e <tcp_create_segment+0x86>
 8011a52:	4b2a      	ldr	r3, [pc, #168]	@ (8011afc <tcp_create_segment+0x124>)
 8011a54:	22b0      	movs	r2, #176	@ 0xb0
 8011a56:	492d      	ldr	r1, [pc, #180]	@ (8011b0c <tcp_create_segment+0x134>)
 8011a58:	482a      	ldr	r0, [pc, #168]	@ (8011b04 <tcp_create_segment+0x12c>)
 8011a5a:	f007 f973 	bl	8018d44 <iprintf>
  seg->len = p->tot_len - optlen;
 8011a5e:	68bb      	ldr	r3, [r7, #8]
 8011a60:	891a      	ldrh	r2, [r3, #8]
 8011a62:	7dfb      	ldrb	r3, [r7, #23]
 8011a64:	b29b      	uxth	r3, r3
 8011a66:	1ad3      	subs	r3, r2, r3
 8011a68:	b29a      	uxth	r2, r3
 8011a6a:	693b      	ldr	r3, [r7, #16]
 8011a6c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8011a6e:	2114      	movs	r1, #20
 8011a70:	68b8      	ldr	r0, [r7, #8]
 8011a72:	f7fb f997 	bl	800cda4 <pbuf_add_header>
 8011a76:	4603      	mov	r3, r0
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d004      	beq.n	8011a86 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8011a7c:	6938      	ldr	r0, [r7, #16]
 8011a7e:	f7fc ffe6 	bl	800ea4e <tcp_seg_free>
    return NULL;
 8011a82:	2300      	movs	r3, #0
 8011a84:	e036      	b.n	8011af4 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8011a86:	693b      	ldr	r3, [r7, #16]
 8011a88:	685b      	ldr	r3, [r3, #4]
 8011a8a:	685a      	ldr	r2, [r3, #4]
 8011a8c:	693b      	ldr	r3, [r7, #16]
 8011a8e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8011a90:	68fb      	ldr	r3, [r7, #12]
 8011a92:	8ada      	ldrh	r2, [r3, #22]
 8011a94:	693b      	ldr	r3, [r7, #16]
 8011a96:	68dc      	ldr	r4, [r3, #12]
 8011a98:	4610      	mov	r0, r2
 8011a9a:	f7f9 fde5 	bl	800b668 <lwip_htons>
 8011a9e:	4603      	mov	r3, r0
 8011aa0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8011aa2:	68fb      	ldr	r3, [r7, #12]
 8011aa4:	8b1a      	ldrh	r2, [r3, #24]
 8011aa6:	693b      	ldr	r3, [r7, #16]
 8011aa8:	68dc      	ldr	r4, [r3, #12]
 8011aaa:	4610      	mov	r0, r2
 8011aac:	f7f9 fddc 	bl	800b668 <lwip_htons>
 8011ab0:	4603      	mov	r3, r0
 8011ab2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8011ab4:	693b      	ldr	r3, [r7, #16]
 8011ab6:	68dc      	ldr	r4, [r3, #12]
 8011ab8:	6838      	ldr	r0, [r7, #0]
 8011aba:	f7f9 fdea 	bl	800b692 <lwip_htonl>
 8011abe:	4603      	mov	r3, r0
 8011ac0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8011ac2:	7dfb      	ldrb	r3, [r7, #23]
 8011ac4:	089b      	lsrs	r3, r3, #2
 8011ac6:	b2db      	uxtb	r3, r3
 8011ac8:	3305      	adds	r3, #5
 8011aca:	b29b      	uxth	r3, r3
 8011acc:	031b      	lsls	r3, r3, #12
 8011ace:	b29a      	uxth	r2, r3
 8011ad0:	79fb      	ldrb	r3, [r7, #7]
 8011ad2:	b29b      	uxth	r3, r3
 8011ad4:	4313      	orrs	r3, r2
 8011ad6:	b29a      	uxth	r2, r3
 8011ad8:	693b      	ldr	r3, [r7, #16]
 8011ada:	68dc      	ldr	r4, [r3, #12]
 8011adc:	4610      	mov	r0, r2
 8011ade:	f7f9 fdc3 	bl	800b668 <lwip_htons>
 8011ae2:	4603      	mov	r3, r0
 8011ae4:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8011ae6:	693b      	ldr	r3, [r7, #16]
 8011ae8:	68db      	ldr	r3, [r3, #12]
 8011aea:	2200      	movs	r2, #0
 8011aec:	749a      	strb	r2, [r3, #18]
 8011aee:	2200      	movs	r2, #0
 8011af0:	74da      	strb	r2, [r3, #19]
  return seg;
 8011af2:	693b      	ldr	r3, [r7, #16]
}
 8011af4:	4618      	mov	r0, r3
 8011af6:	371c      	adds	r7, #28
 8011af8:	46bd      	mov	sp, r7
 8011afa:	bd90      	pop	{r4, r7, pc}
 8011afc:	0801c660 	.word	0x0801c660
 8011b00:	0801c694 	.word	0x0801c694
 8011b04:	0801c6b4 	.word	0x0801c6b4
 8011b08:	0801c6dc 	.word	0x0801c6dc
 8011b0c:	0801c700 	.word	0x0801c700

08011b10 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8011b10:	b580      	push	{r7, lr}
 8011b12:	b086      	sub	sp, #24
 8011b14:	af00      	add	r7, sp, #0
 8011b16:	607b      	str	r3, [r7, #4]
 8011b18:	4603      	mov	r3, r0
 8011b1a:	73fb      	strb	r3, [r7, #15]
 8011b1c:	460b      	mov	r3, r1
 8011b1e:	81bb      	strh	r3, [r7, #12]
 8011b20:	4613      	mov	r3, r2
 8011b22:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8011b24:	89bb      	ldrh	r3, [r7, #12]
 8011b26:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d105      	bne.n	8011b3a <tcp_pbuf_prealloc+0x2a>
 8011b2e:	4b30      	ldr	r3, [pc, #192]	@ (8011bf0 <tcp_pbuf_prealloc+0xe0>)
 8011b30:	22e8      	movs	r2, #232	@ 0xe8
 8011b32:	4930      	ldr	r1, [pc, #192]	@ (8011bf4 <tcp_pbuf_prealloc+0xe4>)
 8011b34:	4830      	ldr	r0, [pc, #192]	@ (8011bf8 <tcp_pbuf_prealloc+0xe8>)
 8011b36:	f007 f905 	bl	8018d44 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8011b3a:	6a3b      	ldr	r3, [r7, #32]
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d105      	bne.n	8011b4c <tcp_pbuf_prealloc+0x3c>
 8011b40:	4b2b      	ldr	r3, [pc, #172]	@ (8011bf0 <tcp_pbuf_prealloc+0xe0>)
 8011b42:	22e9      	movs	r2, #233	@ 0xe9
 8011b44:	492d      	ldr	r1, [pc, #180]	@ (8011bfc <tcp_pbuf_prealloc+0xec>)
 8011b46:	482c      	ldr	r0, [pc, #176]	@ (8011bf8 <tcp_pbuf_prealloc+0xe8>)
 8011b48:	f007 f8fc 	bl	8018d44 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8011b4c:	89ba      	ldrh	r2, [r7, #12]
 8011b4e:	897b      	ldrh	r3, [r7, #10]
 8011b50:	429a      	cmp	r2, r3
 8011b52:	d221      	bcs.n	8011b98 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011b54:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8011b58:	f003 0302 	and.w	r3, r3, #2
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d111      	bne.n	8011b84 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8011b60:	6a3b      	ldr	r3, [r7, #32]
 8011b62:	8b5b      	ldrh	r3, [r3, #26]
 8011b64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	d115      	bne.n	8011b98 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8011b6c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d007      	beq.n	8011b84 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8011b74:	6a3b      	ldr	r3, [r7, #32]
 8011b76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d103      	bne.n	8011b84 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8011b7c:	6a3b      	ldr	r3, [r7, #32]
 8011b7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d009      	beq.n	8011b98 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8011b84:	89bb      	ldrh	r3, [r7, #12]
 8011b86:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 8011b8a:	f023 0203 	bic.w	r2, r3, #3
 8011b8e:	897b      	ldrh	r3, [r7, #10]
 8011b90:	4293      	cmp	r3, r2
 8011b92:	bf28      	it	cs
 8011b94:	4613      	movcs	r3, r2
 8011b96:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8011b98:	8af9      	ldrh	r1, [r7, #22]
 8011b9a:	7bfb      	ldrb	r3, [r7, #15]
 8011b9c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011ba0:	4618      	mov	r0, r3
 8011ba2:	f7fa feb1 	bl	800c908 <pbuf_alloc>
 8011ba6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011ba8:	693b      	ldr	r3, [r7, #16]
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d101      	bne.n	8011bb2 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8011bae:	2300      	movs	r3, #0
 8011bb0:	e019      	b.n	8011be6 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8011bb2:	693b      	ldr	r3, [r7, #16]
 8011bb4:	681b      	ldr	r3, [r3, #0]
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	d006      	beq.n	8011bc8 <tcp_pbuf_prealloc+0xb8>
 8011bba:	4b0d      	ldr	r3, [pc, #52]	@ (8011bf0 <tcp_pbuf_prealloc+0xe0>)
 8011bbc:	f240 120b 	movw	r2, #267	@ 0x10b
 8011bc0:	490f      	ldr	r1, [pc, #60]	@ (8011c00 <tcp_pbuf_prealloc+0xf0>)
 8011bc2:	480d      	ldr	r0, [pc, #52]	@ (8011bf8 <tcp_pbuf_prealloc+0xe8>)
 8011bc4:	f007 f8be 	bl	8018d44 <iprintf>
  *oversize = p->len - length;
 8011bc8:	693b      	ldr	r3, [r7, #16]
 8011bca:	895a      	ldrh	r2, [r3, #10]
 8011bcc:	89bb      	ldrh	r3, [r7, #12]
 8011bce:	1ad3      	subs	r3, r2, r3
 8011bd0:	b29a      	uxth	r2, r3
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8011bd6:	693b      	ldr	r3, [r7, #16]
 8011bd8:	89ba      	ldrh	r2, [r7, #12]
 8011bda:	811a      	strh	r2, [r3, #8]
 8011bdc:	693b      	ldr	r3, [r7, #16]
 8011bde:	891a      	ldrh	r2, [r3, #8]
 8011be0:	693b      	ldr	r3, [r7, #16]
 8011be2:	815a      	strh	r2, [r3, #10]
  return p;
 8011be4:	693b      	ldr	r3, [r7, #16]
}
 8011be6:	4618      	mov	r0, r3
 8011be8:	3718      	adds	r7, #24
 8011bea:	46bd      	mov	sp, r7
 8011bec:	bd80      	pop	{r7, pc}
 8011bee:	bf00      	nop
 8011bf0:	0801c660 	.word	0x0801c660
 8011bf4:	0801c718 	.word	0x0801c718
 8011bf8:	0801c6b4 	.word	0x0801c6b4
 8011bfc:	0801c73c 	.word	0x0801c73c
 8011c00:	0801c75c 	.word	0x0801c75c

08011c04 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8011c04:	b580      	push	{r7, lr}
 8011c06:	b082      	sub	sp, #8
 8011c08:	af00      	add	r7, sp, #0
 8011c0a:	6078      	str	r0, [r7, #4]
 8011c0c:	460b      	mov	r3, r1
 8011c0e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d106      	bne.n	8011c24 <tcp_write_checks+0x20>
 8011c16:	4b33      	ldr	r3, [pc, #204]	@ (8011ce4 <tcp_write_checks+0xe0>)
 8011c18:	f240 1233 	movw	r2, #307	@ 0x133
 8011c1c:	4932      	ldr	r1, [pc, #200]	@ (8011ce8 <tcp_write_checks+0xe4>)
 8011c1e:	4833      	ldr	r0, [pc, #204]	@ (8011cec <tcp_write_checks+0xe8>)
 8011c20:	f007 f890 	bl	8018d44 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	7d1b      	ldrb	r3, [r3, #20]
 8011c28:	2b04      	cmp	r3, #4
 8011c2a:	d00e      	beq.n	8011c4a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8011c30:	2b07      	cmp	r3, #7
 8011c32:	d00a      	beq.n	8011c4a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8011c38:	2b02      	cmp	r3, #2
 8011c3a:	d006      	beq.n	8011c4a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8011c40:	2b03      	cmp	r3, #3
 8011c42:	d002      	beq.n	8011c4a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8011c44:	f06f 030a 	mvn.w	r3, #10
 8011c48:	e048      	b.n	8011cdc <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8011c4a:	887b      	ldrh	r3, [r7, #2]
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d101      	bne.n	8011c54 <tcp_write_checks+0x50>
    return ERR_OK;
 8011c50:	2300      	movs	r3, #0
 8011c52:	e043      	b.n	8011cdc <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8011c5a:	887a      	ldrh	r2, [r7, #2]
 8011c5c:	429a      	cmp	r2, r3
 8011c5e:	d909      	bls.n	8011c74 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	8b5b      	ldrh	r3, [r3, #26]
 8011c64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011c68:	b29a      	uxth	r2, r3
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8011c72:	e033      	b.n	8011cdc <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011c7a:	2b08      	cmp	r3, #8
 8011c7c:	d909      	bls.n	8011c92 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	8b5b      	ldrh	r3, [r3, #26]
 8011c82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011c86:	b29a      	uxth	r2, r3
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8011c90:	e024      	b.n	8011cdc <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d00f      	beq.n	8011cbc <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	d11a      	bne.n	8011cda <tcp_write_checks+0xd6>
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d116      	bne.n	8011cda <tcp_write_checks+0xd6>
 8011cac:	4b0d      	ldr	r3, [pc, #52]	@ (8011ce4 <tcp_write_checks+0xe0>)
 8011cae:	f240 1255 	movw	r2, #341	@ 0x155
 8011cb2:	490f      	ldr	r1, [pc, #60]	@ (8011cf0 <tcp_write_checks+0xec>)
 8011cb4:	480d      	ldr	r0, [pc, #52]	@ (8011cec <tcp_write_checks+0xe8>)
 8011cb6:	f007 f845 	bl	8018d44 <iprintf>
 8011cba:	e00e      	b.n	8011cda <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	d103      	bne.n	8011ccc <tcp_write_checks+0xc8>
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d006      	beq.n	8011cda <tcp_write_checks+0xd6>
 8011ccc:	4b05      	ldr	r3, [pc, #20]	@ (8011ce4 <tcp_write_checks+0xe0>)
 8011cce:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 8011cd2:	4908      	ldr	r1, [pc, #32]	@ (8011cf4 <tcp_write_checks+0xf0>)
 8011cd4:	4805      	ldr	r0, [pc, #20]	@ (8011cec <tcp_write_checks+0xe8>)
 8011cd6:	f007 f835 	bl	8018d44 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8011cda:	2300      	movs	r3, #0
}
 8011cdc:	4618      	mov	r0, r3
 8011cde:	3708      	adds	r7, #8
 8011ce0:	46bd      	mov	sp, r7
 8011ce2:	bd80      	pop	{r7, pc}
 8011ce4:	0801c660 	.word	0x0801c660
 8011ce8:	0801c770 	.word	0x0801c770
 8011cec:	0801c6b4 	.word	0x0801c6b4
 8011cf0:	0801c790 	.word	0x0801c790
 8011cf4:	0801c7cc 	.word	0x0801c7cc

08011cf8 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8011cf8:	b590      	push	{r4, r7, lr}
 8011cfa:	b09b      	sub	sp, #108	@ 0x6c
 8011cfc:	af04      	add	r7, sp, #16
 8011cfe:	60f8      	str	r0, [r7, #12]
 8011d00:	60b9      	str	r1, [r7, #8]
 8011d02:	4611      	mov	r1, r2
 8011d04:	461a      	mov	r2, r3
 8011d06:	460b      	mov	r3, r1
 8011d08:	80fb      	strh	r3, [r7, #6]
 8011d0a:	4613      	mov	r3, r2
 8011d0c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8011d0e:	2300      	movs	r3, #0
 8011d10:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8011d12:	2300      	movs	r3, #0
 8011d14:	653b      	str	r3, [r7, #80]	@ 0x50
 8011d16:	2300      	movs	r3, #0
 8011d18:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011d1a:	2300      	movs	r3, #0
 8011d1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011d1e:	2300      	movs	r3, #0
 8011d20:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8011d22:	2300      	movs	r3, #0
 8011d24:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8011d28:	2300      	movs	r3, #0
 8011d2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8011d2e:	2300      	movs	r3, #0
 8011d30:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8011d32:	2300      	movs	r3, #0
 8011d34:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8011d36:	2300      	movs	r3, #0
 8011d38:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8011d3a:	68fb      	ldr	r3, [r7, #12]
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d109      	bne.n	8011d54 <tcp_write+0x5c>
 8011d40:	4ba4      	ldr	r3, [pc, #656]	@ (8011fd4 <tcp_write+0x2dc>)
 8011d42:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 8011d46:	49a4      	ldr	r1, [pc, #656]	@ (8011fd8 <tcp_write+0x2e0>)
 8011d48:	48a4      	ldr	r0, [pc, #656]	@ (8011fdc <tcp_write+0x2e4>)
 8011d4a:	f006 fffb 	bl	8018d44 <iprintf>
 8011d4e:	f06f 030f 	mvn.w	r3, #15
 8011d52:	e32a      	b.n	80123aa <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8011d54:	68fb      	ldr	r3, [r7, #12]
 8011d56:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011d5a:	085b      	lsrs	r3, r3, #1
 8011d5c:	b29a      	uxth	r2, r3
 8011d5e:	68fb      	ldr	r3, [r7, #12]
 8011d60:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011d62:	4293      	cmp	r3, r2
 8011d64:	bf28      	it	cs
 8011d66:	4613      	movcs	r3, r2
 8011d68:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8011d6a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d102      	bne.n	8011d76 <tcp_write+0x7e>
 8011d70:	68fb      	ldr	r3, [r7, #12]
 8011d72:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011d74:	e000      	b.n	8011d78 <tcp_write+0x80>
 8011d76:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011d78:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8011d7a:	68bb      	ldr	r3, [r7, #8]
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d109      	bne.n	8011d94 <tcp_write+0x9c>
 8011d80:	4b94      	ldr	r3, [pc, #592]	@ (8011fd4 <tcp_write+0x2dc>)
 8011d82:	f240 12ad 	movw	r2, #429	@ 0x1ad
 8011d86:	4996      	ldr	r1, [pc, #600]	@ (8011fe0 <tcp_write+0x2e8>)
 8011d88:	4894      	ldr	r0, [pc, #592]	@ (8011fdc <tcp_write+0x2e4>)
 8011d8a:	f006 ffdb 	bl	8018d44 <iprintf>
 8011d8e:	f06f 030f 	mvn.w	r3, #15
 8011d92:	e30a      	b.n	80123aa <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8011d94:	88fb      	ldrh	r3, [r7, #6]
 8011d96:	4619      	mov	r1, r3
 8011d98:	68f8      	ldr	r0, [r7, #12]
 8011d9a:	f7ff ff33 	bl	8011c04 <tcp_write_checks>
 8011d9e:	4603      	mov	r3, r0
 8011da0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 8011da4:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d002      	beq.n	8011db2 <tcp_write+0xba>
    return err;
 8011dac:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8011db0:	e2fb      	b.n	80123aa <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8011db2:	68fb      	ldr	r3, [r7, #12]
 8011db4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011db8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011dbc:	2300      	movs	r3, #0
 8011dbe:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8011dc2:	68fb      	ldr	r3, [r7, #12]
 8011dc4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	f000 80f6 	beq.w	8011fb8 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011dcc:	68fb      	ldr	r3, [r7, #12]
 8011dce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011dd0:	653b      	str	r3, [r7, #80]	@ 0x50
 8011dd2:	e002      	b.n	8011dda <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8011dd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011dd6:	681b      	ldr	r3, [r3, #0]
 8011dd8:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011dda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d1f8      	bne.n	8011dd4 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8011de2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011de4:	7a9b      	ldrb	r3, [r3, #10]
 8011de6:	009b      	lsls	r3, r3, #2
 8011de8:	b29b      	uxth	r3, r3
 8011dea:	f003 0304 	and.w	r3, r3, #4
 8011dee:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8011df0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8011df2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011df4:	891b      	ldrh	r3, [r3, #8]
 8011df6:	4619      	mov	r1, r3
 8011df8:	8c3b      	ldrh	r3, [r7, #32]
 8011dfa:	440b      	add	r3, r1
 8011dfc:	429a      	cmp	r2, r3
 8011dfe:	da06      	bge.n	8011e0e <tcp_write+0x116>
 8011e00:	4b74      	ldr	r3, [pc, #464]	@ (8011fd4 <tcp_write+0x2dc>)
 8011e02:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8011e06:	4977      	ldr	r1, [pc, #476]	@ (8011fe4 <tcp_write+0x2ec>)
 8011e08:	4874      	ldr	r0, [pc, #464]	@ (8011fdc <tcp_write+0x2e4>)
 8011e0a:	f006 ff9b 	bl	8018d44 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8011e0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011e10:	891a      	ldrh	r2, [r3, #8]
 8011e12:	8c3b      	ldrh	r3, [r7, #32]
 8011e14:	4413      	add	r3, r2
 8011e16:	b29b      	uxth	r3, r3
 8011e18:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8011e1a:	1ad3      	subs	r3, r2, r3
 8011e1c:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8011e1e:	68fb      	ldr	r3, [r7, #12]
 8011e20:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8011e24:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8011e26:	8a7b      	ldrh	r3, [r7, #18]
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d026      	beq.n	8011e7a <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8011e2c:	8a7b      	ldrh	r3, [r7, #18]
 8011e2e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8011e30:	429a      	cmp	r2, r3
 8011e32:	d206      	bcs.n	8011e42 <tcp_write+0x14a>
 8011e34:	4b67      	ldr	r3, [pc, #412]	@ (8011fd4 <tcp_write+0x2dc>)
 8011e36:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 8011e3a:	496b      	ldr	r1, [pc, #428]	@ (8011fe8 <tcp_write+0x2f0>)
 8011e3c:	4867      	ldr	r0, [pc, #412]	@ (8011fdc <tcp_write+0x2e4>)
 8011e3e:	f006 ff81 	bl	8018d44 <iprintf>
      seg = last_unsent;
 8011e42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011e44:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8011e46:	8a7b      	ldrh	r3, [r7, #18]
 8011e48:	88fa      	ldrh	r2, [r7, #6]
 8011e4a:	4293      	cmp	r3, r2
 8011e4c:	bf28      	it	cs
 8011e4e:	4613      	movcs	r3, r2
 8011e50:	b29b      	uxth	r3, r3
 8011e52:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8011e54:	4293      	cmp	r3, r2
 8011e56:	bf28      	it	cs
 8011e58:	4613      	movcs	r3, r2
 8011e5a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 8011e5c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011e60:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011e62:	4413      	add	r3, r2
 8011e64:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 8011e68:	8a7a      	ldrh	r2, [r7, #18]
 8011e6a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011e6c:	1ad3      	subs	r3, r2, r3
 8011e6e:	b29b      	uxth	r3, r3
 8011e70:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8011e72:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8011e74:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011e76:	1ad3      	subs	r3, r2, r3
 8011e78:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8011e7a:	8a7b      	ldrh	r3, [r7, #18]
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d00b      	beq.n	8011e98 <tcp_write+0x1a0>
 8011e80:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011e84:	88fb      	ldrh	r3, [r7, #6]
 8011e86:	429a      	cmp	r2, r3
 8011e88:	d006      	beq.n	8011e98 <tcp_write+0x1a0>
 8011e8a:	4b52      	ldr	r3, [pc, #328]	@ (8011fd4 <tcp_write+0x2dc>)
 8011e8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011e90:	4956      	ldr	r1, [pc, #344]	@ (8011fec <tcp_write+0x2f4>)
 8011e92:	4852      	ldr	r0, [pc, #328]	@ (8011fdc <tcp_write+0x2e4>)
 8011e94:	f006 ff56 	bl	8018d44 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8011e98:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011e9c:	88fb      	ldrh	r3, [r7, #6]
 8011e9e:	429a      	cmp	r2, r3
 8011ea0:	f080 8167 	bcs.w	8012172 <tcp_write+0x47a>
 8011ea4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	f000 8163 	beq.w	8012172 <tcp_write+0x47a>
 8011eac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011eae:	891b      	ldrh	r3, [r3, #8]
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	f000 815e 	beq.w	8012172 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8011eb6:	88fa      	ldrh	r2, [r7, #6]
 8011eb8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011ebc:	1ad2      	subs	r2, r2, r3
 8011ebe:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8011ec0:	4293      	cmp	r3, r2
 8011ec2:	bfa8      	it	ge
 8011ec4:	4613      	movge	r3, r2
 8011ec6:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8011ec8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011eca:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8011ecc:	797b      	ldrb	r3, [r7, #5]
 8011ece:	f003 0301 	and.w	r3, r3, #1
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d027      	beq.n	8011f26 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8011ed6:	f107 0012 	add.w	r0, r7, #18
 8011eda:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8011edc:	8bf9      	ldrh	r1, [r7, #30]
 8011ede:	2301      	movs	r3, #1
 8011ee0:	9302      	str	r3, [sp, #8]
 8011ee2:	797b      	ldrb	r3, [r7, #5]
 8011ee4:	9301      	str	r3, [sp, #4]
 8011ee6:	68fb      	ldr	r3, [r7, #12]
 8011ee8:	9300      	str	r3, [sp, #0]
 8011eea:	4603      	mov	r3, r0
 8011eec:	2000      	movs	r0, #0
 8011eee:	f7ff fe0f 	bl	8011b10 <tcp_pbuf_prealloc>
 8011ef2:	6578      	str	r0, [r7, #84]	@ 0x54
 8011ef4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	f000 8225 	beq.w	8012346 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8011efc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011efe:	6858      	ldr	r0, [r3, #4]
 8011f00:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011f04:	68ba      	ldr	r2, [r7, #8]
 8011f06:	4413      	add	r3, r2
 8011f08:	8bfa      	ldrh	r2, [r7, #30]
 8011f0a:	4619      	mov	r1, r3
 8011f0c:	f007 f91b 	bl	8019146 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8011f10:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8011f12:	f7fb f86b 	bl	800cfec <pbuf_clen>
 8011f16:	4603      	mov	r3, r0
 8011f18:	461a      	mov	r2, r3
 8011f1a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8011f1e:	4413      	add	r3, r2
 8011f20:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8011f24:	e041      	b.n	8011faa <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8011f26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011f28:	685b      	ldr	r3, [r3, #4]
 8011f2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8011f2c:	e002      	b.n	8011f34 <tcp_write+0x23c>
 8011f2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011f30:	681b      	ldr	r3, [r3, #0]
 8011f32:	637b      	str	r3, [r7, #52]	@ 0x34
 8011f34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011f36:	681b      	ldr	r3, [r3, #0]
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d1f8      	bne.n	8011f2e <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8011f3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011f3e:	7b1b      	ldrb	r3, [r3, #12]
 8011f40:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	d115      	bne.n	8011f74 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8011f48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011f4a:	685b      	ldr	r3, [r3, #4]
 8011f4c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011f4e:	8952      	ldrh	r2, [r2, #10]
 8011f50:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8011f52:	68ba      	ldr	r2, [r7, #8]
 8011f54:	429a      	cmp	r2, r3
 8011f56:	d10d      	bne.n	8011f74 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8011f58:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d006      	beq.n	8011f6e <tcp_write+0x276>
 8011f60:	4b1c      	ldr	r3, [pc, #112]	@ (8011fd4 <tcp_write+0x2dc>)
 8011f62:	f240 2231 	movw	r2, #561	@ 0x231
 8011f66:	4922      	ldr	r1, [pc, #136]	@ (8011ff0 <tcp_write+0x2f8>)
 8011f68:	481c      	ldr	r0, [pc, #112]	@ (8011fdc <tcp_write+0x2e4>)
 8011f6a:	f006 feeb 	bl	8018d44 <iprintf>
          extendlen = seglen;
 8011f6e:	8bfb      	ldrh	r3, [r7, #30]
 8011f70:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8011f72:	e01a      	b.n	8011faa <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8011f74:	8bfb      	ldrh	r3, [r7, #30]
 8011f76:	2201      	movs	r2, #1
 8011f78:	4619      	mov	r1, r3
 8011f7a:	2000      	movs	r0, #0
 8011f7c:	f7fa fcc4 	bl	800c908 <pbuf_alloc>
 8011f80:	6578      	str	r0, [r7, #84]	@ 0x54
 8011f82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	f000 81e0 	beq.w	801234a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8011f8a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011f8e:	68ba      	ldr	r2, [r7, #8]
 8011f90:	441a      	add	r2, r3
 8011f92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011f94:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8011f96:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8011f98:	f7fb f828 	bl	800cfec <pbuf_clen>
 8011f9c:	4603      	mov	r3, r0
 8011f9e:	461a      	mov	r2, r3
 8011fa0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8011fa4:	4413      	add	r3, r2
 8011fa6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8011faa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011fae:	8bfb      	ldrh	r3, [r7, #30]
 8011fb0:	4413      	add	r3, r2
 8011fb2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8011fb6:	e0dc      	b.n	8012172 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8011fb8:	68fb      	ldr	r3, [r7, #12]
 8011fba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	f000 80d7 	beq.w	8012172 <tcp_write+0x47a>
 8011fc4:	4b03      	ldr	r3, [pc, #12]	@ (8011fd4 <tcp_write+0x2dc>)
 8011fc6:	f240 224a 	movw	r2, #586	@ 0x24a
 8011fca:	490a      	ldr	r1, [pc, #40]	@ (8011ff4 <tcp_write+0x2fc>)
 8011fcc:	4803      	ldr	r0, [pc, #12]	@ (8011fdc <tcp_write+0x2e4>)
 8011fce:	f006 feb9 	bl	8018d44 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8011fd2:	e0ce      	b.n	8012172 <tcp_write+0x47a>
 8011fd4:	0801c660 	.word	0x0801c660
 8011fd8:	0801c800 	.word	0x0801c800
 8011fdc:	0801c6b4 	.word	0x0801c6b4
 8011fe0:	0801c818 	.word	0x0801c818
 8011fe4:	0801c84c 	.word	0x0801c84c
 8011fe8:	0801c864 	.word	0x0801c864
 8011fec:	0801c884 	.word	0x0801c884
 8011ff0:	0801c8a4 	.word	0x0801c8a4
 8011ff4:	0801c8d0 	.word	0x0801c8d0
    struct pbuf *p;
    u16_t left = len - pos;
 8011ff8:	88fa      	ldrh	r2, [r7, #6]
 8011ffa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011ffe:	1ad3      	subs	r3, r2, r3
 8012000:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8012002:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8012006:	b29b      	uxth	r3, r3
 8012008:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801200a:	1ad3      	subs	r3, r2, r3
 801200c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801200e:	8b7a      	ldrh	r2, [r7, #26]
 8012010:	8bbb      	ldrh	r3, [r7, #28]
 8012012:	4293      	cmp	r3, r2
 8012014:	bf28      	it	cs
 8012016:	4613      	movcs	r3, r2
 8012018:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801201a:	797b      	ldrb	r3, [r7, #5]
 801201c:	f003 0301 	and.w	r3, r3, #1
 8012020:	2b00      	cmp	r3, #0
 8012022:	d036      	beq.n	8012092 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8012024:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8012028:	b29a      	uxth	r2, r3
 801202a:	8b3b      	ldrh	r3, [r7, #24]
 801202c:	4413      	add	r3, r2
 801202e:	b299      	uxth	r1, r3
 8012030:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012032:	2b00      	cmp	r3, #0
 8012034:	bf0c      	ite	eq
 8012036:	2301      	moveq	r3, #1
 8012038:	2300      	movne	r3, #0
 801203a:	b2db      	uxtb	r3, r3
 801203c:	f107 0012 	add.w	r0, r7, #18
 8012040:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8012042:	9302      	str	r3, [sp, #8]
 8012044:	797b      	ldrb	r3, [r7, #5]
 8012046:	9301      	str	r3, [sp, #4]
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	9300      	str	r3, [sp, #0]
 801204c:	4603      	mov	r3, r0
 801204e:	2036      	movs	r0, #54	@ 0x36
 8012050:	f7ff fd5e 	bl	8011b10 <tcp_pbuf_prealloc>
 8012054:	6338      	str	r0, [r7, #48]	@ 0x30
 8012056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012058:	2b00      	cmp	r3, #0
 801205a:	f000 8178 	beq.w	801234e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801205e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012060:	895b      	ldrh	r3, [r3, #10]
 8012062:	8b3a      	ldrh	r2, [r7, #24]
 8012064:	429a      	cmp	r2, r3
 8012066:	d906      	bls.n	8012076 <tcp_write+0x37e>
 8012068:	4b8c      	ldr	r3, [pc, #560]	@ (801229c <tcp_write+0x5a4>)
 801206a:	f240 2266 	movw	r2, #614	@ 0x266
 801206e:	498c      	ldr	r1, [pc, #560]	@ (80122a0 <tcp_write+0x5a8>)
 8012070:	488c      	ldr	r0, [pc, #560]	@ (80122a4 <tcp_write+0x5ac>)
 8012072:	f006 fe67 	bl	8018d44 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8012076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012078:	685a      	ldr	r2, [r3, #4]
 801207a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801207e:	18d0      	adds	r0, r2, r3
 8012080:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012084:	68ba      	ldr	r2, [r7, #8]
 8012086:	4413      	add	r3, r2
 8012088:	8b3a      	ldrh	r2, [r7, #24]
 801208a:	4619      	mov	r1, r3
 801208c:	f007 f85b 	bl	8019146 <memcpy>
 8012090:	e02f      	b.n	80120f2 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8012092:	8a7b      	ldrh	r3, [r7, #18]
 8012094:	2b00      	cmp	r3, #0
 8012096:	d006      	beq.n	80120a6 <tcp_write+0x3ae>
 8012098:	4b80      	ldr	r3, [pc, #512]	@ (801229c <tcp_write+0x5a4>)
 801209a:	f240 2271 	movw	r2, #625	@ 0x271
 801209e:	4982      	ldr	r1, [pc, #520]	@ (80122a8 <tcp_write+0x5b0>)
 80120a0:	4880      	ldr	r0, [pc, #512]	@ (80122a4 <tcp_write+0x5ac>)
 80120a2:	f006 fe4f 	bl	8018d44 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80120a6:	8b3b      	ldrh	r3, [r7, #24]
 80120a8:	2201      	movs	r2, #1
 80120aa:	4619      	mov	r1, r3
 80120ac:	2036      	movs	r0, #54	@ 0x36
 80120ae:	f7fa fc2b 	bl	800c908 <pbuf_alloc>
 80120b2:	6178      	str	r0, [r7, #20]
 80120b4:	697b      	ldr	r3, [r7, #20]
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	f000 814b 	beq.w	8012352 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80120bc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80120c0:	68ba      	ldr	r2, [r7, #8]
 80120c2:	441a      	add	r2, r3
 80120c4:	697b      	ldr	r3, [r7, #20]
 80120c6:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80120c8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80120cc:	b29b      	uxth	r3, r3
 80120ce:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80120d2:	4619      	mov	r1, r3
 80120d4:	2036      	movs	r0, #54	@ 0x36
 80120d6:	f7fa fc17 	bl	800c908 <pbuf_alloc>
 80120da:	6338      	str	r0, [r7, #48]	@ 0x30
 80120dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80120de:	2b00      	cmp	r3, #0
 80120e0:	d103      	bne.n	80120ea <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80120e2:	6978      	ldr	r0, [r7, #20]
 80120e4:	f7fa fef4 	bl	800ced0 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80120e8:	e136      	b.n	8012358 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80120ea:	6979      	ldr	r1, [r7, #20]
 80120ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80120ee:	f7fa ffbd 	bl	800d06c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80120f2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80120f4:	f7fa ff7a 	bl	800cfec <pbuf_clen>
 80120f8:	4603      	mov	r3, r0
 80120fa:	461a      	mov	r2, r3
 80120fc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8012100:	4413      	add	r3, r2
 8012102:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8012106:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801210a:	2b09      	cmp	r3, #9
 801210c:	d903      	bls.n	8012116 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801210e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012110:	f7fa fede 	bl	800ced0 <pbuf_free>
      goto memerr;
 8012114:	e120      	b.n	8012358 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8012116:	68fb      	ldr	r3, [r7, #12]
 8012118:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801211a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801211e:	441a      	add	r2, r3
 8012120:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012124:	9300      	str	r3, [sp, #0]
 8012126:	4613      	mov	r3, r2
 8012128:	2200      	movs	r2, #0
 801212a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801212c:	68f8      	ldr	r0, [r7, #12]
 801212e:	f7ff fc53 	bl	80119d8 <tcp_create_segment>
 8012132:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8012134:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012136:	2b00      	cmp	r3, #0
 8012138:	f000 810d 	beq.w	8012356 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801213c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801213e:	2b00      	cmp	r3, #0
 8012140:	d102      	bne.n	8012148 <tcp_write+0x450>
      queue = seg;
 8012142:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012144:	647b      	str	r3, [r7, #68]	@ 0x44
 8012146:	e00c      	b.n	8012162 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8012148:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801214a:	2b00      	cmp	r3, #0
 801214c:	d106      	bne.n	801215c <tcp_write+0x464>
 801214e:	4b53      	ldr	r3, [pc, #332]	@ (801229c <tcp_write+0x5a4>)
 8012150:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8012154:	4955      	ldr	r1, [pc, #340]	@ (80122ac <tcp_write+0x5b4>)
 8012156:	4853      	ldr	r0, [pc, #332]	@ (80122a4 <tcp_write+0x5ac>)
 8012158:	f006 fdf4 	bl	8018d44 <iprintf>
      prev_seg->next = seg;
 801215c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801215e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012160:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8012162:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012164:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8012166:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801216a:	8b3b      	ldrh	r3, [r7, #24]
 801216c:	4413      	add	r3, r2
 801216e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 8012172:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8012176:	88fb      	ldrh	r3, [r7, #6]
 8012178:	429a      	cmp	r2, r3
 801217a:	f4ff af3d 	bcc.w	8011ff8 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801217e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012180:	2b00      	cmp	r3, #0
 8012182:	d02c      	beq.n	80121de <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8012184:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012186:	685b      	ldr	r3, [r3, #4]
 8012188:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801218a:	e01e      	b.n	80121ca <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801218c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801218e:	891a      	ldrh	r2, [r3, #8]
 8012190:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012192:	4413      	add	r3, r2
 8012194:	b29a      	uxth	r2, r3
 8012196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012198:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801219a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801219c:	681b      	ldr	r3, [r3, #0]
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d110      	bne.n	80121c4 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80121a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80121a4:	685b      	ldr	r3, [r3, #4]
 80121a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80121a8:	8952      	ldrh	r2, [r2, #10]
 80121aa:	4413      	add	r3, r2
 80121ac:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80121ae:	68b9      	ldr	r1, [r7, #8]
 80121b0:	4618      	mov	r0, r3
 80121b2:	f006 ffc8 	bl	8019146 <memcpy>
        p->len += oversize_used;
 80121b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80121b8:	895a      	ldrh	r2, [r3, #10]
 80121ba:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80121bc:	4413      	add	r3, r2
 80121be:	b29a      	uxth	r2, r3
 80121c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80121c2:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80121c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80121c6:	681b      	ldr	r3, [r3, #0]
 80121c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80121ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d1dd      	bne.n	801218c <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 80121d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80121d2:	891a      	ldrh	r2, [r3, #8]
 80121d4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80121d6:	4413      	add	r3, r2
 80121d8:	b29a      	uxth	r2, r3
 80121da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80121dc:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80121de:	8a7a      	ldrh	r2, [r7, #18]
 80121e0:	68fb      	ldr	r3, [r7, #12]
 80121e2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80121e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d018      	beq.n	801221e <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80121ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	d106      	bne.n	8012200 <tcp_write+0x508>
 80121f2:	4b2a      	ldr	r3, [pc, #168]	@ (801229c <tcp_write+0x5a4>)
 80121f4:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 80121f8:	492d      	ldr	r1, [pc, #180]	@ (80122b0 <tcp_write+0x5b8>)
 80121fa:	482a      	ldr	r0, [pc, #168]	@ (80122a4 <tcp_write+0x5ac>)
 80121fc:	f006 fda2 	bl	8018d44 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8012200:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012202:	685b      	ldr	r3, [r3, #4]
 8012204:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8012206:	4618      	mov	r0, r3
 8012208:	f7fa ff30 	bl	800d06c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801220c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801220e:	891a      	ldrh	r2, [r3, #8]
 8012210:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012212:	891b      	ldrh	r3, [r3, #8]
 8012214:	4413      	add	r3, r2
 8012216:	b29a      	uxth	r2, r3
 8012218:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801221a:	811a      	strh	r2, [r3, #8]
 801221c:	e037      	b.n	801228e <tcp_write+0x596>
  } else if (extendlen > 0) {
 801221e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8012220:	2b00      	cmp	r3, #0
 8012222:	d034      	beq.n	801228e <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8012224:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012226:	2b00      	cmp	r3, #0
 8012228:	d003      	beq.n	8012232 <tcp_write+0x53a>
 801222a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801222c:	685b      	ldr	r3, [r3, #4]
 801222e:	2b00      	cmp	r3, #0
 8012230:	d106      	bne.n	8012240 <tcp_write+0x548>
 8012232:	4b1a      	ldr	r3, [pc, #104]	@ (801229c <tcp_write+0x5a4>)
 8012234:	f240 22e6 	movw	r2, #742	@ 0x2e6
 8012238:	491e      	ldr	r1, [pc, #120]	@ (80122b4 <tcp_write+0x5bc>)
 801223a:	481a      	ldr	r0, [pc, #104]	@ (80122a4 <tcp_write+0x5ac>)
 801223c:	f006 fd82 	bl	8018d44 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012240:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012242:	685b      	ldr	r3, [r3, #4]
 8012244:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012246:	e009      	b.n	801225c <tcp_write+0x564>
      p->tot_len += extendlen;
 8012248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801224a:	891a      	ldrh	r2, [r3, #8]
 801224c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801224e:	4413      	add	r3, r2
 8012250:	b29a      	uxth	r2, r3
 8012252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012254:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012258:	681b      	ldr	r3, [r3, #0]
 801225a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801225c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801225e:	681b      	ldr	r3, [r3, #0]
 8012260:	2b00      	cmp	r3, #0
 8012262:	d1f1      	bne.n	8012248 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8012264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012266:	891a      	ldrh	r2, [r3, #8]
 8012268:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801226a:	4413      	add	r3, r2
 801226c:	b29a      	uxth	r2, r3
 801226e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012270:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8012272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012274:	895a      	ldrh	r2, [r3, #10]
 8012276:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8012278:	4413      	add	r3, r2
 801227a:	b29a      	uxth	r2, r3
 801227c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801227e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8012280:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012282:	891a      	ldrh	r2, [r3, #8]
 8012284:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8012286:	4413      	add	r3, r2
 8012288:	b29a      	uxth	r2, r3
 801228a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801228c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801228e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012290:	2b00      	cmp	r3, #0
 8012292:	d111      	bne.n	80122b8 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8012294:	68fb      	ldr	r3, [r7, #12]
 8012296:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012298:	66da      	str	r2, [r3, #108]	@ 0x6c
 801229a:	e010      	b.n	80122be <tcp_write+0x5c6>
 801229c:	0801c660 	.word	0x0801c660
 80122a0:	0801c900 	.word	0x0801c900
 80122a4:	0801c6b4 	.word	0x0801c6b4
 80122a8:	0801c940 	.word	0x0801c940
 80122ac:	0801c950 	.word	0x0801c950
 80122b0:	0801c964 	.word	0x0801c964
 80122b4:	0801c99c 	.word	0x0801c99c
  } else {
    last_unsent->next = queue;
 80122b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80122ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80122bc:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80122be:	68fb      	ldr	r3, [r7, #12]
 80122c0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80122c2:	88fb      	ldrh	r3, [r7, #6]
 80122c4:	441a      	add	r2, r3
 80122c6:	68fb      	ldr	r3, [r7, #12]
 80122c8:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 80122ca:	68fb      	ldr	r3, [r7, #12]
 80122cc:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 80122d0:	88fb      	ldrh	r3, [r7, #6]
 80122d2:	1ad3      	subs	r3, r2, r3
 80122d4:	b29a      	uxth	r2, r3
 80122d6:	68fb      	ldr	r3, [r7, #12]
 80122d8:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 80122dc:	68fb      	ldr	r3, [r7, #12]
 80122de:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80122e2:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80122e6:	68fb      	ldr	r3, [r7, #12]
 80122e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d00e      	beq.n	801230e <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 80122f0:	68fb      	ldr	r3, [r7, #12]
 80122f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d10a      	bne.n	801230e <tcp_write+0x616>
 80122f8:	68fb      	ldr	r3, [r7, #12]
 80122fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d106      	bne.n	801230e <tcp_write+0x616>
 8012300:	4b2c      	ldr	r3, [pc, #176]	@ (80123b4 <tcp_write+0x6bc>)
 8012302:	f240 3212 	movw	r2, #786	@ 0x312
 8012306:	492c      	ldr	r1, [pc, #176]	@ (80123b8 <tcp_write+0x6c0>)
 8012308:	482c      	ldr	r0, [pc, #176]	@ (80123bc <tcp_write+0x6c4>)
 801230a:	f006 fd1b 	bl	8018d44 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801230e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012310:	2b00      	cmp	r3, #0
 8012312:	d016      	beq.n	8012342 <tcp_write+0x64a>
 8012314:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012316:	68db      	ldr	r3, [r3, #12]
 8012318:	2b00      	cmp	r3, #0
 801231a:	d012      	beq.n	8012342 <tcp_write+0x64a>
 801231c:	797b      	ldrb	r3, [r7, #5]
 801231e:	f003 0302 	and.w	r3, r3, #2
 8012322:	2b00      	cmp	r3, #0
 8012324:	d10d      	bne.n	8012342 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8012326:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012328:	68db      	ldr	r3, [r3, #12]
 801232a:	899b      	ldrh	r3, [r3, #12]
 801232c:	b29c      	uxth	r4, r3
 801232e:	2008      	movs	r0, #8
 8012330:	f7f9 f99a 	bl	800b668 <lwip_htons>
 8012334:	4603      	mov	r3, r0
 8012336:	461a      	mov	r2, r3
 8012338:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801233a:	68db      	ldr	r3, [r3, #12]
 801233c:	4322      	orrs	r2, r4
 801233e:	b292      	uxth	r2, r2
 8012340:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8012342:	2300      	movs	r3, #0
 8012344:	e031      	b.n	80123aa <tcp_write+0x6b2>
          goto memerr;
 8012346:	bf00      	nop
 8012348:	e006      	b.n	8012358 <tcp_write+0x660>
            goto memerr;
 801234a:	bf00      	nop
 801234c:	e004      	b.n	8012358 <tcp_write+0x660>
        goto memerr;
 801234e:	bf00      	nop
 8012350:	e002      	b.n	8012358 <tcp_write+0x660>
        goto memerr;
 8012352:	bf00      	nop
 8012354:	e000      	b.n	8012358 <tcp_write+0x660>
      goto memerr;
 8012356:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012358:	68fb      	ldr	r3, [r7, #12]
 801235a:	8b5b      	ldrh	r3, [r3, #26]
 801235c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012360:	b29a      	uxth	r2, r3
 8012362:	68fb      	ldr	r3, [r7, #12]
 8012364:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8012366:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012368:	2b00      	cmp	r3, #0
 801236a:	d002      	beq.n	8012372 <tcp_write+0x67a>
    pbuf_free(concat_p);
 801236c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801236e:	f7fa fdaf 	bl	800ced0 <pbuf_free>
  }
  if (queue != NULL) {
 8012372:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012374:	2b00      	cmp	r3, #0
 8012376:	d002      	beq.n	801237e <tcp_write+0x686>
    tcp_segs_free(queue);
 8012378:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801237a:	f7fc fb53 	bl	800ea24 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801237e:	68fb      	ldr	r3, [r7, #12]
 8012380:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012384:	2b00      	cmp	r3, #0
 8012386:	d00e      	beq.n	80123a6 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8012388:	68fb      	ldr	r3, [r7, #12]
 801238a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801238c:	2b00      	cmp	r3, #0
 801238e:	d10a      	bne.n	80123a6 <tcp_write+0x6ae>
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012394:	2b00      	cmp	r3, #0
 8012396:	d106      	bne.n	80123a6 <tcp_write+0x6ae>
 8012398:	4b06      	ldr	r3, [pc, #24]	@ (80123b4 <tcp_write+0x6bc>)
 801239a:	f240 3227 	movw	r2, #807	@ 0x327
 801239e:	4906      	ldr	r1, [pc, #24]	@ (80123b8 <tcp_write+0x6c0>)
 80123a0:	4806      	ldr	r0, [pc, #24]	@ (80123bc <tcp_write+0x6c4>)
 80123a2:	f006 fccf 	bl	8018d44 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80123a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80123aa:	4618      	mov	r0, r3
 80123ac:	375c      	adds	r7, #92	@ 0x5c
 80123ae:	46bd      	mov	sp, r7
 80123b0:	bd90      	pop	{r4, r7, pc}
 80123b2:	bf00      	nop
 80123b4:	0801c660 	.word	0x0801c660
 80123b8:	0801c9d4 	.word	0x0801c9d4
 80123bc:	0801c6b4 	.word	0x0801c6b4

080123c0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80123c0:	b590      	push	{r4, r7, lr}
 80123c2:	b08b      	sub	sp, #44	@ 0x2c
 80123c4:	af02      	add	r7, sp, #8
 80123c6:	6078      	str	r0, [r7, #4]
 80123c8:	460b      	mov	r3, r1
 80123ca:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80123cc:	2300      	movs	r3, #0
 80123ce:	61fb      	str	r3, [r7, #28]
 80123d0:	2300      	movs	r3, #0
 80123d2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80123d4:	2300      	movs	r3, #0
 80123d6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d106      	bne.n	80123ec <tcp_split_unsent_seg+0x2c>
 80123de:	4b95      	ldr	r3, [pc, #596]	@ (8012634 <tcp_split_unsent_seg+0x274>)
 80123e0:	f240 324b 	movw	r2, #843	@ 0x34b
 80123e4:	4994      	ldr	r1, [pc, #592]	@ (8012638 <tcp_split_unsent_seg+0x278>)
 80123e6:	4895      	ldr	r0, [pc, #596]	@ (801263c <tcp_split_unsent_seg+0x27c>)
 80123e8:	f006 fcac 	bl	8018d44 <iprintf>

  useg = pcb->unsent;
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80123f0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80123f2:	697b      	ldr	r3, [r7, #20]
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d102      	bne.n	80123fe <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80123f8:	f04f 33ff 	mov.w	r3, #4294967295
 80123fc:	e116      	b.n	801262c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80123fe:	887b      	ldrh	r3, [r7, #2]
 8012400:	2b00      	cmp	r3, #0
 8012402:	d109      	bne.n	8012418 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8012404:	4b8b      	ldr	r3, [pc, #556]	@ (8012634 <tcp_split_unsent_seg+0x274>)
 8012406:	f240 3253 	movw	r2, #851	@ 0x353
 801240a:	498d      	ldr	r1, [pc, #564]	@ (8012640 <tcp_split_unsent_seg+0x280>)
 801240c:	488b      	ldr	r0, [pc, #556]	@ (801263c <tcp_split_unsent_seg+0x27c>)
 801240e:	f006 fc99 	bl	8018d44 <iprintf>
    return ERR_VAL;
 8012412:	f06f 0305 	mvn.w	r3, #5
 8012416:	e109      	b.n	801262c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8012418:	697b      	ldr	r3, [r7, #20]
 801241a:	891b      	ldrh	r3, [r3, #8]
 801241c:	887a      	ldrh	r2, [r7, #2]
 801241e:	429a      	cmp	r2, r3
 8012420:	d301      	bcc.n	8012426 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8012422:	2300      	movs	r3, #0
 8012424:	e102      	b.n	801262c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801242a:	887a      	ldrh	r2, [r7, #2]
 801242c:	429a      	cmp	r2, r3
 801242e:	d906      	bls.n	801243e <tcp_split_unsent_seg+0x7e>
 8012430:	4b80      	ldr	r3, [pc, #512]	@ (8012634 <tcp_split_unsent_seg+0x274>)
 8012432:	f240 325b 	movw	r2, #859	@ 0x35b
 8012436:	4983      	ldr	r1, [pc, #524]	@ (8012644 <tcp_split_unsent_seg+0x284>)
 8012438:	4880      	ldr	r0, [pc, #512]	@ (801263c <tcp_split_unsent_seg+0x27c>)
 801243a:	f006 fc83 	bl	8018d44 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801243e:	697b      	ldr	r3, [r7, #20]
 8012440:	891b      	ldrh	r3, [r3, #8]
 8012442:	2b00      	cmp	r3, #0
 8012444:	d106      	bne.n	8012454 <tcp_split_unsent_seg+0x94>
 8012446:	4b7b      	ldr	r3, [pc, #492]	@ (8012634 <tcp_split_unsent_seg+0x274>)
 8012448:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 801244c:	497e      	ldr	r1, [pc, #504]	@ (8012648 <tcp_split_unsent_seg+0x288>)
 801244e:	487b      	ldr	r0, [pc, #492]	@ (801263c <tcp_split_unsent_seg+0x27c>)
 8012450:	f006 fc78 	bl	8018d44 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8012454:	697b      	ldr	r3, [r7, #20]
 8012456:	7a9b      	ldrb	r3, [r3, #10]
 8012458:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801245a:	7bfb      	ldrb	r3, [r7, #15]
 801245c:	009b      	lsls	r3, r3, #2
 801245e:	b2db      	uxtb	r3, r3
 8012460:	f003 0304 	and.w	r3, r3, #4
 8012464:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8012466:	697b      	ldr	r3, [r7, #20]
 8012468:	891a      	ldrh	r2, [r3, #8]
 801246a:	887b      	ldrh	r3, [r7, #2]
 801246c:	1ad3      	subs	r3, r2, r3
 801246e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8012470:	7bbb      	ldrb	r3, [r7, #14]
 8012472:	b29a      	uxth	r2, r3
 8012474:	89bb      	ldrh	r3, [r7, #12]
 8012476:	4413      	add	r3, r2
 8012478:	b29b      	uxth	r3, r3
 801247a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801247e:	4619      	mov	r1, r3
 8012480:	2036      	movs	r0, #54	@ 0x36
 8012482:	f7fa fa41 	bl	800c908 <pbuf_alloc>
 8012486:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012488:	693b      	ldr	r3, [r7, #16]
 801248a:	2b00      	cmp	r3, #0
 801248c:	f000 80b7 	beq.w	80125fe <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8012490:	697b      	ldr	r3, [r7, #20]
 8012492:	685b      	ldr	r3, [r3, #4]
 8012494:	891a      	ldrh	r2, [r3, #8]
 8012496:	697b      	ldr	r3, [r7, #20]
 8012498:	891b      	ldrh	r3, [r3, #8]
 801249a:	1ad3      	subs	r3, r2, r3
 801249c:	b29a      	uxth	r2, r3
 801249e:	887b      	ldrh	r3, [r7, #2]
 80124a0:	4413      	add	r3, r2
 80124a2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80124a4:	697b      	ldr	r3, [r7, #20]
 80124a6:	6858      	ldr	r0, [r3, #4]
 80124a8:	693b      	ldr	r3, [r7, #16]
 80124aa:	685a      	ldr	r2, [r3, #4]
 80124ac:	7bbb      	ldrb	r3, [r7, #14]
 80124ae:	18d1      	adds	r1, r2, r3
 80124b0:	897b      	ldrh	r3, [r7, #10]
 80124b2:	89ba      	ldrh	r2, [r7, #12]
 80124b4:	f7fa ff12 	bl	800d2dc <pbuf_copy_partial>
 80124b8:	4603      	mov	r3, r0
 80124ba:	461a      	mov	r2, r3
 80124bc:	89bb      	ldrh	r3, [r7, #12]
 80124be:	4293      	cmp	r3, r2
 80124c0:	f040 809f 	bne.w	8012602 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80124c4:	697b      	ldr	r3, [r7, #20]
 80124c6:	68db      	ldr	r3, [r3, #12]
 80124c8:	899b      	ldrh	r3, [r3, #12]
 80124ca:	b29b      	uxth	r3, r3
 80124cc:	4618      	mov	r0, r3
 80124ce:	f7f9 f8cb 	bl	800b668 <lwip_htons>
 80124d2:	4603      	mov	r3, r0
 80124d4:	b2db      	uxtb	r3, r3
 80124d6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80124da:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80124dc:	2300      	movs	r3, #0
 80124de:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80124e0:	7efb      	ldrb	r3, [r7, #27]
 80124e2:	f003 0308 	and.w	r3, r3, #8
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d007      	beq.n	80124fa <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80124ea:	7efb      	ldrb	r3, [r7, #27]
 80124ec:	f023 0308 	bic.w	r3, r3, #8
 80124f0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80124f2:	7ebb      	ldrb	r3, [r7, #26]
 80124f4:	f043 0308 	orr.w	r3, r3, #8
 80124f8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80124fa:	7efb      	ldrb	r3, [r7, #27]
 80124fc:	f003 0301 	and.w	r3, r3, #1
 8012500:	2b00      	cmp	r3, #0
 8012502:	d007      	beq.n	8012514 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8012504:	7efb      	ldrb	r3, [r7, #27]
 8012506:	f023 0301 	bic.w	r3, r3, #1
 801250a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801250c:	7ebb      	ldrb	r3, [r7, #26]
 801250e:	f043 0301 	orr.w	r3, r3, #1
 8012512:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8012514:	697b      	ldr	r3, [r7, #20]
 8012516:	68db      	ldr	r3, [r3, #12]
 8012518:	685b      	ldr	r3, [r3, #4]
 801251a:	4618      	mov	r0, r3
 801251c:	f7f9 f8b9 	bl	800b692 <lwip_htonl>
 8012520:	4602      	mov	r2, r0
 8012522:	887b      	ldrh	r3, [r7, #2]
 8012524:	18d1      	adds	r1, r2, r3
 8012526:	7eba      	ldrb	r2, [r7, #26]
 8012528:	7bfb      	ldrb	r3, [r7, #15]
 801252a:	9300      	str	r3, [sp, #0]
 801252c:	460b      	mov	r3, r1
 801252e:	6939      	ldr	r1, [r7, #16]
 8012530:	6878      	ldr	r0, [r7, #4]
 8012532:	f7ff fa51 	bl	80119d8 <tcp_create_segment>
 8012536:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8012538:	69fb      	ldr	r3, [r7, #28]
 801253a:	2b00      	cmp	r3, #0
 801253c:	d063      	beq.n	8012606 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801253e:	697b      	ldr	r3, [r7, #20]
 8012540:	685b      	ldr	r3, [r3, #4]
 8012542:	4618      	mov	r0, r3
 8012544:	f7fa fd52 	bl	800cfec <pbuf_clen>
 8012548:	4603      	mov	r3, r0
 801254a:	461a      	mov	r2, r3
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012552:	1a9b      	subs	r3, r3, r2
 8012554:	b29a      	uxth	r2, r3
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801255c:	697b      	ldr	r3, [r7, #20]
 801255e:	6858      	ldr	r0, [r3, #4]
 8012560:	697b      	ldr	r3, [r7, #20]
 8012562:	685b      	ldr	r3, [r3, #4]
 8012564:	891a      	ldrh	r2, [r3, #8]
 8012566:	89bb      	ldrh	r3, [r7, #12]
 8012568:	1ad3      	subs	r3, r2, r3
 801256a:	b29b      	uxth	r3, r3
 801256c:	4619      	mov	r1, r3
 801256e:	f7fa fb29 	bl	800cbc4 <pbuf_realloc>
  useg->len -= remainder;
 8012572:	697b      	ldr	r3, [r7, #20]
 8012574:	891a      	ldrh	r2, [r3, #8]
 8012576:	89bb      	ldrh	r3, [r7, #12]
 8012578:	1ad3      	subs	r3, r2, r3
 801257a:	b29a      	uxth	r2, r3
 801257c:	697b      	ldr	r3, [r7, #20]
 801257e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8012580:	697b      	ldr	r3, [r7, #20]
 8012582:	68db      	ldr	r3, [r3, #12]
 8012584:	899b      	ldrh	r3, [r3, #12]
 8012586:	b29c      	uxth	r4, r3
 8012588:	7efb      	ldrb	r3, [r7, #27]
 801258a:	b29b      	uxth	r3, r3
 801258c:	4618      	mov	r0, r3
 801258e:	f7f9 f86b 	bl	800b668 <lwip_htons>
 8012592:	4603      	mov	r3, r0
 8012594:	461a      	mov	r2, r3
 8012596:	697b      	ldr	r3, [r7, #20]
 8012598:	68db      	ldr	r3, [r3, #12]
 801259a:	4322      	orrs	r2, r4
 801259c:	b292      	uxth	r2, r2
 801259e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80125a0:	697b      	ldr	r3, [r7, #20]
 80125a2:	685b      	ldr	r3, [r3, #4]
 80125a4:	4618      	mov	r0, r3
 80125a6:	f7fa fd21 	bl	800cfec <pbuf_clen>
 80125aa:	4603      	mov	r3, r0
 80125ac:	461a      	mov	r2, r3
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80125b4:	4413      	add	r3, r2
 80125b6:	b29a      	uxth	r2, r3
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80125be:	69fb      	ldr	r3, [r7, #28]
 80125c0:	685b      	ldr	r3, [r3, #4]
 80125c2:	4618      	mov	r0, r3
 80125c4:	f7fa fd12 	bl	800cfec <pbuf_clen>
 80125c8:	4603      	mov	r3, r0
 80125ca:	461a      	mov	r2, r3
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80125d2:	4413      	add	r3, r2
 80125d4:	b29a      	uxth	r2, r3
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80125dc:	697b      	ldr	r3, [r7, #20]
 80125de:	681a      	ldr	r2, [r3, #0]
 80125e0:	69fb      	ldr	r3, [r7, #28]
 80125e2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80125e4:	697b      	ldr	r3, [r7, #20]
 80125e6:	69fa      	ldr	r2, [r7, #28]
 80125e8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80125ea:	69fb      	ldr	r3, [r7, #28]
 80125ec:	681b      	ldr	r3, [r3, #0]
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d103      	bne.n	80125fa <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	2200      	movs	r2, #0
 80125f6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80125fa:	2300      	movs	r3, #0
 80125fc:	e016      	b.n	801262c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80125fe:	bf00      	nop
 8012600:	e002      	b.n	8012608 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012602:	bf00      	nop
 8012604:	e000      	b.n	8012608 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012606:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8012608:	69fb      	ldr	r3, [r7, #28]
 801260a:	2b00      	cmp	r3, #0
 801260c:	d006      	beq.n	801261c <tcp_split_unsent_seg+0x25c>
 801260e:	4b09      	ldr	r3, [pc, #36]	@ (8012634 <tcp_split_unsent_seg+0x274>)
 8012610:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8012614:	490d      	ldr	r1, [pc, #52]	@ (801264c <tcp_split_unsent_seg+0x28c>)
 8012616:	4809      	ldr	r0, [pc, #36]	@ (801263c <tcp_split_unsent_seg+0x27c>)
 8012618:	f006 fb94 	bl	8018d44 <iprintf>
  if (p != NULL) {
 801261c:	693b      	ldr	r3, [r7, #16]
 801261e:	2b00      	cmp	r3, #0
 8012620:	d002      	beq.n	8012628 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8012622:	6938      	ldr	r0, [r7, #16]
 8012624:	f7fa fc54 	bl	800ced0 <pbuf_free>
  }

  return ERR_MEM;
 8012628:	f04f 33ff 	mov.w	r3, #4294967295
}
 801262c:	4618      	mov	r0, r3
 801262e:	3724      	adds	r7, #36	@ 0x24
 8012630:	46bd      	mov	sp, r7
 8012632:	bd90      	pop	{r4, r7, pc}
 8012634:	0801c660 	.word	0x0801c660
 8012638:	0801c9f4 	.word	0x0801c9f4
 801263c:	0801c6b4 	.word	0x0801c6b4
 8012640:	0801ca18 	.word	0x0801ca18
 8012644:	0801ca3c 	.word	0x0801ca3c
 8012648:	0801ca4c 	.word	0x0801ca4c
 801264c:	0801ca5c 	.word	0x0801ca5c

08012650 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8012650:	b590      	push	{r4, r7, lr}
 8012652:	b085      	sub	sp, #20
 8012654:	af00      	add	r7, sp, #0
 8012656:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	2b00      	cmp	r3, #0
 801265c:	d106      	bne.n	801266c <tcp_send_fin+0x1c>
 801265e:	4b21      	ldr	r3, [pc, #132]	@ (80126e4 <tcp_send_fin+0x94>)
 8012660:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8012664:	4920      	ldr	r1, [pc, #128]	@ (80126e8 <tcp_send_fin+0x98>)
 8012666:	4821      	ldr	r0, [pc, #132]	@ (80126ec <tcp_send_fin+0x9c>)
 8012668:	f006 fb6c 	bl	8018d44 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012670:	2b00      	cmp	r3, #0
 8012672:	d02e      	beq.n	80126d2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012678:	60fb      	str	r3, [r7, #12]
 801267a:	e002      	b.n	8012682 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801267c:	68fb      	ldr	r3, [r7, #12]
 801267e:	681b      	ldr	r3, [r3, #0]
 8012680:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012682:	68fb      	ldr	r3, [r7, #12]
 8012684:	681b      	ldr	r3, [r3, #0]
 8012686:	2b00      	cmp	r3, #0
 8012688:	d1f8      	bne.n	801267c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801268a:	68fb      	ldr	r3, [r7, #12]
 801268c:	68db      	ldr	r3, [r3, #12]
 801268e:	899b      	ldrh	r3, [r3, #12]
 8012690:	b29b      	uxth	r3, r3
 8012692:	4618      	mov	r0, r3
 8012694:	f7f8 ffe8 	bl	800b668 <lwip_htons>
 8012698:	4603      	mov	r3, r0
 801269a:	b2db      	uxtb	r3, r3
 801269c:	f003 0307 	and.w	r3, r3, #7
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	d116      	bne.n	80126d2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80126a4:	68fb      	ldr	r3, [r7, #12]
 80126a6:	68db      	ldr	r3, [r3, #12]
 80126a8:	899b      	ldrh	r3, [r3, #12]
 80126aa:	b29c      	uxth	r4, r3
 80126ac:	2001      	movs	r0, #1
 80126ae:	f7f8 ffdb 	bl	800b668 <lwip_htons>
 80126b2:	4603      	mov	r3, r0
 80126b4:	461a      	mov	r2, r3
 80126b6:	68fb      	ldr	r3, [r7, #12]
 80126b8:	68db      	ldr	r3, [r3, #12]
 80126ba:	4322      	orrs	r2, r4
 80126bc:	b292      	uxth	r2, r2
 80126be:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	8b5b      	ldrh	r3, [r3, #26]
 80126c4:	f043 0320 	orr.w	r3, r3, #32
 80126c8:	b29a      	uxth	r2, r3
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80126ce:	2300      	movs	r3, #0
 80126d0:	e004      	b.n	80126dc <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80126d2:	2101      	movs	r1, #1
 80126d4:	6878      	ldr	r0, [r7, #4]
 80126d6:	f000 f80b 	bl	80126f0 <tcp_enqueue_flags>
 80126da:	4603      	mov	r3, r0
}
 80126dc:	4618      	mov	r0, r3
 80126de:	3714      	adds	r7, #20
 80126e0:	46bd      	mov	sp, r7
 80126e2:	bd90      	pop	{r4, r7, pc}
 80126e4:	0801c660 	.word	0x0801c660
 80126e8:	0801ca68 	.word	0x0801ca68
 80126ec:	0801c6b4 	.word	0x0801c6b4

080126f0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80126f0:	b580      	push	{r7, lr}
 80126f2:	b08a      	sub	sp, #40	@ 0x28
 80126f4:	af02      	add	r7, sp, #8
 80126f6:	6078      	str	r0, [r7, #4]
 80126f8:	460b      	mov	r3, r1
 80126fa:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80126fc:	2300      	movs	r3, #0
 80126fe:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8012700:	2300      	movs	r3, #0
 8012702:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8012704:	78fb      	ldrb	r3, [r7, #3]
 8012706:	f003 0303 	and.w	r3, r3, #3
 801270a:	2b00      	cmp	r3, #0
 801270c:	d106      	bne.n	801271c <tcp_enqueue_flags+0x2c>
 801270e:	4b67      	ldr	r3, [pc, #412]	@ (80128ac <tcp_enqueue_flags+0x1bc>)
 8012710:	f240 4211 	movw	r2, #1041	@ 0x411
 8012714:	4966      	ldr	r1, [pc, #408]	@ (80128b0 <tcp_enqueue_flags+0x1c0>)
 8012716:	4867      	ldr	r0, [pc, #412]	@ (80128b4 <tcp_enqueue_flags+0x1c4>)
 8012718:	f006 fb14 	bl	8018d44 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	2b00      	cmp	r3, #0
 8012720:	d106      	bne.n	8012730 <tcp_enqueue_flags+0x40>
 8012722:	4b62      	ldr	r3, [pc, #392]	@ (80128ac <tcp_enqueue_flags+0x1bc>)
 8012724:	f240 4213 	movw	r2, #1043	@ 0x413
 8012728:	4963      	ldr	r1, [pc, #396]	@ (80128b8 <tcp_enqueue_flags+0x1c8>)
 801272a:	4862      	ldr	r0, [pc, #392]	@ (80128b4 <tcp_enqueue_flags+0x1c4>)
 801272c:	f006 fb0a 	bl	8018d44 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8012730:	78fb      	ldrb	r3, [r7, #3]
 8012732:	f003 0302 	and.w	r3, r3, #2
 8012736:	2b00      	cmp	r3, #0
 8012738:	d001      	beq.n	801273e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801273a:	2301      	movs	r3, #1
 801273c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801273e:	7ffb      	ldrb	r3, [r7, #31]
 8012740:	009b      	lsls	r3, r3, #2
 8012742:	b2db      	uxtb	r3, r3
 8012744:	f003 0304 	and.w	r3, r3, #4
 8012748:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801274a:	7dfb      	ldrb	r3, [r7, #23]
 801274c:	b29b      	uxth	r3, r3
 801274e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012752:	4619      	mov	r1, r3
 8012754:	2036      	movs	r0, #54	@ 0x36
 8012756:	f7fa f8d7 	bl	800c908 <pbuf_alloc>
 801275a:	6138      	str	r0, [r7, #16]
 801275c:	693b      	ldr	r3, [r7, #16]
 801275e:	2b00      	cmp	r3, #0
 8012760:	d109      	bne.n	8012776 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	8b5b      	ldrh	r3, [r3, #26]
 8012766:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801276a:	b29a      	uxth	r2, r3
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012770:	f04f 33ff 	mov.w	r3, #4294967295
 8012774:	e095      	b.n	80128a2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8012776:	693b      	ldr	r3, [r7, #16]
 8012778:	895a      	ldrh	r2, [r3, #10]
 801277a:	7dfb      	ldrb	r3, [r7, #23]
 801277c:	b29b      	uxth	r3, r3
 801277e:	429a      	cmp	r2, r3
 8012780:	d206      	bcs.n	8012790 <tcp_enqueue_flags+0xa0>
 8012782:	4b4a      	ldr	r3, [pc, #296]	@ (80128ac <tcp_enqueue_flags+0x1bc>)
 8012784:	f240 4239 	movw	r2, #1081	@ 0x439
 8012788:	494c      	ldr	r1, [pc, #304]	@ (80128bc <tcp_enqueue_flags+0x1cc>)
 801278a:	484a      	ldr	r0, [pc, #296]	@ (80128b4 <tcp_enqueue_flags+0x1c4>)
 801278c:	f006 fada 	bl	8018d44 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8012794:	78fa      	ldrb	r2, [r7, #3]
 8012796:	7ffb      	ldrb	r3, [r7, #31]
 8012798:	9300      	str	r3, [sp, #0]
 801279a:	460b      	mov	r3, r1
 801279c:	6939      	ldr	r1, [r7, #16]
 801279e:	6878      	ldr	r0, [r7, #4]
 80127a0:	f7ff f91a 	bl	80119d8 <tcp_create_segment>
 80127a4:	60f8      	str	r0, [r7, #12]
 80127a6:	68fb      	ldr	r3, [r7, #12]
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d109      	bne.n	80127c0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	8b5b      	ldrh	r3, [r3, #26]
 80127b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80127b4:	b29a      	uxth	r2, r3
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80127ba:	f04f 33ff 	mov.w	r3, #4294967295
 80127be:	e070      	b.n	80128a2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80127c0:	68fb      	ldr	r3, [r7, #12]
 80127c2:	68db      	ldr	r3, [r3, #12]
 80127c4:	f003 0303 	and.w	r3, r3, #3
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d006      	beq.n	80127da <tcp_enqueue_flags+0xea>
 80127cc:	4b37      	ldr	r3, [pc, #220]	@ (80128ac <tcp_enqueue_flags+0x1bc>)
 80127ce:	f240 4242 	movw	r2, #1090	@ 0x442
 80127d2:	493b      	ldr	r1, [pc, #236]	@ (80128c0 <tcp_enqueue_flags+0x1d0>)
 80127d4:	4837      	ldr	r0, [pc, #220]	@ (80128b4 <tcp_enqueue_flags+0x1c4>)
 80127d6:	f006 fab5 	bl	8018d44 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80127da:	68fb      	ldr	r3, [r7, #12]
 80127dc:	891b      	ldrh	r3, [r3, #8]
 80127de:	2b00      	cmp	r3, #0
 80127e0:	d006      	beq.n	80127f0 <tcp_enqueue_flags+0x100>
 80127e2:	4b32      	ldr	r3, [pc, #200]	@ (80128ac <tcp_enqueue_flags+0x1bc>)
 80127e4:	f240 4243 	movw	r2, #1091	@ 0x443
 80127e8:	4936      	ldr	r1, [pc, #216]	@ (80128c4 <tcp_enqueue_flags+0x1d4>)
 80127ea:	4832      	ldr	r0, [pc, #200]	@ (80128b4 <tcp_enqueue_flags+0x1c4>)
 80127ec:	f006 faaa 	bl	8018d44 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	d103      	bne.n	8012800 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	68fa      	ldr	r2, [r7, #12]
 80127fc:	66da      	str	r2, [r3, #108]	@ 0x6c
 80127fe:	e00d      	b.n	801281c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012804:	61bb      	str	r3, [r7, #24]
 8012806:	e002      	b.n	801280e <tcp_enqueue_flags+0x11e>
 8012808:	69bb      	ldr	r3, [r7, #24]
 801280a:	681b      	ldr	r3, [r3, #0]
 801280c:	61bb      	str	r3, [r7, #24]
 801280e:	69bb      	ldr	r3, [r7, #24]
 8012810:	681b      	ldr	r3, [r3, #0]
 8012812:	2b00      	cmp	r3, #0
 8012814:	d1f8      	bne.n	8012808 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8012816:	69bb      	ldr	r3, [r7, #24]
 8012818:	68fa      	ldr	r2, [r7, #12]
 801281a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	2200      	movs	r2, #0
 8012820:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8012824:	78fb      	ldrb	r3, [r7, #3]
 8012826:	f003 0302 	and.w	r3, r3, #2
 801282a:	2b00      	cmp	r3, #0
 801282c:	d104      	bne.n	8012838 <tcp_enqueue_flags+0x148>
 801282e:	78fb      	ldrb	r3, [r7, #3]
 8012830:	f003 0301 	and.w	r3, r3, #1
 8012834:	2b00      	cmp	r3, #0
 8012836:	d004      	beq.n	8012842 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801283c:	1c5a      	adds	r2, r3, #1
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8012842:	78fb      	ldrb	r3, [r7, #3]
 8012844:	f003 0301 	and.w	r3, r3, #1
 8012848:	2b00      	cmp	r3, #0
 801284a:	d006      	beq.n	801285a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	8b5b      	ldrh	r3, [r3, #26]
 8012850:	f043 0320 	orr.w	r3, r3, #32
 8012854:	b29a      	uxth	r2, r3
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801285a:	68fb      	ldr	r3, [r7, #12]
 801285c:	685b      	ldr	r3, [r3, #4]
 801285e:	4618      	mov	r0, r3
 8012860:	f7fa fbc4 	bl	800cfec <pbuf_clen>
 8012864:	4603      	mov	r3, r0
 8012866:	461a      	mov	r2, r3
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801286e:	4413      	add	r3, r2
 8012870:	b29a      	uxth	r2, r3
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801287e:	2b00      	cmp	r3, #0
 8012880:	d00e      	beq.n	80128a0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012886:	2b00      	cmp	r3, #0
 8012888:	d10a      	bne.n	80128a0 <tcp_enqueue_flags+0x1b0>
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801288e:	2b00      	cmp	r3, #0
 8012890:	d106      	bne.n	80128a0 <tcp_enqueue_flags+0x1b0>
 8012892:	4b06      	ldr	r3, [pc, #24]	@ (80128ac <tcp_enqueue_flags+0x1bc>)
 8012894:	f240 4265 	movw	r2, #1125	@ 0x465
 8012898:	490b      	ldr	r1, [pc, #44]	@ (80128c8 <tcp_enqueue_flags+0x1d8>)
 801289a:	4806      	ldr	r0, [pc, #24]	@ (80128b4 <tcp_enqueue_flags+0x1c4>)
 801289c:	f006 fa52 	bl	8018d44 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80128a0:	2300      	movs	r3, #0
}
 80128a2:	4618      	mov	r0, r3
 80128a4:	3720      	adds	r7, #32
 80128a6:	46bd      	mov	sp, r7
 80128a8:	bd80      	pop	{r7, pc}
 80128aa:	bf00      	nop
 80128ac:	0801c660 	.word	0x0801c660
 80128b0:	0801ca84 	.word	0x0801ca84
 80128b4:	0801c6b4 	.word	0x0801c6b4
 80128b8:	0801cadc 	.word	0x0801cadc
 80128bc:	0801cafc 	.word	0x0801cafc
 80128c0:	0801cb38 	.word	0x0801cb38
 80128c4:	0801cb50 	.word	0x0801cb50
 80128c8:	0801cb7c 	.word	0x0801cb7c

080128cc <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80128cc:	b5b0      	push	{r4, r5, r7, lr}
 80128ce:	b08a      	sub	sp, #40	@ 0x28
 80128d0:	af00      	add	r7, sp, #0
 80128d2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	d106      	bne.n	80128e8 <tcp_output+0x1c>
 80128da:	4b8a      	ldr	r3, [pc, #552]	@ (8012b04 <tcp_output+0x238>)
 80128dc:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 80128e0:	4989      	ldr	r1, [pc, #548]	@ (8012b08 <tcp_output+0x23c>)
 80128e2:	488a      	ldr	r0, [pc, #552]	@ (8012b0c <tcp_output+0x240>)
 80128e4:	f006 fa2e 	bl	8018d44 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	7d1b      	ldrb	r3, [r3, #20]
 80128ec:	2b01      	cmp	r3, #1
 80128ee:	d106      	bne.n	80128fe <tcp_output+0x32>
 80128f0:	4b84      	ldr	r3, [pc, #528]	@ (8012b04 <tcp_output+0x238>)
 80128f2:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 80128f6:	4986      	ldr	r1, [pc, #536]	@ (8012b10 <tcp_output+0x244>)
 80128f8:	4884      	ldr	r0, [pc, #528]	@ (8012b0c <tcp_output+0x240>)
 80128fa:	f006 fa23 	bl	8018d44 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80128fe:	4b85      	ldr	r3, [pc, #532]	@ (8012b14 <tcp_output+0x248>)
 8012900:	681b      	ldr	r3, [r3, #0]
 8012902:	687a      	ldr	r2, [r7, #4]
 8012904:	429a      	cmp	r2, r3
 8012906:	d101      	bne.n	801290c <tcp_output+0x40>
    return ERR_OK;
 8012908:	2300      	movs	r3, #0
 801290a:	e1ce      	b.n	8012caa <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012918:	4293      	cmp	r3, r2
 801291a:	bf28      	it	cs
 801291c:	4613      	movcs	r3, r2
 801291e:	b29b      	uxth	r3, r3
 8012920:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012926:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8012928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801292a:	2b00      	cmp	r3, #0
 801292c:	d10b      	bne.n	8012946 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	8b5b      	ldrh	r3, [r3, #26]
 8012932:	f003 0302 	and.w	r3, r3, #2
 8012936:	2b00      	cmp	r3, #0
 8012938:	f000 81aa 	beq.w	8012c90 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801293c:	6878      	ldr	r0, [r7, #4]
 801293e:	f000 fdcb 	bl	80134d8 <tcp_send_empty_ack>
 8012942:	4603      	mov	r3, r0
 8012944:	e1b1      	b.n	8012caa <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8012946:	6879      	ldr	r1, [r7, #4]
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	3304      	adds	r3, #4
 801294c:	461a      	mov	r2, r3
 801294e:	6878      	ldr	r0, [r7, #4]
 8012950:	f7ff f826 	bl	80119a0 <tcp_route>
 8012954:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8012956:	697b      	ldr	r3, [r7, #20]
 8012958:	2b00      	cmp	r3, #0
 801295a:	d102      	bne.n	8012962 <tcp_output+0x96>
    return ERR_RTE;
 801295c:	f06f 0303 	mvn.w	r3, #3
 8012960:	e1a3      	b.n	8012caa <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	2b00      	cmp	r3, #0
 8012966:	d003      	beq.n	8012970 <tcp_output+0xa4>
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	681b      	ldr	r3, [r3, #0]
 801296c:	2b00      	cmp	r3, #0
 801296e:	d111      	bne.n	8012994 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8012970:	697b      	ldr	r3, [r7, #20]
 8012972:	2b00      	cmp	r3, #0
 8012974:	d002      	beq.n	801297c <tcp_output+0xb0>
 8012976:	697b      	ldr	r3, [r7, #20]
 8012978:	3304      	adds	r3, #4
 801297a:	e000      	b.n	801297e <tcp_output+0xb2>
 801297c:	2300      	movs	r3, #0
 801297e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8012980:	693b      	ldr	r3, [r7, #16]
 8012982:	2b00      	cmp	r3, #0
 8012984:	d102      	bne.n	801298c <tcp_output+0xc0>
      return ERR_RTE;
 8012986:	f06f 0303 	mvn.w	r3, #3
 801298a:	e18e      	b.n	8012caa <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801298c:	693b      	ldr	r3, [r7, #16]
 801298e:	681a      	ldr	r2, [r3, #0]
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8012994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012996:	68db      	ldr	r3, [r3, #12]
 8012998:	685b      	ldr	r3, [r3, #4]
 801299a:	4618      	mov	r0, r3
 801299c:	f7f8 fe79 	bl	800b692 <lwip_htonl>
 80129a0:	4602      	mov	r2, r0
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80129a6:	1ad3      	subs	r3, r2, r3
 80129a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80129aa:	8912      	ldrh	r2, [r2, #8]
 80129ac:	4413      	add	r3, r2
 80129ae:	69ba      	ldr	r2, [r7, #24]
 80129b0:	429a      	cmp	r2, r3
 80129b2:	d227      	bcs.n	8012a04 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80129ba:	461a      	mov	r2, r3
 80129bc:	69bb      	ldr	r3, [r7, #24]
 80129be:	4293      	cmp	r3, r2
 80129c0:	d114      	bne.n	80129ec <tcp_output+0x120>
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d110      	bne.n	80129ec <tcp_output+0x120>
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d10b      	bne.n	80129ec <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	2200      	movs	r2, #0
 80129d8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	2201      	movs	r2, #1
 80129e0:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	2200      	movs	r2, #0
 80129e8:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	8b5b      	ldrh	r3, [r3, #26]
 80129f0:	f003 0302 	and.w	r3, r3, #2
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	f000 814d 	beq.w	8012c94 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80129fa:	6878      	ldr	r0, [r7, #4]
 80129fc:	f000 fd6c 	bl	80134d8 <tcp_send_empty_ack>
 8012a00:	4603      	mov	r3, r0
 8012a02:	e152      	b.n	8012caa <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	2200      	movs	r2, #0
 8012a08:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012a10:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8012a12:	6a3b      	ldr	r3, [r7, #32]
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	f000 811c 	beq.w	8012c52 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8012a1a:	e002      	b.n	8012a22 <tcp_output+0x156>
 8012a1c:	6a3b      	ldr	r3, [r7, #32]
 8012a1e:	681b      	ldr	r3, [r3, #0]
 8012a20:	623b      	str	r3, [r7, #32]
 8012a22:	6a3b      	ldr	r3, [r7, #32]
 8012a24:	681b      	ldr	r3, [r3, #0]
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	d1f8      	bne.n	8012a1c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8012a2a:	e112      	b.n	8012c52 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8012a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a2e:	68db      	ldr	r3, [r3, #12]
 8012a30:	899b      	ldrh	r3, [r3, #12]
 8012a32:	b29b      	uxth	r3, r3
 8012a34:	4618      	mov	r0, r3
 8012a36:	f7f8 fe17 	bl	800b668 <lwip_htons>
 8012a3a:	4603      	mov	r3, r0
 8012a3c:	b2db      	uxtb	r3, r3
 8012a3e:	f003 0304 	and.w	r3, r3, #4
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d006      	beq.n	8012a54 <tcp_output+0x188>
 8012a46:	4b2f      	ldr	r3, [pc, #188]	@ (8012b04 <tcp_output+0x238>)
 8012a48:	f240 5236 	movw	r2, #1334	@ 0x536
 8012a4c:	4932      	ldr	r1, [pc, #200]	@ (8012b18 <tcp_output+0x24c>)
 8012a4e:	482f      	ldr	r0, [pc, #188]	@ (8012b0c <tcp_output+0x240>)
 8012a50:	f006 f978 	bl	8018d44 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d01f      	beq.n	8012a9c <tcp_output+0x1d0>
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	8b5b      	ldrh	r3, [r3, #26]
 8012a60:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d119      	bne.n	8012a9c <tcp_output+0x1d0>
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012a6c:	2b00      	cmp	r3, #0
 8012a6e:	d00b      	beq.n	8012a88 <tcp_output+0x1bc>
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012a74:	681b      	ldr	r3, [r3, #0]
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	d110      	bne.n	8012a9c <tcp_output+0x1d0>
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012a7e:	891a      	ldrh	r2, [r3, #8]
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012a84:	429a      	cmp	r2, r3
 8012a86:	d209      	bcs.n	8012a9c <tcp_output+0x1d0>
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d004      	beq.n	8012a9c <tcp_output+0x1d0>
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012a98:	2b08      	cmp	r3, #8
 8012a9a:	d901      	bls.n	8012aa0 <tcp_output+0x1d4>
 8012a9c:	2301      	movs	r3, #1
 8012a9e:	e000      	b.n	8012aa2 <tcp_output+0x1d6>
 8012aa0:	2300      	movs	r3, #0
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	d106      	bne.n	8012ab4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	8b5b      	ldrh	r3, [r3, #26]
 8012aaa:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	f000 80e4 	beq.w	8012c7c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	7d1b      	ldrb	r3, [r3, #20]
 8012ab8:	2b02      	cmp	r3, #2
 8012aba:	d00d      	beq.n	8012ad8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8012abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012abe:	68db      	ldr	r3, [r3, #12]
 8012ac0:	899b      	ldrh	r3, [r3, #12]
 8012ac2:	b29c      	uxth	r4, r3
 8012ac4:	2010      	movs	r0, #16
 8012ac6:	f7f8 fdcf 	bl	800b668 <lwip_htons>
 8012aca:	4603      	mov	r3, r0
 8012acc:	461a      	mov	r2, r3
 8012ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ad0:	68db      	ldr	r3, [r3, #12]
 8012ad2:	4322      	orrs	r2, r4
 8012ad4:	b292      	uxth	r2, r2
 8012ad6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8012ad8:	697a      	ldr	r2, [r7, #20]
 8012ada:	6879      	ldr	r1, [r7, #4]
 8012adc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012ade:	f000 f909 	bl	8012cf4 <tcp_output_segment>
 8012ae2:	4603      	mov	r3, r0
 8012ae4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8012ae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d016      	beq.n	8012b1c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	8b5b      	ldrh	r3, [r3, #26]
 8012af2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012af6:	b29a      	uxth	r2, r3
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	835a      	strh	r2, [r3, #26]
      return err;
 8012afc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012b00:	e0d3      	b.n	8012caa <tcp_output+0x3de>
 8012b02:	bf00      	nop
 8012b04:	0801c660 	.word	0x0801c660
 8012b08:	0801cba4 	.word	0x0801cba4
 8012b0c:	0801c6b4 	.word	0x0801c6b4
 8012b10:	0801cbbc 	.word	0x0801cbbc
 8012b14:	20010ec0 	.word	0x20010ec0
 8012b18:	0801cbe4 	.word	0x0801cbe4
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8012b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b1e:	681a      	ldr	r2, [r3, #0]
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	7d1b      	ldrb	r3, [r3, #20]
 8012b28:	2b02      	cmp	r3, #2
 8012b2a:	d006      	beq.n	8012b3a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	8b5b      	ldrh	r3, [r3, #26]
 8012b30:	f023 0303 	bic.w	r3, r3, #3
 8012b34:	b29a      	uxth	r2, r3
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b3c:	68db      	ldr	r3, [r3, #12]
 8012b3e:	685b      	ldr	r3, [r3, #4]
 8012b40:	4618      	mov	r0, r3
 8012b42:	f7f8 fda6 	bl	800b692 <lwip_htonl>
 8012b46:	4604      	mov	r4, r0
 8012b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b4a:	891b      	ldrh	r3, [r3, #8]
 8012b4c:	461d      	mov	r5, r3
 8012b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b50:	68db      	ldr	r3, [r3, #12]
 8012b52:	899b      	ldrh	r3, [r3, #12]
 8012b54:	b29b      	uxth	r3, r3
 8012b56:	4618      	mov	r0, r3
 8012b58:	f7f8 fd86 	bl	800b668 <lwip_htons>
 8012b5c:	4603      	mov	r3, r0
 8012b5e:	b2db      	uxtb	r3, r3
 8012b60:	f003 0303 	and.w	r3, r3, #3
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d001      	beq.n	8012b6c <tcp_output+0x2a0>
 8012b68:	2301      	movs	r3, #1
 8012b6a:	e000      	b.n	8012b6e <tcp_output+0x2a2>
 8012b6c:	2300      	movs	r3, #0
 8012b6e:	442b      	add	r3, r5
 8012b70:	4423      	add	r3, r4
 8012b72:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012b78:	68bb      	ldr	r3, [r7, #8]
 8012b7a:	1ad3      	subs	r3, r2, r3
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	da02      	bge.n	8012b86 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	68ba      	ldr	r2, [r7, #8]
 8012b84:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8012b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b88:	891b      	ldrh	r3, [r3, #8]
 8012b8a:	461c      	mov	r4, r3
 8012b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b8e:	68db      	ldr	r3, [r3, #12]
 8012b90:	899b      	ldrh	r3, [r3, #12]
 8012b92:	b29b      	uxth	r3, r3
 8012b94:	4618      	mov	r0, r3
 8012b96:	f7f8 fd67 	bl	800b668 <lwip_htons>
 8012b9a:	4603      	mov	r3, r0
 8012b9c:	b2db      	uxtb	r3, r3
 8012b9e:	f003 0303 	and.w	r3, r3, #3
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	d001      	beq.n	8012baa <tcp_output+0x2de>
 8012ba6:	2301      	movs	r3, #1
 8012ba8:	e000      	b.n	8012bac <tcp_output+0x2e0>
 8012baa:	2300      	movs	r3, #0
 8012bac:	4423      	add	r3, r4
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	d049      	beq.n	8012c46 <tcp_output+0x37a>
      seg->next = NULL;
 8012bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012bb4:	2200      	movs	r2, #0
 8012bb6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d105      	bne.n	8012bcc <tcp_output+0x300>
        pcb->unacked = seg;
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012bc4:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8012bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012bc8:	623b      	str	r3, [r7, #32]
 8012bca:	e03f      	b.n	8012c4c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8012bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012bce:	68db      	ldr	r3, [r3, #12]
 8012bd0:	685b      	ldr	r3, [r3, #4]
 8012bd2:	4618      	mov	r0, r3
 8012bd4:	f7f8 fd5d 	bl	800b692 <lwip_htonl>
 8012bd8:	4604      	mov	r4, r0
 8012bda:	6a3b      	ldr	r3, [r7, #32]
 8012bdc:	68db      	ldr	r3, [r3, #12]
 8012bde:	685b      	ldr	r3, [r3, #4]
 8012be0:	4618      	mov	r0, r3
 8012be2:	f7f8 fd56 	bl	800b692 <lwip_htonl>
 8012be6:	4603      	mov	r3, r0
 8012be8:	1ae3      	subs	r3, r4, r3
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	da24      	bge.n	8012c38 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	3370      	adds	r3, #112	@ 0x70
 8012bf2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012bf4:	e002      	b.n	8012bfc <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8012bf6:	69fb      	ldr	r3, [r7, #28]
 8012bf8:	681b      	ldr	r3, [r3, #0]
 8012bfa:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012bfc:	69fb      	ldr	r3, [r7, #28]
 8012bfe:	681b      	ldr	r3, [r3, #0]
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d011      	beq.n	8012c28 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012c04:	69fb      	ldr	r3, [r7, #28]
 8012c06:	681b      	ldr	r3, [r3, #0]
 8012c08:	68db      	ldr	r3, [r3, #12]
 8012c0a:	685b      	ldr	r3, [r3, #4]
 8012c0c:	4618      	mov	r0, r3
 8012c0e:	f7f8 fd40 	bl	800b692 <lwip_htonl>
 8012c12:	4604      	mov	r4, r0
 8012c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c16:	68db      	ldr	r3, [r3, #12]
 8012c18:	685b      	ldr	r3, [r3, #4]
 8012c1a:	4618      	mov	r0, r3
 8012c1c:	f7f8 fd39 	bl	800b692 <lwip_htonl>
 8012c20:	4603      	mov	r3, r0
 8012c22:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	dbe6      	blt.n	8012bf6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8012c28:	69fb      	ldr	r3, [r7, #28]
 8012c2a:	681a      	ldr	r2, [r3, #0]
 8012c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c2e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8012c30:	69fb      	ldr	r3, [r7, #28]
 8012c32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012c34:	601a      	str	r2, [r3, #0]
 8012c36:	e009      	b.n	8012c4c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8012c38:	6a3b      	ldr	r3, [r7, #32]
 8012c3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012c3c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8012c3e:	6a3b      	ldr	r3, [r7, #32]
 8012c40:	681b      	ldr	r3, [r3, #0]
 8012c42:	623b      	str	r3, [r7, #32]
 8012c44:	e002      	b.n	8012c4c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8012c46:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012c48:	f7fb ff01 	bl	800ea4e <tcp_seg_free>
    }
    seg = pcb->unsent;
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012c50:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8012c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d012      	beq.n	8012c7e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8012c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c5a:	68db      	ldr	r3, [r3, #12]
 8012c5c:	685b      	ldr	r3, [r3, #4]
 8012c5e:	4618      	mov	r0, r3
 8012c60:	f7f8 fd17 	bl	800b692 <lwip_htonl>
 8012c64:	4602      	mov	r2, r0
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012c6a:	1ad3      	subs	r3, r2, r3
 8012c6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012c6e:	8912      	ldrh	r2, [r2, #8]
 8012c70:	4413      	add	r3, r2
  while (seg != NULL &&
 8012c72:	69ba      	ldr	r2, [r7, #24]
 8012c74:	429a      	cmp	r2, r3
 8012c76:	f4bf aed9 	bcs.w	8012a2c <tcp_output+0x160>
 8012c7a:	e000      	b.n	8012c7e <tcp_output+0x3b2>
      break;
 8012c7c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d108      	bne.n	8012c98 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	2200      	movs	r2, #0
 8012c8a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8012c8e:	e004      	b.n	8012c9a <tcp_output+0x3ce>
    goto output_done;
 8012c90:	bf00      	nop
 8012c92:	e002      	b.n	8012c9a <tcp_output+0x3ce>
    goto output_done;
 8012c94:	bf00      	nop
 8012c96:	e000      	b.n	8012c9a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8012c98:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	8b5b      	ldrh	r3, [r3, #26]
 8012c9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8012ca2:	b29a      	uxth	r2, r3
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8012ca8:	2300      	movs	r3, #0
}
 8012caa:	4618      	mov	r0, r3
 8012cac:	3728      	adds	r7, #40	@ 0x28
 8012cae:	46bd      	mov	sp, r7
 8012cb0:	bdb0      	pop	{r4, r5, r7, pc}
 8012cb2:	bf00      	nop

08012cb4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8012cb4:	b580      	push	{r7, lr}
 8012cb6:	b082      	sub	sp, #8
 8012cb8:	af00      	add	r7, sp, #0
 8012cba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d106      	bne.n	8012cd0 <tcp_output_segment_busy+0x1c>
 8012cc2:	4b09      	ldr	r3, [pc, #36]	@ (8012ce8 <tcp_output_segment_busy+0x34>)
 8012cc4:	f240 529a 	movw	r2, #1434	@ 0x59a
 8012cc8:	4908      	ldr	r1, [pc, #32]	@ (8012cec <tcp_output_segment_busy+0x38>)
 8012cca:	4809      	ldr	r0, [pc, #36]	@ (8012cf0 <tcp_output_segment_busy+0x3c>)
 8012ccc:	f006 f83a 	bl	8018d44 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	685b      	ldr	r3, [r3, #4]
 8012cd4:	7b9b      	ldrb	r3, [r3, #14]
 8012cd6:	2b01      	cmp	r3, #1
 8012cd8:	d001      	beq.n	8012cde <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8012cda:	2301      	movs	r3, #1
 8012cdc:	e000      	b.n	8012ce0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8012cde:	2300      	movs	r3, #0
}
 8012ce0:	4618      	mov	r0, r3
 8012ce2:	3708      	adds	r7, #8
 8012ce4:	46bd      	mov	sp, r7
 8012ce6:	bd80      	pop	{r7, pc}
 8012ce8:	0801c660 	.word	0x0801c660
 8012cec:	0801cbfc 	.word	0x0801cbfc
 8012cf0:	0801c6b4 	.word	0x0801c6b4

08012cf4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8012cf4:	b5b0      	push	{r4, r5, r7, lr}
 8012cf6:	b08c      	sub	sp, #48	@ 0x30
 8012cf8:	af04      	add	r7, sp, #16
 8012cfa:	60f8      	str	r0, [r7, #12]
 8012cfc:	60b9      	str	r1, [r7, #8]
 8012cfe:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8012d00:	68fb      	ldr	r3, [r7, #12]
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	d106      	bne.n	8012d14 <tcp_output_segment+0x20>
 8012d06:	4b64      	ldr	r3, [pc, #400]	@ (8012e98 <tcp_output_segment+0x1a4>)
 8012d08:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8012d0c:	4963      	ldr	r1, [pc, #396]	@ (8012e9c <tcp_output_segment+0x1a8>)
 8012d0e:	4864      	ldr	r0, [pc, #400]	@ (8012ea0 <tcp_output_segment+0x1ac>)
 8012d10:	f006 f818 	bl	8018d44 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8012d14:	68bb      	ldr	r3, [r7, #8]
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	d106      	bne.n	8012d28 <tcp_output_segment+0x34>
 8012d1a:	4b5f      	ldr	r3, [pc, #380]	@ (8012e98 <tcp_output_segment+0x1a4>)
 8012d1c:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8012d20:	4960      	ldr	r1, [pc, #384]	@ (8012ea4 <tcp_output_segment+0x1b0>)
 8012d22:	485f      	ldr	r0, [pc, #380]	@ (8012ea0 <tcp_output_segment+0x1ac>)
 8012d24:	f006 f80e 	bl	8018d44 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	d106      	bne.n	8012d3c <tcp_output_segment+0x48>
 8012d2e:	4b5a      	ldr	r3, [pc, #360]	@ (8012e98 <tcp_output_segment+0x1a4>)
 8012d30:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8012d34:	495c      	ldr	r1, [pc, #368]	@ (8012ea8 <tcp_output_segment+0x1b4>)
 8012d36:	485a      	ldr	r0, [pc, #360]	@ (8012ea0 <tcp_output_segment+0x1ac>)
 8012d38:	f006 f804 	bl	8018d44 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8012d3c:	68f8      	ldr	r0, [r7, #12]
 8012d3e:	f7ff ffb9 	bl	8012cb4 <tcp_output_segment_busy>
 8012d42:	4603      	mov	r3, r0
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	d001      	beq.n	8012d4c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8012d48:	2300      	movs	r3, #0
 8012d4a:	e0a1      	b.n	8012e90 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8012d4c:	68bb      	ldr	r3, [r7, #8]
 8012d4e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012d50:	68fb      	ldr	r3, [r7, #12]
 8012d52:	68dc      	ldr	r4, [r3, #12]
 8012d54:	4610      	mov	r0, r2
 8012d56:	f7f8 fc9c 	bl	800b692 <lwip_htonl>
 8012d5a:	4603      	mov	r3, r0
 8012d5c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8012d5e:	68bb      	ldr	r3, [r7, #8]
 8012d60:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8012d62:	68fb      	ldr	r3, [r7, #12]
 8012d64:	68dc      	ldr	r4, [r3, #12]
 8012d66:	4610      	mov	r0, r2
 8012d68:	f7f8 fc7e 	bl	800b668 <lwip_htons>
 8012d6c:	4603      	mov	r3, r0
 8012d6e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012d70:	68bb      	ldr	r3, [r7, #8]
 8012d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012d74:	68ba      	ldr	r2, [r7, #8]
 8012d76:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8012d78:	441a      	add	r2, r3
 8012d7a:	68bb      	ldr	r3, [r7, #8]
 8012d7c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8012d7e:	68fb      	ldr	r3, [r7, #12]
 8012d80:	68db      	ldr	r3, [r3, #12]
 8012d82:	3314      	adds	r3, #20
 8012d84:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8012d86:	68fb      	ldr	r3, [r7, #12]
 8012d88:	7a9b      	ldrb	r3, [r3, #10]
 8012d8a:	f003 0301 	and.w	r3, r3, #1
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	d015      	beq.n	8012dbe <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8012d92:	68bb      	ldr	r3, [r7, #8]
 8012d94:	3304      	adds	r3, #4
 8012d96:	461a      	mov	r2, r3
 8012d98:	6879      	ldr	r1, [r7, #4]
 8012d9a:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8012d9e:	f7fc fa39 	bl	800f214 <tcp_eff_send_mss_netif>
 8012da2:	4603      	mov	r3, r0
 8012da4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8012da6:	8b7b      	ldrh	r3, [r7, #26]
 8012da8:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8012dac:	4618      	mov	r0, r3
 8012dae:	f7f8 fc70 	bl	800b692 <lwip_htonl>
 8012db2:	4602      	mov	r2, r0
 8012db4:	69fb      	ldr	r3, [r7, #28]
 8012db6:	601a      	str	r2, [r3, #0]
    opts += 1;
 8012db8:	69fb      	ldr	r3, [r7, #28]
 8012dba:	3304      	adds	r3, #4
 8012dbc:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8012dbe:	68bb      	ldr	r3, [r7, #8]
 8012dc0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	da02      	bge.n	8012dce <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8012dc8:	68bb      	ldr	r3, [r7, #8]
 8012dca:	2200      	movs	r2, #0
 8012dcc:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8012dce:	68bb      	ldr	r3, [r7, #8]
 8012dd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	d10c      	bne.n	8012df0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8012dd6:	4b35      	ldr	r3, [pc, #212]	@ (8012eac <tcp_output_segment+0x1b8>)
 8012dd8:	681a      	ldr	r2, [r3, #0]
 8012dda:	68bb      	ldr	r3, [r7, #8]
 8012ddc:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8012dde:	68fb      	ldr	r3, [r7, #12]
 8012de0:	68db      	ldr	r3, [r3, #12]
 8012de2:	685b      	ldr	r3, [r3, #4]
 8012de4:	4618      	mov	r0, r3
 8012de6:	f7f8 fc54 	bl	800b692 <lwip_htonl>
 8012dea:	4602      	mov	r2, r0
 8012dec:	68bb      	ldr	r3, [r7, #8]
 8012dee:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8012df0:	68fb      	ldr	r3, [r7, #12]
 8012df2:	68da      	ldr	r2, [r3, #12]
 8012df4:	68fb      	ldr	r3, [r7, #12]
 8012df6:	685b      	ldr	r3, [r3, #4]
 8012df8:	685b      	ldr	r3, [r3, #4]
 8012dfa:	1ad3      	subs	r3, r2, r3
 8012dfc:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8012dfe:	68fb      	ldr	r3, [r7, #12]
 8012e00:	685b      	ldr	r3, [r3, #4]
 8012e02:	8959      	ldrh	r1, [r3, #10]
 8012e04:	68fb      	ldr	r3, [r7, #12]
 8012e06:	685b      	ldr	r3, [r3, #4]
 8012e08:	8b3a      	ldrh	r2, [r7, #24]
 8012e0a:	1a8a      	subs	r2, r1, r2
 8012e0c:	b292      	uxth	r2, r2
 8012e0e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8012e10:	68fb      	ldr	r3, [r7, #12]
 8012e12:	685b      	ldr	r3, [r3, #4]
 8012e14:	8919      	ldrh	r1, [r3, #8]
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	685b      	ldr	r3, [r3, #4]
 8012e1a:	8b3a      	ldrh	r2, [r7, #24]
 8012e1c:	1a8a      	subs	r2, r1, r2
 8012e1e:	b292      	uxth	r2, r2
 8012e20:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8012e22:	68fb      	ldr	r3, [r7, #12]
 8012e24:	685b      	ldr	r3, [r3, #4]
 8012e26:	68fa      	ldr	r2, [r7, #12]
 8012e28:	68d2      	ldr	r2, [r2, #12]
 8012e2a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8012e2c:	68fb      	ldr	r3, [r7, #12]
 8012e2e:	68db      	ldr	r3, [r3, #12]
 8012e30:	2200      	movs	r2, #0
 8012e32:	741a      	strb	r2, [r3, #16]
 8012e34:	2200      	movs	r2, #0
 8012e36:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8012e38:	68fb      	ldr	r3, [r7, #12]
 8012e3a:	68da      	ldr	r2, [r3, #12]
 8012e3c:	68fb      	ldr	r3, [r7, #12]
 8012e3e:	7a9b      	ldrb	r3, [r3, #10]
 8012e40:	f003 0301 	and.w	r3, r3, #1
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	d001      	beq.n	8012e4c <tcp_output_segment+0x158>
 8012e48:	2318      	movs	r3, #24
 8012e4a:	e000      	b.n	8012e4e <tcp_output_segment+0x15a>
 8012e4c:	2314      	movs	r3, #20
 8012e4e:	4413      	add	r3, r2
 8012e50:	69fa      	ldr	r2, [r7, #28]
 8012e52:	429a      	cmp	r2, r3
 8012e54:	d006      	beq.n	8012e64 <tcp_output_segment+0x170>
 8012e56:	4b10      	ldr	r3, [pc, #64]	@ (8012e98 <tcp_output_segment+0x1a4>)
 8012e58:	f240 621c 	movw	r2, #1564	@ 0x61c
 8012e5c:	4914      	ldr	r1, [pc, #80]	@ (8012eb0 <tcp_output_segment+0x1bc>)
 8012e5e:	4810      	ldr	r0, [pc, #64]	@ (8012ea0 <tcp_output_segment+0x1ac>)
 8012e60:	f005 ff70 	bl	8018d44 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8012e64:	68fb      	ldr	r3, [r7, #12]
 8012e66:	6858      	ldr	r0, [r3, #4]
 8012e68:	68b9      	ldr	r1, [r7, #8]
 8012e6a:	68bb      	ldr	r3, [r7, #8]
 8012e6c:	1d1c      	adds	r4, r3, #4
 8012e6e:	68bb      	ldr	r3, [r7, #8]
 8012e70:	7add      	ldrb	r5, [r3, #11]
 8012e72:	68bb      	ldr	r3, [r7, #8]
 8012e74:	7a9b      	ldrb	r3, [r3, #10]
 8012e76:	687a      	ldr	r2, [r7, #4]
 8012e78:	9202      	str	r2, [sp, #8]
 8012e7a:	2206      	movs	r2, #6
 8012e7c:	9201      	str	r2, [sp, #4]
 8012e7e:	9300      	str	r3, [sp, #0]
 8012e80:	462b      	mov	r3, r5
 8012e82:	4622      	mov	r2, r4
 8012e84:	f004 fc20 	bl	80176c8 <ip4_output_if>
 8012e88:	4603      	mov	r3, r0
 8012e8a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8012e8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012e90:	4618      	mov	r0, r3
 8012e92:	3720      	adds	r7, #32
 8012e94:	46bd      	mov	sp, r7
 8012e96:	bdb0      	pop	{r4, r5, r7, pc}
 8012e98:	0801c660 	.word	0x0801c660
 8012e9c:	0801cc24 	.word	0x0801cc24
 8012ea0:	0801c6b4 	.word	0x0801c6b4
 8012ea4:	0801cc44 	.word	0x0801cc44
 8012ea8:	0801cc64 	.word	0x0801cc64
 8012eac:	20010e74 	.word	0x20010e74
 8012eb0:	0801cc88 	.word	0x0801cc88

08012eb4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8012eb4:	b5b0      	push	{r4, r5, r7, lr}
 8012eb6:	b084      	sub	sp, #16
 8012eb8:	af00      	add	r7, sp, #0
 8012eba:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	d106      	bne.n	8012ed0 <tcp_rexmit_rto_prepare+0x1c>
 8012ec2:	4b31      	ldr	r3, [pc, #196]	@ (8012f88 <tcp_rexmit_rto_prepare+0xd4>)
 8012ec4:	f240 6263 	movw	r2, #1635	@ 0x663
 8012ec8:	4930      	ldr	r1, [pc, #192]	@ (8012f8c <tcp_rexmit_rto_prepare+0xd8>)
 8012eca:	4831      	ldr	r0, [pc, #196]	@ (8012f90 <tcp_rexmit_rto_prepare+0xdc>)
 8012ecc:	f005 ff3a 	bl	8018d44 <iprintf>

  if (pcb->unacked == NULL) {
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d102      	bne.n	8012ede <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8012ed8:	f06f 0305 	mvn.w	r3, #5
 8012edc:	e050      	b.n	8012f80 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012ee2:	60fb      	str	r3, [r7, #12]
 8012ee4:	e00b      	b.n	8012efe <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8012ee6:	68f8      	ldr	r0, [r7, #12]
 8012ee8:	f7ff fee4 	bl	8012cb4 <tcp_output_segment_busy>
 8012eec:	4603      	mov	r3, r0
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d002      	beq.n	8012ef8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8012ef2:	f06f 0305 	mvn.w	r3, #5
 8012ef6:	e043      	b.n	8012f80 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012ef8:	68fb      	ldr	r3, [r7, #12]
 8012efa:	681b      	ldr	r3, [r3, #0]
 8012efc:	60fb      	str	r3, [r7, #12]
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	681b      	ldr	r3, [r3, #0]
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	d1ef      	bne.n	8012ee6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8012f06:	68f8      	ldr	r0, [r7, #12]
 8012f08:	f7ff fed4 	bl	8012cb4 <tcp_output_segment_busy>
 8012f0c:	4603      	mov	r3, r0
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	d002      	beq.n	8012f18 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8012f12:	f06f 0305 	mvn.w	r3, #5
 8012f16:	e033      	b.n	8012f80 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8012f1c:	68fb      	ldr	r3, [r7, #12]
 8012f1e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	2200      	movs	r2, #0
 8012f2c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	8b5b      	ldrh	r3, [r3, #26]
 8012f32:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8012f36:	b29a      	uxth	r2, r3
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012f3c:	68fb      	ldr	r3, [r7, #12]
 8012f3e:	68db      	ldr	r3, [r3, #12]
 8012f40:	685b      	ldr	r3, [r3, #4]
 8012f42:	4618      	mov	r0, r3
 8012f44:	f7f8 fba5 	bl	800b692 <lwip_htonl>
 8012f48:	4604      	mov	r4, r0
 8012f4a:	68fb      	ldr	r3, [r7, #12]
 8012f4c:	891b      	ldrh	r3, [r3, #8]
 8012f4e:	461d      	mov	r5, r3
 8012f50:	68fb      	ldr	r3, [r7, #12]
 8012f52:	68db      	ldr	r3, [r3, #12]
 8012f54:	899b      	ldrh	r3, [r3, #12]
 8012f56:	b29b      	uxth	r3, r3
 8012f58:	4618      	mov	r0, r3
 8012f5a:	f7f8 fb85 	bl	800b668 <lwip_htons>
 8012f5e:	4603      	mov	r3, r0
 8012f60:	b2db      	uxtb	r3, r3
 8012f62:	f003 0303 	and.w	r3, r3, #3
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d001      	beq.n	8012f6e <tcp_rexmit_rto_prepare+0xba>
 8012f6a:	2301      	movs	r3, #1
 8012f6c:	e000      	b.n	8012f70 <tcp_rexmit_rto_prepare+0xbc>
 8012f6e:	2300      	movs	r3, #0
 8012f70:	442b      	add	r3, r5
 8012f72:	18e2      	adds	r2, r4, r3
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	2200      	movs	r2, #0
 8012f7c:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8012f7e:	2300      	movs	r3, #0
}
 8012f80:	4618      	mov	r0, r3
 8012f82:	3710      	adds	r7, #16
 8012f84:	46bd      	mov	sp, r7
 8012f86:	bdb0      	pop	{r4, r5, r7, pc}
 8012f88:	0801c660 	.word	0x0801c660
 8012f8c:	0801cc9c 	.word	0x0801cc9c
 8012f90:	0801c6b4 	.word	0x0801c6b4

08012f94 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8012f94:	b580      	push	{r7, lr}
 8012f96:	b082      	sub	sp, #8
 8012f98:	af00      	add	r7, sp, #0
 8012f9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d106      	bne.n	8012fb0 <tcp_rexmit_rto_commit+0x1c>
 8012fa2:	4b0d      	ldr	r3, [pc, #52]	@ (8012fd8 <tcp_rexmit_rto_commit+0x44>)
 8012fa4:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8012fa8:	490c      	ldr	r1, [pc, #48]	@ (8012fdc <tcp_rexmit_rto_commit+0x48>)
 8012faa:	480d      	ldr	r0, [pc, #52]	@ (8012fe0 <tcp_rexmit_rto_commit+0x4c>)
 8012fac:	f005 feca 	bl	8018d44 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012fb6:	2bff      	cmp	r3, #255	@ 0xff
 8012fb8:	d007      	beq.n	8012fca <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012fc0:	3301      	adds	r3, #1
 8012fc2:	b2da      	uxtb	r2, r3
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8012fca:	6878      	ldr	r0, [r7, #4]
 8012fcc:	f7ff fc7e 	bl	80128cc <tcp_output>
}
 8012fd0:	bf00      	nop
 8012fd2:	3708      	adds	r7, #8
 8012fd4:	46bd      	mov	sp, r7
 8012fd6:	bd80      	pop	{r7, pc}
 8012fd8:	0801c660 	.word	0x0801c660
 8012fdc:	0801ccc0 	.word	0x0801ccc0
 8012fe0:	0801c6b4 	.word	0x0801c6b4

08012fe4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8012fe4:	b580      	push	{r7, lr}
 8012fe6:	b082      	sub	sp, #8
 8012fe8:	af00      	add	r7, sp, #0
 8012fea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	2b00      	cmp	r3, #0
 8012ff0:	d106      	bne.n	8013000 <tcp_rexmit_rto+0x1c>
 8012ff2:	4b0a      	ldr	r3, [pc, #40]	@ (801301c <tcp_rexmit_rto+0x38>)
 8012ff4:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8012ff8:	4909      	ldr	r1, [pc, #36]	@ (8013020 <tcp_rexmit_rto+0x3c>)
 8012ffa:	480a      	ldr	r0, [pc, #40]	@ (8013024 <tcp_rexmit_rto+0x40>)
 8012ffc:	f005 fea2 	bl	8018d44 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8013000:	6878      	ldr	r0, [r7, #4]
 8013002:	f7ff ff57 	bl	8012eb4 <tcp_rexmit_rto_prepare>
 8013006:	4603      	mov	r3, r0
 8013008:	2b00      	cmp	r3, #0
 801300a:	d102      	bne.n	8013012 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801300c:	6878      	ldr	r0, [r7, #4]
 801300e:	f7ff ffc1 	bl	8012f94 <tcp_rexmit_rto_commit>
  }
}
 8013012:	bf00      	nop
 8013014:	3708      	adds	r7, #8
 8013016:	46bd      	mov	sp, r7
 8013018:	bd80      	pop	{r7, pc}
 801301a:	bf00      	nop
 801301c:	0801c660 	.word	0x0801c660
 8013020:	0801cce4 	.word	0x0801cce4
 8013024:	0801c6b4 	.word	0x0801c6b4

08013028 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8013028:	b590      	push	{r4, r7, lr}
 801302a:	b085      	sub	sp, #20
 801302c:	af00      	add	r7, sp, #0
 801302e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	2b00      	cmp	r3, #0
 8013034:	d106      	bne.n	8013044 <tcp_rexmit+0x1c>
 8013036:	4b2f      	ldr	r3, [pc, #188]	@ (80130f4 <tcp_rexmit+0xcc>)
 8013038:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 801303c:	492e      	ldr	r1, [pc, #184]	@ (80130f8 <tcp_rexmit+0xd0>)
 801303e:	482f      	ldr	r0, [pc, #188]	@ (80130fc <tcp_rexmit+0xd4>)
 8013040:	f005 fe80 	bl	8018d44 <iprintf>

  if (pcb->unacked == NULL) {
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013048:	2b00      	cmp	r3, #0
 801304a:	d102      	bne.n	8013052 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801304c:	f06f 0305 	mvn.w	r3, #5
 8013050:	e04c      	b.n	80130ec <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013056:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8013058:	68b8      	ldr	r0, [r7, #8]
 801305a:	f7ff fe2b 	bl	8012cb4 <tcp_output_segment_busy>
 801305e:	4603      	mov	r3, r0
 8013060:	2b00      	cmp	r3, #0
 8013062:	d002      	beq.n	801306a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8013064:	f06f 0305 	mvn.w	r3, #5
 8013068:	e040      	b.n	80130ec <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801306a:	68bb      	ldr	r3, [r7, #8]
 801306c:	681a      	ldr	r2, [r3, #0]
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	336c      	adds	r3, #108	@ 0x6c
 8013076:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013078:	e002      	b.n	8013080 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801307a:	68fb      	ldr	r3, [r7, #12]
 801307c:	681b      	ldr	r3, [r3, #0]
 801307e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013080:	68fb      	ldr	r3, [r7, #12]
 8013082:	681b      	ldr	r3, [r3, #0]
 8013084:	2b00      	cmp	r3, #0
 8013086:	d011      	beq.n	80130ac <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013088:	68fb      	ldr	r3, [r7, #12]
 801308a:	681b      	ldr	r3, [r3, #0]
 801308c:	68db      	ldr	r3, [r3, #12]
 801308e:	685b      	ldr	r3, [r3, #4]
 8013090:	4618      	mov	r0, r3
 8013092:	f7f8 fafe 	bl	800b692 <lwip_htonl>
 8013096:	4604      	mov	r4, r0
 8013098:	68bb      	ldr	r3, [r7, #8]
 801309a:	68db      	ldr	r3, [r3, #12]
 801309c:	685b      	ldr	r3, [r3, #4]
 801309e:	4618      	mov	r0, r3
 80130a0:	f7f8 faf7 	bl	800b692 <lwip_htonl>
 80130a4:	4603      	mov	r3, r0
 80130a6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	dbe6      	blt.n	801307a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80130ac:	68fb      	ldr	r3, [r7, #12]
 80130ae:	681a      	ldr	r2, [r3, #0]
 80130b0:	68bb      	ldr	r3, [r7, #8]
 80130b2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80130b4:	68fb      	ldr	r3, [r7, #12]
 80130b6:	68ba      	ldr	r2, [r7, #8]
 80130b8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80130ba:	68bb      	ldr	r3, [r7, #8]
 80130bc:	681b      	ldr	r3, [r3, #0]
 80130be:	2b00      	cmp	r3, #0
 80130c0:	d103      	bne.n	80130ca <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	2200      	movs	r2, #0
 80130c6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80130d0:	2bff      	cmp	r3, #255	@ 0xff
 80130d2:	d007      	beq.n	80130e4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80130da:	3301      	adds	r3, #1
 80130dc:	b2da      	uxtb	r2, r3
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	2200      	movs	r2, #0
 80130e8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80130ea:	2300      	movs	r3, #0
}
 80130ec:	4618      	mov	r0, r3
 80130ee:	3714      	adds	r7, #20
 80130f0:	46bd      	mov	sp, r7
 80130f2:	bd90      	pop	{r4, r7, pc}
 80130f4:	0801c660 	.word	0x0801c660
 80130f8:	0801cd00 	.word	0x0801cd00
 80130fc:	0801c6b4 	.word	0x0801c6b4

08013100 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8013100:	b580      	push	{r7, lr}
 8013102:	b082      	sub	sp, #8
 8013104:	af00      	add	r7, sp, #0
 8013106:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	2b00      	cmp	r3, #0
 801310c:	d106      	bne.n	801311c <tcp_rexmit_fast+0x1c>
 801310e:	4b2a      	ldr	r3, [pc, #168]	@ (80131b8 <tcp_rexmit_fast+0xb8>)
 8013110:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8013114:	4929      	ldr	r1, [pc, #164]	@ (80131bc <tcp_rexmit_fast+0xbc>)
 8013116:	482a      	ldr	r0, [pc, #168]	@ (80131c0 <tcp_rexmit_fast+0xc0>)
 8013118:	f005 fe14 	bl	8018d44 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013120:	2b00      	cmp	r3, #0
 8013122:	d044      	beq.n	80131ae <tcp_rexmit_fast+0xae>
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	8b5b      	ldrh	r3, [r3, #26]
 8013128:	f003 0304 	and.w	r3, r3, #4
 801312c:	2b00      	cmp	r3, #0
 801312e:	d13e      	bne.n	80131ae <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8013130:	6878      	ldr	r0, [r7, #4]
 8013132:	f7ff ff79 	bl	8013028 <tcp_rexmit>
 8013136:	4603      	mov	r3, r0
 8013138:	2b00      	cmp	r3, #0
 801313a:	d138      	bne.n	80131ae <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8013148:	4293      	cmp	r3, r2
 801314a:	bf28      	it	cs
 801314c:	4613      	movcs	r3, r2
 801314e:	b29b      	uxth	r3, r3
 8013150:	0fda      	lsrs	r2, r3, #31
 8013152:	4413      	add	r3, r2
 8013154:	105b      	asrs	r3, r3, #1
 8013156:	b29a      	uxth	r2, r3
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8013164:	461a      	mov	r2, r3
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801316a:	005b      	lsls	r3, r3, #1
 801316c:	429a      	cmp	r2, r3
 801316e:	d206      	bcs.n	801317e <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013174:	005b      	lsls	r3, r3, #1
 8013176:	b29a      	uxth	r2, r3
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013188:	4619      	mov	r1, r3
 801318a:	0049      	lsls	r1, r1, #1
 801318c:	440b      	add	r3, r1
 801318e:	b29b      	uxth	r3, r3
 8013190:	4413      	add	r3, r2
 8013192:	b29a      	uxth	r2, r3
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	8b5b      	ldrh	r3, [r3, #26]
 801319e:	f043 0304 	orr.w	r3, r3, #4
 80131a2:	b29a      	uxth	r2, r3
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	2200      	movs	r2, #0
 80131ac:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 80131ae:	bf00      	nop
 80131b0:	3708      	adds	r7, #8
 80131b2:	46bd      	mov	sp, r7
 80131b4:	bd80      	pop	{r7, pc}
 80131b6:	bf00      	nop
 80131b8:	0801c660 	.word	0x0801c660
 80131bc:	0801cd18 	.word	0x0801cd18
 80131c0:	0801c6b4 	.word	0x0801c6b4

080131c4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80131c4:	b580      	push	{r7, lr}
 80131c6:	b086      	sub	sp, #24
 80131c8:	af00      	add	r7, sp, #0
 80131ca:	60f8      	str	r0, [r7, #12]
 80131cc:	607b      	str	r3, [r7, #4]
 80131ce:	460b      	mov	r3, r1
 80131d0:	817b      	strh	r3, [r7, #10]
 80131d2:	4613      	mov	r3, r2
 80131d4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80131d6:	897a      	ldrh	r2, [r7, #10]
 80131d8:	893b      	ldrh	r3, [r7, #8]
 80131da:	4413      	add	r3, r2
 80131dc:	b29b      	uxth	r3, r3
 80131de:	3314      	adds	r3, #20
 80131e0:	b29b      	uxth	r3, r3
 80131e2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80131e6:	4619      	mov	r1, r3
 80131e8:	2022      	movs	r0, #34	@ 0x22
 80131ea:	f7f9 fb8d 	bl	800c908 <pbuf_alloc>
 80131ee:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80131f0:	697b      	ldr	r3, [r7, #20]
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d04d      	beq.n	8013292 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80131f6:	897b      	ldrh	r3, [r7, #10]
 80131f8:	3313      	adds	r3, #19
 80131fa:	697a      	ldr	r2, [r7, #20]
 80131fc:	8952      	ldrh	r2, [r2, #10]
 80131fe:	4293      	cmp	r3, r2
 8013200:	db06      	blt.n	8013210 <tcp_output_alloc_header_common+0x4c>
 8013202:	4b26      	ldr	r3, [pc, #152]	@ (801329c <tcp_output_alloc_header_common+0xd8>)
 8013204:	f240 7223 	movw	r2, #1827	@ 0x723
 8013208:	4925      	ldr	r1, [pc, #148]	@ (80132a0 <tcp_output_alloc_header_common+0xdc>)
 801320a:	4826      	ldr	r0, [pc, #152]	@ (80132a4 <tcp_output_alloc_header_common+0xe0>)
 801320c:	f005 fd9a 	bl	8018d44 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8013210:	697b      	ldr	r3, [r7, #20]
 8013212:	685b      	ldr	r3, [r3, #4]
 8013214:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8013216:	8c3b      	ldrh	r3, [r7, #32]
 8013218:	4618      	mov	r0, r3
 801321a:	f7f8 fa25 	bl	800b668 <lwip_htons>
 801321e:	4603      	mov	r3, r0
 8013220:	461a      	mov	r2, r3
 8013222:	693b      	ldr	r3, [r7, #16]
 8013224:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8013226:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013228:	4618      	mov	r0, r3
 801322a:	f7f8 fa1d 	bl	800b668 <lwip_htons>
 801322e:	4603      	mov	r3, r0
 8013230:	461a      	mov	r2, r3
 8013232:	693b      	ldr	r3, [r7, #16]
 8013234:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8013236:	693b      	ldr	r3, [r7, #16]
 8013238:	687a      	ldr	r2, [r7, #4]
 801323a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801323c:	68f8      	ldr	r0, [r7, #12]
 801323e:	f7f8 fa28 	bl	800b692 <lwip_htonl>
 8013242:	4602      	mov	r2, r0
 8013244:	693b      	ldr	r3, [r7, #16]
 8013246:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8013248:	897b      	ldrh	r3, [r7, #10]
 801324a:	089b      	lsrs	r3, r3, #2
 801324c:	b29b      	uxth	r3, r3
 801324e:	3305      	adds	r3, #5
 8013250:	b29b      	uxth	r3, r3
 8013252:	031b      	lsls	r3, r3, #12
 8013254:	b29a      	uxth	r2, r3
 8013256:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801325a:	b29b      	uxth	r3, r3
 801325c:	4313      	orrs	r3, r2
 801325e:	b29b      	uxth	r3, r3
 8013260:	4618      	mov	r0, r3
 8013262:	f7f8 fa01 	bl	800b668 <lwip_htons>
 8013266:	4603      	mov	r3, r0
 8013268:	461a      	mov	r2, r3
 801326a:	693b      	ldr	r3, [r7, #16]
 801326c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801326e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8013270:	4618      	mov	r0, r3
 8013272:	f7f8 f9f9 	bl	800b668 <lwip_htons>
 8013276:	4603      	mov	r3, r0
 8013278:	461a      	mov	r2, r3
 801327a:	693b      	ldr	r3, [r7, #16]
 801327c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801327e:	693b      	ldr	r3, [r7, #16]
 8013280:	2200      	movs	r2, #0
 8013282:	741a      	strb	r2, [r3, #16]
 8013284:	2200      	movs	r2, #0
 8013286:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8013288:	693b      	ldr	r3, [r7, #16]
 801328a:	2200      	movs	r2, #0
 801328c:	749a      	strb	r2, [r3, #18]
 801328e:	2200      	movs	r2, #0
 8013290:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8013292:	697b      	ldr	r3, [r7, #20]
}
 8013294:	4618      	mov	r0, r3
 8013296:	3718      	adds	r7, #24
 8013298:	46bd      	mov	sp, r7
 801329a:	bd80      	pop	{r7, pc}
 801329c:	0801c660 	.word	0x0801c660
 80132a0:	0801cd38 	.word	0x0801cd38
 80132a4:	0801c6b4 	.word	0x0801c6b4

080132a8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80132a8:	b5b0      	push	{r4, r5, r7, lr}
 80132aa:	b08a      	sub	sp, #40	@ 0x28
 80132ac:	af04      	add	r7, sp, #16
 80132ae:	60f8      	str	r0, [r7, #12]
 80132b0:	607b      	str	r3, [r7, #4]
 80132b2:	460b      	mov	r3, r1
 80132b4:	817b      	strh	r3, [r7, #10]
 80132b6:	4613      	mov	r3, r2
 80132b8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80132ba:	68fb      	ldr	r3, [r7, #12]
 80132bc:	2b00      	cmp	r3, #0
 80132be:	d106      	bne.n	80132ce <tcp_output_alloc_header+0x26>
 80132c0:	4b15      	ldr	r3, [pc, #84]	@ (8013318 <tcp_output_alloc_header+0x70>)
 80132c2:	f240 7242 	movw	r2, #1858	@ 0x742
 80132c6:	4915      	ldr	r1, [pc, #84]	@ (801331c <tcp_output_alloc_header+0x74>)
 80132c8:	4815      	ldr	r0, [pc, #84]	@ (8013320 <tcp_output_alloc_header+0x78>)
 80132ca:	f005 fd3b 	bl	8018d44 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80132ce:	68fb      	ldr	r3, [r7, #12]
 80132d0:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80132d2:	68fb      	ldr	r3, [r7, #12]
 80132d4:	8adb      	ldrh	r3, [r3, #22]
 80132d6:	68fa      	ldr	r2, [r7, #12]
 80132d8:	8b12      	ldrh	r2, [r2, #24]
 80132da:	68f9      	ldr	r1, [r7, #12]
 80132dc:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 80132de:	893d      	ldrh	r5, [r7, #8]
 80132e0:	897c      	ldrh	r4, [r7, #10]
 80132e2:	9103      	str	r1, [sp, #12]
 80132e4:	2110      	movs	r1, #16
 80132e6:	9102      	str	r1, [sp, #8]
 80132e8:	9201      	str	r2, [sp, #4]
 80132ea:	9300      	str	r3, [sp, #0]
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	462a      	mov	r2, r5
 80132f0:	4621      	mov	r1, r4
 80132f2:	f7ff ff67 	bl	80131c4 <tcp_output_alloc_header_common>
 80132f6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80132f8:	697b      	ldr	r3, [r7, #20]
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d006      	beq.n	801330c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80132fe:	68fb      	ldr	r3, [r7, #12]
 8013300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013302:	68fa      	ldr	r2, [r7, #12]
 8013304:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8013306:	441a      	add	r2, r3
 8013308:	68fb      	ldr	r3, [r7, #12]
 801330a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 801330c:	697b      	ldr	r3, [r7, #20]
}
 801330e:	4618      	mov	r0, r3
 8013310:	3718      	adds	r7, #24
 8013312:	46bd      	mov	sp, r7
 8013314:	bdb0      	pop	{r4, r5, r7, pc}
 8013316:	bf00      	nop
 8013318:	0801c660 	.word	0x0801c660
 801331c:	0801cd68 	.word	0x0801cd68
 8013320:	0801c6b4 	.word	0x0801c6b4

08013324 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8013324:	b580      	push	{r7, lr}
 8013326:	b088      	sub	sp, #32
 8013328:	af00      	add	r7, sp, #0
 801332a:	60f8      	str	r0, [r7, #12]
 801332c:	60b9      	str	r1, [r7, #8]
 801332e:	4611      	mov	r1, r2
 8013330:	461a      	mov	r2, r3
 8013332:	460b      	mov	r3, r1
 8013334:	71fb      	strb	r3, [r7, #7]
 8013336:	4613      	mov	r3, r2
 8013338:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801333a:	2300      	movs	r3, #0
 801333c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801333e:	68bb      	ldr	r3, [r7, #8]
 8013340:	2b00      	cmp	r3, #0
 8013342:	d106      	bne.n	8013352 <tcp_output_fill_options+0x2e>
 8013344:	4b12      	ldr	r3, [pc, #72]	@ (8013390 <tcp_output_fill_options+0x6c>)
 8013346:	f240 7256 	movw	r2, #1878	@ 0x756
 801334a:	4912      	ldr	r1, [pc, #72]	@ (8013394 <tcp_output_fill_options+0x70>)
 801334c:	4812      	ldr	r0, [pc, #72]	@ (8013398 <tcp_output_fill_options+0x74>)
 801334e:	f005 fcf9 	bl	8018d44 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8013352:	68bb      	ldr	r3, [r7, #8]
 8013354:	685b      	ldr	r3, [r3, #4]
 8013356:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8013358:	69bb      	ldr	r3, [r7, #24]
 801335a:	3314      	adds	r3, #20
 801335c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801335e:	8bfb      	ldrh	r3, [r7, #30]
 8013360:	009b      	lsls	r3, r3, #2
 8013362:	461a      	mov	r2, r3
 8013364:	79fb      	ldrb	r3, [r7, #7]
 8013366:	009b      	lsls	r3, r3, #2
 8013368:	f003 0304 	and.w	r3, r3, #4
 801336c:	4413      	add	r3, r2
 801336e:	3314      	adds	r3, #20
 8013370:	69ba      	ldr	r2, [r7, #24]
 8013372:	4413      	add	r3, r2
 8013374:	697a      	ldr	r2, [r7, #20]
 8013376:	429a      	cmp	r2, r3
 8013378:	d006      	beq.n	8013388 <tcp_output_fill_options+0x64>
 801337a:	4b05      	ldr	r3, [pc, #20]	@ (8013390 <tcp_output_fill_options+0x6c>)
 801337c:	f240 7275 	movw	r2, #1909	@ 0x775
 8013380:	4906      	ldr	r1, [pc, #24]	@ (801339c <tcp_output_fill_options+0x78>)
 8013382:	4805      	ldr	r0, [pc, #20]	@ (8013398 <tcp_output_fill_options+0x74>)
 8013384:	f005 fcde 	bl	8018d44 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8013388:	bf00      	nop
 801338a:	3720      	adds	r7, #32
 801338c:	46bd      	mov	sp, r7
 801338e:	bd80      	pop	{r7, pc}
 8013390:	0801c660 	.word	0x0801c660
 8013394:	0801cd90 	.word	0x0801cd90
 8013398:	0801c6b4 	.word	0x0801c6b4
 801339c:	0801cc88 	.word	0x0801cc88

080133a0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80133a0:	b580      	push	{r7, lr}
 80133a2:	b08a      	sub	sp, #40	@ 0x28
 80133a4:	af04      	add	r7, sp, #16
 80133a6:	60f8      	str	r0, [r7, #12]
 80133a8:	60b9      	str	r1, [r7, #8]
 80133aa:	607a      	str	r2, [r7, #4]
 80133ac:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80133ae:	68bb      	ldr	r3, [r7, #8]
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	d106      	bne.n	80133c2 <tcp_output_control_segment+0x22>
 80133b4:	4b1c      	ldr	r3, [pc, #112]	@ (8013428 <tcp_output_control_segment+0x88>)
 80133b6:	f240 7287 	movw	r2, #1927	@ 0x787
 80133ba:	491c      	ldr	r1, [pc, #112]	@ (801342c <tcp_output_control_segment+0x8c>)
 80133bc:	481c      	ldr	r0, [pc, #112]	@ (8013430 <tcp_output_control_segment+0x90>)
 80133be:	f005 fcc1 	bl	8018d44 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80133c2:	683a      	ldr	r2, [r7, #0]
 80133c4:	6879      	ldr	r1, [r7, #4]
 80133c6:	68f8      	ldr	r0, [r7, #12]
 80133c8:	f7fe faea 	bl	80119a0 <tcp_route>
 80133cc:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80133ce:	693b      	ldr	r3, [r7, #16]
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d102      	bne.n	80133da <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80133d4:	23fc      	movs	r3, #252	@ 0xfc
 80133d6:	75fb      	strb	r3, [r7, #23]
 80133d8:	e01c      	b.n	8013414 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80133da:	68fb      	ldr	r3, [r7, #12]
 80133dc:	2b00      	cmp	r3, #0
 80133de:	d006      	beq.n	80133ee <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80133e0:	68fb      	ldr	r3, [r7, #12]
 80133e2:	7adb      	ldrb	r3, [r3, #11]
 80133e4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80133e6:	68fb      	ldr	r3, [r7, #12]
 80133e8:	7a9b      	ldrb	r3, [r3, #10]
 80133ea:	757b      	strb	r3, [r7, #21]
 80133ec:	e003      	b.n	80133f6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80133ee:	23ff      	movs	r3, #255	@ 0xff
 80133f0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80133f2:	2300      	movs	r3, #0
 80133f4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80133f6:	7dba      	ldrb	r2, [r7, #22]
 80133f8:	693b      	ldr	r3, [r7, #16]
 80133fa:	9302      	str	r3, [sp, #8]
 80133fc:	2306      	movs	r3, #6
 80133fe:	9301      	str	r3, [sp, #4]
 8013400:	7d7b      	ldrb	r3, [r7, #21]
 8013402:	9300      	str	r3, [sp, #0]
 8013404:	4613      	mov	r3, r2
 8013406:	683a      	ldr	r2, [r7, #0]
 8013408:	6879      	ldr	r1, [r7, #4]
 801340a:	68b8      	ldr	r0, [r7, #8]
 801340c:	f004 f95c 	bl	80176c8 <ip4_output_if>
 8013410:	4603      	mov	r3, r0
 8013412:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8013414:	68b8      	ldr	r0, [r7, #8]
 8013416:	f7f9 fd5b 	bl	800ced0 <pbuf_free>
  return err;
 801341a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801341e:	4618      	mov	r0, r3
 8013420:	3718      	adds	r7, #24
 8013422:	46bd      	mov	sp, r7
 8013424:	bd80      	pop	{r7, pc}
 8013426:	bf00      	nop
 8013428:	0801c660 	.word	0x0801c660
 801342c:	0801cdb8 	.word	0x0801cdb8
 8013430:	0801c6b4 	.word	0x0801c6b4

08013434 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8013434:	b590      	push	{r4, r7, lr}
 8013436:	b08b      	sub	sp, #44	@ 0x2c
 8013438:	af04      	add	r7, sp, #16
 801343a:	60f8      	str	r0, [r7, #12]
 801343c:	60b9      	str	r1, [r7, #8]
 801343e:	607a      	str	r2, [r7, #4]
 8013440:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8013442:	683b      	ldr	r3, [r7, #0]
 8013444:	2b00      	cmp	r3, #0
 8013446:	d106      	bne.n	8013456 <tcp_rst+0x22>
 8013448:	4b1f      	ldr	r3, [pc, #124]	@ (80134c8 <tcp_rst+0x94>)
 801344a:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 801344e:	491f      	ldr	r1, [pc, #124]	@ (80134cc <tcp_rst+0x98>)
 8013450:	481f      	ldr	r0, [pc, #124]	@ (80134d0 <tcp_rst+0x9c>)
 8013452:	f005 fc77 	bl	8018d44 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8013456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013458:	2b00      	cmp	r3, #0
 801345a:	d106      	bne.n	801346a <tcp_rst+0x36>
 801345c:	4b1a      	ldr	r3, [pc, #104]	@ (80134c8 <tcp_rst+0x94>)
 801345e:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8013462:	491c      	ldr	r1, [pc, #112]	@ (80134d4 <tcp_rst+0xa0>)
 8013464:	481a      	ldr	r0, [pc, #104]	@ (80134d0 <tcp_rst+0x9c>)
 8013466:	f005 fc6d 	bl	8018d44 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801346a:	2300      	movs	r3, #0
 801346c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801346e:	f246 0308 	movw	r3, #24584	@ 0x6008
 8013472:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8013474:	7dfb      	ldrb	r3, [r7, #23]
 8013476:	b29c      	uxth	r4, r3
 8013478:	68b8      	ldr	r0, [r7, #8]
 801347a:	f7f8 f90a 	bl	800b692 <lwip_htonl>
 801347e:	4602      	mov	r2, r0
 8013480:	8abb      	ldrh	r3, [r7, #20]
 8013482:	9303      	str	r3, [sp, #12]
 8013484:	2314      	movs	r3, #20
 8013486:	9302      	str	r3, [sp, #8]
 8013488:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801348a:	9301      	str	r3, [sp, #4]
 801348c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801348e:	9300      	str	r3, [sp, #0]
 8013490:	4613      	mov	r3, r2
 8013492:	2200      	movs	r2, #0
 8013494:	4621      	mov	r1, r4
 8013496:	6878      	ldr	r0, [r7, #4]
 8013498:	f7ff fe94 	bl	80131c4 <tcp_output_alloc_header_common>
 801349c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801349e:	693b      	ldr	r3, [r7, #16]
 80134a0:	2b00      	cmp	r3, #0
 80134a2:	d00c      	beq.n	80134be <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80134a4:	7dfb      	ldrb	r3, [r7, #23]
 80134a6:	2200      	movs	r2, #0
 80134a8:	6939      	ldr	r1, [r7, #16]
 80134aa:	68f8      	ldr	r0, [r7, #12]
 80134ac:	f7ff ff3a 	bl	8013324 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80134b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80134b2:	683a      	ldr	r2, [r7, #0]
 80134b4:	6939      	ldr	r1, [r7, #16]
 80134b6:	68f8      	ldr	r0, [r7, #12]
 80134b8:	f7ff ff72 	bl	80133a0 <tcp_output_control_segment>
 80134bc:	e000      	b.n	80134c0 <tcp_rst+0x8c>
    return;
 80134be:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80134c0:	371c      	adds	r7, #28
 80134c2:	46bd      	mov	sp, r7
 80134c4:	bd90      	pop	{r4, r7, pc}
 80134c6:	bf00      	nop
 80134c8:	0801c660 	.word	0x0801c660
 80134cc:	0801cde4 	.word	0x0801cde4
 80134d0:	0801c6b4 	.word	0x0801c6b4
 80134d4:	0801ce00 	.word	0x0801ce00

080134d8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80134d8:	b590      	push	{r4, r7, lr}
 80134da:	b087      	sub	sp, #28
 80134dc:	af00      	add	r7, sp, #0
 80134de:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80134e0:	2300      	movs	r3, #0
 80134e2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80134e4:	2300      	movs	r3, #0
 80134e6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	d106      	bne.n	80134fc <tcp_send_empty_ack+0x24>
 80134ee:	4b28      	ldr	r3, [pc, #160]	@ (8013590 <tcp_send_empty_ack+0xb8>)
 80134f0:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 80134f4:	4927      	ldr	r1, [pc, #156]	@ (8013594 <tcp_send_empty_ack+0xbc>)
 80134f6:	4828      	ldr	r0, [pc, #160]	@ (8013598 <tcp_send_empty_ack+0xc0>)
 80134f8:	f005 fc24 	bl	8018d44 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80134fc:	7dfb      	ldrb	r3, [r7, #23]
 80134fe:	009b      	lsls	r3, r3, #2
 8013500:	b2db      	uxtb	r3, r3
 8013502:	f003 0304 	and.w	r3, r3, #4
 8013506:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8013508:	7d7b      	ldrb	r3, [r7, #21]
 801350a:	b29c      	uxth	r4, r3
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013510:	4618      	mov	r0, r3
 8013512:	f7f8 f8be 	bl	800b692 <lwip_htonl>
 8013516:	4603      	mov	r3, r0
 8013518:	2200      	movs	r2, #0
 801351a:	4621      	mov	r1, r4
 801351c:	6878      	ldr	r0, [r7, #4]
 801351e:	f7ff fec3 	bl	80132a8 <tcp_output_alloc_header>
 8013522:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013524:	693b      	ldr	r3, [r7, #16]
 8013526:	2b00      	cmp	r3, #0
 8013528:	d109      	bne.n	801353e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	8b5b      	ldrh	r3, [r3, #26]
 801352e:	f043 0303 	orr.w	r3, r3, #3
 8013532:	b29a      	uxth	r2, r3
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8013538:	f06f 0301 	mvn.w	r3, #1
 801353c:	e023      	b.n	8013586 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801353e:	7dbb      	ldrb	r3, [r7, #22]
 8013540:	7dfa      	ldrb	r2, [r7, #23]
 8013542:	6939      	ldr	r1, [r7, #16]
 8013544:	6878      	ldr	r0, [r7, #4]
 8013546:	f7ff feed 	bl	8013324 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801354a:	687a      	ldr	r2, [r7, #4]
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	3304      	adds	r3, #4
 8013550:	6939      	ldr	r1, [r7, #16]
 8013552:	6878      	ldr	r0, [r7, #4]
 8013554:	f7ff ff24 	bl	80133a0 <tcp_output_control_segment>
 8013558:	4603      	mov	r3, r0
 801355a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801355c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013560:	2b00      	cmp	r3, #0
 8013562:	d007      	beq.n	8013574 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	8b5b      	ldrh	r3, [r3, #26]
 8013568:	f043 0303 	orr.w	r3, r3, #3
 801356c:	b29a      	uxth	r2, r3
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	835a      	strh	r2, [r3, #26]
 8013572:	e006      	b.n	8013582 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	8b5b      	ldrh	r3, [r3, #26]
 8013578:	f023 0303 	bic.w	r3, r3, #3
 801357c:	b29a      	uxth	r2, r3
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8013582:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013586:	4618      	mov	r0, r3
 8013588:	371c      	adds	r7, #28
 801358a:	46bd      	mov	sp, r7
 801358c:	bd90      	pop	{r4, r7, pc}
 801358e:	bf00      	nop
 8013590:	0801c660 	.word	0x0801c660
 8013594:	0801ce1c 	.word	0x0801ce1c
 8013598:	0801c6b4 	.word	0x0801c6b4

0801359c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801359c:	b590      	push	{r4, r7, lr}
 801359e:	b087      	sub	sp, #28
 80135a0:	af00      	add	r7, sp, #0
 80135a2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80135a4:	2300      	movs	r3, #0
 80135a6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	2b00      	cmp	r3, #0
 80135ac:	d106      	bne.n	80135bc <tcp_keepalive+0x20>
 80135ae:	4b18      	ldr	r3, [pc, #96]	@ (8013610 <tcp_keepalive+0x74>)
 80135b0:	f640 0224 	movw	r2, #2084	@ 0x824
 80135b4:	4917      	ldr	r1, [pc, #92]	@ (8013614 <tcp_keepalive+0x78>)
 80135b6:	4818      	ldr	r0, [pc, #96]	@ (8013618 <tcp_keepalive+0x7c>)
 80135b8:	f005 fbc4 	bl	8018d44 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80135bc:	7dfb      	ldrb	r3, [r7, #23]
 80135be:	b29c      	uxth	r4, r3
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80135c4:	3b01      	subs	r3, #1
 80135c6:	4618      	mov	r0, r3
 80135c8:	f7f8 f863 	bl	800b692 <lwip_htonl>
 80135cc:	4603      	mov	r3, r0
 80135ce:	2200      	movs	r2, #0
 80135d0:	4621      	mov	r1, r4
 80135d2:	6878      	ldr	r0, [r7, #4]
 80135d4:	f7ff fe68 	bl	80132a8 <tcp_output_alloc_header>
 80135d8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80135da:	693b      	ldr	r3, [r7, #16]
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d102      	bne.n	80135e6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80135e0:	f04f 33ff 	mov.w	r3, #4294967295
 80135e4:	e010      	b.n	8013608 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80135e6:	7dfb      	ldrb	r3, [r7, #23]
 80135e8:	2200      	movs	r2, #0
 80135ea:	6939      	ldr	r1, [r7, #16]
 80135ec:	6878      	ldr	r0, [r7, #4]
 80135ee:	f7ff fe99 	bl	8013324 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80135f2:	687a      	ldr	r2, [r7, #4]
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	3304      	adds	r3, #4
 80135f8:	6939      	ldr	r1, [r7, #16]
 80135fa:	6878      	ldr	r0, [r7, #4]
 80135fc:	f7ff fed0 	bl	80133a0 <tcp_output_control_segment>
 8013600:	4603      	mov	r3, r0
 8013602:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013604:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013608:	4618      	mov	r0, r3
 801360a:	371c      	adds	r7, #28
 801360c:	46bd      	mov	sp, r7
 801360e:	bd90      	pop	{r4, r7, pc}
 8013610:	0801c660 	.word	0x0801c660
 8013614:	0801ce3c 	.word	0x0801ce3c
 8013618:	0801c6b4 	.word	0x0801c6b4

0801361c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801361c:	b590      	push	{r4, r7, lr}
 801361e:	b08b      	sub	sp, #44	@ 0x2c
 8013620:	af00      	add	r7, sp, #0
 8013622:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013624:	2300      	movs	r3, #0
 8013626:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	2b00      	cmp	r3, #0
 801362e:	d106      	bne.n	801363e <tcp_zero_window_probe+0x22>
 8013630:	4b4c      	ldr	r3, [pc, #304]	@ (8013764 <tcp_zero_window_probe+0x148>)
 8013632:	f640 024f 	movw	r2, #2127	@ 0x84f
 8013636:	494c      	ldr	r1, [pc, #304]	@ (8013768 <tcp_zero_window_probe+0x14c>)
 8013638:	484c      	ldr	r0, [pc, #304]	@ (801376c <tcp_zero_window_probe+0x150>)
 801363a:	f005 fb83 	bl	8018d44 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013642:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8013644:	6a3b      	ldr	r3, [r7, #32]
 8013646:	2b00      	cmp	r3, #0
 8013648:	d101      	bne.n	801364e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801364a:	2300      	movs	r3, #0
 801364c:	e086      	b.n	801375c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8013654:	2bff      	cmp	r3, #255	@ 0xff
 8013656:	d007      	beq.n	8013668 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801365e:	3301      	adds	r3, #1
 8013660:	b2da      	uxtb	r2, r3
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8013668:	6a3b      	ldr	r3, [r7, #32]
 801366a:	68db      	ldr	r3, [r3, #12]
 801366c:	899b      	ldrh	r3, [r3, #12]
 801366e:	b29b      	uxth	r3, r3
 8013670:	4618      	mov	r0, r3
 8013672:	f7f7 fff9 	bl	800b668 <lwip_htons>
 8013676:	4603      	mov	r3, r0
 8013678:	b2db      	uxtb	r3, r3
 801367a:	f003 0301 	and.w	r3, r3, #1
 801367e:	2b00      	cmp	r3, #0
 8013680:	d005      	beq.n	801368e <tcp_zero_window_probe+0x72>
 8013682:	6a3b      	ldr	r3, [r7, #32]
 8013684:	891b      	ldrh	r3, [r3, #8]
 8013686:	2b00      	cmp	r3, #0
 8013688:	d101      	bne.n	801368e <tcp_zero_window_probe+0x72>
 801368a:	2301      	movs	r3, #1
 801368c:	e000      	b.n	8013690 <tcp_zero_window_probe+0x74>
 801368e:	2300      	movs	r3, #0
 8013690:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8013692:	7ffb      	ldrb	r3, [r7, #31]
 8013694:	2b00      	cmp	r3, #0
 8013696:	bf0c      	ite	eq
 8013698:	2301      	moveq	r3, #1
 801369a:	2300      	movne	r3, #0
 801369c:	b2db      	uxtb	r3, r3
 801369e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80136a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80136a4:	b299      	uxth	r1, r3
 80136a6:	6a3b      	ldr	r3, [r7, #32]
 80136a8:	68db      	ldr	r3, [r3, #12]
 80136aa:	685b      	ldr	r3, [r3, #4]
 80136ac:	8bba      	ldrh	r2, [r7, #28]
 80136ae:	6878      	ldr	r0, [r7, #4]
 80136b0:	f7ff fdfa 	bl	80132a8 <tcp_output_alloc_header>
 80136b4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80136b6:	69bb      	ldr	r3, [r7, #24]
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	d102      	bne.n	80136c2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80136bc:	f04f 33ff 	mov.w	r3, #4294967295
 80136c0:	e04c      	b.n	801375c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80136c2:	69bb      	ldr	r3, [r7, #24]
 80136c4:	685b      	ldr	r3, [r3, #4]
 80136c6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80136c8:	7ffb      	ldrb	r3, [r7, #31]
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	d011      	beq.n	80136f2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80136ce:	697b      	ldr	r3, [r7, #20]
 80136d0:	899b      	ldrh	r3, [r3, #12]
 80136d2:	b29b      	uxth	r3, r3
 80136d4:	b21b      	sxth	r3, r3
 80136d6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80136da:	b21c      	sxth	r4, r3
 80136dc:	2011      	movs	r0, #17
 80136de:	f7f7 ffc3 	bl	800b668 <lwip_htons>
 80136e2:	4603      	mov	r3, r0
 80136e4:	b21b      	sxth	r3, r3
 80136e6:	4323      	orrs	r3, r4
 80136e8:	b21b      	sxth	r3, r3
 80136ea:	b29a      	uxth	r2, r3
 80136ec:	697b      	ldr	r3, [r7, #20]
 80136ee:	819a      	strh	r2, [r3, #12]
 80136f0:	e010      	b.n	8013714 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80136f2:	69bb      	ldr	r3, [r7, #24]
 80136f4:	685b      	ldr	r3, [r3, #4]
 80136f6:	3314      	adds	r3, #20
 80136f8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80136fa:	6a3b      	ldr	r3, [r7, #32]
 80136fc:	6858      	ldr	r0, [r3, #4]
 80136fe:	6a3b      	ldr	r3, [r7, #32]
 8013700:	685b      	ldr	r3, [r3, #4]
 8013702:	891a      	ldrh	r2, [r3, #8]
 8013704:	6a3b      	ldr	r3, [r7, #32]
 8013706:	891b      	ldrh	r3, [r3, #8]
 8013708:	1ad3      	subs	r3, r2, r3
 801370a:	b29b      	uxth	r3, r3
 801370c:	2201      	movs	r2, #1
 801370e:	6939      	ldr	r1, [r7, #16]
 8013710:	f7f9 fde4 	bl	800d2dc <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8013714:	6a3b      	ldr	r3, [r7, #32]
 8013716:	68db      	ldr	r3, [r3, #12]
 8013718:	685b      	ldr	r3, [r3, #4]
 801371a:	4618      	mov	r0, r3
 801371c:	f7f7 ffb9 	bl	800b692 <lwip_htonl>
 8013720:	4603      	mov	r3, r0
 8013722:	3301      	adds	r3, #1
 8013724:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801372a:	68fb      	ldr	r3, [r7, #12]
 801372c:	1ad3      	subs	r3, r2, r3
 801372e:	2b00      	cmp	r3, #0
 8013730:	da02      	bge.n	8013738 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	68fa      	ldr	r2, [r7, #12]
 8013736:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013738:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801373c:	2200      	movs	r2, #0
 801373e:	69b9      	ldr	r1, [r7, #24]
 8013740:	6878      	ldr	r0, [r7, #4]
 8013742:	f7ff fdef 	bl	8013324 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013746:	687a      	ldr	r2, [r7, #4]
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	3304      	adds	r3, #4
 801374c:	69b9      	ldr	r1, [r7, #24]
 801374e:	6878      	ldr	r0, [r7, #4]
 8013750:	f7ff fe26 	bl	80133a0 <tcp_output_control_segment>
 8013754:	4603      	mov	r3, r0
 8013756:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013758:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801375c:	4618      	mov	r0, r3
 801375e:	372c      	adds	r7, #44	@ 0x2c
 8013760:	46bd      	mov	sp, r7
 8013762:	bd90      	pop	{r4, r7, pc}
 8013764:	0801c660 	.word	0x0801c660
 8013768:	0801ce58 	.word	0x0801ce58
 801376c:	0801c6b4 	.word	0x0801c6b4

08013770 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8013770:	b580      	push	{r7, lr}
 8013772:	b082      	sub	sp, #8
 8013774:	af00      	add	r7, sp, #0
 8013776:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8013778:	f7f9 fe9e 	bl	800d4b8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801377c:	4b0a      	ldr	r3, [pc, #40]	@ (80137a8 <tcpip_tcp_timer+0x38>)
 801377e:	681b      	ldr	r3, [r3, #0]
 8013780:	2b00      	cmp	r3, #0
 8013782:	d103      	bne.n	801378c <tcpip_tcp_timer+0x1c>
 8013784:	4b09      	ldr	r3, [pc, #36]	@ (80137ac <tcpip_tcp_timer+0x3c>)
 8013786:	681b      	ldr	r3, [r3, #0]
 8013788:	2b00      	cmp	r3, #0
 801378a:	d005      	beq.n	8013798 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801378c:	2200      	movs	r2, #0
 801378e:	4908      	ldr	r1, [pc, #32]	@ (80137b0 <tcpip_tcp_timer+0x40>)
 8013790:	20fa      	movs	r0, #250	@ 0xfa
 8013792:	f000 f8f3 	bl	801397c <sys_timeout>
 8013796:	e003      	b.n	80137a0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8013798:	4b06      	ldr	r3, [pc, #24]	@ (80137b4 <tcpip_tcp_timer+0x44>)
 801379a:	2200      	movs	r2, #0
 801379c:	601a      	str	r2, [r3, #0]
  }
}
 801379e:	bf00      	nop
 80137a0:	bf00      	nop
 80137a2:	3708      	adds	r7, #8
 80137a4:	46bd      	mov	sp, r7
 80137a6:	bd80      	pop	{r7, pc}
 80137a8:	20010e80 	.word	0x20010e80
 80137ac:	20010e84 	.word	0x20010e84
 80137b0:	08013771 	.word	0x08013771
 80137b4:	20010ecc 	.word	0x20010ecc

080137b8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80137b8:	b580      	push	{r7, lr}
 80137ba:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80137bc:	4b0a      	ldr	r3, [pc, #40]	@ (80137e8 <tcp_timer_needed+0x30>)
 80137be:	681b      	ldr	r3, [r3, #0]
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	d10f      	bne.n	80137e4 <tcp_timer_needed+0x2c>
 80137c4:	4b09      	ldr	r3, [pc, #36]	@ (80137ec <tcp_timer_needed+0x34>)
 80137c6:	681b      	ldr	r3, [r3, #0]
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d103      	bne.n	80137d4 <tcp_timer_needed+0x1c>
 80137cc:	4b08      	ldr	r3, [pc, #32]	@ (80137f0 <tcp_timer_needed+0x38>)
 80137ce:	681b      	ldr	r3, [r3, #0]
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	d007      	beq.n	80137e4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80137d4:	4b04      	ldr	r3, [pc, #16]	@ (80137e8 <tcp_timer_needed+0x30>)
 80137d6:	2201      	movs	r2, #1
 80137d8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80137da:	2200      	movs	r2, #0
 80137dc:	4905      	ldr	r1, [pc, #20]	@ (80137f4 <tcp_timer_needed+0x3c>)
 80137de:	20fa      	movs	r0, #250	@ 0xfa
 80137e0:	f000 f8cc 	bl	801397c <sys_timeout>
  }
}
 80137e4:	bf00      	nop
 80137e6:	bd80      	pop	{r7, pc}
 80137e8:	20010ecc 	.word	0x20010ecc
 80137ec:	20010e80 	.word	0x20010e80
 80137f0:	20010e84 	.word	0x20010e84
 80137f4:	08013771 	.word	0x08013771

080137f8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80137f8:	b580      	push	{r7, lr}
 80137fa:	b086      	sub	sp, #24
 80137fc:	af00      	add	r7, sp, #0
 80137fe:	60f8      	str	r0, [r7, #12]
 8013800:	60b9      	str	r1, [r7, #8]
 8013802:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8013804:	200a      	movs	r0, #10
 8013806:	f7f8 fc3d 	bl	800c084 <memp_malloc>
 801380a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801380c:	693b      	ldr	r3, [r7, #16]
 801380e:	2b00      	cmp	r3, #0
 8013810:	d109      	bne.n	8013826 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8013812:	693b      	ldr	r3, [r7, #16]
 8013814:	2b00      	cmp	r3, #0
 8013816:	d151      	bne.n	80138bc <sys_timeout_abs+0xc4>
 8013818:	4b2a      	ldr	r3, [pc, #168]	@ (80138c4 <sys_timeout_abs+0xcc>)
 801381a:	22be      	movs	r2, #190	@ 0xbe
 801381c:	492a      	ldr	r1, [pc, #168]	@ (80138c8 <sys_timeout_abs+0xd0>)
 801381e:	482b      	ldr	r0, [pc, #172]	@ (80138cc <sys_timeout_abs+0xd4>)
 8013820:	f005 fa90 	bl	8018d44 <iprintf>
    return;
 8013824:	e04a      	b.n	80138bc <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8013826:	693b      	ldr	r3, [r7, #16]
 8013828:	2200      	movs	r2, #0
 801382a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801382c:	693b      	ldr	r3, [r7, #16]
 801382e:	68ba      	ldr	r2, [r7, #8]
 8013830:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8013832:	693b      	ldr	r3, [r7, #16]
 8013834:	687a      	ldr	r2, [r7, #4]
 8013836:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8013838:	693b      	ldr	r3, [r7, #16]
 801383a:	68fa      	ldr	r2, [r7, #12]
 801383c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801383e:	4b24      	ldr	r3, [pc, #144]	@ (80138d0 <sys_timeout_abs+0xd8>)
 8013840:	681b      	ldr	r3, [r3, #0]
 8013842:	2b00      	cmp	r3, #0
 8013844:	d103      	bne.n	801384e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8013846:	4a22      	ldr	r2, [pc, #136]	@ (80138d0 <sys_timeout_abs+0xd8>)
 8013848:	693b      	ldr	r3, [r7, #16]
 801384a:	6013      	str	r3, [r2, #0]
    return;
 801384c:	e037      	b.n	80138be <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801384e:	693b      	ldr	r3, [r7, #16]
 8013850:	685a      	ldr	r2, [r3, #4]
 8013852:	4b1f      	ldr	r3, [pc, #124]	@ (80138d0 <sys_timeout_abs+0xd8>)
 8013854:	681b      	ldr	r3, [r3, #0]
 8013856:	685b      	ldr	r3, [r3, #4]
 8013858:	1ad3      	subs	r3, r2, r3
 801385a:	0fdb      	lsrs	r3, r3, #31
 801385c:	f003 0301 	and.w	r3, r3, #1
 8013860:	b2db      	uxtb	r3, r3
 8013862:	2b00      	cmp	r3, #0
 8013864:	d007      	beq.n	8013876 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8013866:	4b1a      	ldr	r3, [pc, #104]	@ (80138d0 <sys_timeout_abs+0xd8>)
 8013868:	681a      	ldr	r2, [r3, #0]
 801386a:	693b      	ldr	r3, [r7, #16]
 801386c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801386e:	4a18      	ldr	r2, [pc, #96]	@ (80138d0 <sys_timeout_abs+0xd8>)
 8013870:	693b      	ldr	r3, [r7, #16]
 8013872:	6013      	str	r3, [r2, #0]
 8013874:	e023      	b.n	80138be <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8013876:	4b16      	ldr	r3, [pc, #88]	@ (80138d0 <sys_timeout_abs+0xd8>)
 8013878:	681b      	ldr	r3, [r3, #0]
 801387a:	617b      	str	r3, [r7, #20]
 801387c:	e01a      	b.n	80138b4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801387e:	697b      	ldr	r3, [r7, #20]
 8013880:	681b      	ldr	r3, [r3, #0]
 8013882:	2b00      	cmp	r3, #0
 8013884:	d00b      	beq.n	801389e <sys_timeout_abs+0xa6>
 8013886:	693b      	ldr	r3, [r7, #16]
 8013888:	685a      	ldr	r2, [r3, #4]
 801388a:	697b      	ldr	r3, [r7, #20]
 801388c:	681b      	ldr	r3, [r3, #0]
 801388e:	685b      	ldr	r3, [r3, #4]
 8013890:	1ad3      	subs	r3, r2, r3
 8013892:	0fdb      	lsrs	r3, r3, #31
 8013894:	f003 0301 	and.w	r3, r3, #1
 8013898:	b2db      	uxtb	r3, r3
 801389a:	2b00      	cmp	r3, #0
 801389c:	d007      	beq.n	80138ae <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801389e:	697b      	ldr	r3, [r7, #20]
 80138a0:	681a      	ldr	r2, [r3, #0]
 80138a2:	693b      	ldr	r3, [r7, #16]
 80138a4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80138a6:	697b      	ldr	r3, [r7, #20]
 80138a8:	693a      	ldr	r2, [r7, #16]
 80138aa:	601a      	str	r2, [r3, #0]
        break;
 80138ac:	e007      	b.n	80138be <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80138ae:	697b      	ldr	r3, [r7, #20]
 80138b0:	681b      	ldr	r3, [r3, #0]
 80138b2:	617b      	str	r3, [r7, #20]
 80138b4:	697b      	ldr	r3, [r7, #20]
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	d1e1      	bne.n	801387e <sys_timeout_abs+0x86>
 80138ba:	e000      	b.n	80138be <sys_timeout_abs+0xc6>
    return;
 80138bc:	bf00      	nop
      }
    }
  }
}
 80138be:	3718      	adds	r7, #24
 80138c0:	46bd      	mov	sp, r7
 80138c2:	bd80      	pop	{r7, pc}
 80138c4:	0801ce7c 	.word	0x0801ce7c
 80138c8:	0801ceb0 	.word	0x0801ceb0
 80138cc:	0801cef0 	.word	0x0801cef0
 80138d0:	20010ec4 	.word	0x20010ec4

080138d4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80138d4:	b580      	push	{r7, lr}
 80138d6:	b086      	sub	sp, #24
 80138d8:	af00      	add	r7, sp, #0
 80138da:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80138e0:	697b      	ldr	r3, [r7, #20]
 80138e2:	685b      	ldr	r3, [r3, #4]
 80138e4:	4798      	blx	r3

  now = sys_now();
 80138e6:	f7f1 f9af 	bl	8004c48 <sys_now>
 80138ea:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80138ec:	697b      	ldr	r3, [r7, #20]
 80138ee:	681a      	ldr	r2, [r3, #0]
 80138f0:	4b0f      	ldr	r3, [pc, #60]	@ (8013930 <lwip_cyclic_timer+0x5c>)
 80138f2:	681b      	ldr	r3, [r3, #0]
 80138f4:	4413      	add	r3, r2
 80138f6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80138f8:	68fa      	ldr	r2, [r7, #12]
 80138fa:	693b      	ldr	r3, [r7, #16]
 80138fc:	1ad3      	subs	r3, r2, r3
 80138fe:	0fdb      	lsrs	r3, r3, #31
 8013900:	f003 0301 	and.w	r3, r3, #1
 8013904:	b2db      	uxtb	r3, r3
 8013906:	2b00      	cmp	r3, #0
 8013908:	d009      	beq.n	801391e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801390a:	697b      	ldr	r3, [r7, #20]
 801390c:	681a      	ldr	r2, [r3, #0]
 801390e:	693b      	ldr	r3, [r7, #16]
 8013910:	4413      	add	r3, r2
 8013912:	687a      	ldr	r2, [r7, #4]
 8013914:	4907      	ldr	r1, [pc, #28]	@ (8013934 <lwip_cyclic_timer+0x60>)
 8013916:	4618      	mov	r0, r3
 8013918:	f7ff ff6e 	bl	80137f8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801391c:	e004      	b.n	8013928 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801391e:	687a      	ldr	r2, [r7, #4]
 8013920:	4904      	ldr	r1, [pc, #16]	@ (8013934 <lwip_cyclic_timer+0x60>)
 8013922:	68f8      	ldr	r0, [r7, #12]
 8013924:	f7ff ff68 	bl	80137f8 <sys_timeout_abs>
}
 8013928:	bf00      	nop
 801392a:	3718      	adds	r7, #24
 801392c:	46bd      	mov	sp, r7
 801392e:	bd80      	pop	{r7, pc}
 8013930:	20010ec8 	.word	0x20010ec8
 8013934:	080138d5 	.word	0x080138d5

08013938 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8013938:	b580      	push	{r7, lr}
 801393a:	b082      	sub	sp, #8
 801393c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801393e:	2301      	movs	r3, #1
 8013940:	607b      	str	r3, [r7, #4]
 8013942:	e00e      	b.n	8013962 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8013944:	4a0b      	ldr	r2, [pc, #44]	@ (8013974 <sys_timeouts_init+0x3c>)
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	00db      	lsls	r3, r3, #3
 8013950:	4a08      	ldr	r2, [pc, #32]	@ (8013974 <sys_timeouts_init+0x3c>)
 8013952:	4413      	add	r3, r2
 8013954:	461a      	mov	r2, r3
 8013956:	4908      	ldr	r1, [pc, #32]	@ (8013978 <sys_timeouts_init+0x40>)
 8013958:	f000 f810 	bl	801397c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	3301      	adds	r3, #1
 8013960:	607b      	str	r3, [r7, #4]
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	2b04      	cmp	r3, #4
 8013966:	d9ed      	bls.n	8013944 <sys_timeouts_init+0xc>
  }
}
 8013968:	bf00      	nop
 801396a:	bf00      	nop
 801396c:	3708      	adds	r7, #8
 801396e:	46bd      	mov	sp, r7
 8013970:	bd80      	pop	{r7, pc}
 8013972:	bf00      	nop
 8013974:	08027f84 	.word	0x08027f84
 8013978:	080138d5 	.word	0x080138d5

0801397c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801397c:	b580      	push	{r7, lr}
 801397e:	b086      	sub	sp, #24
 8013980:	af00      	add	r7, sp, #0
 8013982:	60f8      	str	r0, [r7, #12]
 8013984:	60b9      	str	r1, [r7, #8]
 8013986:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8013988:	68fb      	ldr	r3, [r7, #12]
 801398a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801398e:	d306      	bcc.n	801399e <sys_timeout+0x22>
 8013990:	4b0a      	ldr	r3, [pc, #40]	@ (80139bc <sys_timeout+0x40>)
 8013992:	f240 1229 	movw	r2, #297	@ 0x129
 8013996:	490a      	ldr	r1, [pc, #40]	@ (80139c0 <sys_timeout+0x44>)
 8013998:	480a      	ldr	r0, [pc, #40]	@ (80139c4 <sys_timeout+0x48>)
 801399a:	f005 f9d3 	bl	8018d44 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801399e:	f7f1 f953 	bl	8004c48 <sys_now>
 80139a2:	4602      	mov	r2, r0
 80139a4:	68fb      	ldr	r3, [r7, #12]
 80139a6:	4413      	add	r3, r2
 80139a8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80139aa:	687a      	ldr	r2, [r7, #4]
 80139ac:	68b9      	ldr	r1, [r7, #8]
 80139ae:	6978      	ldr	r0, [r7, #20]
 80139b0:	f7ff ff22 	bl	80137f8 <sys_timeout_abs>
#endif
}
 80139b4:	bf00      	nop
 80139b6:	3718      	adds	r7, #24
 80139b8:	46bd      	mov	sp, r7
 80139ba:	bd80      	pop	{r7, pc}
 80139bc:	0801ce7c 	.word	0x0801ce7c
 80139c0:	0801cf18 	.word	0x0801cf18
 80139c4:	0801cef0 	.word	0x0801cef0

080139c8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80139c8:	b580      	push	{r7, lr}
 80139ca:	b084      	sub	sp, #16
 80139cc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80139ce:	f7f1 f93b 	bl	8004c48 <sys_now>
 80139d2:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80139d4:	4b17      	ldr	r3, [pc, #92]	@ (8013a34 <sys_check_timeouts+0x6c>)
 80139d6:	681b      	ldr	r3, [r3, #0]
 80139d8:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80139da:	68bb      	ldr	r3, [r7, #8]
 80139dc:	2b00      	cmp	r3, #0
 80139de:	d022      	beq.n	8013a26 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80139e0:	68bb      	ldr	r3, [r7, #8]
 80139e2:	685b      	ldr	r3, [r3, #4]
 80139e4:	68fa      	ldr	r2, [r7, #12]
 80139e6:	1ad3      	subs	r3, r2, r3
 80139e8:	0fdb      	lsrs	r3, r3, #31
 80139ea:	f003 0301 	and.w	r3, r3, #1
 80139ee:	b2db      	uxtb	r3, r3
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d11a      	bne.n	8013a2a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80139f4:	68bb      	ldr	r3, [r7, #8]
 80139f6:	681b      	ldr	r3, [r3, #0]
 80139f8:	4a0e      	ldr	r2, [pc, #56]	@ (8013a34 <sys_check_timeouts+0x6c>)
 80139fa:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80139fc:	68bb      	ldr	r3, [r7, #8]
 80139fe:	689b      	ldr	r3, [r3, #8]
 8013a00:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8013a02:	68bb      	ldr	r3, [r7, #8]
 8013a04:	68db      	ldr	r3, [r3, #12]
 8013a06:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8013a08:	68bb      	ldr	r3, [r7, #8]
 8013a0a:	685b      	ldr	r3, [r3, #4]
 8013a0c:	4a0a      	ldr	r2, [pc, #40]	@ (8013a38 <sys_check_timeouts+0x70>)
 8013a0e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8013a10:	68b9      	ldr	r1, [r7, #8]
 8013a12:	200a      	movs	r0, #10
 8013a14:	f7f8 fbac 	bl	800c170 <memp_free>
    if (handler != NULL) {
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	d0da      	beq.n	80139d4 <sys_check_timeouts+0xc>
      handler(arg);
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	6838      	ldr	r0, [r7, #0]
 8013a22:	4798      	blx	r3
  do {
 8013a24:	e7d6      	b.n	80139d4 <sys_check_timeouts+0xc>
      return;
 8013a26:	bf00      	nop
 8013a28:	e000      	b.n	8013a2c <sys_check_timeouts+0x64>
      return;
 8013a2a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8013a2c:	3710      	adds	r7, #16
 8013a2e:	46bd      	mov	sp, r7
 8013a30:	bd80      	pop	{r7, pc}
 8013a32:	bf00      	nop
 8013a34:	20010ec4 	.word	0x20010ec4
 8013a38:	20010ec8 	.word	0x20010ec8

08013a3c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8013a3c:	b580      	push	{r7, lr}
 8013a3e:	b082      	sub	sp, #8
 8013a40:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8013a42:	4b16      	ldr	r3, [pc, #88]	@ (8013a9c <sys_timeouts_sleeptime+0x60>)
 8013a44:	681b      	ldr	r3, [r3, #0]
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	d102      	bne.n	8013a50 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8013a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8013a4e:	e020      	b.n	8013a92 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8013a50:	f7f1 f8fa 	bl	8004c48 <sys_now>
 8013a54:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8013a56:	4b11      	ldr	r3, [pc, #68]	@ (8013a9c <sys_timeouts_sleeptime+0x60>)
 8013a58:	681b      	ldr	r3, [r3, #0]
 8013a5a:	685a      	ldr	r2, [r3, #4]
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	1ad3      	subs	r3, r2, r3
 8013a60:	0fdb      	lsrs	r3, r3, #31
 8013a62:	f003 0301 	and.w	r3, r3, #1
 8013a66:	b2db      	uxtb	r3, r3
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	d001      	beq.n	8013a70 <sys_timeouts_sleeptime+0x34>
    return 0;
 8013a6c:	2300      	movs	r3, #0
 8013a6e:	e010      	b.n	8013a92 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8013a70:	4b0a      	ldr	r3, [pc, #40]	@ (8013a9c <sys_timeouts_sleeptime+0x60>)
 8013a72:	681b      	ldr	r3, [r3, #0]
 8013a74:	685a      	ldr	r2, [r3, #4]
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	1ad3      	subs	r3, r2, r3
 8013a7a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8013a7c:	683b      	ldr	r3, [r7, #0]
 8013a7e:	2b00      	cmp	r3, #0
 8013a80:	da06      	bge.n	8013a90 <sys_timeouts_sleeptime+0x54>
 8013a82:	4b07      	ldr	r3, [pc, #28]	@ (8013aa0 <sys_timeouts_sleeptime+0x64>)
 8013a84:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8013a88:	4906      	ldr	r1, [pc, #24]	@ (8013aa4 <sys_timeouts_sleeptime+0x68>)
 8013a8a:	4807      	ldr	r0, [pc, #28]	@ (8013aa8 <sys_timeouts_sleeptime+0x6c>)
 8013a8c:	f005 f95a 	bl	8018d44 <iprintf>
    return ret;
 8013a90:	683b      	ldr	r3, [r7, #0]
  }
}
 8013a92:	4618      	mov	r0, r3
 8013a94:	3708      	adds	r7, #8
 8013a96:	46bd      	mov	sp, r7
 8013a98:	bd80      	pop	{r7, pc}
 8013a9a:	bf00      	nop
 8013a9c:	20010ec4 	.word	0x20010ec4
 8013aa0:	0801ce7c 	.word	0x0801ce7c
 8013aa4:	0801cf50 	.word	0x0801cf50
 8013aa8:	0801cef0 	.word	0x0801cef0

08013aac <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8013aac:	b580      	push	{r7, lr}
 8013aae:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8013ab0:	f005 f848 	bl	8018b44 <rand>
 8013ab4:	4603      	mov	r3, r0
 8013ab6:	b29b      	uxth	r3, r3
 8013ab8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8013abc:	b29b      	uxth	r3, r3
 8013abe:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8013ac2:	b29a      	uxth	r2, r3
 8013ac4:	4b01      	ldr	r3, [pc, #4]	@ (8013acc <udp_init+0x20>)
 8013ac6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8013ac8:	bf00      	nop
 8013aca:	bd80      	pop	{r7, pc}
 8013acc:	2000002c 	.word	0x2000002c

08013ad0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8013ad0:	b480      	push	{r7}
 8013ad2:	b083      	sub	sp, #12
 8013ad4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8013ad6:	2300      	movs	r3, #0
 8013ad8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8013ada:	4b17      	ldr	r3, [pc, #92]	@ (8013b38 <udp_new_port+0x68>)
 8013adc:	881b      	ldrh	r3, [r3, #0]
 8013ade:	1c5a      	adds	r2, r3, #1
 8013ae0:	b291      	uxth	r1, r2
 8013ae2:	4a15      	ldr	r2, [pc, #84]	@ (8013b38 <udp_new_port+0x68>)
 8013ae4:	8011      	strh	r1, [r2, #0]
 8013ae6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013aea:	4293      	cmp	r3, r2
 8013aec:	d103      	bne.n	8013af6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8013aee:	4b12      	ldr	r3, [pc, #72]	@ (8013b38 <udp_new_port+0x68>)
 8013af0:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8013af4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013af6:	4b11      	ldr	r3, [pc, #68]	@ (8013b3c <udp_new_port+0x6c>)
 8013af8:	681b      	ldr	r3, [r3, #0]
 8013afa:	603b      	str	r3, [r7, #0]
 8013afc:	e011      	b.n	8013b22 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8013afe:	683b      	ldr	r3, [r7, #0]
 8013b00:	8a5a      	ldrh	r2, [r3, #18]
 8013b02:	4b0d      	ldr	r3, [pc, #52]	@ (8013b38 <udp_new_port+0x68>)
 8013b04:	881b      	ldrh	r3, [r3, #0]
 8013b06:	429a      	cmp	r2, r3
 8013b08:	d108      	bne.n	8013b1c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8013b0a:	88fb      	ldrh	r3, [r7, #6]
 8013b0c:	3301      	adds	r3, #1
 8013b0e:	80fb      	strh	r3, [r7, #6]
 8013b10:	88fb      	ldrh	r3, [r7, #6]
 8013b12:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8013b16:	d3e0      	bcc.n	8013ada <udp_new_port+0xa>
        return 0;
 8013b18:	2300      	movs	r3, #0
 8013b1a:	e007      	b.n	8013b2c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013b1c:	683b      	ldr	r3, [r7, #0]
 8013b1e:	68db      	ldr	r3, [r3, #12]
 8013b20:	603b      	str	r3, [r7, #0]
 8013b22:	683b      	ldr	r3, [r7, #0]
 8013b24:	2b00      	cmp	r3, #0
 8013b26:	d1ea      	bne.n	8013afe <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8013b28:	4b03      	ldr	r3, [pc, #12]	@ (8013b38 <udp_new_port+0x68>)
 8013b2a:	881b      	ldrh	r3, [r3, #0]
}
 8013b2c:	4618      	mov	r0, r3
 8013b2e:	370c      	adds	r7, #12
 8013b30:	46bd      	mov	sp, r7
 8013b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b36:	4770      	bx	lr
 8013b38:	2000002c 	.word	0x2000002c
 8013b3c:	20010ed0 	.word	0x20010ed0

08013b40 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8013b40:	b580      	push	{r7, lr}
 8013b42:	b084      	sub	sp, #16
 8013b44:	af00      	add	r7, sp, #0
 8013b46:	60f8      	str	r0, [r7, #12]
 8013b48:	60b9      	str	r1, [r7, #8]
 8013b4a:	4613      	mov	r3, r2
 8013b4c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8013b4e:	68fb      	ldr	r3, [r7, #12]
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	d105      	bne.n	8013b60 <udp_input_local_match+0x20>
 8013b54:	4b27      	ldr	r3, [pc, #156]	@ (8013bf4 <udp_input_local_match+0xb4>)
 8013b56:	2287      	movs	r2, #135	@ 0x87
 8013b58:	4927      	ldr	r1, [pc, #156]	@ (8013bf8 <udp_input_local_match+0xb8>)
 8013b5a:	4828      	ldr	r0, [pc, #160]	@ (8013bfc <udp_input_local_match+0xbc>)
 8013b5c:	f005 f8f2 	bl	8018d44 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8013b60:	68bb      	ldr	r3, [r7, #8]
 8013b62:	2b00      	cmp	r3, #0
 8013b64:	d105      	bne.n	8013b72 <udp_input_local_match+0x32>
 8013b66:	4b23      	ldr	r3, [pc, #140]	@ (8013bf4 <udp_input_local_match+0xb4>)
 8013b68:	2288      	movs	r2, #136	@ 0x88
 8013b6a:	4925      	ldr	r1, [pc, #148]	@ (8013c00 <udp_input_local_match+0xc0>)
 8013b6c:	4823      	ldr	r0, [pc, #140]	@ (8013bfc <udp_input_local_match+0xbc>)
 8013b6e:	f005 f8e9 	bl	8018d44 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013b72:	68fb      	ldr	r3, [r7, #12]
 8013b74:	7a1b      	ldrb	r3, [r3, #8]
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	d00b      	beq.n	8013b92 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013b7a:	68fb      	ldr	r3, [r7, #12]
 8013b7c:	7a1a      	ldrb	r2, [r3, #8]
 8013b7e:	4b21      	ldr	r3, [pc, #132]	@ (8013c04 <udp_input_local_match+0xc4>)
 8013b80:	685b      	ldr	r3, [r3, #4]
 8013b82:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8013b86:	3301      	adds	r3, #1
 8013b88:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013b8a:	429a      	cmp	r2, r3
 8013b8c:	d001      	beq.n	8013b92 <udp_input_local_match+0x52>
    return 0;
 8013b8e:	2300      	movs	r3, #0
 8013b90:	e02b      	b.n	8013bea <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8013b92:	79fb      	ldrb	r3, [r7, #7]
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	d018      	beq.n	8013bca <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013b98:	68fb      	ldr	r3, [r7, #12]
 8013b9a:	2b00      	cmp	r3, #0
 8013b9c:	d013      	beq.n	8013bc6 <udp_input_local_match+0x86>
 8013b9e:	68fb      	ldr	r3, [r7, #12]
 8013ba0:	681b      	ldr	r3, [r3, #0]
 8013ba2:	2b00      	cmp	r3, #0
 8013ba4:	d00f      	beq.n	8013bc6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013ba6:	4b17      	ldr	r3, [pc, #92]	@ (8013c04 <udp_input_local_match+0xc4>)
 8013ba8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013bae:	d00a      	beq.n	8013bc6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8013bb0:	68fb      	ldr	r3, [r7, #12]
 8013bb2:	681a      	ldr	r2, [r3, #0]
 8013bb4:	4b13      	ldr	r3, [pc, #76]	@ (8013c04 <udp_input_local_match+0xc4>)
 8013bb6:	695b      	ldr	r3, [r3, #20]
 8013bb8:	405a      	eors	r2, r3
 8013bba:	68bb      	ldr	r3, [r7, #8]
 8013bbc:	3308      	adds	r3, #8
 8013bbe:	681b      	ldr	r3, [r3, #0]
 8013bc0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	d110      	bne.n	8013be8 <udp_input_local_match+0xa8>
          return 1;
 8013bc6:	2301      	movs	r3, #1
 8013bc8:	e00f      	b.n	8013bea <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013bca:	68fb      	ldr	r3, [r7, #12]
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d009      	beq.n	8013be4 <udp_input_local_match+0xa4>
 8013bd0:	68fb      	ldr	r3, [r7, #12]
 8013bd2:	681b      	ldr	r3, [r3, #0]
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	d005      	beq.n	8013be4 <udp_input_local_match+0xa4>
 8013bd8:	68fb      	ldr	r3, [r7, #12]
 8013bda:	681a      	ldr	r2, [r3, #0]
 8013bdc:	4b09      	ldr	r3, [pc, #36]	@ (8013c04 <udp_input_local_match+0xc4>)
 8013bde:	695b      	ldr	r3, [r3, #20]
 8013be0:	429a      	cmp	r2, r3
 8013be2:	d101      	bne.n	8013be8 <udp_input_local_match+0xa8>
        return 1;
 8013be4:	2301      	movs	r3, #1
 8013be6:	e000      	b.n	8013bea <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8013be8:	2300      	movs	r3, #0
}
 8013bea:	4618      	mov	r0, r3
 8013bec:	3710      	adds	r7, #16
 8013bee:	46bd      	mov	sp, r7
 8013bf0:	bd80      	pop	{r7, pc}
 8013bf2:	bf00      	nop
 8013bf4:	0801cf64 	.word	0x0801cf64
 8013bf8:	0801cf94 	.word	0x0801cf94
 8013bfc:	0801cfb8 	.word	0x0801cfb8
 8013c00:	0801cfe0 	.word	0x0801cfe0
 8013c04:	2000d700 	.word	0x2000d700

08013c08 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8013c08:	b590      	push	{r4, r7, lr}
 8013c0a:	b08d      	sub	sp, #52	@ 0x34
 8013c0c:	af02      	add	r7, sp, #8
 8013c0e:	6078      	str	r0, [r7, #4]
 8013c10:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8013c12:	2300      	movs	r3, #0
 8013c14:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	d105      	bne.n	8013c28 <udp_input+0x20>
 8013c1c:	4b7c      	ldr	r3, [pc, #496]	@ (8013e10 <udp_input+0x208>)
 8013c1e:	22cf      	movs	r2, #207	@ 0xcf
 8013c20:	497c      	ldr	r1, [pc, #496]	@ (8013e14 <udp_input+0x20c>)
 8013c22:	487d      	ldr	r0, [pc, #500]	@ (8013e18 <udp_input+0x210>)
 8013c24:	f005 f88e 	bl	8018d44 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8013c28:	683b      	ldr	r3, [r7, #0]
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	d105      	bne.n	8013c3a <udp_input+0x32>
 8013c2e:	4b78      	ldr	r3, [pc, #480]	@ (8013e10 <udp_input+0x208>)
 8013c30:	22d0      	movs	r2, #208	@ 0xd0
 8013c32:	497a      	ldr	r1, [pc, #488]	@ (8013e1c <udp_input+0x214>)
 8013c34:	4878      	ldr	r0, [pc, #480]	@ (8013e18 <udp_input+0x210>)
 8013c36:	f005 f885 	bl	8018d44 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	895b      	ldrh	r3, [r3, #10]
 8013c3e:	2b07      	cmp	r3, #7
 8013c40:	d803      	bhi.n	8013c4a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8013c42:	6878      	ldr	r0, [r7, #4]
 8013c44:	f7f9 f944 	bl	800ced0 <pbuf_free>
    goto end;
 8013c48:	e0de      	b.n	8013e08 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	685b      	ldr	r3, [r3, #4]
 8013c4e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8013c50:	4b73      	ldr	r3, [pc, #460]	@ (8013e20 <udp_input+0x218>)
 8013c52:	695b      	ldr	r3, [r3, #20]
 8013c54:	4a72      	ldr	r2, [pc, #456]	@ (8013e20 <udp_input+0x218>)
 8013c56:	6812      	ldr	r2, [r2, #0]
 8013c58:	4611      	mov	r1, r2
 8013c5a:	4618      	mov	r0, r3
 8013c5c:	f003 fe0c 	bl	8017878 <ip4_addr_isbroadcast_u32>
 8013c60:	4603      	mov	r3, r0
 8013c62:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8013c64:	697b      	ldr	r3, [r7, #20]
 8013c66:	881b      	ldrh	r3, [r3, #0]
 8013c68:	b29b      	uxth	r3, r3
 8013c6a:	4618      	mov	r0, r3
 8013c6c:	f7f7 fcfc 	bl	800b668 <lwip_htons>
 8013c70:	4603      	mov	r3, r0
 8013c72:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8013c74:	697b      	ldr	r3, [r7, #20]
 8013c76:	885b      	ldrh	r3, [r3, #2]
 8013c78:	b29b      	uxth	r3, r3
 8013c7a:	4618      	mov	r0, r3
 8013c7c:	f7f7 fcf4 	bl	800b668 <lwip_htons>
 8013c80:	4603      	mov	r3, r0
 8013c82:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8013c84:	2300      	movs	r3, #0
 8013c86:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8013c88:	2300      	movs	r3, #0
 8013c8a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8013c8c:	2300      	movs	r3, #0
 8013c8e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013c90:	4b64      	ldr	r3, [pc, #400]	@ (8013e24 <udp_input+0x21c>)
 8013c92:	681b      	ldr	r3, [r3, #0]
 8013c94:	627b      	str	r3, [r7, #36]	@ 0x24
 8013c96:	e054      	b.n	8013d42 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8013c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c9a:	8a5b      	ldrh	r3, [r3, #18]
 8013c9c:	89fa      	ldrh	r2, [r7, #14]
 8013c9e:	429a      	cmp	r2, r3
 8013ca0:	d14a      	bne.n	8013d38 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8013ca2:	7cfb      	ldrb	r3, [r7, #19]
 8013ca4:	461a      	mov	r2, r3
 8013ca6:	6839      	ldr	r1, [r7, #0]
 8013ca8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013caa:	f7ff ff49 	bl	8013b40 <udp_input_local_match>
 8013cae:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8013cb0:	2b00      	cmp	r3, #0
 8013cb2:	d041      	beq.n	8013d38 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8013cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013cb6:	7c1b      	ldrb	r3, [r3, #16]
 8013cb8:	f003 0304 	and.w	r3, r3, #4
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	d11d      	bne.n	8013cfc <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8013cc0:	69fb      	ldr	r3, [r7, #28]
 8013cc2:	2b00      	cmp	r3, #0
 8013cc4:	d102      	bne.n	8013ccc <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8013cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013cc8:	61fb      	str	r3, [r7, #28]
 8013cca:	e017      	b.n	8013cfc <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8013ccc:	7cfb      	ldrb	r3, [r7, #19]
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d014      	beq.n	8013cfc <udp_input+0xf4>
 8013cd2:	4b53      	ldr	r3, [pc, #332]	@ (8013e20 <udp_input+0x218>)
 8013cd4:	695b      	ldr	r3, [r3, #20]
 8013cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013cda:	d10f      	bne.n	8013cfc <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8013cdc:	69fb      	ldr	r3, [r7, #28]
 8013cde:	681a      	ldr	r2, [r3, #0]
 8013ce0:	683b      	ldr	r3, [r7, #0]
 8013ce2:	3304      	adds	r3, #4
 8013ce4:	681b      	ldr	r3, [r3, #0]
 8013ce6:	429a      	cmp	r2, r3
 8013ce8:	d008      	beq.n	8013cfc <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8013cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013cec:	681a      	ldr	r2, [r3, #0]
 8013cee:	683b      	ldr	r3, [r7, #0]
 8013cf0:	3304      	adds	r3, #4
 8013cf2:	681b      	ldr	r3, [r3, #0]
 8013cf4:	429a      	cmp	r2, r3
 8013cf6:	d101      	bne.n	8013cfc <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8013cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013cfa:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8013cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013cfe:	8a9b      	ldrh	r3, [r3, #20]
 8013d00:	8a3a      	ldrh	r2, [r7, #16]
 8013d02:	429a      	cmp	r2, r3
 8013d04:	d118      	bne.n	8013d38 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d08:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8013d0a:	2b00      	cmp	r3, #0
 8013d0c:	d005      	beq.n	8013d1a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8013d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d10:	685a      	ldr	r2, [r3, #4]
 8013d12:	4b43      	ldr	r3, [pc, #268]	@ (8013e20 <udp_input+0x218>)
 8013d14:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013d16:	429a      	cmp	r2, r3
 8013d18:	d10e      	bne.n	8013d38 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8013d1a:	6a3b      	ldr	r3, [r7, #32]
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	d014      	beq.n	8013d4a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8013d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d22:	68da      	ldr	r2, [r3, #12]
 8013d24:	6a3b      	ldr	r3, [r7, #32]
 8013d26:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8013d28:	4b3e      	ldr	r3, [pc, #248]	@ (8013e24 <udp_input+0x21c>)
 8013d2a:	681a      	ldr	r2, [r3, #0]
 8013d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d2e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8013d30:	4a3c      	ldr	r2, [pc, #240]	@ (8013e24 <udp_input+0x21c>)
 8013d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d34:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8013d36:	e008      	b.n	8013d4a <udp_input+0x142>
      }
    }

    prev = pcb;
 8013d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d3a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d3e:	68db      	ldr	r3, [r3, #12]
 8013d40:	627b      	str	r3, [r7, #36]	@ 0x24
 8013d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d1a7      	bne.n	8013c98 <udp_input+0x90>
 8013d48:	e000      	b.n	8013d4c <udp_input+0x144>
        break;
 8013d4a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8013d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d4e:	2b00      	cmp	r3, #0
 8013d50:	d101      	bne.n	8013d56 <udp_input+0x14e>
    pcb = uncon_pcb;
 8013d52:	69fb      	ldr	r3, [r7, #28]
 8013d54:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8013d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d002      	beq.n	8013d62 <udp_input+0x15a>
    for_us = 1;
 8013d5c:	2301      	movs	r3, #1
 8013d5e:	76fb      	strb	r3, [r7, #27]
 8013d60:	e00a      	b.n	8013d78 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8013d62:	683b      	ldr	r3, [r7, #0]
 8013d64:	3304      	adds	r3, #4
 8013d66:	681a      	ldr	r2, [r3, #0]
 8013d68:	4b2d      	ldr	r3, [pc, #180]	@ (8013e20 <udp_input+0x218>)
 8013d6a:	695b      	ldr	r3, [r3, #20]
 8013d6c:	429a      	cmp	r2, r3
 8013d6e:	bf0c      	ite	eq
 8013d70:	2301      	moveq	r3, #1
 8013d72:	2300      	movne	r3, #0
 8013d74:	b2db      	uxtb	r3, r3
 8013d76:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8013d78:	7efb      	ldrb	r3, [r7, #27]
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	d041      	beq.n	8013e02 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8013d7e:	2108      	movs	r1, #8
 8013d80:	6878      	ldr	r0, [r7, #4]
 8013d82:	f7f9 f81f 	bl	800cdc4 <pbuf_remove_header>
 8013d86:	4603      	mov	r3, r0
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	d00a      	beq.n	8013da2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8013d8c:	4b20      	ldr	r3, [pc, #128]	@ (8013e10 <udp_input+0x208>)
 8013d8e:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8013d92:	4925      	ldr	r1, [pc, #148]	@ (8013e28 <udp_input+0x220>)
 8013d94:	4820      	ldr	r0, [pc, #128]	@ (8013e18 <udp_input+0x210>)
 8013d96:	f004 ffd5 	bl	8018d44 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8013d9a:	6878      	ldr	r0, [r7, #4]
 8013d9c:	f7f9 f898 	bl	800ced0 <pbuf_free>
      goto end;
 8013da0:	e032      	b.n	8013e08 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8013da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	d012      	beq.n	8013dce <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8013da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013daa:	699b      	ldr	r3, [r3, #24]
 8013dac:	2b00      	cmp	r3, #0
 8013dae:	d00a      	beq.n	8013dc6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8013db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013db2:	699c      	ldr	r4, [r3, #24]
 8013db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013db6:	69d8      	ldr	r0, [r3, #28]
 8013db8:	8a3b      	ldrh	r3, [r7, #16]
 8013dba:	9300      	str	r3, [sp, #0]
 8013dbc:	4b1b      	ldr	r3, [pc, #108]	@ (8013e2c <udp_input+0x224>)
 8013dbe:	687a      	ldr	r2, [r7, #4]
 8013dc0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013dc2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8013dc4:	e021      	b.n	8013e0a <udp_input+0x202>
        pbuf_free(p);
 8013dc6:	6878      	ldr	r0, [r7, #4]
 8013dc8:	f7f9 f882 	bl	800ced0 <pbuf_free>
        goto end;
 8013dcc:	e01c      	b.n	8013e08 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8013dce:	7cfb      	ldrb	r3, [r7, #19]
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	d112      	bne.n	8013dfa <udp_input+0x1f2>
 8013dd4:	4b12      	ldr	r3, [pc, #72]	@ (8013e20 <udp_input+0x218>)
 8013dd6:	695b      	ldr	r3, [r3, #20]
 8013dd8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8013ddc:	2be0      	cmp	r3, #224	@ 0xe0
 8013dde:	d00c      	beq.n	8013dfa <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8013de0:	4b0f      	ldr	r3, [pc, #60]	@ (8013e20 <udp_input+0x218>)
 8013de2:	899b      	ldrh	r3, [r3, #12]
 8013de4:	3308      	adds	r3, #8
 8013de6:	b29b      	uxth	r3, r3
 8013de8:	b21b      	sxth	r3, r3
 8013dea:	4619      	mov	r1, r3
 8013dec:	6878      	ldr	r0, [r7, #4]
 8013dee:	f7f9 f85c 	bl	800ceaa <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8013df2:	2103      	movs	r1, #3
 8013df4:	6878      	ldr	r0, [r7, #4]
 8013df6:	f003 fa01 	bl	80171fc <icmp_dest_unreach>
      pbuf_free(p);
 8013dfa:	6878      	ldr	r0, [r7, #4]
 8013dfc:	f7f9 f868 	bl	800ced0 <pbuf_free>
  return;
 8013e00:	e003      	b.n	8013e0a <udp_input+0x202>
    pbuf_free(p);
 8013e02:	6878      	ldr	r0, [r7, #4]
 8013e04:	f7f9 f864 	bl	800ced0 <pbuf_free>
  return;
 8013e08:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8013e0a:	372c      	adds	r7, #44	@ 0x2c
 8013e0c:	46bd      	mov	sp, r7
 8013e0e:	bd90      	pop	{r4, r7, pc}
 8013e10:	0801cf64 	.word	0x0801cf64
 8013e14:	0801d008 	.word	0x0801d008
 8013e18:	0801cfb8 	.word	0x0801cfb8
 8013e1c:	0801d020 	.word	0x0801d020
 8013e20:	2000d700 	.word	0x2000d700
 8013e24:	20010ed0 	.word	0x20010ed0
 8013e28:	0801d03c 	.word	0x0801d03c
 8013e2c:	2000d710 	.word	0x2000d710

08013e30 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8013e30:	b580      	push	{r7, lr}
 8013e32:	b088      	sub	sp, #32
 8013e34:	af02      	add	r7, sp, #8
 8013e36:	60f8      	str	r0, [r7, #12]
 8013e38:	60b9      	str	r1, [r7, #8]
 8013e3a:	607a      	str	r2, [r7, #4]
 8013e3c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8013e3e:	68fb      	ldr	r3, [r7, #12]
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	d109      	bne.n	8013e58 <udp_sendto_if+0x28>
 8013e44:	4b2e      	ldr	r3, [pc, #184]	@ (8013f00 <udp_sendto_if+0xd0>)
 8013e46:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013e4a:	492e      	ldr	r1, [pc, #184]	@ (8013f04 <udp_sendto_if+0xd4>)
 8013e4c:	482e      	ldr	r0, [pc, #184]	@ (8013f08 <udp_sendto_if+0xd8>)
 8013e4e:	f004 ff79 	bl	8018d44 <iprintf>
 8013e52:	f06f 030f 	mvn.w	r3, #15
 8013e56:	e04f      	b.n	8013ef8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8013e58:	68bb      	ldr	r3, [r7, #8]
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d109      	bne.n	8013e72 <udp_sendto_if+0x42>
 8013e5e:	4b28      	ldr	r3, [pc, #160]	@ (8013f00 <udp_sendto_if+0xd0>)
 8013e60:	f240 2281 	movw	r2, #641	@ 0x281
 8013e64:	4929      	ldr	r1, [pc, #164]	@ (8013f0c <udp_sendto_if+0xdc>)
 8013e66:	4828      	ldr	r0, [pc, #160]	@ (8013f08 <udp_sendto_if+0xd8>)
 8013e68:	f004 ff6c 	bl	8018d44 <iprintf>
 8013e6c:	f06f 030f 	mvn.w	r3, #15
 8013e70:	e042      	b.n	8013ef8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	d109      	bne.n	8013e8c <udp_sendto_if+0x5c>
 8013e78:	4b21      	ldr	r3, [pc, #132]	@ (8013f00 <udp_sendto_if+0xd0>)
 8013e7a:	f240 2282 	movw	r2, #642	@ 0x282
 8013e7e:	4924      	ldr	r1, [pc, #144]	@ (8013f10 <udp_sendto_if+0xe0>)
 8013e80:	4821      	ldr	r0, [pc, #132]	@ (8013f08 <udp_sendto_if+0xd8>)
 8013e82:	f004 ff5f 	bl	8018d44 <iprintf>
 8013e86:	f06f 030f 	mvn.w	r3, #15
 8013e8a:	e035      	b.n	8013ef8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8013e8c:	6a3b      	ldr	r3, [r7, #32]
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	d109      	bne.n	8013ea6 <udp_sendto_if+0x76>
 8013e92:	4b1b      	ldr	r3, [pc, #108]	@ (8013f00 <udp_sendto_if+0xd0>)
 8013e94:	f240 2283 	movw	r2, #643	@ 0x283
 8013e98:	491e      	ldr	r1, [pc, #120]	@ (8013f14 <udp_sendto_if+0xe4>)
 8013e9a:	481b      	ldr	r0, [pc, #108]	@ (8013f08 <udp_sendto_if+0xd8>)
 8013e9c:	f004 ff52 	bl	8018d44 <iprintf>
 8013ea0:	f06f 030f 	mvn.w	r3, #15
 8013ea4:	e028      	b.n	8013ef8 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013ea6:	68fb      	ldr	r3, [r7, #12]
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	d009      	beq.n	8013ec0 <udp_sendto_if+0x90>
 8013eac:	68fb      	ldr	r3, [r7, #12]
 8013eae:	681b      	ldr	r3, [r3, #0]
 8013eb0:	2b00      	cmp	r3, #0
 8013eb2:	d005      	beq.n	8013ec0 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8013eb4:	68fb      	ldr	r3, [r7, #12]
 8013eb6:	681b      	ldr	r3, [r3, #0]
 8013eb8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013ebc:	2be0      	cmp	r3, #224	@ 0xe0
 8013ebe:	d103      	bne.n	8013ec8 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8013ec0:	6a3b      	ldr	r3, [r7, #32]
 8013ec2:	3304      	adds	r3, #4
 8013ec4:	617b      	str	r3, [r7, #20]
 8013ec6:	e00b      	b.n	8013ee0 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8013ec8:	68fb      	ldr	r3, [r7, #12]
 8013eca:	681a      	ldr	r2, [r3, #0]
 8013ecc:	6a3b      	ldr	r3, [r7, #32]
 8013ece:	3304      	adds	r3, #4
 8013ed0:	681b      	ldr	r3, [r3, #0]
 8013ed2:	429a      	cmp	r2, r3
 8013ed4:	d002      	beq.n	8013edc <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8013ed6:	f06f 0303 	mvn.w	r3, #3
 8013eda:	e00d      	b.n	8013ef8 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8013edc:	68fb      	ldr	r3, [r7, #12]
 8013ede:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8013ee0:	887a      	ldrh	r2, [r7, #2]
 8013ee2:	697b      	ldr	r3, [r7, #20]
 8013ee4:	9301      	str	r3, [sp, #4]
 8013ee6:	6a3b      	ldr	r3, [r7, #32]
 8013ee8:	9300      	str	r3, [sp, #0]
 8013eea:	4613      	mov	r3, r2
 8013eec:	687a      	ldr	r2, [r7, #4]
 8013eee:	68b9      	ldr	r1, [r7, #8]
 8013ef0:	68f8      	ldr	r0, [r7, #12]
 8013ef2:	f000 f811 	bl	8013f18 <udp_sendto_if_src>
 8013ef6:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8013ef8:	4618      	mov	r0, r3
 8013efa:	3718      	adds	r7, #24
 8013efc:	46bd      	mov	sp, r7
 8013efe:	bd80      	pop	{r7, pc}
 8013f00:	0801cf64 	.word	0x0801cf64
 8013f04:	0801d0d8 	.word	0x0801d0d8
 8013f08:	0801cfb8 	.word	0x0801cfb8
 8013f0c:	0801d0f4 	.word	0x0801d0f4
 8013f10:	0801d110 	.word	0x0801d110
 8013f14:	0801d130 	.word	0x0801d130

08013f18 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8013f18:	b580      	push	{r7, lr}
 8013f1a:	b08c      	sub	sp, #48	@ 0x30
 8013f1c:	af04      	add	r7, sp, #16
 8013f1e:	60f8      	str	r0, [r7, #12]
 8013f20:	60b9      	str	r1, [r7, #8]
 8013f22:	607a      	str	r2, [r7, #4]
 8013f24:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8013f26:	68fb      	ldr	r3, [r7, #12]
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d109      	bne.n	8013f40 <udp_sendto_if_src+0x28>
 8013f2c:	4b65      	ldr	r3, [pc, #404]	@ (80140c4 <udp_sendto_if_src+0x1ac>)
 8013f2e:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8013f32:	4965      	ldr	r1, [pc, #404]	@ (80140c8 <udp_sendto_if_src+0x1b0>)
 8013f34:	4865      	ldr	r0, [pc, #404]	@ (80140cc <udp_sendto_if_src+0x1b4>)
 8013f36:	f004 ff05 	bl	8018d44 <iprintf>
 8013f3a:	f06f 030f 	mvn.w	r3, #15
 8013f3e:	e0bc      	b.n	80140ba <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8013f40:	68bb      	ldr	r3, [r7, #8]
 8013f42:	2b00      	cmp	r3, #0
 8013f44:	d109      	bne.n	8013f5a <udp_sendto_if_src+0x42>
 8013f46:	4b5f      	ldr	r3, [pc, #380]	@ (80140c4 <udp_sendto_if_src+0x1ac>)
 8013f48:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8013f4c:	4960      	ldr	r1, [pc, #384]	@ (80140d0 <udp_sendto_if_src+0x1b8>)
 8013f4e:	485f      	ldr	r0, [pc, #380]	@ (80140cc <udp_sendto_if_src+0x1b4>)
 8013f50:	f004 fef8 	bl	8018d44 <iprintf>
 8013f54:	f06f 030f 	mvn.w	r3, #15
 8013f58:	e0af      	b.n	80140ba <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	d109      	bne.n	8013f74 <udp_sendto_if_src+0x5c>
 8013f60:	4b58      	ldr	r3, [pc, #352]	@ (80140c4 <udp_sendto_if_src+0x1ac>)
 8013f62:	f240 22d3 	movw	r2, #723	@ 0x2d3
 8013f66:	495b      	ldr	r1, [pc, #364]	@ (80140d4 <udp_sendto_if_src+0x1bc>)
 8013f68:	4858      	ldr	r0, [pc, #352]	@ (80140cc <udp_sendto_if_src+0x1b4>)
 8013f6a:	f004 feeb 	bl	8018d44 <iprintf>
 8013f6e:	f06f 030f 	mvn.w	r3, #15
 8013f72:	e0a2      	b.n	80140ba <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8013f74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f76:	2b00      	cmp	r3, #0
 8013f78:	d109      	bne.n	8013f8e <udp_sendto_if_src+0x76>
 8013f7a:	4b52      	ldr	r3, [pc, #328]	@ (80140c4 <udp_sendto_if_src+0x1ac>)
 8013f7c:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 8013f80:	4955      	ldr	r1, [pc, #340]	@ (80140d8 <udp_sendto_if_src+0x1c0>)
 8013f82:	4852      	ldr	r0, [pc, #328]	@ (80140cc <udp_sendto_if_src+0x1b4>)
 8013f84:	f004 fede 	bl	8018d44 <iprintf>
 8013f88:	f06f 030f 	mvn.w	r3, #15
 8013f8c:	e095      	b.n	80140ba <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8013f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	d109      	bne.n	8013fa8 <udp_sendto_if_src+0x90>
 8013f94:	4b4b      	ldr	r3, [pc, #300]	@ (80140c4 <udp_sendto_if_src+0x1ac>)
 8013f96:	f240 22d5 	movw	r2, #725	@ 0x2d5
 8013f9a:	4950      	ldr	r1, [pc, #320]	@ (80140dc <udp_sendto_if_src+0x1c4>)
 8013f9c:	484b      	ldr	r0, [pc, #300]	@ (80140cc <udp_sendto_if_src+0x1b4>)
 8013f9e:	f004 fed1 	bl	8018d44 <iprintf>
 8013fa2:	f06f 030f 	mvn.w	r3, #15
 8013fa6:	e088      	b.n	80140ba <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8013fa8:	68fb      	ldr	r3, [r7, #12]
 8013faa:	8a5b      	ldrh	r3, [r3, #18]
 8013fac:	2b00      	cmp	r3, #0
 8013fae:	d10f      	bne.n	8013fd0 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8013fb0:	68f9      	ldr	r1, [r7, #12]
 8013fb2:	68fb      	ldr	r3, [r7, #12]
 8013fb4:	8a5b      	ldrh	r3, [r3, #18]
 8013fb6:	461a      	mov	r2, r3
 8013fb8:	68f8      	ldr	r0, [r7, #12]
 8013fba:	f000 f893 	bl	80140e4 <udp_bind>
 8013fbe:	4603      	mov	r3, r0
 8013fc0:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8013fc2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013fc6:	2b00      	cmp	r3, #0
 8013fc8:	d002      	beq.n	8013fd0 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8013fca:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013fce:	e074      	b.n	80140ba <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8013fd0:	68bb      	ldr	r3, [r7, #8]
 8013fd2:	891b      	ldrh	r3, [r3, #8]
 8013fd4:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8013fd8:	4293      	cmp	r3, r2
 8013fda:	d902      	bls.n	8013fe2 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8013fdc:	f04f 33ff 	mov.w	r3, #4294967295
 8013fe0:	e06b      	b.n	80140ba <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8013fe2:	2108      	movs	r1, #8
 8013fe4:	68b8      	ldr	r0, [r7, #8]
 8013fe6:	f7f8 fedd 	bl	800cda4 <pbuf_add_header>
 8013fea:	4603      	mov	r3, r0
 8013fec:	2b00      	cmp	r3, #0
 8013fee:	d015      	beq.n	801401c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8013ff0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013ff4:	2108      	movs	r1, #8
 8013ff6:	2022      	movs	r0, #34	@ 0x22
 8013ff8:	f7f8 fc86 	bl	800c908 <pbuf_alloc>
 8013ffc:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8013ffe:	69fb      	ldr	r3, [r7, #28]
 8014000:	2b00      	cmp	r3, #0
 8014002:	d102      	bne.n	801400a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8014004:	f04f 33ff 	mov.w	r3, #4294967295
 8014008:	e057      	b.n	80140ba <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801400a:	68bb      	ldr	r3, [r7, #8]
 801400c:	891b      	ldrh	r3, [r3, #8]
 801400e:	2b00      	cmp	r3, #0
 8014010:	d006      	beq.n	8014020 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8014012:	68b9      	ldr	r1, [r7, #8]
 8014014:	69f8      	ldr	r0, [r7, #28]
 8014016:	f7f9 f87f 	bl	800d118 <pbuf_chain>
 801401a:	e001      	b.n	8014020 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801401c:	68bb      	ldr	r3, [r7, #8]
 801401e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8014020:	69fb      	ldr	r3, [r7, #28]
 8014022:	895b      	ldrh	r3, [r3, #10]
 8014024:	2b07      	cmp	r3, #7
 8014026:	d806      	bhi.n	8014036 <udp_sendto_if_src+0x11e>
 8014028:	4b26      	ldr	r3, [pc, #152]	@ (80140c4 <udp_sendto_if_src+0x1ac>)
 801402a:	f240 320d 	movw	r2, #781	@ 0x30d
 801402e:	492c      	ldr	r1, [pc, #176]	@ (80140e0 <udp_sendto_if_src+0x1c8>)
 8014030:	4826      	ldr	r0, [pc, #152]	@ (80140cc <udp_sendto_if_src+0x1b4>)
 8014032:	f004 fe87 	bl	8018d44 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8014036:	69fb      	ldr	r3, [r7, #28]
 8014038:	685b      	ldr	r3, [r3, #4]
 801403a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801403c:	68fb      	ldr	r3, [r7, #12]
 801403e:	8a5b      	ldrh	r3, [r3, #18]
 8014040:	4618      	mov	r0, r3
 8014042:	f7f7 fb11 	bl	800b668 <lwip_htons>
 8014046:	4603      	mov	r3, r0
 8014048:	461a      	mov	r2, r3
 801404a:	697b      	ldr	r3, [r7, #20]
 801404c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801404e:	887b      	ldrh	r3, [r7, #2]
 8014050:	4618      	mov	r0, r3
 8014052:	f7f7 fb09 	bl	800b668 <lwip_htons>
 8014056:	4603      	mov	r3, r0
 8014058:	461a      	mov	r2, r3
 801405a:	697b      	ldr	r3, [r7, #20]
 801405c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801405e:	697b      	ldr	r3, [r7, #20]
 8014060:	2200      	movs	r2, #0
 8014062:	719a      	strb	r2, [r3, #6]
 8014064:	2200      	movs	r2, #0
 8014066:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8014068:	69fb      	ldr	r3, [r7, #28]
 801406a:	891b      	ldrh	r3, [r3, #8]
 801406c:	4618      	mov	r0, r3
 801406e:	f7f7 fafb 	bl	800b668 <lwip_htons>
 8014072:	4603      	mov	r3, r0
 8014074:	461a      	mov	r2, r3
 8014076:	697b      	ldr	r3, [r7, #20]
 8014078:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801407a:	2311      	movs	r3, #17
 801407c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801407e:	68fb      	ldr	r3, [r7, #12]
 8014080:	7adb      	ldrb	r3, [r3, #11]
 8014082:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8014084:	68fb      	ldr	r3, [r7, #12]
 8014086:	7a9b      	ldrb	r3, [r3, #10]
 8014088:	7cb9      	ldrb	r1, [r7, #18]
 801408a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801408c:	9202      	str	r2, [sp, #8]
 801408e:	7cfa      	ldrb	r2, [r7, #19]
 8014090:	9201      	str	r2, [sp, #4]
 8014092:	9300      	str	r3, [sp, #0]
 8014094:	460b      	mov	r3, r1
 8014096:	687a      	ldr	r2, [r7, #4]
 8014098:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801409a:	69f8      	ldr	r0, [r7, #28]
 801409c:	f003 fb3e 	bl	801771c <ip4_output_if_src>
 80140a0:	4603      	mov	r3, r0
 80140a2:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80140a4:	69fa      	ldr	r2, [r7, #28]
 80140a6:	68bb      	ldr	r3, [r7, #8]
 80140a8:	429a      	cmp	r2, r3
 80140aa:	d004      	beq.n	80140b6 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 80140ac:	69f8      	ldr	r0, [r7, #28]
 80140ae:	f7f8 ff0f 	bl	800ced0 <pbuf_free>
    q = NULL;
 80140b2:	2300      	movs	r3, #0
 80140b4:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80140b6:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80140ba:	4618      	mov	r0, r3
 80140bc:	3720      	adds	r7, #32
 80140be:	46bd      	mov	sp, r7
 80140c0:	bd80      	pop	{r7, pc}
 80140c2:	bf00      	nop
 80140c4:	0801cf64 	.word	0x0801cf64
 80140c8:	0801d150 	.word	0x0801d150
 80140cc:	0801cfb8 	.word	0x0801cfb8
 80140d0:	0801d170 	.word	0x0801d170
 80140d4:	0801d190 	.word	0x0801d190
 80140d8:	0801d1b4 	.word	0x0801d1b4
 80140dc:	0801d1d8 	.word	0x0801d1d8
 80140e0:	0801d1fc 	.word	0x0801d1fc

080140e4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80140e4:	b580      	push	{r7, lr}
 80140e6:	b086      	sub	sp, #24
 80140e8:	af00      	add	r7, sp, #0
 80140ea:	60f8      	str	r0, [r7, #12]
 80140ec:	60b9      	str	r1, [r7, #8]
 80140ee:	4613      	mov	r3, r2
 80140f0:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80140f2:	68bb      	ldr	r3, [r7, #8]
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	d101      	bne.n	80140fc <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80140f8:	4b39      	ldr	r3, [pc, #228]	@ (80141e0 <udp_bind+0xfc>)
 80140fa:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80140fc:	68fb      	ldr	r3, [r7, #12]
 80140fe:	2b00      	cmp	r3, #0
 8014100:	d109      	bne.n	8014116 <udp_bind+0x32>
 8014102:	4b38      	ldr	r3, [pc, #224]	@ (80141e4 <udp_bind+0x100>)
 8014104:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8014108:	4937      	ldr	r1, [pc, #220]	@ (80141e8 <udp_bind+0x104>)
 801410a:	4838      	ldr	r0, [pc, #224]	@ (80141ec <udp_bind+0x108>)
 801410c:	f004 fe1a 	bl	8018d44 <iprintf>
 8014110:	f06f 030f 	mvn.w	r3, #15
 8014114:	e060      	b.n	80141d8 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8014116:	2300      	movs	r3, #0
 8014118:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801411a:	4b35      	ldr	r3, [pc, #212]	@ (80141f0 <udp_bind+0x10c>)
 801411c:	681b      	ldr	r3, [r3, #0]
 801411e:	617b      	str	r3, [r7, #20]
 8014120:	e009      	b.n	8014136 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8014122:	68fa      	ldr	r2, [r7, #12]
 8014124:	697b      	ldr	r3, [r7, #20]
 8014126:	429a      	cmp	r2, r3
 8014128:	d102      	bne.n	8014130 <udp_bind+0x4c>
      rebind = 1;
 801412a:	2301      	movs	r3, #1
 801412c:	74fb      	strb	r3, [r7, #19]
      break;
 801412e:	e005      	b.n	801413c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014130:	697b      	ldr	r3, [r7, #20]
 8014132:	68db      	ldr	r3, [r3, #12]
 8014134:	617b      	str	r3, [r7, #20]
 8014136:	697b      	ldr	r3, [r7, #20]
 8014138:	2b00      	cmp	r3, #0
 801413a:	d1f2      	bne.n	8014122 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801413c:	88fb      	ldrh	r3, [r7, #6]
 801413e:	2b00      	cmp	r3, #0
 8014140:	d109      	bne.n	8014156 <udp_bind+0x72>
    port = udp_new_port();
 8014142:	f7ff fcc5 	bl	8013ad0 <udp_new_port>
 8014146:	4603      	mov	r3, r0
 8014148:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801414a:	88fb      	ldrh	r3, [r7, #6]
 801414c:	2b00      	cmp	r3, #0
 801414e:	d12c      	bne.n	80141aa <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8014150:	f06f 0307 	mvn.w	r3, #7
 8014154:	e040      	b.n	80141d8 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014156:	4b26      	ldr	r3, [pc, #152]	@ (80141f0 <udp_bind+0x10c>)
 8014158:	681b      	ldr	r3, [r3, #0]
 801415a:	617b      	str	r3, [r7, #20]
 801415c:	e022      	b.n	80141a4 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801415e:	68fa      	ldr	r2, [r7, #12]
 8014160:	697b      	ldr	r3, [r7, #20]
 8014162:	429a      	cmp	r2, r3
 8014164:	d01b      	beq.n	801419e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8014166:	697b      	ldr	r3, [r7, #20]
 8014168:	8a5b      	ldrh	r3, [r3, #18]
 801416a:	88fa      	ldrh	r2, [r7, #6]
 801416c:	429a      	cmp	r2, r3
 801416e:	d116      	bne.n	801419e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014170:	697b      	ldr	r3, [r7, #20]
 8014172:	681a      	ldr	r2, [r3, #0]
 8014174:	68bb      	ldr	r3, [r7, #8]
 8014176:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8014178:	429a      	cmp	r2, r3
 801417a:	d00d      	beq.n	8014198 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801417c:	68bb      	ldr	r3, [r7, #8]
 801417e:	2b00      	cmp	r3, #0
 8014180:	d00a      	beq.n	8014198 <udp_bind+0xb4>
 8014182:	68bb      	ldr	r3, [r7, #8]
 8014184:	681b      	ldr	r3, [r3, #0]
 8014186:	2b00      	cmp	r3, #0
 8014188:	d006      	beq.n	8014198 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801418a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801418c:	2b00      	cmp	r3, #0
 801418e:	d003      	beq.n	8014198 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8014190:	697b      	ldr	r3, [r7, #20]
 8014192:	681b      	ldr	r3, [r3, #0]
 8014194:	2b00      	cmp	r3, #0
 8014196:	d102      	bne.n	801419e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8014198:	f06f 0307 	mvn.w	r3, #7
 801419c:	e01c      	b.n	80141d8 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801419e:	697b      	ldr	r3, [r7, #20]
 80141a0:	68db      	ldr	r3, [r3, #12]
 80141a2:	617b      	str	r3, [r7, #20]
 80141a4:	697b      	ldr	r3, [r7, #20]
 80141a6:	2b00      	cmp	r3, #0
 80141a8:	d1d9      	bne.n	801415e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80141aa:	68bb      	ldr	r3, [r7, #8]
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	d002      	beq.n	80141b6 <udp_bind+0xd2>
 80141b0:	68bb      	ldr	r3, [r7, #8]
 80141b2:	681b      	ldr	r3, [r3, #0]
 80141b4:	e000      	b.n	80141b8 <udp_bind+0xd4>
 80141b6:	2300      	movs	r3, #0
 80141b8:	68fa      	ldr	r2, [r7, #12]
 80141ba:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80141bc:	68fb      	ldr	r3, [r7, #12]
 80141be:	88fa      	ldrh	r2, [r7, #6]
 80141c0:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80141c2:	7cfb      	ldrb	r3, [r7, #19]
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	d106      	bne.n	80141d6 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80141c8:	4b09      	ldr	r3, [pc, #36]	@ (80141f0 <udp_bind+0x10c>)
 80141ca:	681a      	ldr	r2, [r3, #0]
 80141cc:	68fb      	ldr	r3, [r7, #12]
 80141ce:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80141d0:	4a07      	ldr	r2, [pc, #28]	@ (80141f0 <udp_bind+0x10c>)
 80141d2:	68fb      	ldr	r3, [r7, #12]
 80141d4:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80141d6:	2300      	movs	r3, #0
}
 80141d8:	4618      	mov	r0, r3
 80141da:	3718      	adds	r7, #24
 80141dc:	46bd      	mov	sp, r7
 80141de:	bd80      	pop	{r7, pc}
 80141e0:	08027fac 	.word	0x08027fac
 80141e4:	0801cf64 	.word	0x0801cf64
 80141e8:	0801d22c 	.word	0x0801d22c
 80141ec:	0801cfb8 	.word	0x0801cfb8
 80141f0:	20010ed0 	.word	0x20010ed0

080141f4 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80141f4:	b580      	push	{r7, lr}
 80141f6:	b086      	sub	sp, #24
 80141f8:	af00      	add	r7, sp, #0
 80141fa:	60f8      	str	r0, [r7, #12]
 80141fc:	60b9      	str	r1, [r7, #8]
 80141fe:	4613      	mov	r3, r2
 8014200:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8014202:	68fb      	ldr	r3, [r7, #12]
 8014204:	2b00      	cmp	r3, #0
 8014206:	d109      	bne.n	801421c <udp_connect+0x28>
 8014208:	4b2c      	ldr	r3, [pc, #176]	@ (80142bc <udp_connect+0xc8>)
 801420a:	f240 4235 	movw	r2, #1077	@ 0x435
 801420e:	492c      	ldr	r1, [pc, #176]	@ (80142c0 <udp_connect+0xcc>)
 8014210:	482c      	ldr	r0, [pc, #176]	@ (80142c4 <udp_connect+0xd0>)
 8014212:	f004 fd97 	bl	8018d44 <iprintf>
 8014216:	f06f 030f 	mvn.w	r3, #15
 801421a:	e04b      	b.n	80142b4 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801421c:	68bb      	ldr	r3, [r7, #8]
 801421e:	2b00      	cmp	r3, #0
 8014220:	d109      	bne.n	8014236 <udp_connect+0x42>
 8014222:	4b26      	ldr	r3, [pc, #152]	@ (80142bc <udp_connect+0xc8>)
 8014224:	f240 4236 	movw	r2, #1078	@ 0x436
 8014228:	4927      	ldr	r1, [pc, #156]	@ (80142c8 <udp_connect+0xd4>)
 801422a:	4826      	ldr	r0, [pc, #152]	@ (80142c4 <udp_connect+0xd0>)
 801422c:	f004 fd8a 	bl	8018d44 <iprintf>
 8014230:	f06f 030f 	mvn.w	r3, #15
 8014234:	e03e      	b.n	80142b4 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8014236:	68fb      	ldr	r3, [r7, #12]
 8014238:	8a5b      	ldrh	r3, [r3, #18]
 801423a:	2b00      	cmp	r3, #0
 801423c:	d10f      	bne.n	801425e <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801423e:	68f9      	ldr	r1, [r7, #12]
 8014240:	68fb      	ldr	r3, [r7, #12]
 8014242:	8a5b      	ldrh	r3, [r3, #18]
 8014244:	461a      	mov	r2, r3
 8014246:	68f8      	ldr	r0, [r7, #12]
 8014248:	f7ff ff4c 	bl	80140e4 <udp_bind>
 801424c:	4603      	mov	r3, r0
 801424e:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8014250:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014254:	2b00      	cmp	r3, #0
 8014256:	d002      	beq.n	801425e <udp_connect+0x6a>
      return err;
 8014258:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801425c:	e02a      	b.n	80142b4 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801425e:	68bb      	ldr	r3, [r7, #8]
 8014260:	2b00      	cmp	r3, #0
 8014262:	d002      	beq.n	801426a <udp_connect+0x76>
 8014264:	68bb      	ldr	r3, [r7, #8]
 8014266:	681b      	ldr	r3, [r3, #0]
 8014268:	e000      	b.n	801426c <udp_connect+0x78>
 801426a:	2300      	movs	r3, #0
 801426c:	68fa      	ldr	r2, [r7, #12]
 801426e:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8014270:	68fb      	ldr	r3, [r7, #12]
 8014272:	88fa      	ldrh	r2, [r7, #6]
 8014274:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8014276:	68fb      	ldr	r3, [r7, #12]
 8014278:	7c1b      	ldrb	r3, [r3, #16]
 801427a:	f043 0304 	orr.w	r3, r3, #4
 801427e:	b2da      	uxtb	r2, r3
 8014280:	68fb      	ldr	r3, [r7, #12]
 8014282:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014284:	4b11      	ldr	r3, [pc, #68]	@ (80142cc <udp_connect+0xd8>)
 8014286:	681b      	ldr	r3, [r3, #0]
 8014288:	617b      	str	r3, [r7, #20]
 801428a:	e008      	b.n	801429e <udp_connect+0xaa>
    if (pcb == ipcb) {
 801428c:	68fa      	ldr	r2, [r7, #12]
 801428e:	697b      	ldr	r3, [r7, #20]
 8014290:	429a      	cmp	r2, r3
 8014292:	d101      	bne.n	8014298 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8014294:	2300      	movs	r3, #0
 8014296:	e00d      	b.n	80142b4 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014298:	697b      	ldr	r3, [r7, #20]
 801429a:	68db      	ldr	r3, [r3, #12]
 801429c:	617b      	str	r3, [r7, #20]
 801429e:	697b      	ldr	r3, [r7, #20]
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d1f3      	bne.n	801428c <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80142a4:	4b09      	ldr	r3, [pc, #36]	@ (80142cc <udp_connect+0xd8>)
 80142a6:	681a      	ldr	r2, [r3, #0]
 80142a8:	68fb      	ldr	r3, [r7, #12]
 80142aa:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 80142ac:	4a07      	ldr	r2, [pc, #28]	@ (80142cc <udp_connect+0xd8>)
 80142ae:	68fb      	ldr	r3, [r7, #12]
 80142b0:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 80142b2:	2300      	movs	r3, #0
}
 80142b4:	4618      	mov	r0, r3
 80142b6:	3718      	adds	r7, #24
 80142b8:	46bd      	mov	sp, r7
 80142ba:	bd80      	pop	{r7, pc}
 80142bc:	0801cf64 	.word	0x0801cf64
 80142c0:	0801d244 	.word	0x0801d244
 80142c4:	0801cfb8 	.word	0x0801cfb8
 80142c8:	0801d260 	.word	0x0801d260
 80142cc:	20010ed0 	.word	0x20010ed0

080142d0 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80142d0:	b580      	push	{r7, lr}
 80142d2:	b084      	sub	sp, #16
 80142d4:	af00      	add	r7, sp, #0
 80142d6:	60f8      	str	r0, [r7, #12]
 80142d8:	60b9      	str	r1, [r7, #8]
 80142da:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80142dc:	68fb      	ldr	r3, [r7, #12]
 80142de:	2b00      	cmp	r3, #0
 80142e0:	d107      	bne.n	80142f2 <udp_recv+0x22>
 80142e2:	4b08      	ldr	r3, [pc, #32]	@ (8014304 <udp_recv+0x34>)
 80142e4:	f240 428a 	movw	r2, #1162	@ 0x48a
 80142e8:	4907      	ldr	r1, [pc, #28]	@ (8014308 <udp_recv+0x38>)
 80142ea:	4808      	ldr	r0, [pc, #32]	@ (801430c <udp_recv+0x3c>)
 80142ec:	f004 fd2a 	bl	8018d44 <iprintf>
 80142f0:	e005      	b.n	80142fe <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80142f2:	68fb      	ldr	r3, [r7, #12]
 80142f4:	68ba      	ldr	r2, [r7, #8]
 80142f6:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80142f8:	68fb      	ldr	r3, [r7, #12]
 80142fa:	687a      	ldr	r2, [r7, #4]
 80142fc:	61da      	str	r2, [r3, #28]
}
 80142fe:	3710      	adds	r7, #16
 8014300:	46bd      	mov	sp, r7
 8014302:	bd80      	pop	{r7, pc}
 8014304:	0801cf64 	.word	0x0801cf64
 8014308:	0801d298 	.word	0x0801d298
 801430c:	0801cfb8 	.word	0x0801cfb8

08014310 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8014310:	b580      	push	{r7, lr}
 8014312:	b084      	sub	sp, #16
 8014314:	af00      	add	r7, sp, #0
 8014316:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	2b00      	cmp	r3, #0
 801431c:	d107      	bne.n	801432e <udp_remove+0x1e>
 801431e:	4b19      	ldr	r3, [pc, #100]	@ (8014384 <udp_remove+0x74>)
 8014320:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 8014324:	4918      	ldr	r1, [pc, #96]	@ (8014388 <udp_remove+0x78>)
 8014326:	4819      	ldr	r0, [pc, #100]	@ (801438c <udp_remove+0x7c>)
 8014328:	f004 fd0c 	bl	8018d44 <iprintf>
 801432c:	e026      	b.n	801437c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801432e:	4b18      	ldr	r3, [pc, #96]	@ (8014390 <udp_remove+0x80>)
 8014330:	681b      	ldr	r3, [r3, #0]
 8014332:	687a      	ldr	r2, [r7, #4]
 8014334:	429a      	cmp	r2, r3
 8014336:	d105      	bne.n	8014344 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8014338:	4b15      	ldr	r3, [pc, #84]	@ (8014390 <udp_remove+0x80>)
 801433a:	681b      	ldr	r3, [r3, #0]
 801433c:	68db      	ldr	r3, [r3, #12]
 801433e:	4a14      	ldr	r2, [pc, #80]	@ (8014390 <udp_remove+0x80>)
 8014340:	6013      	str	r3, [r2, #0]
 8014342:	e017      	b.n	8014374 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8014344:	4b12      	ldr	r3, [pc, #72]	@ (8014390 <udp_remove+0x80>)
 8014346:	681b      	ldr	r3, [r3, #0]
 8014348:	60fb      	str	r3, [r7, #12]
 801434a:	e010      	b.n	801436e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801434c:	68fb      	ldr	r3, [r7, #12]
 801434e:	68db      	ldr	r3, [r3, #12]
 8014350:	2b00      	cmp	r3, #0
 8014352:	d009      	beq.n	8014368 <udp_remove+0x58>
 8014354:	68fb      	ldr	r3, [r7, #12]
 8014356:	68db      	ldr	r3, [r3, #12]
 8014358:	687a      	ldr	r2, [r7, #4]
 801435a:	429a      	cmp	r2, r3
 801435c:	d104      	bne.n	8014368 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	68da      	ldr	r2, [r3, #12]
 8014362:	68fb      	ldr	r3, [r7, #12]
 8014364:	60da      	str	r2, [r3, #12]
        break;
 8014366:	e005      	b.n	8014374 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8014368:	68fb      	ldr	r3, [r7, #12]
 801436a:	68db      	ldr	r3, [r3, #12]
 801436c:	60fb      	str	r3, [r7, #12]
 801436e:	68fb      	ldr	r3, [r7, #12]
 8014370:	2b00      	cmp	r3, #0
 8014372:	d1eb      	bne.n	801434c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8014374:	6879      	ldr	r1, [r7, #4]
 8014376:	2000      	movs	r0, #0
 8014378:	f7f7 fefa 	bl	800c170 <memp_free>
}
 801437c:	3710      	adds	r7, #16
 801437e:	46bd      	mov	sp, r7
 8014380:	bd80      	pop	{r7, pc}
 8014382:	bf00      	nop
 8014384:	0801cf64 	.word	0x0801cf64
 8014388:	0801d2b0 	.word	0x0801d2b0
 801438c:	0801cfb8 	.word	0x0801cfb8
 8014390:	20010ed0 	.word	0x20010ed0

08014394 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8014394:	b580      	push	{r7, lr}
 8014396:	b082      	sub	sp, #8
 8014398:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801439a:	2000      	movs	r0, #0
 801439c:	f7f7 fe72 	bl	800c084 <memp_malloc>
 80143a0:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	2b00      	cmp	r3, #0
 80143a6:	d007      	beq.n	80143b8 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80143a8:	2220      	movs	r2, #32
 80143aa:	2100      	movs	r1, #0
 80143ac:	6878      	ldr	r0, [r7, #4]
 80143ae:	f004 fd68 	bl	8018e82 <memset>
    pcb->ttl = UDP_TTL;
 80143b2:	687b      	ldr	r3, [r7, #4]
 80143b4:	22ff      	movs	r2, #255	@ 0xff
 80143b6:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80143b8:	687b      	ldr	r3, [r7, #4]
}
 80143ba:	4618      	mov	r0, r3
 80143bc:	3708      	adds	r7, #8
 80143be:	46bd      	mov	sp, r7
 80143c0:	bd80      	pop	{r7, pc}

080143c2 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 80143c2:	b580      	push	{r7, lr}
 80143c4:	b084      	sub	sp, #16
 80143c6:	af00      	add	r7, sp, #0
 80143c8:	4603      	mov	r3, r0
 80143ca:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 80143cc:	f7ff ffe2 	bl	8014394 <udp_new>
 80143d0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80143d2:	68fb      	ldr	r3, [r7, #12]
}
 80143d4:	4618      	mov	r0, r3
 80143d6:	3710      	adds	r7, #16
 80143d8:	46bd      	mov	sp, r7
 80143da:	bd80      	pop	{r7, pc}

080143dc <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80143dc:	b480      	push	{r7}
 80143de:	b085      	sub	sp, #20
 80143e0:	af00      	add	r7, sp, #0
 80143e2:	6078      	str	r0, [r7, #4]
 80143e4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	d01e      	beq.n	801442a <udp_netif_ip_addr_changed+0x4e>
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	681b      	ldr	r3, [r3, #0]
 80143f0:	2b00      	cmp	r3, #0
 80143f2:	d01a      	beq.n	801442a <udp_netif_ip_addr_changed+0x4e>
 80143f4:	683b      	ldr	r3, [r7, #0]
 80143f6:	2b00      	cmp	r3, #0
 80143f8:	d017      	beq.n	801442a <udp_netif_ip_addr_changed+0x4e>
 80143fa:	683b      	ldr	r3, [r7, #0]
 80143fc:	681b      	ldr	r3, [r3, #0]
 80143fe:	2b00      	cmp	r3, #0
 8014400:	d013      	beq.n	801442a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014402:	4b0d      	ldr	r3, [pc, #52]	@ (8014438 <udp_netif_ip_addr_changed+0x5c>)
 8014404:	681b      	ldr	r3, [r3, #0]
 8014406:	60fb      	str	r3, [r7, #12]
 8014408:	e00c      	b.n	8014424 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801440a:	68fb      	ldr	r3, [r7, #12]
 801440c:	681a      	ldr	r2, [r3, #0]
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	681b      	ldr	r3, [r3, #0]
 8014412:	429a      	cmp	r2, r3
 8014414:	d103      	bne.n	801441e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8014416:	683b      	ldr	r3, [r7, #0]
 8014418:	681a      	ldr	r2, [r3, #0]
 801441a:	68fb      	ldr	r3, [r7, #12]
 801441c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801441e:	68fb      	ldr	r3, [r7, #12]
 8014420:	68db      	ldr	r3, [r3, #12]
 8014422:	60fb      	str	r3, [r7, #12]
 8014424:	68fb      	ldr	r3, [r7, #12]
 8014426:	2b00      	cmp	r3, #0
 8014428:	d1ef      	bne.n	801440a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801442a:	bf00      	nop
 801442c:	3714      	adds	r7, #20
 801442e:	46bd      	mov	sp, r7
 8014430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014434:	4770      	bx	lr
 8014436:	bf00      	nop
 8014438:	20010ed0 	.word	0x20010ed0

0801443c <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 801443c:	b580      	push	{r7, lr}
 801443e:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8014440:	4b20      	ldr	r3, [pc, #128]	@ (80144c4 <dhcp_inc_pcb_refcount+0x88>)
 8014442:	781b      	ldrb	r3, [r3, #0]
 8014444:	2b00      	cmp	r3, #0
 8014446:	d133      	bne.n	80144b0 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8014448:	4b1f      	ldr	r3, [pc, #124]	@ (80144c8 <dhcp_inc_pcb_refcount+0x8c>)
 801444a:	681b      	ldr	r3, [r3, #0]
 801444c:	2b00      	cmp	r3, #0
 801444e:	d005      	beq.n	801445c <dhcp_inc_pcb_refcount+0x20>
 8014450:	4b1e      	ldr	r3, [pc, #120]	@ (80144cc <dhcp_inc_pcb_refcount+0x90>)
 8014452:	22e5      	movs	r2, #229	@ 0xe5
 8014454:	491e      	ldr	r1, [pc, #120]	@ (80144d0 <dhcp_inc_pcb_refcount+0x94>)
 8014456:	481f      	ldr	r0, [pc, #124]	@ (80144d4 <dhcp_inc_pcb_refcount+0x98>)
 8014458:	f004 fc74 	bl	8018d44 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 801445c:	f7ff ff9a 	bl	8014394 <udp_new>
 8014460:	4603      	mov	r3, r0
 8014462:	4a19      	ldr	r2, [pc, #100]	@ (80144c8 <dhcp_inc_pcb_refcount+0x8c>)
 8014464:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8014466:	4b18      	ldr	r3, [pc, #96]	@ (80144c8 <dhcp_inc_pcb_refcount+0x8c>)
 8014468:	681b      	ldr	r3, [r3, #0]
 801446a:	2b00      	cmp	r3, #0
 801446c:	d102      	bne.n	8014474 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 801446e:	f04f 33ff 	mov.w	r3, #4294967295
 8014472:	e024      	b.n	80144be <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8014474:	4b14      	ldr	r3, [pc, #80]	@ (80144c8 <dhcp_inc_pcb_refcount+0x8c>)
 8014476:	681b      	ldr	r3, [r3, #0]
 8014478:	7a5a      	ldrb	r2, [r3, #9]
 801447a:	4b13      	ldr	r3, [pc, #76]	@ (80144c8 <dhcp_inc_pcb_refcount+0x8c>)
 801447c:	681b      	ldr	r3, [r3, #0]
 801447e:	f042 0220 	orr.w	r2, r2, #32
 8014482:	b2d2      	uxtb	r2, r2
 8014484:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8014486:	4b10      	ldr	r3, [pc, #64]	@ (80144c8 <dhcp_inc_pcb_refcount+0x8c>)
 8014488:	681b      	ldr	r3, [r3, #0]
 801448a:	2244      	movs	r2, #68	@ 0x44
 801448c:	4912      	ldr	r1, [pc, #72]	@ (80144d8 <dhcp_inc_pcb_refcount+0x9c>)
 801448e:	4618      	mov	r0, r3
 8014490:	f7ff fe28 	bl	80140e4 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8014494:	4b0c      	ldr	r3, [pc, #48]	@ (80144c8 <dhcp_inc_pcb_refcount+0x8c>)
 8014496:	681b      	ldr	r3, [r3, #0]
 8014498:	2243      	movs	r2, #67	@ 0x43
 801449a:	490f      	ldr	r1, [pc, #60]	@ (80144d8 <dhcp_inc_pcb_refcount+0x9c>)
 801449c:	4618      	mov	r0, r3
 801449e:	f7ff fea9 	bl	80141f4 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 80144a2:	4b09      	ldr	r3, [pc, #36]	@ (80144c8 <dhcp_inc_pcb_refcount+0x8c>)
 80144a4:	681b      	ldr	r3, [r3, #0]
 80144a6:	2200      	movs	r2, #0
 80144a8:	490c      	ldr	r1, [pc, #48]	@ (80144dc <dhcp_inc_pcb_refcount+0xa0>)
 80144aa:	4618      	mov	r0, r3
 80144ac:	f7ff ff10 	bl	80142d0 <udp_recv>
  }

  dhcp_pcb_refcount++;
 80144b0:	4b04      	ldr	r3, [pc, #16]	@ (80144c4 <dhcp_inc_pcb_refcount+0x88>)
 80144b2:	781b      	ldrb	r3, [r3, #0]
 80144b4:	3301      	adds	r3, #1
 80144b6:	b2da      	uxtb	r2, r3
 80144b8:	4b02      	ldr	r3, [pc, #8]	@ (80144c4 <dhcp_inc_pcb_refcount+0x88>)
 80144ba:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 80144bc:	2300      	movs	r3, #0
}
 80144be:	4618      	mov	r0, r3
 80144c0:	bd80      	pop	{r7, pc}
 80144c2:	bf00      	nop
 80144c4:	20010f00 	.word	0x20010f00
 80144c8:	20010efc 	.word	0x20010efc
 80144cc:	0801d2c8 	.word	0x0801d2c8
 80144d0:	0801d300 	.word	0x0801d300
 80144d4:	0801d328 	.word	0x0801d328
 80144d8:	08027fac 	.word	0x08027fac
 80144dc:	08015d65 	.word	0x08015d65

080144e0 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 80144e0:	b580      	push	{r7, lr}
 80144e2:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 80144e4:	4b0e      	ldr	r3, [pc, #56]	@ (8014520 <dhcp_dec_pcb_refcount+0x40>)
 80144e6:	781b      	ldrb	r3, [r3, #0]
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	d105      	bne.n	80144f8 <dhcp_dec_pcb_refcount+0x18>
 80144ec:	4b0d      	ldr	r3, [pc, #52]	@ (8014524 <dhcp_dec_pcb_refcount+0x44>)
 80144ee:	22ff      	movs	r2, #255	@ 0xff
 80144f0:	490d      	ldr	r1, [pc, #52]	@ (8014528 <dhcp_dec_pcb_refcount+0x48>)
 80144f2:	480e      	ldr	r0, [pc, #56]	@ (801452c <dhcp_dec_pcb_refcount+0x4c>)
 80144f4:	f004 fc26 	bl	8018d44 <iprintf>
  dhcp_pcb_refcount--;
 80144f8:	4b09      	ldr	r3, [pc, #36]	@ (8014520 <dhcp_dec_pcb_refcount+0x40>)
 80144fa:	781b      	ldrb	r3, [r3, #0]
 80144fc:	3b01      	subs	r3, #1
 80144fe:	b2da      	uxtb	r2, r3
 8014500:	4b07      	ldr	r3, [pc, #28]	@ (8014520 <dhcp_dec_pcb_refcount+0x40>)
 8014502:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8014504:	4b06      	ldr	r3, [pc, #24]	@ (8014520 <dhcp_dec_pcb_refcount+0x40>)
 8014506:	781b      	ldrb	r3, [r3, #0]
 8014508:	2b00      	cmp	r3, #0
 801450a:	d107      	bne.n	801451c <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 801450c:	4b08      	ldr	r3, [pc, #32]	@ (8014530 <dhcp_dec_pcb_refcount+0x50>)
 801450e:	681b      	ldr	r3, [r3, #0]
 8014510:	4618      	mov	r0, r3
 8014512:	f7ff fefd 	bl	8014310 <udp_remove>
    dhcp_pcb = NULL;
 8014516:	4b06      	ldr	r3, [pc, #24]	@ (8014530 <dhcp_dec_pcb_refcount+0x50>)
 8014518:	2200      	movs	r2, #0
 801451a:	601a      	str	r2, [r3, #0]
  }
}
 801451c:	bf00      	nop
 801451e:	bd80      	pop	{r7, pc}
 8014520:	20010f00 	.word	0x20010f00
 8014524:	0801d2c8 	.word	0x0801d2c8
 8014528:	0801d350 	.word	0x0801d350
 801452c:	0801d328 	.word	0x0801d328
 8014530:	20010efc 	.word	0x20010efc

08014534 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8014534:	b580      	push	{r7, lr}
 8014536:	b084      	sub	sp, #16
 8014538:	af00      	add	r7, sp, #0
 801453a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014540:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8014542:	210c      	movs	r1, #12
 8014544:	68f8      	ldr	r0, [r7, #12]
 8014546:	f001 f84f 	bl	80155e8 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801454a:	4b06      	ldr	r3, [pc, #24]	@ (8014564 <dhcp_handle_nak+0x30>)
 801454c:	4a05      	ldr	r2, [pc, #20]	@ (8014564 <dhcp_handle_nak+0x30>)
 801454e:	4905      	ldr	r1, [pc, #20]	@ (8014564 <dhcp_handle_nak+0x30>)
 8014550:	6878      	ldr	r0, [r7, #4]
 8014552:	f7f7 ffaf 	bl	800c4b4 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8014556:	6878      	ldr	r0, [r7, #4]
 8014558:	f000 fc48 	bl	8014dec <dhcp_discover>
}
 801455c:	bf00      	nop
 801455e:	3710      	adds	r7, #16
 8014560:	46bd      	mov	sp, r7
 8014562:	bd80      	pop	{r7, pc}
 8014564:	08027fac 	.word	0x08027fac

08014568 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8014568:	b580      	push	{r7, lr}
 801456a:	b084      	sub	sp, #16
 801456c:	af00      	add	r7, sp, #0
 801456e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014574:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8014576:	2108      	movs	r1, #8
 8014578:	68f8      	ldr	r0, [r7, #12]
 801457a:	f001 f835 	bl	80155e8 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 801457e:	68fb      	ldr	r3, [r7, #12]
 8014580:	331c      	adds	r3, #28
 8014582:	2200      	movs	r2, #0
 8014584:	4619      	mov	r1, r3
 8014586:	6878      	ldr	r0, [r7, #4]
 8014588:	f002 fb36 	bl	8016bf8 <etharp_query>
 801458c:	4603      	mov	r3, r0
 801458e:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8014590:	68fb      	ldr	r3, [r7, #12]
 8014592:	799b      	ldrb	r3, [r3, #6]
 8014594:	2bff      	cmp	r3, #255	@ 0xff
 8014596:	d005      	beq.n	80145a4 <dhcp_check+0x3c>
    dhcp->tries++;
 8014598:	68fb      	ldr	r3, [r7, #12]
 801459a:	799b      	ldrb	r3, [r3, #6]
 801459c:	3301      	adds	r3, #1
 801459e:	b2da      	uxtb	r2, r3
 80145a0:	68fb      	ldr	r3, [r7, #12]
 80145a2:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 80145a4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80145a8:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80145aa:	893b      	ldrh	r3, [r7, #8]
 80145ac:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80145b0:	4a06      	ldr	r2, [pc, #24]	@ (80145cc <dhcp_check+0x64>)
 80145b2:	fb82 1203 	smull	r1, r2, r2, r3
 80145b6:	1152      	asrs	r2, r2, #5
 80145b8:	17db      	asrs	r3, r3, #31
 80145ba:	1ad3      	subs	r3, r2, r3
 80145bc:	b29a      	uxth	r2, r3
 80145be:	68fb      	ldr	r3, [r7, #12]
 80145c0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 80145c2:	bf00      	nop
 80145c4:	3710      	adds	r7, #16
 80145c6:	46bd      	mov	sp, r7
 80145c8:	bd80      	pop	{r7, pc}
 80145ca:	bf00      	nop
 80145cc:	10624dd3 	.word	0x10624dd3

080145d0 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 80145d0:	b580      	push	{r7, lr}
 80145d2:	b084      	sub	sp, #16
 80145d4:	af00      	add	r7, sp, #0
 80145d6:	6078      	str	r0, [r7, #4]
 80145d8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80145de:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 80145e0:	4b0c      	ldr	r3, [pc, #48]	@ (8014614 <dhcp_handle_offer+0x44>)
 80145e2:	789b      	ldrb	r3, [r3, #2]
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	d011      	beq.n	801460c <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 80145e8:	68fb      	ldr	r3, [r7, #12]
 80145ea:	2200      	movs	r2, #0
 80145ec:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 80145ee:	4b0a      	ldr	r3, [pc, #40]	@ (8014618 <dhcp_handle_offer+0x48>)
 80145f0:	689b      	ldr	r3, [r3, #8]
 80145f2:	4618      	mov	r0, r3
 80145f4:	f7f7 f84d 	bl	800b692 <lwip_htonl>
 80145f8:	4602      	mov	r2, r0
 80145fa:	68fb      	ldr	r3, [r7, #12]
 80145fc:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80145fe:	683b      	ldr	r3, [r7, #0]
 8014600:	691a      	ldr	r2, [r3, #16]
 8014602:	68fb      	ldr	r3, [r7, #12]
 8014604:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8014606:	6878      	ldr	r0, [r7, #4]
 8014608:	f000 f808 	bl	801461c <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 801460c:	bf00      	nop
 801460e:	3710      	adds	r7, #16
 8014610:	46bd      	mov	sp, r7
 8014612:	bd80      	pop	{r7, pc}
 8014614:	20010ef4 	.word	0x20010ef4
 8014618:	20010ed4 	.word	0x20010ed4

0801461c <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 801461c:	b5b0      	push	{r4, r5, r7, lr}
 801461e:	b08a      	sub	sp, #40	@ 0x28
 8014620:	af02      	add	r7, sp, #8
 8014622:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	2b00      	cmp	r3, #0
 8014628:	d109      	bne.n	801463e <dhcp_select+0x22>
 801462a:	4b71      	ldr	r3, [pc, #452]	@ (80147f0 <dhcp_select+0x1d4>)
 801462c:	f240 1277 	movw	r2, #375	@ 0x177
 8014630:	4970      	ldr	r1, [pc, #448]	@ (80147f4 <dhcp_select+0x1d8>)
 8014632:	4871      	ldr	r0, [pc, #452]	@ (80147f8 <dhcp_select+0x1dc>)
 8014634:	f004 fb86 	bl	8018d44 <iprintf>
 8014638:	f06f 030f 	mvn.w	r3, #15
 801463c:	e0d3      	b.n	80147e6 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014642:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8014644:	69bb      	ldr	r3, [r7, #24]
 8014646:	2b00      	cmp	r3, #0
 8014648:	d109      	bne.n	801465e <dhcp_select+0x42>
 801464a:	4b69      	ldr	r3, [pc, #420]	@ (80147f0 <dhcp_select+0x1d4>)
 801464c:	f240 1279 	movw	r2, #377	@ 0x179
 8014650:	496a      	ldr	r1, [pc, #424]	@ (80147fc <dhcp_select+0x1e0>)
 8014652:	4869      	ldr	r0, [pc, #420]	@ (80147f8 <dhcp_select+0x1dc>)
 8014654:	f004 fb76 	bl	8018d44 <iprintf>
 8014658:	f06f 0305 	mvn.w	r3, #5
 801465c:	e0c3      	b.n	80147e6 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 801465e:	2101      	movs	r1, #1
 8014660:	69b8      	ldr	r0, [r7, #24]
 8014662:	f000 ffc1 	bl	80155e8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8014666:	f107 030c 	add.w	r3, r7, #12
 801466a:	2203      	movs	r2, #3
 801466c:	69b9      	ldr	r1, [r7, #24]
 801466e:	6878      	ldr	r0, [r7, #4]
 8014670:	f001 fc46 	bl	8015f00 <dhcp_create_msg>
 8014674:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014676:	697b      	ldr	r3, [r7, #20]
 8014678:	2b00      	cmp	r3, #0
 801467a:	f000 8085 	beq.w	8014788 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801467e:	697b      	ldr	r3, [r7, #20]
 8014680:	685b      	ldr	r3, [r3, #4]
 8014682:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014684:	89b8      	ldrh	r0, [r7, #12]
 8014686:	693b      	ldr	r3, [r7, #16]
 8014688:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801468c:	2302      	movs	r3, #2
 801468e:	2239      	movs	r2, #57	@ 0x39
 8014690:	f000 ffc4 	bl	801561c <dhcp_option>
 8014694:	4603      	mov	r3, r0
 8014696:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8014698:	89b8      	ldrh	r0, [r7, #12]
 801469a:	693b      	ldr	r3, [r7, #16]
 801469c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80146a4:	461a      	mov	r2, r3
 80146a6:	f001 f813 	bl	80156d0 <dhcp_option_short>
 80146aa:	4603      	mov	r3, r0
 80146ac:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80146ae:	89b8      	ldrh	r0, [r7, #12]
 80146b0:	693b      	ldr	r3, [r7, #16]
 80146b2:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80146b6:	2304      	movs	r3, #4
 80146b8:	2232      	movs	r2, #50	@ 0x32
 80146ba:	f000 ffaf 	bl	801561c <dhcp_option>
 80146be:	4603      	mov	r3, r0
 80146c0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80146c2:	89bc      	ldrh	r4, [r7, #12]
 80146c4:	693b      	ldr	r3, [r7, #16]
 80146c6:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 80146ca:	69bb      	ldr	r3, [r7, #24]
 80146cc:	69db      	ldr	r3, [r3, #28]
 80146ce:	4618      	mov	r0, r3
 80146d0:	f7f6 ffdf 	bl	800b692 <lwip_htonl>
 80146d4:	4603      	mov	r3, r0
 80146d6:	461a      	mov	r2, r3
 80146d8:	4629      	mov	r1, r5
 80146da:	4620      	mov	r0, r4
 80146dc:	f001 f82a 	bl	8015734 <dhcp_option_long>
 80146e0:	4603      	mov	r3, r0
 80146e2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80146e4:	89b8      	ldrh	r0, [r7, #12]
 80146e6:	693b      	ldr	r3, [r7, #16]
 80146e8:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80146ec:	2304      	movs	r3, #4
 80146ee:	2236      	movs	r2, #54	@ 0x36
 80146f0:	f000 ff94 	bl	801561c <dhcp_option>
 80146f4:	4603      	mov	r3, r0
 80146f6:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 80146f8:	89bc      	ldrh	r4, [r7, #12]
 80146fa:	693b      	ldr	r3, [r7, #16]
 80146fc:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8014700:	69bb      	ldr	r3, [r7, #24]
 8014702:	699b      	ldr	r3, [r3, #24]
 8014704:	4618      	mov	r0, r3
 8014706:	f7f6 ffc4 	bl	800b692 <lwip_htonl>
 801470a:	4603      	mov	r3, r0
 801470c:	461a      	mov	r2, r3
 801470e:	4629      	mov	r1, r5
 8014710:	4620      	mov	r0, r4
 8014712:	f001 f80f 	bl	8015734 <dhcp_option_long>
 8014716:	4603      	mov	r3, r0
 8014718:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801471a:	89b8      	ldrh	r0, [r7, #12]
 801471c:	693b      	ldr	r3, [r7, #16]
 801471e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8014722:	2303      	movs	r3, #3
 8014724:	2237      	movs	r2, #55	@ 0x37
 8014726:	f000 ff79 	bl	801561c <dhcp_option>
 801472a:	4603      	mov	r3, r0
 801472c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801472e:	2300      	movs	r3, #0
 8014730:	77bb      	strb	r3, [r7, #30]
 8014732:	e00e      	b.n	8014752 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8014734:	89b8      	ldrh	r0, [r7, #12]
 8014736:	693b      	ldr	r3, [r7, #16]
 8014738:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801473c:	7fbb      	ldrb	r3, [r7, #30]
 801473e:	4a30      	ldr	r2, [pc, #192]	@ (8014800 <dhcp_select+0x1e4>)
 8014740:	5cd3      	ldrb	r3, [r2, r3]
 8014742:	461a      	mov	r2, r3
 8014744:	f000 ff9e 	bl	8015684 <dhcp_option_byte>
 8014748:	4603      	mov	r3, r0
 801474a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801474c:	7fbb      	ldrb	r3, [r7, #30]
 801474e:	3301      	adds	r3, #1
 8014750:	77bb      	strb	r3, [r7, #30]
 8014752:	7fbb      	ldrb	r3, [r7, #30]
 8014754:	2b02      	cmp	r3, #2
 8014756:	d9ed      	bls.n	8014734 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014758:	89b8      	ldrh	r0, [r7, #12]
 801475a:	693b      	ldr	r3, [r7, #16]
 801475c:	33f0      	adds	r3, #240	@ 0xf0
 801475e:	697a      	ldr	r2, [r7, #20]
 8014760:	4619      	mov	r1, r3
 8014762:	f001 fca3 	bl	80160ac <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8014766:	4b27      	ldr	r3, [pc, #156]	@ (8014804 <dhcp_select+0x1e8>)
 8014768:	6818      	ldr	r0, [r3, #0]
 801476a:	4b27      	ldr	r3, [pc, #156]	@ (8014808 <dhcp_select+0x1ec>)
 801476c:	9301      	str	r3, [sp, #4]
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	9300      	str	r3, [sp, #0]
 8014772:	2343      	movs	r3, #67	@ 0x43
 8014774:	4a25      	ldr	r2, [pc, #148]	@ (801480c <dhcp_select+0x1f0>)
 8014776:	6979      	ldr	r1, [r7, #20]
 8014778:	f7ff fbce 	bl	8013f18 <udp_sendto_if_src>
 801477c:	4603      	mov	r3, r0
 801477e:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8014780:	6978      	ldr	r0, [r7, #20]
 8014782:	f7f8 fba5 	bl	800ced0 <pbuf_free>
 8014786:	e001      	b.n	801478c <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014788:	23ff      	movs	r3, #255	@ 0xff
 801478a:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801478c:	69bb      	ldr	r3, [r7, #24]
 801478e:	799b      	ldrb	r3, [r3, #6]
 8014790:	2bff      	cmp	r3, #255	@ 0xff
 8014792:	d005      	beq.n	80147a0 <dhcp_select+0x184>
    dhcp->tries++;
 8014794:	69bb      	ldr	r3, [r7, #24]
 8014796:	799b      	ldrb	r3, [r3, #6]
 8014798:	3301      	adds	r3, #1
 801479a:	b2da      	uxtb	r2, r3
 801479c:	69bb      	ldr	r3, [r7, #24]
 801479e:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80147a0:	69bb      	ldr	r3, [r7, #24]
 80147a2:	799b      	ldrb	r3, [r3, #6]
 80147a4:	2b05      	cmp	r3, #5
 80147a6:	d80d      	bhi.n	80147c4 <dhcp_select+0x1a8>
 80147a8:	69bb      	ldr	r3, [r7, #24]
 80147aa:	799b      	ldrb	r3, [r3, #6]
 80147ac:	461a      	mov	r2, r3
 80147ae:	2301      	movs	r3, #1
 80147b0:	4093      	lsls	r3, r2
 80147b2:	b29b      	uxth	r3, r3
 80147b4:	461a      	mov	r2, r3
 80147b6:	0152      	lsls	r2, r2, #5
 80147b8:	1ad2      	subs	r2, r2, r3
 80147ba:	0092      	lsls	r2, r2, #2
 80147bc:	4413      	add	r3, r2
 80147be:	00db      	lsls	r3, r3, #3
 80147c0:	b29b      	uxth	r3, r3
 80147c2:	e001      	b.n	80147c8 <dhcp_select+0x1ac>
 80147c4:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80147c8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80147ca:	89fb      	ldrh	r3, [r7, #14]
 80147cc:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80147d0:	4a0f      	ldr	r2, [pc, #60]	@ (8014810 <dhcp_select+0x1f4>)
 80147d2:	fb82 1203 	smull	r1, r2, r2, r3
 80147d6:	1152      	asrs	r2, r2, #5
 80147d8:	17db      	asrs	r3, r3, #31
 80147da:	1ad3      	subs	r3, r2, r3
 80147dc:	b29a      	uxth	r2, r3
 80147de:	69bb      	ldr	r3, [r7, #24]
 80147e0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80147e2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80147e6:	4618      	mov	r0, r3
 80147e8:	3720      	adds	r7, #32
 80147ea:	46bd      	mov	sp, r7
 80147ec:	bdb0      	pop	{r4, r5, r7, pc}
 80147ee:	bf00      	nop
 80147f0:	0801d2c8 	.word	0x0801d2c8
 80147f4:	0801d374 	.word	0x0801d374
 80147f8:	0801d328 	.word	0x0801d328
 80147fc:	0801d390 	.word	0x0801d390
 8014800:	20000030 	.word	0x20000030
 8014804:	20010efc 	.word	0x20010efc
 8014808:	08027fac 	.word	0x08027fac
 801480c:	08027fb0 	.word	0x08027fb0
 8014810:	10624dd3 	.word	0x10624dd3

08014814 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8014814:	b580      	push	{r7, lr}
 8014816:	b082      	sub	sp, #8
 8014818:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 801481a:	4b27      	ldr	r3, [pc, #156]	@ (80148b8 <dhcp_coarse_tmr+0xa4>)
 801481c:	681b      	ldr	r3, [r3, #0]
 801481e:	607b      	str	r3, [r7, #4]
 8014820:	e042      	b.n	80148a8 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014826:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8014828:	683b      	ldr	r3, [r7, #0]
 801482a:	2b00      	cmp	r3, #0
 801482c:	d039      	beq.n	80148a2 <dhcp_coarse_tmr+0x8e>
 801482e:	683b      	ldr	r3, [r7, #0]
 8014830:	795b      	ldrb	r3, [r3, #5]
 8014832:	2b00      	cmp	r3, #0
 8014834:	d035      	beq.n	80148a2 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8014836:	683b      	ldr	r3, [r7, #0]
 8014838:	8a9b      	ldrh	r3, [r3, #20]
 801483a:	2b00      	cmp	r3, #0
 801483c:	d012      	beq.n	8014864 <dhcp_coarse_tmr+0x50>
 801483e:	683b      	ldr	r3, [r7, #0]
 8014840:	8a5b      	ldrh	r3, [r3, #18]
 8014842:	3301      	adds	r3, #1
 8014844:	b29a      	uxth	r2, r3
 8014846:	683b      	ldr	r3, [r7, #0]
 8014848:	825a      	strh	r2, [r3, #18]
 801484a:	683b      	ldr	r3, [r7, #0]
 801484c:	8a5a      	ldrh	r2, [r3, #18]
 801484e:	683b      	ldr	r3, [r7, #0]
 8014850:	8a9b      	ldrh	r3, [r3, #20]
 8014852:	429a      	cmp	r2, r3
 8014854:	d106      	bne.n	8014864 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8014856:	6878      	ldr	r0, [r7, #4]
 8014858:	f000 fe2c 	bl	80154b4 <dhcp_release_and_stop>
        dhcp_start(netif);
 801485c:	6878      	ldr	r0, [r7, #4]
 801485e:	f000 f969 	bl	8014b34 <dhcp_start>
 8014862:	e01e      	b.n	80148a2 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8014864:	683b      	ldr	r3, [r7, #0]
 8014866:	8a1b      	ldrh	r3, [r3, #16]
 8014868:	2b00      	cmp	r3, #0
 801486a:	d00b      	beq.n	8014884 <dhcp_coarse_tmr+0x70>
 801486c:	683b      	ldr	r3, [r7, #0]
 801486e:	8a1b      	ldrh	r3, [r3, #16]
 8014870:	1e5a      	subs	r2, r3, #1
 8014872:	b291      	uxth	r1, r2
 8014874:	683a      	ldr	r2, [r7, #0]
 8014876:	8211      	strh	r1, [r2, #16]
 8014878:	2b01      	cmp	r3, #1
 801487a:	d103      	bne.n	8014884 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 801487c:	6878      	ldr	r0, [r7, #4]
 801487e:	f000 f8c6 	bl	8014a0e <dhcp_t2_timeout>
 8014882:	e00e      	b.n	80148a2 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8014884:	683b      	ldr	r3, [r7, #0]
 8014886:	89db      	ldrh	r3, [r3, #14]
 8014888:	2b00      	cmp	r3, #0
 801488a:	d00a      	beq.n	80148a2 <dhcp_coarse_tmr+0x8e>
 801488c:	683b      	ldr	r3, [r7, #0]
 801488e:	89db      	ldrh	r3, [r3, #14]
 8014890:	1e5a      	subs	r2, r3, #1
 8014892:	b291      	uxth	r1, r2
 8014894:	683a      	ldr	r2, [r7, #0]
 8014896:	81d1      	strh	r1, [r2, #14]
 8014898:	2b01      	cmp	r3, #1
 801489a:	d102      	bne.n	80148a2 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 801489c:	6878      	ldr	r0, [r7, #4]
 801489e:	f000 f888 	bl	80149b2 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	681b      	ldr	r3, [r3, #0]
 80148a6:	607b      	str	r3, [r7, #4]
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	2b00      	cmp	r3, #0
 80148ac:	d1b9      	bne.n	8014822 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 80148ae:	bf00      	nop
 80148b0:	bf00      	nop
 80148b2:	3708      	adds	r7, #8
 80148b4:	46bd      	mov	sp, r7
 80148b6:	bd80      	pop	{r7, pc}
 80148b8:	20010e68 	.word	0x20010e68

080148bc <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 80148bc:	b580      	push	{r7, lr}
 80148be:	b082      	sub	sp, #8
 80148c0:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 80148c2:	4b16      	ldr	r3, [pc, #88]	@ (801491c <dhcp_fine_tmr+0x60>)
 80148c4:	681b      	ldr	r3, [r3, #0]
 80148c6:	607b      	str	r3, [r7, #4]
 80148c8:	e020      	b.n	801490c <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80148ce:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 80148d0:	683b      	ldr	r3, [r7, #0]
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d017      	beq.n	8014906 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 80148d6:	683b      	ldr	r3, [r7, #0]
 80148d8:	891b      	ldrh	r3, [r3, #8]
 80148da:	2b01      	cmp	r3, #1
 80148dc:	d906      	bls.n	80148ec <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 80148de:	683b      	ldr	r3, [r7, #0]
 80148e0:	891b      	ldrh	r3, [r3, #8]
 80148e2:	3b01      	subs	r3, #1
 80148e4:	b29a      	uxth	r2, r3
 80148e6:	683b      	ldr	r3, [r7, #0]
 80148e8:	811a      	strh	r2, [r3, #8]
 80148ea:	e00c      	b.n	8014906 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 80148ec:	683b      	ldr	r3, [r7, #0]
 80148ee:	891b      	ldrh	r3, [r3, #8]
 80148f0:	2b01      	cmp	r3, #1
 80148f2:	d108      	bne.n	8014906 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 80148f4:	683b      	ldr	r3, [r7, #0]
 80148f6:	891b      	ldrh	r3, [r3, #8]
 80148f8:	3b01      	subs	r3, #1
 80148fa:	b29a      	uxth	r2, r3
 80148fc:	683b      	ldr	r3, [r7, #0]
 80148fe:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8014900:	6878      	ldr	r0, [r7, #4]
 8014902:	f000 f80d 	bl	8014920 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8014906:	687b      	ldr	r3, [r7, #4]
 8014908:	681b      	ldr	r3, [r3, #0]
 801490a:	607b      	str	r3, [r7, #4]
 801490c:	687b      	ldr	r3, [r7, #4]
 801490e:	2b00      	cmp	r3, #0
 8014910:	d1db      	bne.n	80148ca <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8014912:	bf00      	nop
 8014914:	bf00      	nop
 8014916:	3708      	adds	r7, #8
 8014918:	46bd      	mov	sp, r7
 801491a:	bd80      	pop	{r7, pc}
 801491c:	20010e68 	.word	0x20010e68

08014920 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8014920:	b580      	push	{r7, lr}
 8014922:	b084      	sub	sp, #16
 8014924:	af00      	add	r7, sp, #0
 8014926:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801492c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801492e:	68fb      	ldr	r3, [r7, #12]
 8014930:	795b      	ldrb	r3, [r3, #5]
 8014932:	2b0c      	cmp	r3, #12
 8014934:	d003      	beq.n	801493e <dhcp_timeout+0x1e>
 8014936:	68fb      	ldr	r3, [r7, #12]
 8014938:	795b      	ldrb	r3, [r3, #5]
 801493a:	2b06      	cmp	r3, #6
 801493c:	d103      	bne.n	8014946 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 801493e:	6878      	ldr	r0, [r7, #4]
 8014940:	f000 fa54 	bl	8014dec <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8014944:	e031      	b.n	80149aa <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8014946:	68fb      	ldr	r3, [r7, #12]
 8014948:	795b      	ldrb	r3, [r3, #5]
 801494a:	2b01      	cmp	r3, #1
 801494c:	d10e      	bne.n	801496c <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 801494e:	68fb      	ldr	r3, [r7, #12]
 8014950:	799b      	ldrb	r3, [r3, #6]
 8014952:	2b05      	cmp	r3, #5
 8014954:	d803      	bhi.n	801495e <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8014956:	6878      	ldr	r0, [r7, #4]
 8014958:	f7ff fe60 	bl	801461c <dhcp_select>
}
 801495c:	e025      	b.n	80149aa <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 801495e:	6878      	ldr	r0, [r7, #4]
 8014960:	f000 fda8 	bl	80154b4 <dhcp_release_and_stop>
      dhcp_start(netif);
 8014964:	6878      	ldr	r0, [r7, #4]
 8014966:	f000 f8e5 	bl	8014b34 <dhcp_start>
}
 801496a:	e01e      	b.n	80149aa <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 801496c:	68fb      	ldr	r3, [r7, #12]
 801496e:	795b      	ldrb	r3, [r3, #5]
 8014970:	2b08      	cmp	r3, #8
 8014972:	d10b      	bne.n	801498c <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8014974:	68fb      	ldr	r3, [r7, #12]
 8014976:	799b      	ldrb	r3, [r3, #6]
 8014978:	2b01      	cmp	r3, #1
 801497a:	d803      	bhi.n	8014984 <dhcp_timeout+0x64>
      dhcp_check(netif);
 801497c:	6878      	ldr	r0, [r7, #4]
 801497e:	f7ff fdf3 	bl	8014568 <dhcp_check>
}
 8014982:	e012      	b.n	80149aa <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8014984:	6878      	ldr	r0, [r7, #4]
 8014986:	f000 fad3 	bl	8014f30 <dhcp_bind>
}
 801498a:	e00e      	b.n	80149aa <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 801498c:	68fb      	ldr	r3, [r7, #12]
 801498e:	795b      	ldrb	r3, [r3, #5]
 8014990:	2b03      	cmp	r3, #3
 8014992:	d10a      	bne.n	80149aa <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8014994:	68fb      	ldr	r3, [r7, #12]
 8014996:	799b      	ldrb	r3, [r3, #6]
 8014998:	2b01      	cmp	r3, #1
 801499a:	d803      	bhi.n	80149a4 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 801499c:	6878      	ldr	r0, [r7, #4]
 801499e:	f000 fcd5 	bl	801534c <dhcp_reboot>
}
 80149a2:	e002      	b.n	80149aa <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 80149a4:	6878      	ldr	r0, [r7, #4]
 80149a6:	f000 fa21 	bl	8014dec <dhcp_discover>
}
 80149aa:	bf00      	nop
 80149ac:	3710      	adds	r7, #16
 80149ae:	46bd      	mov	sp, r7
 80149b0:	bd80      	pop	{r7, pc}

080149b2 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 80149b2:	b580      	push	{r7, lr}
 80149b4:	b084      	sub	sp, #16
 80149b6:	af00      	add	r7, sp, #0
 80149b8:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80149be:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80149c0:	68fb      	ldr	r3, [r7, #12]
 80149c2:	795b      	ldrb	r3, [r3, #5]
 80149c4:	2b01      	cmp	r3, #1
 80149c6:	d007      	beq.n	80149d8 <dhcp_t1_timeout+0x26>
 80149c8:	68fb      	ldr	r3, [r7, #12]
 80149ca:	795b      	ldrb	r3, [r3, #5]
 80149cc:	2b0a      	cmp	r3, #10
 80149ce:	d003      	beq.n	80149d8 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 80149d0:	68fb      	ldr	r3, [r7, #12]
 80149d2:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80149d4:	2b05      	cmp	r3, #5
 80149d6:	d116      	bne.n	8014a06 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 80149d8:	6878      	ldr	r0, [r7, #4]
 80149da:	f000 fb83 	bl	80150e4 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80149de:	68fb      	ldr	r3, [r7, #12]
 80149e0:	899b      	ldrh	r3, [r3, #12]
 80149e2:	461a      	mov	r2, r3
 80149e4:	68fb      	ldr	r3, [r7, #12]
 80149e6:	8a5b      	ldrh	r3, [r3, #18]
 80149e8:	1ad3      	subs	r3, r2, r3
 80149ea:	2b01      	cmp	r3, #1
 80149ec:	dd0b      	ble.n	8014a06 <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 80149ee:	68fb      	ldr	r3, [r7, #12]
 80149f0:	899b      	ldrh	r3, [r3, #12]
 80149f2:	461a      	mov	r2, r3
 80149f4:	68fb      	ldr	r3, [r7, #12]
 80149f6:	8a5b      	ldrh	r3, [r3, #18]
 80149f8:	1ad3      	subs	r3, r2, r3
 80149fa:	0fda      	lsrs	r2, r3, #31
 80149fc:	4413      	add	r3, r2
 80149fe:	105b      	asrs	r3, r3, #1
 8014a00:	b29a      	uxth	r2, r3
 8014a02:	68fb      	ldr	r3, [r7, #12]
 8014a04:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8014a06:	bf00      	nop
 8014a08:	3710      	adds	r7, #16
 8014a0a:	46bd      	mov	sp, r7
 8014a0c:	bd80      	pop	{r7, pc}

08014a0e <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8014a0e:	b580      	push	{r7, lr}
 8014a10:	b084      	sub	sp, #16
 8014a12:	af00      	add	r7, sp, #0
 8014a14:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014a1a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014a1c:	68fb      	ldr	r3, [r7, #12]
 8014a1e:	795b      	ldrb	r3, [r3, #5]
 8014a20:	2b01      	cmp	r3, #1
 8014a22:	d00b      	beq.n	8014a3c <dhcp_t2_timeout+0x2e>
 8014a24:	68fb      	ldr	r3, [r7, #12]
 8014a26:	795b      	ldrb	r3, [r3, #5]
 8014a28:	2b0a      	cmp	r3, #10
 8014a2a:	d007      	beq.n	8014a3c <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8014a2c:	68fb      	ldr	r3, [r7, #12]
 8014a2e:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014a30:	2b05      	cmp	r3, #5
 8014a32:	d003      	beq.n	8014a3c <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8014a34:	68fb      	ldr	r3, [r7, #12]
 8014a36:	795b      	ldrb	r3, [r3, #5]
 8014a38:	2b04      	cmp	r3, #4
 8014a3a:	d116      	bne.n	8014a6a <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8014a3c:	6878      	ldr	r0, [r7, #4]
 8014a3e:	f000 fbeb 	bl	8015218 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8014a42:	68fb      	ldr	r3, [r7, #12]
 8014a44:	8a9b      	ldrh	r3, [r3, #20]
 8014a46:	461a      	mov	r2, r3
 8014a48:	68fb      	ldr	r3, [r7, #12]
 8014a4a:	8a5b      	ldrh	r3, [r3, #18]
 8014a4c:	1ad3      	subs	r3, r2, r3
 8014a4e:	2b01      	cmp	r3, #1
 8014a50:	dd0b      	ble.n	8014a6a <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8014a52:	68fb      	ldr	r3, [r7, #12]
 8014a54:	8a9b      	ldrh	r3, [r3, #20]
 8014a56:	461a      	mov	r2, r3
 8014a58:	68fb      	ldr	r3, [r7, #12]
 8014a5a:	8a5b      	ldrh	r3, [r3, #18]
 8014a5c:	1ad3      	subs	r3, r2, r3
 8014a5e:	0fda      	lsrs	r2, r3, #31
 8014a60:	4413      	add	r3, r2
 8014a62:	105b      	asrs	r3, r3, #1
 8014a64:	b29a      	uxth	r2, r3
 8014a66:	68fb      	ldr	r3, [r7, #12]
 8014a68:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8014a6a:	bf00      	nop
 8014a6c:	3710      	adds	r7, #16
 8014a6e:	46bd      	mov	sp, r7
 8014a70:	bd80      	pop	{r7, pc}
	...

08014a74 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8014a74:	b580      	push	{r7, lr}
 8014a76:	b084      	sub	sp, #16
 8014a78:	af00      	add	r7, sp, #0
 8014a7a:	6078      	str	r0, [r7, #4]
 8014a7c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014a82:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8014a84:	68fb      	ldr	r3, [r7, #12]
 8014a86:	2200      	movs	r2, #0
 8014a88:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8014a8a:	68fb      	ldr	r3, [r7, #12]
 8014a8c:	2200      	movs	r2, #0
 8014a8e:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8014a90:	4b26      	ldr	r3, [pc, #152]	@ (8014b2c <dhcp_handle_ack+0xb8>)
 8014a92:	78db      	ldrb	r3, [r3, #3]
 8014a94:	2b00      	cmp	r3, #0
 8014a96:	d003      	beq.n	8014aa0 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8014a98:	4b25      	ldr	r3, [pc, #148]	@ (8014b30 <dhcp_handle_ack+0xbc>)
 8014a9a:	68da      	ldr	r2, [r3, #12]
 8014a9c:	68fb      	ldr	r3, [r7, #12]
 8014a9e:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8014aa0:	4b22      	ldr	r3, [pc, #136]	@ (8014b2c <dhcp_handle_ack+0xb8>)
 8014aa2:	791b      	ldrb	r3, [r3, #4]
 8014aa4:	2b00      	cmp	r3, #0
 8014aa6:	d004      	beq.n	8014ab2 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8014aa8:	4b21      	ldr	r3, [pc, #132]	@ (8014b30 <dhcp_handle_ack+0xbc>)
 8014aaa:	691a      	ldr	r2, [r3, #16]
 8014aac:	68fb      	ldr	r3, [r7, #12]
 8014aae:	62da      	str	r2, [r3, #44]	@ 0x2c
 8014ab0:	e004      	b.n	8014abc <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8014ab2:	68fb      	ldr	r3, [r7, #12]
 8014ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014ab6:	085a      	lsrs	r2, r3, #1
 8014ab8:	68fb      	ldr	r3, [r7, #12]
 8014aba:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8014abc:	4b1b      	ldr	r3, [pc, #108]	@ (8014b2c <dhcp_handle_ack+0xb8>)
 8014abe:	795b      	ldrb	r3, [r3, #5]
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	d004      	beq.n	8014ace <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8014ac4:	4b1a      	ldr	r3, [pc, #104]	@ (8014b30 <dhcp_handle_ack+0xbc>)
 8014ac6:	695a      	ldr	r2, [r3, #20]
 8014ac8:	68fb      	ldr	r3, [r7, #12]
 8014aca:	631a      	str	r2, [r3, #48]	@ 0x30
 8014acc:	e007      	b.n	8014ade <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8014ace:	68fb      	ldr	r3, [r7, #12]
 8014ad0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8014ad2:	4613      	mov	r3, r2
 8014ad4:	00db      	lsls	r3, r3, #3
 8014ad6:	1a9b      	subs	r3, r3, r2
 8014ad8:	08da      	lsrs	r2, r3, #3
 8014ada:	68fb      	ldr	r3, [r7, #12]
 8014adc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8014ade:	683b      	ldr	r3, [r7, #0]
 8014ae0:	691a      	ldr	r2, [r3, #16]
 8014ae2:	68fb      	ldr	r3, [r7, #12]
 8014ae4:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8014ae6:	4b11      	ldr	r3, [pc, #68]	@ (8014b2c <dhcp_handle_ack+0xb8>)
 8014ae8:	799b      	ldrb	r3, [r3, #6]
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	d00b      	beq.n	8014b06 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8014aee:	4b10      	ldr	r3, [pc, #64]	@ (8014b30 <dhcp_handle_ack+0xbc>)
 8014af0:	699b      	ldr	r3, [r3, #24]
 8014af2:	4618      	mov	r0, r3
 8014af4:	f7f6 fdcd 	bl	800b692 <lwip_htonl>
 8014af8:	4602      	mov	r2, r0
 8014afa:	68fb      	ldr	r3, [r7, #12]
 8014afc:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8014afe:	68fb      	ldr	r3, [r7, #12]
 8014b00:	2201      	movs	r2, #1
 8014b02:	71da      	strb	r2, [r3, #7]
 8014b04:	e002      	b.n	8014b0c <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8014b06:	68fb      	ldr	r3, [r7, #12]
 8014b08:	2200      	movs	r2, #0
 8014b0a:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8014b0c:	4b07      	ldr	r3, [pc, #28]	@ (8014b2c <dhcp_handle_ack+0xb8>)
 8014b0e:	79db      	ldrb	r3, [r3, #7]
 8014b10:	2b00      	cmp	r3, #0
 8014b12:	d007      	beq.n	8014b24 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8014b14:	4b06      	ldr	r3, [pc, #24]	@ (8014b30 <dhcp_handle_ack+0xbc>)
 8014b16:	69db      	ldr	r3, [r3, #28]
 8014b18:	4618      	mov	r0, r3
 8014b1a:	f7f6 fdba 	bl	800b692 <lwip_htonl>
 8014b1e:	4602      	mov	r2, r0
 8014b20:	68fb      	ldr	r3, [r7, #12]
 8014b22:	625a      	str	r2, [r3, #36]	@ 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8014b24:	bf00      	nop
 8014b26:	3710      	adds	r7, #16
 8014b28:	46bd      	mov	sp, r7
 8014b2a:	bd80      	pop	{r7, pc}
 8014b2c:	20010ef4 	.word	0x20010ef4
 8014b30:	20010ed4 	.word	0x20010ed4

08014b34 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8014b34:	b580      	push	{r7, lr}
 8014b36:	b084      	sub	sp, #16
 8014b38:	af00      	add	r7, sp, #0
 8014b3a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	2b00      	cmp	r3, #0
 8014b40:	d109      	bne.n	8014b56 <dhcp_start+0x22>
 8014b42:	4b37      	ldr	r3, [pc, #220]	@ (8014c20 <dhcp_start+0xec>)
 8014b44:	f240 22e7 	movw	r2, #743	@ 0x2e7
 8014b48:	4936      	ldr	r1, [pc, #216]	@ (8014c24 <dhcp_start+0xf0>)
 8014b4a:	4837      	ldr	r0, [pc, #220]	@ (8014c28 <dhcp_start+0xf4>)
 8014b4c:	f004 f8fa 	bl	8018d44 <iprintf>
 8014b50:	f06f 030f 	mvn.w	r3, #15
 8014b54:	e060      	b.n	8014c18 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8014b5c:	f003 0301 	and.w	r3, r3, #1
 8014b60:	2b00      	cmp	r3, #0
 8014b62:	d109      	bne.n	8014b78 <dhcp_start+0x44>
 8014b64:	4b2e      	ldr	r3, [pc, #184]	@ (8014c20 <dhcp_start+0xec>)
 8014b66:	f44f 723a 	mov.w	r2, #744	@ 0x2e8
 8014b6a:	4930      	ldr	r1, [pc, #192]	@ (8014c2c <dhcp_start+0xf8>)
 8014b6c:	482e      	ldr	r0, [pc, #184]	@ (8014c28 <dhcp_start+0xf4>)
 8014b6e:	f004 f8e9 	bl	8018d44 <iprintf>
 8014b72:	f06f 030f 	mvn.w	r3, #15
 8014b76:	e04f      	b.n	8014c18 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8014b78:	687b      	ldr	r3, [r7, #4]
 8014b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014b7c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8014b7e:	687b      	ldr	r3, [r7, #4]
 8014b80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014b82:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 8014b86:	d202      	bcs.n	8014b8e <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8014b88:	f04f 33ff 	mov.w	r3, #4294967295
 8014b8c:	e044      	b.n	8014c18 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8014b8e:	68fb      	ldr	r3, [r7, #12]
 8014b90:	2b00      	cmp	r3, #0
 8014b92:	d10d      	bne.n	8014bb0 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8014b94:	2034      	movs	r0, #52	@ 0x34
 8014b96:	f7f7 f8d1 	bl	800bd3c <mem_malloc>
 8014b9a:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8014b9c:	68fb      	ldr	r3, [r7, #12]
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	d102      	bne.n	8014ba8 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8014ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8014ba6:	e037      	b.n	8014c18 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8014ba8:	687b      	ldr	r3, [r7, #4]
 8014baa:	68fa      	ldr	r2, [r7, #12]
 8014bac:	625a      	str	r2, [r3, #36]	@ 0x24
 8014bae:	e005      	b.n	8014bbc <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8014bb0:	68fb      	ldr	r3, [r7, #12]
 8014bb2:	791b      	ldrb	r3, [r3, #4]
 8014bb4:	2b00      	cmp	r3, #0
 8014bb6:	d001      	beq.n	8014bbc <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8014bb8:	f7ff fc92 	bl	80144e0 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8014bbc:	2234      	movs	r2, #52	@ 0x34
 8014bbe:	2100      	movs	r1, #0
 8014bc0:	68f8      	ldr	r0, [r7, #12]
 8014bc2:	f004 f95e 	bl	8018e82 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8014bc6:	f7ff fc39 	bl	801443c <dhcp_inc_pcb_refcount>
 8014bca:	4603      	mov	r3, r0
 8014bcc:	2b00      	cmp	r3, #0
 8014bce:	d002      	beq.n	8014bd6 <dhcp_start+0xa2>
    return ERR_MEM;
 8014bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8014bd4:	e020      	b.n	8014c18 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8014bd6:	68fb      	ldr	r3, [r7, #12]
 8014bd8:	2201      	movs	r2, #1
 8014bda:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8014bdc:	687b      	ldr	r3, [r7, #4]
 8014bde:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8014be2:	f003 0304 	and.w	r3, r3, #4
 8014be6:	2b00      	cmp	r3, #0
 8014be8:	d105      	bne.n	8014bf6 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8014bea:	2102      	movs	r1, #2
 8014bec:	68f8      	ldr	r0, [r7, #12]
 8014bee:	f000 fcfb 	bl	80155e8 <dhcp_set_state>
    return ERR_OK;
 8014bf2:	2300      	movs	r3, #0
 8014bf4:	e010      	b.n	8014c18 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8014bf6:	6878      	ldr	r0, [r7, #4]
 8014bf8:	f000 f8f8 	bl	8014dec <dhcp_discover>
 8014bfc:	4603      	mov	r3, r0
 8014bfe:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8014c00:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8014c04:	2b00      	cmp	r3, #0
 8014c06:	d005      	beq.n	8014c14 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8014c08:	6878      	ldr	r0, [r7, #4]
 8014c0a:	f000 fc53 	bl	80154b4 <dhcp_release_and_stop>
    return ERR_MEM;
 8014c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8014c12:	e001      	b.n	8014c18 <dhcp_start+0xe4>
  }
  return result;
 8014c14:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014c18:	4618      	mov	r0, r3
 8014c1a:	3710      	adds	r7, #16
 8014c1c:	46bd      	mov	sp, r7
 8014c1e:	bd80      	pop	{r7, pc}
 8014c20:	0801d2c8 	.word	0x0801d2c8
 8014c24:	0801d3ac 	.word	0x0801d3ac
 8014c28:	0801d328 	.word	0x0801d328
 8014c2c:	0801d3f0 	.word	0x0801d3f0

08014c30 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8014c30:	b580      	push	{r7, lr}
 8014c32:	b084      	sub	sp, #16
 8014c34:	af00      	add	r7, sp, #0
 8014c36:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014c3c:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8014c3e:	68fb      	ldr	r3, [r7, #12]
 8014c40:	2b00      	cmp	r3, #0
 8014c42:	d025      	beq.n	8014c90 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8014c44:	68fb      	ldr	r3, [r7, #12]
 8014c46:	795b      	ldrb	r3, [r3, #5]
 8014c48:	2b0a      	cmp	r3, #10
 8014c4a:	d008      	beq.n	8014c5e <dhcp_network_changed+0x2e>
 8014c4c:	2b0a      	cmp	r3, #10
 8014c4e:	dc0d      	bgt.n	8014c6c <dhcp_network_changed+0x3c>
 8014c50:	2b00      	cmp	r3, #0
 8014c52:	d01f      	beq.n	8014c94 <dhcp_network_changed+0x64>
 8014c54:	2b00      	cmp	r3, #0
 8014c56:	db09      	blt.n	8014c6c <dhcp_network_changed+0x3c>
 8014c58:	3b03      	subs	r3, #3
 8014c5a:	2b02      	cmp	r3, #2
 8014c5c:	d806      	bhi.n	8014c6c <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8014c5e:	68fb      	ldr	r3, [r7, #12]
 8014c60:	2200      	movs	r2, #0
 8014c62:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8014c64:	6878      	ldr	r0, [r7, #4]
 8014c66:	f000 fb71 	bl	801534c <dhcp_reboot>
      break;
 8014c6a:	e014      	b.n	8014c96 <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8014c6c:	68fb      	ldr	r3, [r7, #12]
 8014c6e:	795b      	ldrb	r3, [r3, #5]
 8014c70:	2b0c      	cmp	r3, #12
 8014c72:	d906      	bls.n	8014c82 <dhcp_network_changed+0x52>
 8014c74:	4b09      	ldr	r3, [pc, #36]	@ (8014c9c <dhcp_network_changed+0x6c>)
 8014c76:	f240 326d 	movw	r2, #877	@ 0x36d
 8014c7a:	4909      	ldr	r1, [pc, #36]	@ (8014ca0 <dhcp_network_changed+0x70>)
 8014c7c:	4809      	ldr	r0, [pc, #36]	@ (8014ca4 <dhcp_network_changed+0x74>)
 8014c7e:	f004 f861 	bl	8018d44 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8014c82:	68fb      	ldr	r3, [r7, #12]
 8014c84:	2200      	movs	r2, #0
 8014c86:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8014c88:	6878      	ldr	r0, [r7, #4]
 8014c8a:	f000 f8af 	bl	8014dec <dhcp_discover>
      break;
 8014c8e:	e002      	b.n	8014c96 <dhcp_network_changed+0x66>
    return;
 8014c90:	bf00      	nop
 8014c92:	e000      	b.n	8014c96 <dhcp_network_changed+0x66>
      break;
 8014c94:	bf00      	nop
  }
}
 8014c96:	3710      	adds	r7, #16
 8014c98:	46bd      	mov	sp, r7
 8014c9a:	bd80      	pop	{r7, pc}
 8014c9c:	0801d2c8 	.word	0x0801d2c8
 8014ca0:	0801d414 	.word	0x0801d414
 8014ca4:	0801d328 	.word	0x0801d328

08014ca8 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8014ca8:	b580      	push	{r7, lr}
 8014caa:	b084      	sub	sp, #16
 8014cac:	af00      	add	r7, sp, #0
 8014cae:	6078      	str	r0, [r7, #4]
 8014cb0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8014cb2:	687b      	ldr	r3, [r7, #4]
 8014cb4:	2b00      	cmp	r3, #0
 8014cb6:	d107      	bne.n	8014cc8 <dhcp_arp_reply+0x20>
 8014cb8:	4b0e      	ldr	r3, [pc, #56]	@ (8014cf4 <dhcp_arp_reply+0x4c>)
 8014cba:	f240 328b 	movw	r2, #907	@ 0x38b
 8014cbe:	490e      	ldr	r1, [pc, #56]	@ (8014cf8 <dhcp_arp_reply+0x50>)
 8014cc0:	480e      	ldr	r0, [pc, #56]	@ (8014cfc <dhcp_arp_reply+0x54>)
 8014cc2:	f004 f83f 	bl	8018d44 <iprintf>
 8014cc6:	e012      	b.n	8014cee <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014ccc:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8014cce:	68fb      	ldr	r3, [r7, #12]
 8014cd0:	2b00      	cmp	r3, #0
 8014cd2:	d00c      	beq.n	8014cee <dhcp_arp_reply+0x46>
 8014cd4:	68fb      	ldr	r3, [r7, #12]
 8014cd6:	795b      	ldrb	r3, [r3, #5]
 8014cd8:	2b08      	cmp	r3, #8
 8014cda:	d108      	bne.n	8014cee <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8014cdc:	683b      	ldr	r3, [r7, #0]
 8014cde:	681a      	ldr	r2, [r3, #0]
 8014ce0:	68fb      	ldr	r3, [r7, #12]
 8014ce2:	69db      	ldr	r3, [r3, #28]
 8014ce4:	429a      	cmp	r2, r3
 8014ce6:	d102      	bne.n	8014cee <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8014ce8:	6878      	ldr	r0, [r7, #4]
 8014cea:	f000 f809 	bl	8014d00 <dhcp_decline>
    }
  }
}
 8014cee:	3710      	adds	r7, #16
 8014cf0:	46bd      	mov	sp, r7
 8014cf2:	bd80      	pop	{r7, pc}
 8014cf4:	0801d2c8 	.word	0x0801d2c8
 8014cf8:	0801d3ac 	.word	0x0801d3ac
 8014cfc:	0801d328 	.word	0x0801d328

08014d00 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8014d00:	b5b0      	push	{r4, r5, r7, lr}
 8014d02:	b08a      	sub	sp, #40	@ 0x28
 8014d04:	af02      	add	r7, sp, #8
 8014d06:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014d0c:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8014d0e:	210c      	movs	r1, #12
 8014d10:	69b8      	ldr	r0, [r7, #24]
 8014d12:	f000 fc69 	bl	80155e8 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8014d16:	f107 030c 	add.w	r3, r7, #12
 8014d1a:	2204      	movs	r2, #4
 8014d1c:	69b9      	ldr	r1, [r7, #24]
 8014d1e:	6878      	ldr	r0, [r7, #4]
 8014d20:	f001 f8ee 	bl	8015f00 <dhcp_create_msg>
 8014d24:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014d26:	697b      	ldr	r3, [r7, #20]
 8014d28:	2b00      	cmp	r3, #0
 8014d2a:	d035      	beq.n	8014d98 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014d2c:	697b      	ldr	r3, [r7, #20]
 8014d2e:	685b      	ldr	r3, [r3, #4]
 8014d30:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8014d32:	89b8      	ldrh	r0, [r7, #12]
 8014d34:	693b      	ldr	r3, [r7, #16]
 8014d36:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8014d3a:	2304      	movs	r3, #4
 8014d3c:	2232      	movs	r2, #50	@ 0x32
 8014d3e:	f000 fc6d 	bl	801561c <dhcp_option>
 8014d42:	4603      	mov	r3, r0
 8014d44:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8014d46:	89bc      	ldrh	r4, [r7, #12]
 8014d48:	693b      	ldr	r3, [r7, #16]
 8014d4a:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8014d4e:	69bb      	ldr	r3, [r7, #24]
 8014d50:	69db      	ldr	r3, [r3, #28]
 8014d52:	4618      	mov	r0, r3
 8014d54:	f7f6 fc9d 	bl	800b692 <lwip_htonl>
 8014d58:	4603      	mov	r3, r0
 8014d5a:	461a      	mov	r2, r3
 8014d5c:	4629      	mov	r1, r5
 8014d5e:	4620      	mov	r0, r4
 8014d60:	f000 fce8 	bl	8015734 <dhcp_option_long>
 8014d64:	4603      	mov	r3, r0
 8014d66:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014d68:	89b8      	ldrh	r0, [r7, #12]
 8014d6a:	693b      	ldr	r3, [r7, #16]
 8014d6c:	33f0      	adds	r3, #240	@ 0xf0
 8014d6e:	697a      	ldr	r2, [r7, #20]
 8014d70:	4619      	mov	r1, r3
 8014d72:	f001 f99b 	bl	80160ac <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8014d76:	4b19      	ldr	r3, [pc, #100]	@ (8014ddc <dhcp_decline+0xdc>)
 8014d78:	6818      	ldr	r0, [r3, #0]
 8014d7a:	4b19      	ldr	r3, [pc, #100]	@ (8014de0 <dhcp_decline+0xe0>)
 8014d7c:	9301      	str	r3, [sp, #4]
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	9300      	str	r3, [sp, #0]
 8014d82:	2343      	movs	r3, #67	@ 0x43
 8014d84:	4a17      	ldr	r2, [pc, #92]	@ (8014de4 <dhcp_decline+0xe4>)
 8014d86:	6979      	ldr	r1, [r7, #20]
 8014d88:	f7ff f8c6 	bl	8013f18 <udp_sendto_if_src>
 8014d8c:	4603      	mov	r3, r0
 8014d8e:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8014d90:	6978      	ldr	r0, [r7, #20]
 8014d92:	f7f8 f89d 	bl	800ced0 <pbuf_free>
 8014d96:	e001      	b.n	8014d9c <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014d98:	23ff      	movs	r3, #255	@ 0xff
 8014d9a:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014d9c:	69bb      	ldr	r3, [r7, #24]
 8014d9e:	799b      	ldrb	r3, [r3, #6]
 8014da0:	2bff      	cmp	r3, #255	@ 0xff
 8014da2:	d005      	beq.n	8014db0 <dhcp_decline+0xb0>
    dhcp->tries++;
 8014da4:	69bb      	ldr	r3, [r7, #24]
 8014da6:	799b      	ldrb	r3, [r3, #6]
 8014da8:	3301      	adds	r3, #1
 8014daa:	b2da      	uxtb	r2, r3
 8014dac:	69bb      	ldr	r3, [r7, #24]
 8014dae:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8014db0:	f242 7310 	movw	r3, #10000	@ 0x2710
 8014db4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014db6:	89fb      	ldrh	r3, [r7, #14]
 8014db8:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8014dbc:	4a0a      	ldr	r2, [pc, #40]	@ (8014de8 <dhcp_decline+0xe8>)
 8014dbe:	fb82 1203 	smull	r1, r2, r2, r3
 8014dc2:	1152      	asrs	r2, r2, #5
 8014dc4:	17db      	asrs	r3, r3, #31
 8014dc6:	1ad3      	subs	r3, r2, r3
 8014dc8:	b29a      	uxth	r2, r3
 8014dca:	69bb      	ldr	r3, [r7, #24]
 8014dcc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014dce:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014dd2:	4618      	mov	r0, r3
 8014dd4:	3720      	adds	r7, #32
 8014dd6:	46bd      	mov	sp, r7
 8014dd8:	bdb0      	pop	{r4, r5, r7, pc}
 8014dda:	bf00      	nop
 8014ddc:	20010efc 	.word	0x20010efc
 8014de0:	08027fac 	.word	0x08027fac
 8014de4:	08027fb0 	.word	0x08027fb0
 8014de8:	10624dd3 	.word	0x10624dd3

08014dec <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8014dec:	b580      	push	{r7, lr}
 8014dee:	b08a      	sub	sp, #40	@ 0x28
 8014df0:	af02      	add	r7, sp, #8
 8014df2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014df8:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8014dfa:	2300      	movs	r3, #0
 8014dfc:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8014dfe:	69bb      	ldr	r3, [r7, #24]
 8014e00:	2200      	movs	r2, #0
 8014e02:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8014e04:	2106      	movs	r1, #6
 8014e06:	69b8      	ldr	r0, [r7, #24]
 8014e08:	f000 fbee 	bl	80155e8 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8014e0c:	f107 0308 	add.w	r3, r7, #8
 8014e10:	2201      	movs	r2, #1
 8014e12:	69b9      	ldr	r1, [r7, #24]
 8014e14:	6878      	ldr	r0, [r7, #4]
 8014e16:	f001 f873 	bl	8015f00 <dhcp_create_msg>
 8014e1a:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8014e1c:	693b      	ldr	r3, [r7, #16]
 8014e1e:	2b00      	cmp	r3, #0
 8014e20:	d04b      	beq.n	8014eba <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014e22:	693b      	ldr	r3, [r7, #16]
 8014e24:	685b      	ldr	r3, [r3, #4]
 8014e26:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014e28:	8938      	ldrh	r0, [r7, #8]
 8014e2a:	68fb      	ldr	r3, [r7, #12]
 8014e2c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8014e30:	2302      	movs	r3, #2
 8014e32:	2239      	movs	r2, #57	@ 0x39
 8014e34:	f000 fbf2 	bl	801561c <dhcp_option>
 8014e38:	4603      	mov	r3, r0
 8014e3a:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8014e3c:	8938      	ldrh	r0, [r7, #8]
 8014e3e:	68fb      	ldr	r3, [r7, #12]
 8014e40:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8014e44:	687b      	ldr	r3, [r7, #4]
 8014e46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014e48:	461a      	mov	r2, r3
 8014e4a:	f000 fc41 	bl	80156d0 <dhcp_option_short>
 8014e4e:	4603      	mov	r3, r0
 8014e50:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014e52:	8938      	ldrh	r0, [r7, #8]
 8014e54:	68fb      	ldr	r3, [r7, #12]
 8014e56:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8014e5a:	2303      	movs	r3, #3
 8014e5c:	2237      	movs	r2, #55	@ 0x37
 8014e5e:	f000 fbdd 	bl	801561c <dhcp_option>
 8014e62:	4603      	mov	r3, r0
 8014e64:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014e66:	2300      	movs	r3, #0
 8014e68:	77fb      	strb	r3, [r7, #31]
 8014e6a:	e00e      	b.n	8014e8a <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8014e6c:	8938      	ldrh	r0, [r7, #8]
 8014e6e:	68fb      	ldr	r3, [r7, #12]
 8014e70:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8014e74:	7ffb      	ldrb	r3, [r7, #31]
 8014e76:	4a29      	ldr	r2, [pc, #164]	@ (8014f1c <dhcp_discover+0x130>)
 8014e78:	5cd3      	ldrb	r3, [r2, r3]
 8014e7a:	461a      	mov	r2, r3
 8014e7c:	f000 fc02 	bl	8015684 <dhcp_option_byte>
 8014e80:	4603      	mov	r3, r0
 8014e82:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014e84:	7ffb      	ldrb	r3, [r7, #31]
 8014e86:	3301      	adds	r3, #1
 8014e88:	77fb      	strb	r3, [r7, #31]
 8014e8a:	7ffb      	ldrb	r3, [r7, #31]
 8014e8c:	2b02      	cmp	r3, #2
 8014e8e:	d9ed      	bls.n	8014e6c <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014e90:	8938      	ldrh	r0, [r7, #8]
 8014e92:	68fb      	ldr	r3, [r7, #12]
 8014e94:	33f0      	adds	r3, #240	@ 0xf0
 8014e96:	693a      	ldr	r2, [r7, #16]
 8014e98:	4619      	mov	r1, r3
 8014e9a:	f001 f907 	bl	80160ac <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8014e9e:	4b20      	ldr	r3, [pc, #128]	@ (8014f20 <dhcp_discover+0x134>)
 8014ea0:	6818      	ldr	r0, [r3, #0]
 8014ea2:	4b20      	ldr	r3, [pc, #128]	@ (8014f24 <dhcp_discover+0x138>)
 8014ea4:	9301      	str	r3, [sp, #4]
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	9300      	str	r3, [sp, #0]
 8014eaa:	2343      	movs	r3, #67	@ 0x43
 8014eac:	4a1e      	ldr	r2, [pc, #120]	@ (8014f28 <dhcp_discover+0x13c>)
 8014eae:	6939      	ldr	r1, [r7, #16]
 8014eb0:	f7ff f832 	bl	8013f18 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8014eb4:	6938      	ldr	r0, [r7, #16]
 8014eb6:	f7f8 f80b 	bl	800ced0 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8014eba:	69bb      	ldr	r3, [r7, #24]
 8014ebc:	799b      	ldrb	r3, [r3, #6]
 8014ebe:	2bff      	cmp	r3, #255	@ 0xff
 8014ec0:	d005      	beq.n	8014ece <dhcp_discover+0xe2>
    dhcp->tries++;
 8014ec2:	69bb      	ldr	r3, [r7, #24]
 8014ec4:	799b      	ldrb	r3, [r3, #6]
 8014ec6:	3301      	adds	r3, #1
 8014ec8:	b2da      	uxtb	r2, r3
 8014eca:	69bb      	ldr	r3, [r7, #24]
 8014ecc:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8014ece:	69bb      	ldr	r3, [r7, #24]
 8014ed0:	799b      	ldrb	r3, [r3, #6]
 8014ed2:	2b05      	cmp	r3, #5
 8014ed4:	d80d      	bhi.n	8014ef2 <dhcp_discover+0x106>
 8014ed6:	69bb      	ldr	r3, [r7, #24]
 8014ed8:	799b      	ldrb	r3, [r3, #6]
 8014eda:	461a      	mov	r2, r3
 8014edc:	2301      	movs	r3, #1
 8014ede:	4093      	lsls	r3, r2
 8014ee0:	b29b      	uxth	r3, r3
 8014ee2:	461a      	mov	r2, r3
 8014ee4:	0152      	lsls	r2, r2, #5
 8014ee6:	1ad2      	subs	r2, r2, r3
 8014ee8:	0092      	lsls	r2, r2, #2
 8014eea:	4413      	add	r3, r2
 8014eec:	00db      	lsls	r3, r3, #3
 8014eee:	b29b      	uxth	r3, r3
 8014ef0:	e001      	b.n	8014ef6 <dhcp_discover+0x10a>
 8014ef2:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8014ef6:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014ef8:	897b      	ldrh	r3, [r7, #10]
 8014efa:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8014efe:	4a0b      	ldr	r2, [pc, #44]	@ (8014f2c <dhcp_discover+0x140>)
 8014f00:	fb82 1203 	smull	r1, r2, r2, r3
 8014f04:	1152      	asrs	r2, r2, #5
 8014f06:	17db      	asrs	r3, r3, #31
 8014f08:	1ad3      	subs	r3, r2, r3
 8014f0a:	b29a      	uxth	r2, r3
 8014f0c:	69bb      	ldr	r3, [r7, #24]
 8014f0e:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014f10:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014f14:	4618      	mov	r0, r3
 8014f16:	3720      	adds	r7, #32
 8014f18:	46bd      	mov	sp, r7
 8014f1a:	bd80      	pop	{r7, pc}
 8014f1c:	20000030 	.word	0x20000030
 8014f20:	20010efc 	.word	0x20010efc
 8014f24:	08027fac 	.word	0x08027fac
 8014f28:	08027fb0 	.word	0x08027fb0
 8014f2c:	10624dd3 	.word	0x10624dd3

08014f30 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8014f30:	b580      	push	{r7, lr}
 8014f32:	b088      	sub	sp, #32
 8014f34:	af00      	add	r7, sp, #0
 8014f36:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	2b00      	cmp	r3, #0
 8014f3c:	d107      	bne.n	8014f4e <dhcp_bind+0x1e>
 8014f3e:	4b64      	ldr	r3, [pc, #400]	@ (80150d0 <dhcp_bind+0x1a0>)
 8014f40:	f240 4215 	movw	r2, #1045	@ 0x415
 8014f44:	4963      	ldr	r1, [pc, #396]	@ (80150d4 <dhcp_bind+0x1a4>)
 8014f46:	4864      	ldr	r0, [pc, #400]	@ (80150d8 <dhcp_bind+0x1a8>)
 8014f48:	f003 fefc 	bl	8018d44 <iprintf>
 8014f4c:	e0bc      	b.n	80150c8 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014f52:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8014f54:	69bb      	ldr	r3, [r7, #24]
 8014f56:	2b00      	cmp	r3, #0
 8014f58:	d107      	bne.n	8014f6a <dhcp_bind+0x3a>
 8014f5a:	4b5d      	ldr	r3, [pc, #372]	@ (80150d0 <dhcp_bind+0x1a0>)
 8014f5c:	f240 4217 	movw	r2, #1047	@ 0x417
 8014f60:	495e      	ldr	r1, [pc, #376]	@ (80150dc <dhcp_bind+0x1ac>)
 8014f62:	485d      	ldr	r0, [pc, #372]	@ (80150d8 <dhcp_bind+0x1a8>)
 8014f64:	f003 feee 	bl	8018d44 <iprintf>
 8014f68:	e0ae      	b.n	80150c8 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8014f6a:	69bb      	ldr	r3, [r7, #24]
 8014f6c:	2200      	movs	r2, #0
 8014f6e:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8014f70:	69bb      	ldr	r3, [r7, #24]
 8014f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f78:	d019      	beq.n	8014fae <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8014f7a:	69bb      	ldr	r3, [r7, #24]
 8014f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014f7e:	331e      	adds	r3, #30
 8014f80:	4a57      	ldr	r2, [pc, #348]	@ (80150e0 <dhcp_bind+0x1b0>)
 8014f82:	fba2 2303 	umull	r2, r3, r2, r3
 8014f86:	095b      	lsrs	r3, r3, #5
 8014f88:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8014f8a:	69fb      	ldr	r3, [r7, #28]
 8014f8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014f90:	d302      	bcc.n	8014f98 <dhcp_bind+0x68>
      timeout = 0xffff;
 8014f92:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014f96:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8014f98:	69fb      	ldr	r3, [r7, #28]
 8014f9a:	b29a      	uxth	r2, r3
 8014f9c:	69bb      	ldr	r3, [r7, #24]
 8014f9e:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8014fa0:	69bb      	ldr	r3, [r7, #24]
 8014fa2:	8a9b      	ldrh	r3, [r3, #20]
 8014fa4:	2b00      	cmp	r3, #0
 8014fa6:	d102      	bne.n	8014fae <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8014fa8:	69bb      	ldr	r3, [r7, #24]
 8014faa:	2201      	movs	r2, #1
 8014fac:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8014fae:	69bb      	ldr	r3, [r7, #24]
 8014fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014fb6:	d01d      	beq.n	8014ff4 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8014fb8:	69bb      	ldr	r3, [r7, #24]
 8014fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014fbc:	331e      	adds	r3, #30
 8014fbe:	4a48      	ldr	r2, [pc, #288]	@ (80150e0 <dhcp_bind+0x1b0>)
 8014fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8014fc4:	095b      	lsrs	r3, r3, #5
 8014fc6:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8014fc8:	69fb      	ldr	r3, [r7, #28]
 8014fca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014fce:	d302      	bcc.n	8014fd6 <dhcp_bind+0xa6>
      timeout = 0xffff;
 8014fd0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014fd4:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8014fd6:	69fb      	ldr	r3, [r7, #28]
 8014fd8:	b29a      	uxth	r2, r3
 8014fda:	69bb      	ldr	r3, [r7, #24]
 8014fdc:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8014fde:	69bb      	ldr	r3, [r7, #24]
 8014fe0:	895b      	ldrh	r3, [r3, #10]
 8014fe2:	2b00      	cmp	r3, #0
 8014fe4:	d102      	bne.n	8014fec <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8014fe6:	69bb      	ldr	r3, [r7, #24]
 8014fe8:	2201      	movs	r2, #1
 8014fea:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8014fec:	69bb      	ldr	r3, [r7, #24]
 8014fee:	895a      	ldrh	r2, [r3, #10]
 8014ff0:	69bb      	ldr	r3, [r7, #24]
 8014ff2:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8014ff4:	69bb      	ldr	r3, [r7, #24]
 8014ff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ffc:	d01d      	beq.n	801503a <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8014ffe:	69bb      	ldr	r3, [r7, #24]
 8015000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015002:	331e      	adds	r3, #30
 8015004:	4a36      	ldr	r2, [pc, #216]	@ (80150e0 <dhcp_bind+0x1b0>)
 8015006:	fba2 2303 	umull	r2, r3, r2, r3
 801500a:	095b      	lsrs	r3, r3, #5
 801500c:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801500e:	69fb      	ldr	r3, [r7, #28]
 8015010:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015014:	d302      	bcc.n	801501c <dhcp_bind+0xec>
      timeout = 0xffff;
 8015016:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801501a:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 801501c:	69fb      	ldr	r3, [r7, #28]
 801501e:	b29a      	uxth	r2, r3
 8015020:	69bb      	ldr	r3, [r7, #24]
 8015022:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8015024:	69bb      	ldr	r3, [r7, #24]
 8015026:	899b      	ldrh	r3, [r3, #12]
 8015028:	2b00      	cmp	r3, #0
 801502a:	d102      	bne.n	8015032 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 801502c:	69bb      	ldr	r3, [r7, #24]
 801502e:	2201      	movs	r2, #1
 8015030:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8015032:	69bb      	ldr	r3, [r7, #24]
 8015034:	899a      	ldrh	r2, [r3, #12]
 8015036:	69bb      	ldr	r3, [r7, #24]
 8015038:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801503a:	69bb      	ldr	r3, [r7, #24]
 801503c:	895a      	ldrh	r2, [r3, #10]
 801503e:	69bb      	ldr	r3, [r7, #24]
 8015040:	899b      	ldrh	r3, [r3, #12]
 8015042:	429a      	cmp	r2, r3
 8015044:	d306      	bcc.n	8015054 <dhcp_bind+0x124>
 8015046:	69bb      	ldr	r3, [r7, #24]
 8015048:	899b      	ldrh	r3, [r3, #12]
 801504a:	2b00      	cmp	r3, #0
 801504c:	d002      	beq.n	8015054 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 801504e:	69bb      	ldr	r3, [r7, #24]
 8015050:	2200      	movs	r2, #0
 8015052:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8015054:	69bb      	ldr	r3, [r7, #24]
 8015056:	79db      	ldrb	r3, [r3, #7]
 8015058:	2b00      	cmp	r3, #0
 801505a:	d003      	beq.n	8015064 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 801505c:	69bb      	ldr	r3, [r7, #24]
 801505e:	6a1b      	ldr	r3, [r3, #32]
 8015060:	613b      	str	r3, [r7, #16]
 8015062:	e014      	b.n	801508e <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8015064:	69bb      	ldr	r3, [r7, #24]
 8015066:	331c      	adds	r3, #28
 8015068:	781b      	ldrb	r3, [r3, #0]
 801506a:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 801506c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015070:	2b00      	cmp	r3, #0
 8015072:	db02      	blt.n	801507a <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8015074:	23ff      	movs	r3, #255	@ 0xff
 8015076:	613b      	str	r3, [r7, #16]
 8015078:	e009      	b.n	801508e <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 801507a:	7dfb      	ldrb	r3, [r7, #23]
 801507c:	2bbf      	cmp	r3, #191	@ 0xbf
 801507e:	d903      	bls.n	8015088 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8015080:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 8015084:	613b      	str	r3, [r7, #16]
 8015086:	e002      	b.n	801508e <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8015088:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801508c:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801508e:	69bb      	ldr	r3, [r7, #24]
 8015090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015092:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8015094:	68fb      	ldr	r3, [r7, #12]
 8015096:	2b00      	cmp	r3, #0
 8015098:	d108      	bne.n	80150ac <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801509a:	69bb      	ldr	r3, [r7, #24]
 801509c:	69da      	ldr	r2, [r3, #28]
 801509e:	693b      	ldr	r3, [r7, #16]
 80150a0:	4013      	ands	r3, r2
 80150a2:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 80150a4:	68fb      	ldr	r3, [r7, #12]
 80150a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80150aa:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 80150ac:	210a      	movs	r1, #10
 80150ae:	69b8      	ldr	r0, [r7, #24]
 80150b0:	f000 fa9a 	bl	80155e8 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 80150b4:	69bb      	ldr	r3, [r7, #24]
 80150b6:	f103 011c 	add.w	r1, r3, #28
 80150ba:	f107 030c 	add.w	r3, r7, #12
 80150be:	f107 0210 	add.w	r2, r7, #16
 80150c2:	6878      	ldr	r0, [r7, #4]
 80150c4:	f7f7 f9f6 	bl	800c4b4 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 80150c8:	3720      	adds	r7, #32
 80150ca:	46bd      	mov	sp, r7
 80150cc:	bd80      	pop	{r7, pc}
 80150ce:	bf00      	nop
 80150d0:	0801d2c8 	.word	0x0801d2c8
 80150d4:	0801d428 	.word	0x0801d428
 80150d8:	0801d328 	.word	0x0801d328
 80150dc:	0801d444 	.word	0x0801d444
 80150e0:	88888889 	.word	0x88888889

080150e4 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 80150e4:	b580      	push	{r7, lr}
 80150e6:	b08a      	sub	sp, #40	@ 0x28
 80150e8:	af02      	add	r7, sp, #8
 80150ea:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80150f0:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 80150f2:	2105      	movs	r1, #5
 80150f4:	69b8      	ldr	r0, [r7, #24]
 80150f6:	f000 fa77 	bl	80155e8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80150fa:	f107 030c 	add.w	r3, r7, #12
 80150fe:	2203      	movs	r2, #3
 8015100:	69b9      	ldr	r1, [r7, #24]
 8015102:	6878      	ldr	r0, [r7, #4]
 8015104:	f000 fefc 	bl	8015f00 <dhcp_create_msg>
 8015108:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801510a:	697b      	ldr	r3, [r7, #20]
 801510c:	2b00      	cmp	r3, #0
 801510e:	d04e      	beq.n	80151ae <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015110:	697b      	ldr	r3, [r7, #20]
 8015112:	685b      	ldr	r3, [r3, #4]
 8015114:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8015116:	89b8      	ldrh	r0, [r7, #12]
 8015118:	693b      	ldr	r3, [r7, #16]
 801511a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801511e:	2302      	movs	r3, #2
 8015120:	2239      	movs	r2, #57	@ 0x39
 8015122:	f000 fa7b 	bl	801561c <dhcp_option>
 8015126:	4603      	mov	r3, r0
 8015128:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801512a:	89b8      	ldrh	r0, [r7, #12]
 801512c:	693b      	ldr	r3, [r7, #16]
 801512e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015136:	461a      	mov	r2, r3
 8015138:	f000 faca 	bl	80156d0 <dhcp_option_short>
 801513c:	4603      	mov	r3, r0
 801513e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8015140:	89b8      	ldrh	r0, [r7, #12]
 8015142:	693b      	ldr	r3, [r7, #16]
 8015144:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8015148:	2303      	movs	r3, #3
 801514a:	2237      	movs	r2, #55	@ 0x37
 801514c:	f000 fa66 	bl	801561c <dhcp_option>
 8015150:	4603      	mov	r3, r0
 8015152:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015154:	2300      	movs	r3, #0
 8015156:	77bb      	strb	r3, [r7, #30]
 8015158:	e00e      	b.n	8015178 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801515a:	89b8      	ldrh	r0, [r7, #12]
 801515c:	693b      	ldr	r3, [r7, #16]
 801515e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8015162:	7fbb      	ldrb	r3, [r7, #30]
 8015164:	4a29      	ldr	r2, [pc, #164]	@ (801520c <dhcp_renew+0x128>)
 8015166:	5cd3      	ldrb	r3, [r2, r3]
 8015168:	461a      	mov	r2, r3
 801516a:	f000 fa8b 	bl	8015684 <dhcp_option_byte>
 801516e:	4603      	mov	r3, r0
 8015170:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015172:	7fbb      	ldrb	r3, [r7, #30]
 8015174:	3301      	adds	r3, #1
 8015176:	77bb      	strb	r3, [r7, #30]
 8015178:	7fbb      	ldrb	r3, [r7, #30]
 801517a:	2b02      	cmp	r3, #2
 801517c:	d9ed      	bls.n	801515a <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801517e:	89b8      	ldrh	r0, [r7, #12]
 8015180:	693b      	ldr	r3, [r7, #16]
 8015182:	33f0      	adds	r3, #240	@ 0xf0
 8015184:	697a      	ldr	r2, [r7, #20]
 8015186:	4619      	mov	r1, r3
 8015188:	f000 ff90 	bl	80160ac <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801518c:	4b20      	ldr	r3, [pc, #128]	@ (8015210 <dhcp_renew+0x12c>)
 801518e:	6818      	ldr	r0, [r3, #0]
 8015190:	69bb      	ldr	r3, [r7, #24]
 8015192:	f103 0218 	add.w	r2, r3, #24
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	9300      	str	r3, [sp, #0]
 801519a:	2343      	movs	r3, #67	@ 0x43
 801519c:	6979      	ldr	r1, [r7, #20]
 801519e:	f7fe fe47 	bl	8013e30 <udp_sendto_if>
 80151a2:	4603      	mov	r3, r0
 80151a4:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80151a6:	6978      	ldr	r0, [r7, #20]
 80151a8:	f7f7 fe92 	bl	800ced0 <pbuf_free>
 80151ac:	e001      	b.n	80151b2 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80151ae:	23ff      	movs	r3, #255	@ 0xff
 80151b0:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80151b2:	69bb      	ldr	r3, [r7, #24]
 80151b4:	799b      	ldrb	r3, [r3, #6]
 80151b6:	2bff      	cmp	r3, #255	@ 0xff
 80151b8:	d005      	beq.n	80151c6 <dhcp_renew+0xe2>
    dhcp->tries++;
 80151ba:	69bb      	ldr	r3, [r7, #24]
 80151bc:	799b      	ldrb	r3, [r3, #6]
 80151be:	3301      	adds	r3, #1
 80151c0:	b2da      	uxtb	r2, r3
 80151c2:	69bb      	ldr	r3, [r7, #24]
 80151c4:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 80151c6:	69bb      	ldr	r3, [r7, #24]
 80151c8:	799b      	ldrb	r3, [r3, #6]
 80151ca:	2b09      	cmp	r3, #9
 80151cc:	d809      	bhi.n	80151e2 <dhcp_renew+0xfe>
 80151ce:	69bb      	ldr	r3, [r7, #24]
 80151d0:	799b      	ldrb	r3, [r3, #6]
 80151d2:	461a      	mov	r2, r3
 80151d4:	0152      	lsls	r2, r2, #5
 80151d6:	1ad2      	subs	r2, r2, r3
 80151d8:	0092      	lsls	r2, r2, #2
 80151da:	4413      	add	r3, r2
 80151dc:	011b      	lsls	r3, r3, #4
 80151de:	b29b      	uxth	r3, r3
 80151e0:	e001      	b.n	80151e6 <dhcp_renew+0x102>
 80151e2:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80151e6:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80151e8:	89fb      	ldrh	r3, [r7, #14]
 80151ea:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80151ee:	4a09      	ldr	r2, [pc, #36]	@ (8015214 <dhcp_renew+0x130>)
 80151f0:	fb82 1203 	smull	r1, r2, r2, r3
 80151f4:	1152      	asrs	r2, r2, #5
 80151f6:	17db      	asrs	r3, r3, #31
 80151f8:	1ad3      	subs	r3, r2, r3
 80151fa:	b29a      	uxth	r2, r3
 80151fc:	69bb      	ldr	r3, [r7, #24]
 80151fe:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015200:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015204:	4618      	mov	r0, r3
 8015206:	3720      	adds	r7, #32
 8015208:	46bd      	mov	sp, r7
 801520a:	bd80      	pop	{r7, pc}
 801520c:	20000030 	.word	0x20000030
 8015210:	20010efc 	.word	0x20010efc
 8015214:	10624dd3 	.word	0x10624dd3

08015218 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8015218:	b580      	push	{r7, lr}
 801521a:	b08a      	sub	sp, #40	@ 0x28
 801521c:	af02      	add	r7, sp, #8
 801521e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015220:	687b      	ldr	r3, [r7, #4]
 8015222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015224:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8015226:	2104      	movs	r1, #4
 8015228:	69b8      	ldr	r0, [r7, #24]
 801522a:	f000 f9dd 	bl	80155e8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801522e:	f107 030c 	add.w	r3, r7, #12
 8015232:	2203      	movs	r2, #3
 8015234:	69b9      	ldr	r1, [r7, #24]
 8015236:	6878      	ldr	r0, [r7, #4]
 8015238:	f000 fe62 	bl	8015f00 <dhcp_create_msg>
 801523c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801523e:	697b      	ldr	r3, [r7, #20]
 8015240:	2b00      	cmp	r3, #0
 8015242:	d04c      	beq.n	80152de <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015244:	697b      	ldr	r3, [r7, #20]
 8015246:	685b      	ldr	r3, [r3, #4]
 8015248:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801524a:	89b8      	ldrh	r0, [r7, #12]
 801524c:	693b      	ldr	r3, [r7, #16]
 801524e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8015252:	2302      	movs	r3, #2
 8015254:	2239      	movs	r2, #57	@ 0x39
 8015256:	f000 f9e1 	bl	801561c <dhcp_option>
 801525a:	4603      	mov	r3, r0
 801525c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801525e:	89b8      	ldrh	r0, [r7, #12]
 8015260:	693b      	ldr	r3, [r7, #16]
 8015262:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8015266:	687b      	ldr	r3, [r7, #4]
 8015268:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801526a:	461a      	mov	r2, r3
 801526c:	f000 fa30 	bl	80156d0 <dhcp_option_short>
 8015270:	4603      	mov	r3, r0
 8015272:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8015274:	89b8      	ldrh	r0, [r7, #12]
 8015276:	693b      	ldr	r3, [r7, #16]
 8015278:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801527c:	2303      	movs	r3, #3
 801527e:	2237      	movs	r2, #55	@ 0x37
 8015280:	f000 f9cc 	bl	801561c <dhcp_option>
 8015284:	4603      	mov	r3, r0
 8015286:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015288:	2300      	movs	r3, #0
 801528a:	77bb      	strb	r3, [r7, #30]
 801528c:	e00e      	b.n	80152ac <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801528e:	89b8      	ldrh	r0, [r7, #12]
 8015290:	693b      	ldr	r3, [r7, #16]
 8015292:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8015296:	7fbb      	ldrb	r3, [r7, #30]
 8015298:	4a28      	ldr	r2, [pc, #160]	@ (801533c <dhcp_rebind+0x124>)
 801529a:	5cd3      	ldrb	r3, [r2, r3]
 801529c:	461a      	mov	r2, r3
 801529e:	f000 f9f1 	bl	8015684 <dhcp_option_byte>
 80152a2:	4603      	mov	r3, r0
 80152a4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80152a6:	7fbb      	ldrb	r3, [r7, #30]
 80152a8:	3301      	adds	r3, #1
 80152aa:	77bb      	strb	r3, [r7, #30]
 80152ac:	7fbb      	ldrb	r3, [r7, #30]
 80152ae:	2b02      	cmp	r3, #2
 80152b0:	d9ed      	bls.n	801528e <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80152b2:	89b8      	ldrh	r0, [r7, #12]
 80152b4:	693b      	ldr	r3, [r7, #16]
 80152b6:	33f0      	adds	r3, #240	@ 0xf0
 80152b8:	697a      	ldr	r2, [r7, #20]
 80152ba:	4619      	mov	r1, r3
 80152bc:	f000 fef6 	bl	80160ac <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80152c0:	4b1f      	ldr	r3, [pc, #124]	@ (8015340 <dhcp_rebind+0x128>)
 80152c2:	6818      	ldr	r0, [r3, #0]
 80152c4:	687b      	ldr	r3, [r7, #4]
 80152c6:	9300      	str	r3, [sp, #0]
 80152c8:	2343      	movs	r3, #67	@ 0x43
 80152ca:	4a1e      	ldr	r2, [pc, #120]	@ (8015344 <dhcp_rebind+0x12c>)
 80152cc:	6979      	ldr	r1, [r7, #20]
 80152ce:	f7fe fdaf 	bl	8013e30 <udp_sendto_if>
 80152d2:	4603      	mov	r3, r0
 80152d4:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80152d6:	6978      	ldr	r0, [r7, #20]
 80152d8:	f7f7 fdfa 	bl	800ced0 <pbuf_free>
 80152dc:	e001      	b.n	80152e2 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80152de:	23ff      	movs	r3, #255	@ 0xff
 80152e0:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80152e2:	69bb      	ldr	r3, [r7, #24]
 80152e4:	799b      	ldrb	r3, [r3, #6]
 80152e6:	2bff      	cmp	r3, #255	@ 0xff
 80152e8:	d005      	beq.n	80152f6 <dhcp_rebind+0xde>
    dhcp->tries++;
 80152ea:	69bb      	ldr	r3, [r7, #24]
 80152ec:	799b      	ldrb	r3, [r3, #6]
 80152ee:	3301      	adds	r3, #1
 80152f0:	b2da      	uxtb	r2, r3
 80152f2:	69bb      	ldr	r3, [r7, #24]
 80152f4:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80152f6:	69bb      	ldr	r3, [r7, #24]
 80152f8:	799b      	ldrb	r3, [r3, #6]
 80152fa:	2b09      	cmp	r3, #9
 80152fc:	d809      	bhi.n	8015312 <dhcp_rebind+0xfa>
 80152fe:	69bb      	ldr	r3, [r7, #24]
 8015300:	799b      	ldrb	r3, [r3, #6]
 8015302:	461a      	mov	r2, r3
 8015304:	0152      	lsls	r2, r2, #5
 8015306:	1ad2      	subs	r2, r2, r3
 8015308:	0092      	lsls	r2, r2, #2
 801530a:	4413      	add	r3, r2
 801530c:	00db      	lsls	r3, r3, #3
 801530e:	b29b      	uxth	r3, r3
 8015310:	e001      	b.n	8015316 <dhcp_rebind+0xfe>
 8015312:	f242 7310 	movw	r3, #10000	@ 0x2710
 8015316:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015318:	89fb      	ldrh	r3, [r7, #14]
 801531a:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801531e:	4a0a      	ldr	r2, [pc, #40]	@ (8015348 <dhcp_rebind+0x130>)
 8015320:	fb82 1203 	smull	r1, r2, r2, r3
 8015324:	1152      	asrs	r2, r2, #5
 8015326:	17db      	asrs	r3, r3, #31
 8015328:	1ad3      	subs	r3, r2, r3
 801532a:	b29a      	uxth	r2, r3
 801532c:	69bb      	ldr	r3, [r7, #24]
 801532e:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015330:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015334:	4618      	mov	r0, r3
 8015336:	3720      	adds	r7, #32
 8015338:	46bd      	mov	sp, r7
 801533a:	bd80      	pop	{r7, pc}
 801533c:	20000030 	.word	0x20000030
 8015340:	20010efc 	.word	0x20010efc
 8015344:	08027fb0 	.word	0x08027fb0
 8015348:	10624dd3 	.word	0x10624dd3

0801534c <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 801534c:	b5b0      	push	{r4, r5, r7, lr}
 801534e:	b08a      	sub	sp, #40	@ 0x28
 8015350:	af02      	add	r7, sp, #8
 8015352:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015358:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 801535a:	2103      	movs	r1, #3
 801535c:	69b8      	ldr	r0, [r7, #24]
 801535e:	f000 f943 	bl	80155e8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8015362:	f107 030c 	add.w	r3, r7, #12
 8015366:	2203      	movs	r2, #3
 8015368:	69b9      	ldr	r1, [r7, #24]
 801536a:	6878      	ldr	r0, [r7, #4]
 801536c:	f000 fdc8 	bl	8015f00 <dhcp_create_msg>
 8015370:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8015372:	697b      	ldr	r3, [r7, #20]
 8015374:	2b00      	cmp	r3, #0
 8015376:	d066      	beq.n	8015446 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015378:	697b      	ldr	r3, [r7, #20]
 801537a:	685b      	ldr	r3, [r3, #4]
 801537c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801537e:	89b8      	ldrh	r0, [r7, #12]
 8015380:	693b      	ldr	r3, [r7, #16]
 8015382:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8015386:	2302      	movs	r3, #2
 8015388:	2239      	movs	r2, #57	@ 0x39
 801538a:	f000 f947 	bl	801561c <dhcp_option>
 801538e:	4603      	mov	r3, r0
 8015390:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8015392:	89b8      	ldrh	r0, [r7, #12]
 8015394:	693b      	ldr	r3, [r7, #16]
 8015396:	33f0      	adds	r3, #240	@ 0xf0
 8015398:	f44f 7210 	mov.w	r2, #576	@ 0x240
 801539c:	4619      	mov	r1, r3
 801539e:	f000 f997 	bl	80156d0 <dhcp_option_short>
 80153a2:	4603      	mov	r3, r0
 80153a4:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80153a6:	89b8      	ldrh	r0, [r7, #12]
 80153a8:	693b      	ldr	r3, [r7, #16]
 80153aa:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80153ae:	2304      	movs	r3, #4
 80153b0:	2232      	movs	r2, #50	@ 0x32
 80153b2:	f000 f933 	bl	801561c <dhcp_option>
 80153b6:	4603      	mov	r3, r0
 80153b8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80153ba:	89bc      	ldrh	r4, [r7, #12]
 80153bc:	693b      	ldr	r3, [r7, #16]
 80153be:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 80153c2:	69bb      	ldr	r3, [r7, #24]
 80153c4:	69db      	ldr	r3, [r3, #28]
 80153c6:	4618      	mov	r0, r3
 80153c8:	f7f6 f963 	bl	800b692 <lwip_htonl>
 80153cc:	4603      	mov	r3, r0
 80153ce:	461a      	mov	r2, r3
 80153d0:	4629      	mov	r1, r5
 80153d2:	4620      	mov	r0, r4
 80153d4:	f000 f9ae 	bl	8015734 <dhcp_option_long>
 80153d8:	4603      	mov	r3, r0
 80153da:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80153dc:	89b8      	ldrh	r0, [r7, #12]
 80153de:	693b      	ldr	r3, [r7, #16]
 80153e0:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80153e4:	2303      	movs	r3, #3
 80153e6:	2237      	movs	r2, #55	@ 0x37
 80153e8:	f000 f918 	bl	801561c <dhcp_option>
 80153ec:	4603      	mov	r3, r0
 80153ee:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80153f0:	2300      	movs	r3, #0
 80153f2:	77bb      	strb	r3, [r7, #30]
 80153f4:	e00e      	b.n	8015414 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80153f6:	89b8      	ldrh	r0, [r7, #12]
 80153f8:	693b      	ldr	r3, [r7, #16]
 80153fa:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80153fe:	7fbb      	ldrb	r3, [r7, #30]
 8015400:	4a28      	ldr	r2, [pc, #160]	@ (80154a4 <dhcp_reboot+0x158>)
 8015402:	5cd3      	ldrb	r3, [r2, r3]
 8015404:	461a      	mov	r2, r3
 8015406:	f000 f93d 	bl	8015684 <dhcp_option_byte>
 801540a:	4603      	mov	r3, r0
 801540c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801540e:	7fbb      	ldrb	r3, [r7, #30]
 8015410:	3301      	adds	r3, #1
 8015412:	77bb      	strb	r3, [r7, #30]
 8015414:	7fbb      	ldrb	r3, [r7, #30]
 8015416:	2b02      	cmp	r3, #2
 8015418:	d9ed      	bls.n	80153f6 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801541a:	89b8      	ldrh	r0, [r7, #12]
 801541c:	693b      	ldr	r3, [r7, #16]
 801541e:	33f0      	adds	r3, #240	@ 0xf0
 8015420:	697a      	ldr	r2, [r7, #20]
 8015422:	4619      	mov	r1, r3
 8015424:	f000 fe42 	bl	80160ac <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8015428:	4b1f      	ldr	r3, [pc, #124]	@ (80154a8 <dhcp_reboot+0x15c>)
 801542a:	6818      	ldr	r0, [r3, #0]
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	9300      	str	r3, [sp, #0]
 8015430:	2343      	movs	r3, #67	@ 0x43
 8015432:	4a1e      	ldr	r2, [pc, #120]	@ (80154ac <dhcp_reboot+0x160>)
 8015434:	6979      	ldr	r1, [r7, #20]
 8015436:	f7fe fcfb 	bl	8013e30 <udp_sendto_if>
 801543a:	4603      	mov	r3, r0
 801543c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801543e:	6978      	ldr	r0, [r7, #20]
 8015440:	f7f7 fd46 	bl	800ced0 <pbuf_free>
 8015444:	e001      	b.n	801544a <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8015446:	23ff      	movs	r3, #255	@ 0xff
 8015448:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801544a:	69bb      	ldr	r3, [r7, #24]
 801544c:	799b      	ldrb	r3, [r3, #6]
 801544e:	2bff      	cmp	r3, #255	@ 0xff
 8015450:	d005      	beq.n	801545e <dhcp_reboot+0x112>
    dhcp->tries++;
 8015452:	69bb      	ldr	r3, [r7, #24]
 8015454:	799b      	ldrb	r3, [r3, #6]
 8015456:	3301      	adds	r3, #1
 8015458:	b2da      	uxtb	r2, r3
 801545a:	69bb      	ldr	r3, [r7, #24]
 801545c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801545e:	69bb      	ldr	r3, [r7, #24]
 8015460:	799b      	ldrb	r3, [r3, #6]
 8015462:	2b09      	cmp	r3, #9
 8015464:	d809      	bhi.n	801547a <dhcp_reboot+0x12e>
 8015466:	69bb      	ldr	r3, [r7, #24]
 8015468:	799b      	ldrb	r3, [r3, #6]
 801546a:	461a      	mov	r2, r3
 801546c:	0152      	lsls	r2, r2, #5
 801546e:	1ad2      	subs	r2, r2, r3
 8015470:	0092      	lsls	r2, r2, #2
 8015472:	4413      	add	r3, r2
 8015474:	00db      	lsls	r3, r3, #3
 8015476:	b29b      	uxth	r3, r3
 8015478:	e001      	b.n	801547e <dhcp_reboot+0x132>
 801547a:	f242 7310 	movw	r3, #10000	@ 0x2710
 801547e:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015480:	89fb      	ldrh	r3, [r7, #14]
 8015482:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8015486:	4a0a      	ldr	r2, [pc, #40]	@ (80154b0 <dhcp_reboot+0x164>)
 8015488:	fb82 1203 	smull	r1, r2, r2, r3
 801548c:	1152      	asrs	r2, r2, #5
 801548e:	17db      	asrs	r3, r3, #31
 8015490:	1ad3      	subs	r3, r2, r3
 8015492:	b29a      	uxth	r2, r3
 8015494:	69bb      	ldr	r3, [r7, #24]
 8015496:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015498:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801549c:	4618      	mov	r0, r3
 801549e:	3720      	adds	r7, #32
 80154a0:	46bd      	mov	sp, r7
 80154a2:	bdb0      	pop	{r4, r5, r7, pc}
 80154a4:	20000030 	.word	0x20000030
 80154a8:	20010efc 	.word	0x20010efc
 80154ac:	08027fb0 	.word	0x08027fb0
 80154b0:	10624dd3 	.word	0x10624dd3

080154b4 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 80154b4:	b5b0      	push	{r4, r5, r7, lr}
 80154b6:	b08a      	sub	sp, #40	@ 0x28
 80154b8:	af02      	add	r7, sp, #8
 80154ba:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80154bc:	687b      	ldr	r3, [r7, #4]
 80154be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80154c0:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 80154c2:	69fb      	ldr	r3, [r7, #28]
 80154c4:	2b00      	cmp	r3, #0
 80154c6:	f000 8084 	beq.w	80155d2 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 80154ca:	69fb      	ldr	r3, [r7, #28]
 80154cc:	795b      	ldrb	r3, [r3, #5]
 80154ce:	2b00      	cmp	r3, #0
 80154d0:	f000 8081 	beq.w	80155d6 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 80154d4:	69fb      	ldr	r3, [r7, #28]
 80154d6:	699b      	ldr	r3, [r3, #24]
 80154d8:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 80154da:	69fb      	ldr	r3, [r7, #28]
 80154dc:	2200      	movs	r2, #0
 80154de:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 80154e0:	69fb      	ldr	r3, [r7, #28]
 80154e2:	2200      	movs	r2, #0
 80154e4:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80154e6:	69fb      	ldr	r3, [r7, #28]
 80154e8:	2200      	movs	r2, #0
 80154ea:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80154ec:	69fb      	ldr	r3, [r7, #28]
 80154ee:	2200      	movs	r2, #0
 80154f0:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 80154f2:	69fb      	ldr	r3, [r7, #28]
 80154f4:	2200      	movs	r2, #0
 80154f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80154f8:	69fb      	ldr	r3, [r7, #28]
 80154fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80154fc:	69fb      	ldr	r3, [r7, #28]
 80154fe:	62da      	str	r2, [r3, #44]	@ 0x2c
 8015500:	69fb      	ldr	r3, [r7, #28]
 8015502:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015504:	69fb      	ldr	r3, [r7, #28]
 8015506:	629a      	str	r2, [r3, #40]	@ 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8015508:	69fb      	ldr	r3, [r7, #28]
 801550a:	2200      	movs	r2, #0
 801550c:	829a      	strh	r2, [r3, #20]
 801550e:	69fb      	ldr	r3, [r7, #28]
 8015510:	8a9a      	ldrh	r2, [r3, #20]
 8015512:	69fb      	ldr	r3, [r7, #28]
 8015514:	825a      	strh	r2, [r3, #18]
 8015516:	69fb      	ldr	r3, [r7, #28]
 8015518:	8a5a      	ldrh	r2, [r3, #18]
 801551a:	69fb      	ldr	r3, [r7, #28]
 801551c:	821a      	strh	r2, [r3, #16]
 801551e:	69fb      	ldr	r3, [r7, #28]
 8015520:	8a1a      	ldrh	r2, [r3, #16]
 8015522:	69fb      	ldr	r3, [r7, #28]
 8015524:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8015526:	6878      	ldr	r0, [r7, #4]
 8015528:	f000 fdee 	bl	8016108 <dhcp_supplied_address>
 801552c:	4603      	mov	r3, r0
 801552e:	2b00      	cmp	r3, #0
 8015530:	d03b      	beq.n	80155aa <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8015532:	f107 030e 	add.w	r3, r7, #14
 8015536:	2207      	movs	r2, #7
 8015538:	69f9      	ldr	r1, [r7, #28]
 801553a:	6878      	ldr	r0, [r7, #4]
 801553c:	f000 fce0 	bl	8015f00 <dhcp_create_msg>
 8015540:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8015542:	69bb      	ldr	r3, [r7, #24]
 8015544:	2b00      	cmp	r3, #0
 8015546:	d030      	beq.n	80155aa <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015548:	69bb      	ldr	r3, [r7, #24]
 801554a:	685b      	ldr	r3, [r3, #4]
 801554c:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801554e:	89f8      	ldrh	r0, [r7, #14]
 8015550:	697b      	ldr	r3, [r7, #20]
 8015552:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8015556:	2304      	movs	r3, #4
 8015558:	2236      	movs	r2, #54	@ 0x36
 801555a:	f000 f85f 	bl	801561c <dhcp_option>
 801555e:	4603      	mov	r3, r0
 8015560:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8015562:	89fc      	ldrh	r4, [r7, #14]
 8015564:	697b      	ldr	r3, [r7, #20]
 8015566:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 801556a:	693b      	ldr	r3, [r7, #16]
 801556c:	4618      	mov	r0, r3
 801556e:	f7f6 f890 	bl	800b692 <lwip_htonl>
 8015572:	4603      	mov	r3, r0
 8015574:	461a      	mov	r2, r3
 8015576:	4629      	mov	r1, r5
 8015578:	4620      	mov	r0, r4
 801557a:	f000 f8db 	bl	8015734 <dhcp_option_long>
 801557e:	4603      	mov	r3, r0
 8015580:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015582:	89f8      	ldrh	r0, [r7, #14]
 8015584:	697b      	ldr	r3, [r7, #20]
 8015586:	33f0      	adds	r3, #240	@ 0xf0
 8015588:	69ba      	ldr	r2, [r7, #24]
 801558a:	4619      	mov	r1, r3
 801558c:	f000 fd8e 	bl	80160ac <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8015590:	4b13      	ldr	r3, [pc, #76]	@ (80155e0 <dhcp_release_and_stop+0x12c>)
 8015592:	6818      	ldr	r0, [r3, #0]
 8015594:	f107 0210 	add.w	r2, r7, #16
 8015598:	687b      	ldr	r3, [r7, #4]
 801559a:	9300      	str	r3, [sp, #0]
 801559c:	2343      	movs	r3, #67	@ 0x43
 801559e:	69b9      	ldr	r1, [r7, #24]
 80155a0:	f7fe fc46 	bl	8013e30 <udp_sendto_if>
      pbuf_free(p_out);
 80155a4:	69b8      	ldr	r0, [r7, #24]
 80155a6:	f7f7 fc93 	bl	800ced0 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80155aa:	4b0e      	ldr	r3, [pc, #56]	@ (80155e4 <dhcp_release_and_stop+0x130>)
 80155ac:	4a0d      	ldr	r2, [pc, #52]	@ (80155e4 <dhcp_release_and_stop+0x130>)
 80155ae:	490d      	ldr	r1, [pc, #52]	@ (80155e4 <dhcp_release_and_stop+0x130>)
 80155b0:	6878      	ldr	r0, [r7, #4]
 80155b2:	f7f6 ff7f 	bl	800c4b4 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 80155b6:	2100      	movs	r1, #0
 80155b8:	69f8      	ldr	r0, [r7, #28]
 80155ba:	f000 f815 	bl	80155e8 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 80155be:	69fb      	ldr	r3, [r7, #28]
 80155c0:	791b      	ldrb	r3, [r3, #4]
 80155c2:	2b00      	cmp	r3, #0
 80155c4:	d008      	beq.n	80155d8 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80155c6:	f7fe ff8b 	bl	80144e0 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 80155ca:	69fb      	ldr	r3, [r7, #28]
 80155cc:	2200      	movs	r2, #0
 80155ce:	711a      	strb	r2, [r3, #4]
 80155d0:	e002      	b.n	80155d8 <dhcp_release_and_stop+0x124>
    return;
 80155d2:	bf00      	nop
 80155d4:	e000      	b.n	80155d8 <dhcp_release_and_stop+0x124>
    return;
 80155d6:	bf00      	nop
  }
}
 80155d8:	3720      	adds	r7, #32
 80155da:	46bd      	mov	sp, r7
 80155dc:	bdb0      	pop	{r4, r5, r7, pc}
 80155de:	bf00      	nop
 80155e0:	20010efc 	.word	0x20010efc
 80155e4:	08027fac 	.word	0x08027fac

080155e8 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 80155e8:	b480      	push	{r7}
 80155ea:	b083      	sub	sp, #12
 80155ec:	af00      	add	r7, sp, #0
 80155ee:	6078      	str	r0, [r7, #4]
 80155f0:	460b      	mov	r3, r1
 80155f2:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	795b      	ldrb	r3, [r3, #5]
 80155f8:	78fa      	ldrb	r2, [r7, #3]
 80155fa:	429a      	cmp	r2, r3
 80155fc:	d008      	beq.n	8015610 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 80155fe:	687b      	ldr	r3, [r7, #4]
 8015600:	78fa      	ldrb	r2, [r7, #3]
 8015602:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8015604:	687b      	ldr	r3, [r7, #4]
 8015606:	2200      	movs	r2, #0
 8015608:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	2200      	movs	r2, #0
 801560e:	811a      	strh	r2, [r3, #8]
  }
}
 8015610:	bf00      	nop
 8015612:	370c      	adds	r7, #12
 8015614:	46bd      	mov	sp, r7
 8015616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801561a:	4770      	bx	lr

0801561c <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 801561c:	b580      	push	{r7, lr}
 801561e:	b082      	sub	sp, #8
 8015620:	af00      	add	r7, sp, #0
 8015622:	6039      	str	r1, [r7, #0]
 8015624:	4611      	mov	r1, r2
 8015626:	461a      	mov	r2, r3
 8015628:	4603      	mov	r3, r0
 801562a:	80fb      	strh	r3, [r7, #6]
 801562c:	460b      	mov	r3, r1
 801562e:	717b      	strb	r3, [r7, #5]
 8015630:	4613      	mov	r3, r2
 8015632:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8015634:	88fa      	ldrh	r2, [r7, #6]
 8015636:	793b      	ldrb	r3, [r7, #4]
 8015638:	4413      	add	r3, r2
 801563a:	3302      	adds	r3, #2
 801563c:	2b44      	cmp	r3, #68	@ 0x44
 801563e:	d906      	bls.n	801564e <dhcp_option+0x32>
 8015640:	4b0d      	ldr	r3, [pc, #52]	@ (8015678 <dhcp_option+0x5c>)
 8015642:	f240 529a 	movw	r2, #1434	@ 0x59a
 8015646:	490d      	ldr	r1, [pc, #52]	@ (801567c <dhcp_option+0x60>)
 8015648:	480d      	ldr	r0, [pc, #52]	@ (8015680 <dhcp_option+0x64>)
 801564a:	f003 fb7b 	bl	8018d44 <iprintf>
  options[options_out_len++] = option_type;
 801564e:	88fb      	ldrh	r3, [r7, #6]
 8015650:	1c5a      	adds	r2, r3, #1
 8015652:	80fa      	strh	r2, [r7, #6]
 8015654:	461a      	mov	r2, r3
 8015656:	683b      	ldr	r3, [r7, #0]
 8015658:	4413      	add	r3, r2
 801565a:	797a      	ldrb	r2, [r7, #5]
 801565c:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 801565e:	88fb      	ldrh	r3, [r7, #6]
 8015660:	1c5a      	adds	r2, r3, #1
 8015662:	80fa      	strh	r2, [r7, #6]
 8015664:	461a      	mov	r2, r3
 8015666:	683b      	ldr	r3, [r7, #0]
 8015668:	4413      	add	r3, r2
 801566a:	793a      	ldrb	r2, [r7, #4]
 801566c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801566e:	88fb      	ldrh	r3, [r7, #6]
}
 8015670:	4618      	mov	r0, r3
 8015672:	3708      	adds	r7, #8
 8015674:	46bd      	mov	sp, r7
 8015676:	bd80      	pop	{r7, pc}
 8015678:	0801d2c8 	.word	0x0801d2c8
 801567c:	0801d45c 	.word	0x0801d45c
 8015680:	0801d328 	.word	0x0801d328

08015684 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8015684:	b580      	push	{r7, lr}
 8015686:	b082      	sub	sp, #8
 8015688:	af00      	add	r7, sp, #0
 801568a:	4603      	mov	r3, r0
 801568c:	6039      	str	r1, [r7, #0]
 801568e:	80fb      	strh	r3, [r7, #6]
 8015690:	4613      	mov	r3, r2
 8015692:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8015694:	88fb      	ldrh	r3, [r7, #6]
 8015696:	2b43      	cmp	r3, #67	@ 0x43
 8015698:	d906      	bls.n	80156a8 <dhcp_option_byte+0x24>
 801569a:	4b0a      	ldr	r3, [pc, #40]	@ (80156c4 <dhcp_option_byte+0x40>)
 801569c:	f240 52a6 	movw	r2, #1446	@ 0x5a6
 80156a0:	4909      	ldr	r1, [pc, #36]	@ (80156c8 <dhcp_option_byte+0x44>)
 80156a2:	480a      	ldr	r0, [pc, #40]	@ (80156cc <dhcp_option_byte+0x48>)
 80156a4:	f003 fb4e 	bl	8018d44 <iprintf>
  options[options_out_len++] = value;
 80156a8:	88fb      	ldrh	r3, [r7, #6]
 80156aa:	1c5a      	adds	r2, r3, #1
 80156ac:	80fa      	strh	r2, [r7, #6]
 80156ae:	461a      	mov	r2, r3
 80156b0:	683b      	ldr	r3, [r7, #0]
 80156b2:	4413      	add	r3, r2
 80156b4:	797a      	ldrb	r2, [r7, #5]
 80156b6:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80156b8:	88fb      	ldrh	r3, [r7, #6]
}
 80156ba:	4618      	mov	r0, r3
 80156bc:	3708      	adds	r7, #8
 80156be:	46bd      	mov	sp, r7
 80156c0:	bd80      	pop	{r7, pc}
 80156c2:	bf00      	nop
 80156c4:	0801d2c8 	.word	0x0801d2c8
 80156c8:	0801d4a0 	.word	0x0801d4a0
 80156cc:	0801d328 	.word	0x0801d328

080156d0 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 80156d0:	b580      	push	{r7, lr}
 80156d2:	b082      	sub	sp, #8
 80156d4:	af00      	add	r7, sp, #0
 80156d6:	4603      	mov	r3, r0
 80156d8:	6039      	str	r1, [r7, #0]
 80156da:	80fb      	strh	r3, [r7, #6]
 80156dc:	4613      	mov	r3, r2
 80156de:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80156e0:	88fb      	ldrh	r3, [r7, #6]
 80156e2:	3302      	adds	r3, #2
 80156e4:	2b44      	cmp	r3, #68	@ 0x44
 80156e6:	d906      	bls.n	80156f6 <dhcp_option_short+0x26>
 80156e8:	4b0f      	ldr	r3, [pc, #60]	@ (8015728 <dhcp_option_short+0x58>)
 80156ea:	f240 52ae 	movw	r2, #1454	@ 0x5ae
 80156ee:	490f      	ldr	r1, [pc, #60]	@ (801572c <dhcp_option_short+0x5c>)
 80156f0:	480f      	ldr	r0, [pc, #60]	@ (8015730 <dhcp_option_short+0x60>)
 80156f2:	f003 fb27 	bl	8018d44 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 80156f6:	88bb      	ldrh	r3, [r7, #4]
 80156f8:	0a1b      	lsrs	r3, r3, #8
 80156fa:	b29a      	uxth	r2, r3
 80156fc:	88fb      	ldrh	r3, [r7, #6]
 80156fe:	1c59      	adds	r1, r3, #1
 8015700:	80f9      	strh	r1, [r7, #6]
 8015702:	4619      	mov	r1, r3
 8015704:	683b      	ldr	r3, [r7, #0]
 8015706:	440b      	add	r3, r1
 8015708:	b2d2      	uxtb	r2, r2
 801570a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 801570c:	88fb      	ldrh	r3, [r7, #6]
 801570e:	1c5a      	adds	r2, r3, #1
 8015710:	80fa      	strh	r2, [r7, #6]
 8015712:	461a      	mov	r2, r3
 8015714:	683b      	ldr	r3, [r7, #0]
 8015716:	4413      	add	r3, r2
 8015718:	88ba      	ldrh	r2, [r7, #4]
 801571a:	b2d2      	uxtb	r2, r2
 801571c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801571e:	88fb      	ldrh	r3, [r7, #6]
}
 8015720:	4618      	mov	r0, r3
 8015722:	3708      	adds	r7, #8
 8015724:	46bd      	mov	sp, r7
 8015726:	bd80      	pop	{r7, pc}
 8015728:	0801d2c8 	.word	0x0801d2c8
 801572c:	0801d4d8 	.word	0x0801d4d8
 8015730:	0801d328 	.word	0x0801d328

08015734 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8015734:	b580      	push	{r7, lr}
 8015736:	b084      	sub	sp, #16
 8015738:	af00      	add	r7, sp, #0
 801573a:	4603      	mov	r3, r0
 801573c:	60b9      	str	r1, [r7, #8]
 801573e:	607a      	str	r2, [r7, #4]
 8015740:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8015742:	89fb      	ldrh	r3, [r7, #14]
 8015744:	3304      	adds	r3, #4
 8015746:	2b44      	cmp	r3, #68	@ 0x44
 8015748:	d906      	bls.n	8015758 <dhcp_option_long+0x24>
 801574a:	4b19      	ldr	r3, [pc, #100]	@ (80157b0 <dhcp_option_long+0x7c>)
 801574c:	f240 52b7 	movw	r2, #1463	@ 0x5b7
 8015750:	4918      	ldr	r1, [pc, #96]	@ (80157b4 <dhcp_option_long+0x80>)
 8015752:	4819      	ldr	r0, [pc, #100]	@ (80157b8 <dhcp_option_long+0x84>)
 8015754:	f003 faf6 	bl	8018d44 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8015758:	687b      	ldr	r3, [r7, #4]
 801575a:	0e1a      	lsrs	r2, r3, #24
 801575c:	89fb      	ldrh	r3, [r7, #14]
 801575e:	1c59      	adds	r1, r3, #1
 8015760:	81f9      	strh	r1, [r7, #14]
 8015762:	4619      	mov	r1, r3
 8015764:	68bb      	ldr	r3, [r7, #8]
 8015766:	440b      	add	r3, r1
 8015768:	b2d2      	uxtb	r2, r2
 801576a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801576c:	687b      	ldr	r3, [r7, #4]
 801576e:	0c1a      	lsrs	r2, r3, #16
 8015770:	89fb      	ldrh	r3, [r7, #14]
 8015772:	1c59      	adds	r1, r3, #1
 8015774:	81f9      	strh	r1, [r7, #14]
 8015776:	4619      	mov	r1, r3
 8015778:	68bb      	ldr	r3, [r7, #8]
 801577a:	440b      	add	r3, r1
 801577c:	b2d2      	uxtb	r2, r2
 801577e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8015780:	687b      	ldr	r3, [r7, #4]
 8015782:	0a1a      	lsrs	r2, r3, #8
 8015784:	89fb      	ldrh	r3, [r7, #14]
 8015786:	1c59      	adds	r1, r3, #1
 8015788:	81f9      	strh	r1, [r7, #14]
 801578a:	4619      	mov	r1, r3
 801578c:	68bb      	ldr	r3, [r7, #8]
 801578e:	440b      	add	r3, r1
 8015790:	b2d2      	uxtb	r2, r2
 8015792:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8015794:	89fb      	ldrh	r3, [r7, #14]
 8015796:	1c5a      	adds	r2, r3, #1
 8015798:	81fa      	strh	r2, [r7, #14]
 801579a:	461a      	mov	r2, r3
 801579c:	68bb      	ldr	r3, [r7, #8]
 801579e:	4413      	add	r3, r2
 80157a0:	687a      	ldr	r2, [r7, #4]
 80157a2:	b2d2      	uxtb	r2, r2
 80157a4:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80157a6:	89fb      	ldrh	r3, [r7, #14]
}
 80157a8:	4618      	mov	r0, r3
 80157aa:	3710      	adds	r7, #16
 80157ac:	46bd      	mov	sp, r7
 80157ae:	bd80      	pop	{r7, pc}
 80157b0:	0801d2c8 	.word	0x0801d2c8
 80157b4:	0801d514 	.word	0x0801d514
 80157b8:	0801d328 	.word	0x0801d328

080157bc <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 80157bc:	b580      	push	{r7, lr}
 80157be:	b090      	sub	sp, #64	@ 0x40
 80157c0:	af00      	add	r7, sp, #0
 80157c2:	6078      	str	r0, [r7, #4]
 80157c4:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 80157c6:	2300      	movs	r3, #0
 80157c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  int parse_sname_as_options = 0;
 80157ca:	2300      	movs	r3, #0
 80157cc:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 80157ce:	2208      	movs	r2, #8
 80157d0:	2100      	movs	r1, #0
 80157d2:	48b5      	ldr	r0, [pc, #724]	@ (8015aa8 <dhcp_parse_reply+0x2ec>)
 80157d4:	f003 fb55 	bl	8018e82 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 80157d8:	687b      	ldr	r3, [r7, #4]
 80157da:	895b      	ldrh	r3, [r3, #10]
 80157dc:	2b2b      	cmp	r3, #43	@ 0x2b
 80157de:	d802      	bhi.n	80157e6 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 80157e0:	f06f 0301 	mvn.w	r3, #1
 80157e4:	e2a7      	b.n	8015d36 <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 80157e6:	687b      	ldr	r3, [r7, #4]
 80157e8:	685b      	ldr	r3, [r3, #4]
 80157ea:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 80157ec:	23f0      	movs	r3, #240	@ 0xf0
 80157ee:	86fb      	strh	r3, [r7, #54]	@ 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 80157f0:	687b      	ldr	r3, [r7, #4]
 80157f2:	891b      	ldrh	r3, [r3, #8]
 80157f4:	86bb      	strh	r3, [r7, #52]	@ 0x34
again:
  q = p;
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 80157fa:	e00c      	b.n	8015816 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 80157fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80157fe:	895b      	ldrh	r3, [r3, #10]
 8015800:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8015802:	1ad3      	subs	r3, r2, r3
 8015804:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8015806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015808:	895b      	ldrh	r3, [r3, #10]
 801580a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 801580c:	1ad3      	subs	r3, r2, r3
 801580e:	86bb      	strh	r3, [r7, #52]	@ 0x34
    q = q->next;
 8015810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015812:	681b      	ldr	r3, [r3, #0]
 8015814:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8015816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015818:	2b00      	cmp	r3, #0
 801581a:	d004      	beq.n	8015826 <dhcp_parse_reply+0x6a>
 801581c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801581e:	895b      	ldrh	r3, [r3, #10]
 8015820:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8015822:	429a      	cmp	r2, r3
 8015824:	d2ea      	bcs.n	80157fc <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8015826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015828:	2b00      	cmp	r3, #0
 801582a:	d102      	bne.n	8015832 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 801582c:	f06f 0301 	mvn.w	r3, #1
 8015830:	e281      	b.n	8015d36 <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 8015832:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8015834:	877b      	strh	r3, [r7, #58]	@ 0x3a
  offset_max = options_idx_max;
 8015836:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8015838:	873b      	strh	r3, [r7, #56]	@ 0x38
  options = (u8_t *)q->payload;
 801583a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801583c:	685b      	ldr	r3, [r3, #4]
 801583e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8015840:	e239      	b.n	8015cb6 <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 8015842:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015844:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8015846:	4413      	add	r3, r2
 8015848:	781b      	ldrb	r3, [r3, #0]
 801584a:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 801584c:	2300      	movs	r3, #0
 801584e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    int decode_idx = -1;
 8015852:	f04f 33ff 	mov.w	r3, #4294967295
 8015856:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8015858:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801585a:	3302      	adds	r3, #2
 801585c:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 801585e:	8bfa      	ldrh	r2, [r7, #30]
 8015860:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015862:	429a      	cmp	r2, r3
 8015864:	d202      	bcs.n	801586c <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8015866:	f06f 0301 	mvn.w	r3, #1
 801586a:	e264      	b.n	8015d36 <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 801586c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801586e:	3301      	adds	r3, #1
 8015870:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015872:	8952      	ldrh	r2, [r2, #10]
 8015874:	4293      	cmp	r3, r2
 8015876:	da07      	bge.n	8015888 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8015878:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801587a:	3301      	adds	r3, #1
 801587c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801587e:	4413      	add	r3, r2
 8015880:	781b      	ldrb	r3, [r3, #0]
 8015882:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015886:	e00b      	b.n	80158a0 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8015888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801588a:	681b      	ldr	r3, [r3, #0]
 801588c:	2b00      	cmp	r3, #0
 801588e:	d004      	beq.n	801589a <dhcp_parse_reply+0xde>
 8015890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015892:	681b      	ldr	r3, [r3, #0]
 8015894:	685b      	ldr	r3, [r3, #4]
 8015896:	781b      	ldrb	r3, [r3, #0]
 8015898:	e000      	b.n	801589c <dhcp_parse_reply+0xe0>
 801589a:	2300      	movs	r3, #0
 801589c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 80158a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80158a4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    switch (op) {
 80158a8:	7dfb      	ldrb	r3, [r7, #23]
 80158aa:	2b3b      	cmp	r3, #59	@ 0x3b
 80158ac:	f200 812c 	bhi.w	8015b08 <dhcp_parse_reply+0x34c>
 80158b0:	a201      	add	r2, pc, #4	@ (adr r2, 80158b8 <dhcp_parse_reply+0xfc>)
 80158b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80158b6:	bf00      	nop
 80158b8:	080159a9 	.word	0x080159a9
 80158bc:	080159b9 	.word	0x080159b9
 80158c0:	08015b09 	.word	0x08015b09
 80158c4:	080159db 	.word	0x080159db
 80158c8:	08015b09 	.word	0x08015b09
 80158cc:	08015b09 	.word	0x08015b09
 80158d0:	08015b09 	.word	0x08015b09
 80158d4:	08015b09 	.word	0x08015b09
 80158d8:	08015b09 	.word	0x08015b09
 80158dc:	08015b09 	.word	0x08015b09
 80158e0:	08015b09 	.word	0x08015b09
 80158e4:	08015b09 	.word	0x08015b09
 80158e8:	08015b09 	.word	0x08015b09
 80158ec:	08015b09 	.word	0x08015b09
 80158f0:	08015b09 	.word	0x08015b09
 80158f4:	08015b09 	.word	0x08015b09
 80158f8:	08015b09 	.word	0x08015b09
 80158fc:	08015b09 	.word	0x08015b09
 8015900:	08015b09 	.word	0x08015b09
 8015904:	08015b09 	.word	0x08015b09
 8015908:	08015b09 	.word	0x08015b09
 801590c:	08015b09 	.word	0x08015b09
 8015910:	08015b09 	.word	0x08015b09
 8015914:	08015b09 	.word	0x08015b09
 8015918:	08015b09 	.word	0x08015b09
 801591c:	08015b09 	.word	0x08015b09
 8015920:	08015b09 	.word	0x08015b09
 8015924:	08015b09 	.word	0x08015b09
 8015928:	08015b09 	.word	0x08015b09
 801592c:	08015b09 	.word	0x08015b09
 8015930:	08015b09 	.word	0x08015b09
 8015934:	08015b09 	.word	0x08015b09
 8015938:	08015b09 	.word	0x08015b09
 801593c:	08015b09 	.word	0x08015b09
 8015940:	08015b09 	.word	0x08015b09
 8015944:	08015b09 	.word	0x08015b09
 8015948:	08015b09 	.word	0x08015b09
 801594c:	08015b09 	.word	0x08015b09
 8015950:	08015b09 	.word	0x08015b09
 8015954:	08015b09 	.word	0x08015b09
 8015958:	08015b09 	.word	0x08015b09
 801595c:	08015b09 	.word	0x08015b09
 8015960:	08015b09 	.word	0x08015b09
 8015964:	08015b09 	.word	0x08015b09
 8015968:	08015b09 	.word	0x08015b09
 801596c:	08015b09 	.word	0x08015b09
 8015970:	08015b09 	.word	0x08015b09
 8015974:	08015b09 	.word	0x08015b09
 8015978:	08015b09 	.word	0x08015b09
 801597c:	08015b09 	.word	0x08015b09
 8015980:	08015b09 	.word	0x08015b09
 8015984:	08015a07 	.word	0x08015a07
 8015988:	08015a29 	.word	0x08015a29
 801598c:	08015a65 	.word	0x08015a65
 8015990:	08015a87 	.word	0x08015a87
 8015994:	08015b09 	.word	0x08015b09
 8015998:	08015b09 	.word	0x08015b09
 801599c:	08015b09 	.word	0x08015b09
 80159a0:	08015ac5 	.word	0x08015ac5
 80159a4:	08015ae7 	.word	0x08015ae7
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 80159a8:	2300      	movs	r3, #0
 80159aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80159ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80159b2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        /* will be increased below */
        break;
 80159b6:	e0ab      	b.n	8015b10 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80159b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80159bc:	2b04      	cmp	r3, #4
 80159be:	d009      	beq.n	80159d4 <dhcp_parse_reply+0x218>
 80159c0:	4b3a      	ldr	r3, [pc, #232]	@ (8015aac <dhcp_parse_reply+0x2f0>)
 80159c2:	f240 622e 	movw	r2, #1582	@ 0x62e
 80159c6:	493a      	ldr	r1, [pc, #232]	@ (8015ab0 <dhcp_parse_reply+0x2f4>)
 80159c8:	483a      	ldr	r0, [pc, #232]	@ (8015ab4 <dhcp_parse_reply+0x2f8>)
 80159ca:	f003 f9bb 	bl	8018d44 <iprintf>
 80159ce:	f06f 0305 	mvn.w	r3, #5
 80159d2:	e1b0      	b.n	8015d36 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 80159d4:	2306      	movs	r3, #6
 80159d6:	623b      	str	r3, [r7, #32]
        break;
 80159d8:	e09a      	b.n	8015b10 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 80159da:	2304      	movs	r3, #4
 80159dc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 80159e0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80159e4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80159e8:	429a      	cmp	r2, r3
 80159ea:	d209      	bcs.n	8015a00 <dhcp_parse_reply+0x244>
 80159ec:	4b2f      	ldr	r3, [pc, #188]	@ (8015aac <dhcp_parse_reply+0x2f0>)
 80159ee:	f240 6233 	movw	r2, #1587	@ 0x633
 80159f2:	4931      	ldr	r1, [pc, #196]	@ (8015ab8 <dhcp_parse_reply+0x2fc>)
 80159f4:	482f      	ldr	r0, [pc, #188]	@ (8015ab4 <dhcp_parse_reply+0x2f8>)
 80159f6:	f003 f9a5 	bl	8018d44 <iprintf>
 80159fa:	f06f 0305 	mvn.w	r3, #5
 80159fe:	e19a      	b.n	8015d36 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8015a00:	2307      	movs	r3, #7
 8015a02:	623b      	str	r3, [r7, #32]
        break;
 8015a04:	e084      	b.n	8015b10 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015a06:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015a0a:	2b04      	cmp	r3, #4
 8015a0c:	d009      	beq.n	8015a22 <dhcp_parse_reply+0x266>
 8015a0e:	4b27      	ldr	r3, [pc, #156]	@ (8015aac <dhcp_parse_reply+0x2f0>)
 8015a10:	f240 6241 	movw	r2, #1601	@ 0x641
 8015a14:	4926      	ldr	r1, [pc, #152]	@ (8015ab0 <dhcp_parse_reply+0x2f4>)
 8015a16:	4827      	ldr	r0, [pc, #156]	@ (8015ab4 <dhcp_parse_reply+0x2f8>)
 8015a18:	f003 f994 	bl	8018d44 <iprintf>
 8015a1c:	f06f 0305 	mvn.w	r3, #5
 8015a20:	e189      	b.n	8015d36 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8015a22:	2303      	movs	r3, #3
 8015a24:	623b      	str	r3, [r7, #32]
        break;
 8015a26:	e073      	b.n	8015b10 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8015a28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015a2c:	2b01      	cmp	r3, #1
 8015a2e:	d009      	beq.n	8015a44 <dhcp_parse_reply+0x288>
 8015a30:	4b1e      	ldr	r3, [pc, #120]	@ (8015aac <dhcp_parse_reply+0x2f0>)
 8015a32:	f240 624f 	movw	r2, #1615	@ 0x64f
 8015a36:	4921      	ldr	r1, [pc, #132]	@ (8015abc <dhcp_parse_reply+0x300>)
 8015a38:	481e      	ldr	r0, [pc, #120]	@ (8015ab4 <dhcp_parse_reply+0x2f8>)
 8015a3a:	f003 f983 	bl	8018d44 <iprintf>
 8015a3e:	f06f 0305 	mvn.w	r3, #5
 8015a42:	e178      	b.n	8015d36 <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8015a44:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8015a46:	2bf0      	cmp	r3, #240	@ 0xf0
 8015a48:	d009      	beq.n	8015a5e <dhcp_parse_reply+0x2a2>
 8015a4a:	4b18      	ldr	r3, [pc, #96]	@ (8015aac <dhcp_parse_reply+0x2f0>)
 8015a4c:	f240 6251 	movw	r2, #1617	@ 0x651
 8015a50:	491b      	ldr	r1, [pc, #108]	@ (8015ac0 <dhcp_parse_reply+0x304>)
 8015a52:	4818      	ldr	r0, [pc, #96]	@ (8015ab4 <dhcp_parse_reply+0x2f8>)
 8015a54:	f003 f976 	bl	8018d44 <iprintf>
 8015a58:	f06f 0305 	mvn.w	r3, #5
 8015a5c:	e16b      	b.n	8015d36 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8015a5e:	2300      	movs	r3, #0
 8015a60:	623b      	str	r3, [r7, #32]
        break;
 8015a62:	e055      	b.n	8015b10 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8015a64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015a68:	2b01      	cmp	r3, #1
 8015a6a:	d009      	beq.n	8015a80 <dhcp_parse_reply+0x2c4>
 8015a6c:	4b0f      	ldr	r3, [pc, #60]	@ (8015aac <dhcp_parse_reply+0x2f0>)
 8015a6e:	f240 6255 	movw	r2, #1621	@ 0x655
 8015a72:	4912      	ldr	r1, [pc, #72]	@ (8015abc <dhcp_parse_reply+0x300>)
 8015a74:	480f      	ldr	r0, [pc, #60]	@ (8015ab4 <dhcp_parse_reply+0x2f8>)
 8015a76:	f003 f965 	bl	8018d44 <iprintf>
 8015a7a:	f06f 0305 	mvn.w	r3, #5
 8015a7e:	e15a      	b.n	8015d36 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8015a80:	2301      	movs	r3, #1
 8015a82:	623b      	str	r3, [r7, #32]
        break;
 8015a84:	e044      	b.n	8015b10 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015a86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015a8a:	2b04      	cmp	r3, #4
 8015a8c:	d009      	beq.n	8015aa2 <dhcp_parse_reply+0x2e6>
 8015a8e:	4b07      	ldr	r3, [pc, #28]	@ (8015aac <dhcp_parse_reply+0x2f0>)
 8015a90:	f240 6259 	movw	r2, #1625	@ 0x659
 8015a94:	4906      	ldr	r1, [pc, #24]	@ (8015ab0 <dhcp_parse_reply+0x2f4>)
 8015a96:	4807      	ldr	r0, [pc, #28]	@ (8015ab4 <dhcp_parse_reply+0x2f8>)
 8015a98:	f003 f954 	bl	8018d44 <iprintf>
 8015a9c:	f06f 0305 	mvn.w	r3, #5
 8015aa0:	e149      	b.n	8015d36 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8015aa2:	2302      	movs	r3, #2
 8015aa4:	623b      	str	r3, [r7, #32]
        break;
 8015aa6:	e033      	b.n	8015b10 <dhcp_parse_reply+0x354>
 8015aa8:	20010ef4 	.word	0x20010ef4
 8015aac:	0801d2c8 	.word	0x0801d2c8
 8015ab0:	0801d550 	.word	0x0801d550
 8015ab4:	0801d328 	.word	0x0801d328
 8015ab8:	0801d55c 	.word	0x0801d55c
 8015abc:	0801d570 	.word	0x0801d570
 8015ac0:	0801d57c 	.word	0x0801d57c
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015ac4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015ac8:	2b04      	cmp	r3, #4
 8015aca:	d009      	beq.n	8015ae0 <dhcp_parse_reply+0x324>
 8015acc:	4b9c      	ldr	r3, [pc, #624]	@ (8015d40 <dhcp_parse_reply+0x584>)
 8015ace:	f240 625d 	movw	r2, #1629	@ 0x65d
 8015ad2:	499c      	ldr	r1, [pc, #624]	@ (8015d44 <dhcp_parse_reply+0x588>)
 8015ad4:	489c      	ldr	r0, [pc, #624]	@ (8015d48 <dhcp_parse_reply+0x58c>)
 8015ad6:	f003 f935 	bl	8018d44 <iprintf>
 8015ada:	f06f 0305 	mvn.w	r3, #5
 8015ade:	e12a      	b.n	8015d36 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 8015ae0:	2304      	movs	r3, #4
 8015ae2:	623b      	str	r3, [r7, #32]
        break;
 8015ae4:	e014      	b.n	8015b10 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015ae6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015aea:	2b04      	cmp	r3, #4
 8015aec:	d009      	beq.n	8015b02 <dhcp_parse_reply+0x346>
 8015aee:	4b94      	ldr	r3, [pc, #592]	@ (8015d40 <dhcp_parse_reply+0x584>)
 8015af0:	f240 6261 	movw	r2, #1633	@ 0x661
 8015af4:	4993      	ldr	r1, [pc, #588]	@ (8015d44 <dhcp_parse_reply+0x588>)
 8015af6:	4894      	ldr	r0, [pc, #592]	@ (8015d48 <dhcp_parse_reply+0x58c>)
 8015af8:	f003 f924 	bl	8018d44 <iprintf>
 8015afc:	f06f 0305 	mvn.w	r3, #5
 8015b00:	e119      	b.n	8015d36 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 8015b02:	2305      	movs	r3, #5
 8015b04:	623b      	str	r3, [r7, #32]
        break;
 8015b06:	e003      	b.n	8015b10 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 8015b08:	2300      	movs	r3, #0
 8015b0a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8015b0e:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8015b10:	7dfb      	ldrb	r3, [r7, #23]
 8015b12:	2b00      	cmp	r3, #0
 8015b14:	d103      	bne.n	8015b1e <dhcp_parse_reply+0x362>
      offset++;
 8015b16:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015b18:	3301      	adds	r3, #1
 8015b1a:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8015b1c:	e0a1      	b.n	8015c62 <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8015b1e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8015b20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015b24:	4413      	add	r3, r2
 8015b26:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 8015b2a:	4293      	cmp	r3, r2
 8015b2c:	dd02      	ble.n	8015b34 <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 8015b2e:	f06f 0301 	mvn.w	r3, #1
 8015b32:	e100      	b.n	8015d36 <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 8015b34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015b38:	b29a      	uxth	r2, r3
 8015b3a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015b3c:	4413      	add	r3, r2
 8015b3e:	b29b      	uxth	r3, r3
 8015b40:	3302      	adds	r3, #2
 8015b42:	877b      	strh	r3, [r7, #58]	@ 0x3a
      if (decode_len > 0) {
 8015b44:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015b48:	2b00      	cmp	r3, #0
 8015b4a:	f000 808a 	beq.w	8015c62 <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 8015b4e:	2300      	movs	r3, #0
 8015b50:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8015b52:	6a3b      	ldr	r3, [r7, #32]
 8015b54:	2b00      	cmp	r3, #0
 8015b56:	db02      	blt.n	8015b5e <dhcp_parse_reply+0x3a2>
 8015b58:	6a3b      	ldr	r3, [r7, #32]
 8015b5a:	2b07      	cmp	r3, #7
 8015b5c:	dd06      	ble.n	8015b6c <dhcp_parse_reply+0x3b0>
 8015b5e:	4b78      	ldr	r3, [pc, #480]	@ (8015d40 <dhcp_parse_reply+0x584>)
 8015b60:	f44f 62cf 	mov.w	r2, #1656	@ 0x678
 8015b64:	4979      	ldr	r1, [pc, #484]	@ (8015d4c <dhcp_parse_reply+0x590>)
 8015b66:	4878      	ldr	r0, [pc, #480]	@ (8015d48 <dhcp_parse_reply+0x58c>)
 8015b68:	f003 f8ec 	bl	8018d44 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8015b6c:	4a78      	ldr	r2, [pc, #480]	@ (8015d50 <dhcp_parse_reply+0x594>)
 8015b6e:	6a3b      	ldr	r3, [r7, #32]
 8015b70:	4413      	add	r3, r2
 8015b72:	781b      	ldrb	r3, [r3, #0]
 8015b74:	2b00      	cmp	r3, #0
 8015b76:	d174      	bne.n	8015c62 <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 8015b78:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015b7c:	2b04      	cmp	r3, #4
 8015b7e:	bf28      	it	cs
 8015b80:	2304      	movcs	r3, #4
 8015b82:	b2db      	uxtb	r3, r3
 8015b84:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8015b86:	8bfb      	ldrh	r3, [r7, #30]
 8015b88:	8aba      	ldrh	r2, [r7, #20]
 8015b8a:	f107 0108 	add.w	r1, r7, #8
 8015b8e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015b90:	f7f7 fba4 	bl	800d2dc <pbuf_copy_partial>
 8015b94:	4603      	mov	r3, r0
 8015b96:	461a      	mov	r2, r3
 8015b98:	8abb      	ldrh	r3, [r7, #20]
 8015b9a:	4293      	cmp	r3, r2
 8015b9c:	d002      	beq.n	8015ba4 <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 8015b9e:	f06f 0301 	mvn.w	r3, #1
 8015ba2:	e0c8      	b.n	8015d36 <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 8015ba4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015ba8:	2b04      	cmp	r3, #4
 8015baa:	d933      	bls.n	8015c14 <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8015bac:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015bb0:	f003 0303 	and.w	r3, r3, #3
 8015bb4:	b2db      	uxtb	r3, r3
 8015bb6:	2b00      	cmp	r3, #0
 8015bb8:	d009      	beq.n	8015bce <dhcp_parse_reply+0x412>
 8015bba:	4b61      	ldr	r3, [pc, #388]	@ (8015d40 <dhcp_parse_reply+0x584>)
 8015bbc:	f240 6281 	movw	r2, #1665	@ 0x681
 8015bc0:	4964      	ldr	r1, [pc, #400]	@ (8015d54 <dhcp_parse_reply+0x598>)
 8015bc2:	4861      	ldr	r0, [pc, #388]	@ (8015d48 <dhcp_parse_reply+0x58c>)
 8015bc4:	f003 f8be 	bl	8018d44 <iprintf>
 8015bc8:	f06f 0305 	mvn.w	r3, #5
 8015bcc:	e0b3      	b.n	8015d36 <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 8015bce:	4a60      	ldr	r2, [pc, #384]	@ (8015d50 <dhcp_parse_reply+0x594>)
 8015bd0:	6a3b      	ldr	r3, [r7, #32]
 8015bd2:	4413      	add	r3, r2
 8015bd4:	2201      	movs	r2, #1
 8015bd6:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8015bd8:	68bb      	ldr	r3, [r7, #8]
 8015bda:	4618      	mov	r0, r3
 8015bdc:	f7f5 fd59 	bl	800b692 <lwip_htonl>
 8015be0:	4602      	mov	r2, r0
 8015be2:	495d      	ldr	r1, [pc, #372]	@ (8015d58 <dhcp_parse_reply+0x59c>)
 8015be4:	6a3b      	ldr	r3, [r7, #32]
 8015be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8015bea:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015bee:	3b04      	subs	r3, #4
 8015bf0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8015bf4:	8bfb      	ldrh	r3, [r7, #30]
 8015bf6:	3304      	adds	r3, #4
 8015bf8:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8015bfa:	8a7a      	ldrh	r2, [r7, #18]
 8015bfc:	8bfb      	ldrh	r3, [r7, #30]
 8015bfe:	429a      	cmp	r2, r3
 8015c00:	d202      	bcs.n	8015c08 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 8015c02:	f06f 0301 	mvn.w	r3, #1
 8015c06:	e096      	b.n	8015d36 <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 8015c08:	8a7b      	ldrh	r3, [r7, #18]
 8015c0a:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8015c0c:	6a3b      	ldr	r3, [r7, #32]
 8015c0e:	3301      	adds	r3, #1
 8015c10:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8015c12:	e79e      	b.n	8015b52 <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 8015c14:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015c18:	2b04      	cmp	r3, #4
 8015c1a:	d106      	bne.n	8015c2a <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 8015c1c:	68bb      	ldr	r3, [r7, #8]
 8015c1e:	4618      	mov	r0, r3
 8015c20:	f7f5 fd37 	bl	800b692 <lwip_htonl>
 8015c24:	4603      	mov	r3, r0
 8015c26:	60bb      	str	r3, [r7, #8]
 8015c28:	e011      	b.n	8015c4e <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8015c2a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015c2e:	2b01      	cmp	r3, #1
 8015c30:	d009      	beq.n	8015c46 <dhcp_parse_reply+0x48a>
 8015c32:	4b43      	ldr	r3, [pc, #268]	@ (8015d40 <dhcp_parse_reply+0x584>)
 8015c34:	f44f 62d2 	mov.w	r2, #1680	@ 0x690
 8015c38:	4948      	ldr	r1, [pc, #288]	@ (8015d5c <dhcp_parse_reply+0x5a0>)
 8015c3a:	4843      	ldr	r0, [pc, #268]	@ (8015d48 <dhcp_parse_reply+0x58c>)
 8015c3c:	f003 f882 	bl	8018d44 <iprintf>
 8015c40:	f06f 0305 	mvn.w	r3, #5
 8015c44:	e077      	b.n	8015d36 <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 8015c46:	f107 0308 	add.w	r3, r7, #8
 8015c4a:	781b      	ldrb	r3, [r3, #0]
 8015c4c:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8015c4e:	4a40      	ldr	r2, [pc, #256]	@ (8015d50 <dhcp_parse_reply+0x594>)
 8015c50:	6a3b      	ldr	r3, [r7, #32]
 8015c52:	4413      	add	r3, r2
 8015c54:	2201      	movs	r2, #1
 8015c56:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8015c58:	68ba      	ldr	r2, [r7, #8]
 8015c5a:	493f      	ldr	r1, [pc, #252]	@ (8015d58 <dhcp_parse_reply+0x59c>)
 8015c5c:	6a3b      	ldr	r3, [r7, #32]
 8015c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8015c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c64:	895b      	ldrh	r3, [r3, #10]
 8015c66:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8015c68:	429a      	cmp	r2, r3
 8015c6a:	d324      	bcc.n	8015cb6 <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 8015c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c6e:	895b      	ldrh	r3, [r3, #10]
 8015c70:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8015c72:	1ad3      	subs	r3, r2, r3
 8015c74:	877b      	strh	r3, [r7, #58]	@ 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8015c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c78:	895b      	ldrh	r3, [r3, #10]
 8015c7a:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8015c7c:	1ad3      	subs	r3, r2, r3
 8015c7e:	873b      	strh	r3, [r7, #56]	@ 0x38
      if (offset < offset_max) {
 8015c80:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8015c82:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8015c84:	429a      	cmp	r2, r3
 8015c86:	d213      	bcs.n	8015cb0 <dhcp_parse_reply+0x4f4>
        q = q->next;
 8015c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c8a:	681b      	ldr	r3, [r3, #0]
 8015c8c:	633b      	str	r3, [r7, #48]	@ 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8015c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c90:	2b00      	cmp	r3, #0
 8015c92:	d109      	bne.n	8015ca8 <dhcp_parse_reply+0x4ec>
 8015c94:	4b2a      	ldr	r3, [pc, #168]	@ (8015d40 <dhcp_parse_reply+0x584>)
 8015c96:	f240 629d 	movw	r2, #1693	@ 0x69d
 8015c9a:	4931      	ldr	r1, [pc, #196]	@ (8015d60 <dhcp_parse_reply+0x5a4>)
 8015c9c:	482a      	ldr	r0, [pc, #168]	@ (8015d48 <dhcp_parse_reply+0x58c>)
 8015c9e:	f003 f851 	bl	8018d44 <iprintf>
 8015ca2:	f06f 0305 	mvn.w	r3, #5
 8015ca6:	e046      	b.n	8015d36 <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 8015ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015caa:	685b      	ldr	r3, [r3, #4]
 8015cac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015cae:	e002      	b.n	8015cb6 <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8015cb0:	f06f 0301 	mvn.w	r3, #1
 8015cb4:	e03f      	b.n	8015d36 <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8015cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015cb8:	2b00      	cmp	r3, #0
 8015cba:	d00a      	beq.n	8015cd2 <dhcp_parse_reply+0x516>
 8015cbc:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8015cbe:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8015cc0:	429a      	cmp	r2, r3
 8015cc2:	d206      	bcs.n	8015cd2 <dhcp_parse_reply+0x516>
 8015cc4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015cc6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8015cc8:	4413      	add	r3, r2
 8015cca:	781b      	ldrb	r3, [r3, #0]
 8015ccc:	2bff      	cmp	r3, #255	@ 0xff
 8015cce:	f47f adb8 	bne.w	8015842 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8015cd2:	4b1f      	ldr	r3, [pc, #124]	@ (8015d50 <dhcp_parse_reply+0x594>)
 8015cd4:	781b      	ldrb	r3, [r3, #0]
 8015cd6:	2b00      	cmp	r3, #0
 8015cd8:	d018      	beq.n	8015d0c <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8015cda:	4b1f      	ldr	r3, [pc, #124]	@ (8015d58 <dhcp_parse_reply+0x59c>)
 8015cdc:	681b      	ldr	r3, [r3, #0]
 8015cde:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8015ce0:	4b1b      	ldr	r3, [pc, #108]	@ (8015d50 <dhcp_parse_reply+0x594>)
 8015ce2:	2200      	movs	r2, #0
 8015ce4:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8015ce6:	68fb      	ldr	r3, [r7, #12]
 8015ce8:	2b01      	cmp	r3, #1
 8015cea:	d102      	bne.n	8015cf2 <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 8015cec:	2301      	movs	r3, #1
 8015cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015cf0:	e00c      	b.n	8015d0c <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8015cf2:	68fb      	ldr	r3, [r7, #12]
 8015cf4:	2b02      	cmp	r3, #2
 8015cf6:	d102      	bne.n	8015cfe <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 8015cf8:	2301      	movs	r3, #1
 8015cfa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8015cfc:	e006      	b.n	8015d0c <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8015cfe:	68fb      	ldr	r3, [r7, #12]
 8015d00:	2b03      	cmp	r3, #3
 8015d02:	d103      	bne.n	8015d0c <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 8015d04:	2301      	movs	r3, #1
 8015d06:	62bb      	str	r3, [r7, #40]	@ 0x28
      parse_file_as_options = 1;
 8015d08:	2301      	movs	r3, #1
 8015d0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8015d0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d0e:	2b00      	cmp	r3, #0
 8015d10:	d006      	beq.n	8015d20 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8015d12:	2300      	movs	r3, #0
 8015d14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    options_idx = DHCP_FILE_OFS;
 8015d16:	236c      	movs	r3, #108	@ 0x6c
 8015d18:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8015d1a:	23ec      	movs	r3, #236	@ 0xec
 8015d1c:	86bb      	strh	r3, [r7, #52]	@ 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8015d1e:	e56a      	b.n	80157f6 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8015d20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d22:	2b00      	cmp	r3, #0
 8015d24:	d006      	beq.n	8015d34 <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 8015d26:	2300      	movs	r3, #0
 8015d28:	62bb      	str	r3, [r7, #40]	@ 0x28
    options_idx = DHCP_SNAME_OFS;
 8015d2a:	232c      	movs	r3, #44	@ 0x2c
 8015d2c:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8015d2e:	236c      	movs	r3, #108	@ 0x6c
 8015d30:	86bb      	strh	r3, [r7, #52]	@ 0x34
    goto again;
 8015d32:	e560      	b.n	80157f6 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8015d34:	2300      	movs	r3, #0
}
 8015d36:	4618      	mov	r0, r3
 8015d38:	3740      	adds	r7, #64	@ 0x40
 8015d3a:	46bd      	mov	sp, r7
 8015d3c:	bd80      	pop	{r7, pc}
 8015d3e:	bf00      	nop
 8015d40:	0801d2c8 	.word	0x0801d2c8
 8015d44:	0801d550 	.word	0x0801d550
 8015d48:	0801d328 	.word	0x0801d328
 8015d4c:	0801d594 	.word	0x0801d594
 8015d50:	20010ef4 	.word	0x20010ef4
 8015d54:	0801d5a8 	.word	0x0801d5a8
 8015d58:	20010ed4 	.word	0x20010ed4
 8015d5c:	0801d5c0 	.word	0x0801d5c0
 8015d60:	0801d5d4 	.word	0x0801d5d4

08015d64 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8015d64:	b580      	push	{r7, lr}
 8015d66:	b08a      	sub	sp, #40	@ 0x28
 8015d68:	af00      	add	r7, sp, #0
 8015d6a:	60f8      	str	r0, [r7, #12]
 8015d6c:	60b9      	str	r1, [r7, #8]
 8015d6e:	607a      	str	r2, [r7, #4]
 8015d70:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8015d72:	4b60      	ldr	r3, [pc, #384]	@ (8015ef4 <dhcp_recv+0x190>)
 8015d74:	685b      	ldr	r3, [r3, #4]
 8015d76:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015d78:	6a3b      	ldr	r3, [r7, #32]
 8015d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015d7c:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8015d7e:	687b      	ldr	r3, [r7, #4]
 8015d80:	685b      	ldr	r3, [r3, #4]
 8015d82:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8015d84:	69fb      	ldr	r3, [r7, #28]
 8015d86:	2b00      	cmp	r3, #0
 8015d88:	f000 809d 	beq.w	8015ec6 <dhcp_recv+0x162>
 8015d8c:	69fb      	ldr	r3, [r7, #28]
 8015d8e:	791b      	ldrb	r3, [r3, #4]
 8015d90:	2b00      	cmp	r3, #0
 8015d92:	f000 8098 	beq.w	8015ec6 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	895b      	ldrh	r3, [r3, #10]
 8015d9a:	2b2b      	cmp	r3, #43	@ 0x2b
 8015d9c:	f240 8095 	bls.w	8015eca <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8015da0:	69bb      	ldr	r3, [r7, #24]
 8015da2:	781b      	ldrb	r3, [r3, #0]
 8015da4:	2b02      	cmp	r3, #2
 8015da6:	f040 8092 	bne.w	8015ece <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015daa:	2300      	movs	r3, #0
 8015dac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015db0:	e012      	b.n	8015dd8 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8015db2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015db6:	6a3a      	ldr	r2, [r7, #32]
 8015db8:	4413      	add	r3, r2
 8015dba:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 8015dbe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015dc2:	69b9      	ldr	r1, [r7, #24]
 8015dc4:	440b      	add	r3, r1
 8015dc6:	7f1b      	ldrb	r3, [r3, #28]
 8015dc8:	429a      	cmp	r2, r3
 8015dca:	f040 8082 	bne.w	8015ed2 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015dce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015dd2:	3301      	adds	r3, #1
 8015dd4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015dd8:	6a3b      	ldr	r3, [r7, #32]
 8015dda:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8015dde:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8015de2:	429a      	cmp	r2, r3
 8015de4:	d203      	bcs.n	8015dee <dhcp_recv+0x8a>
 8015de6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015dea:	2b05      	cmp	r3, #5
 8015dec:	d9e1      	bls.n	8015db2 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8015dee:	69bb      	ldr	r3, [r7, #24]
 8015df0:	685b      	ldr	r3, [r3, #4]
 8015df2:	4618      	mov	r0, r3
 8015df4:	f7f5 fc4d 	bl	800b692 <lwip_htonl>
 8015df8:	4602      	mov	r2, r0
 8015dfa:	69fb      	ldr	r3, [r7, #28]
 8015dfc:	681b      	ldr	r3, [r3, #0]
 8015dfe:	429a      	cmp	r2, r3
 8015e00:	d169      	bne.n	8015ed6 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8015e02:	69f9      	ldr	r1, [r7, #28]
 8015e04:	6878      	ldr	r0, [r7, #4]
 8015e06:	f7ff fcd9 	bl	80157bc <dhcp_parse_reply>
 8015e0a:	4603      	mov	r3, r0
 8015e0c:	2b00      	cmp	r3, #0
 8015e0e:	d164      	bne.n	8015eda <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8015e10:	4b39      	ldr	r3, [pc, #228]	@ (8015ef8 <dhcp_recv+0x194>)
 8015e12:	785b      	ldrb	r3, [r3, #1]
 8015e14:	2b00      	cmp	r3, #0
 8015e16:	d062      	beq.n	8015ede <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	685b      	ldr	r3, [r3, #4]
 8015e1c:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8015e1e:	4b37      	ldr	r3, [pc, #220]	@ (8015efc <dhcp_recv+0x198>)
 8015e20:	685b      	ldr	r3, [r3, #4]
 8015e22:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8015e24:	7cfb      	ldrb	r3, [r7, #19]
 8015e26:	2b05      	cmp	r3, #5
 8015e28:	d12a      	bne.n	8015e80 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8015e2a:	69fb      	ldr	r3, [r7, #28]
 8015e2c:	795b      	ldrb	r3, [r3, #5]
 8015e2e:	2b01      	cmp	r3, #1
 8015e30:	d112      	bne.n	8015e58 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8015e32:	6979      	ldr	r1, [r7, #20]
 8015e34:	6a38      	ldr	r0, [r7, #32]
 8015e36:	f7fe fe1d 	bl	8014a74 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8015e3a:	6a3b      	ldr	r3, [r7, #32]
 8015e3c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8015e40:	f003 0308 	and.w	r3, r3, #8
 8015e44:	2b00      	cmp	r3, #0
 8015e46:	d003      	beq.n	8015e50 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8015e48:	6a38      	ldr	r0, [r7, #32]
 8015e4a:	f7fe fb8d 	bl	8014568 <dhcp_check>
 8015e4e:	e049      	b.n	8015ee4 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8015e50:	6a38      	ldr	r0, [r7, #32]
 8015e52:	f7ff f86d 	bl	8014f30 <dhcp_bind>
 8015e56:	e045      	b.n	8015ee4 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8015e58:	69fb      	ldr	r3, [r7, #28]
 8015e5a:	795b      	ldrb	r3, [r3, #5]
 8015e5c:	2b03      	cmp	r3, #3
 8015e5e:	d007      	beq.n	8015e70 <dhcp_recv+0x10c>
 8015e60:	69fb      	ldr	r3, [r7, #28]
 8015e62:	795b      	ldrb	r3, [r3, #5]
 8015e64:	2b04      	cmp	r3, #4
 8015e66:	d003      	beq.n	8015e70 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8015e68:	69fb      	ldr	r3, [r7, #28]
 8015e6a:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8015e6c:	2b05      	cmp	r3, #5
 8015e6e:	d139      	bne.n	8015ee4 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8015e70:	6979      	ldr	r1, [r7, #20]
 8015e72:	6a38      	ldr	r0, [r7, #32]
 8015e74:	f7fe fdfe 	bl	8014a74 <dhcp_handle_ack>
      dhcp_bind(netif);
 8015e78:	6a38      	ldr	r0, [r7, #32]
 8015e7a:	f7ff f859 	bl	8014f30 <dhcp_bind>
 8015e7e:	e031      	b.n	8015ee4 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8015e80:	7cfb      	ldrb	r3, [r7, #19]
 8015e82:	2b06      	cmp	r3, #6
 8015e84:	d113      	bne.n	8015eae <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8015e86:	69fb      	ldr	r3, [r7, #28]
 8015e88:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8015e8a:	2b03      	cmp	r3, #3
 8015e8c:	d00b      	beq.n	8015ea6 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8015e8e:	69fb      	ldr	r3, [r7, #28]
 8015e90:	795b      	ldrb	r3, [r3, #5]
 8015e92:	2b01      	cmp	r3, #1
 8015e94:	d007      	beq.n	8015ea6 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8015e96:	69fb      	ldr	r3, [r7, #28]
 8015e98:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8015e9a:	2b04      	cmp	r3, #4
 8015e9c:	d003      	beq.n	8015ea6 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8015e9e:	69fb      	ldr	r3, [r7, #28]
 8015ea0:	795b      	ldrb	r3, [r3, #5]
 8015ea2:	2b05      	cmp	r3, #5
 8015ea4:	d103      	bne.n	8015eae <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8015ea6:	6a38      	ldr	r0, [r7, #32]
 8015ea8:	f7fe fb44 	bl	8014534 <dhcp_handle_nak>
 8015eac:	e01a      	b.n	8015ee4 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8015eae:	7cfb      	ldrb	r3, [r7, #19]
 8015eb0:	2b02      	cmp	r3, #2
 8015eb2:	d116      	bne.n	8015ee2 <dhcp_recv+0x17e>
 8015eb4:	69fb      	ldr	r3, [r7, #28]
 8015eb6:	795b      	ldrb	r3, [r3, #5]
 8015eb8:	2b06      	cmp	r3, #6
 8015eba:	d112      	bne.n	8015ee2 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8015ebc:	6979      	ldr	r1, [r7, #20]
 8015ebe:	6a38      	ldr	r0, [r7, #32]
 8015ec0:	f7fe fb86 	bl	80145d0 <dhcp_handle_offer>
 8015ec4:	e00e      	b.n	8015ee4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015ec6:	bf00      	nop
 8015ec8:	e00c      	b.n	8015ee4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015eca:	bf00      	nop
 8015ecc:	e00a      	b.n	8015ee4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015ece:	bf00      	nop
 8015ed0:	e008      	b.n	8015ee4 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 8015ed2:	bf00      	nop
 8015ed4:	e006      	b.n	8015ee4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015ed6:	bf00      	nop
 8015ed8:	e004      	b.n	8015ee4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015eda:	bf00      	nop
 8015edc:	e002      	b.n	8015ee4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015ede:	bf00      	nop
 8015ee0:	e000      	b.n	8015ee4 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8015ee2:	bf00      	nop
  pbuf_free(p);
 8015ee4:	6878      	ldr	r0, [r7, #4]
 8015ee6:	f7f6 fff3 	bl	800ced0 <pbuf_free>
}
 8015eea:	bf00      	nop
 8015eec:	3728      	adds	r7, #40	@ 0x28
 8015eee:	46bd      	mov	sp, r7
 8015ef0:	bd80      	pop	{r7, pc}
 8015ef2:	bf00      	nop
 8015ef4:	2000d700 	.word	0x2000d700
 8015ef8:	20010ef4 	.word	0x20010ef4
 8015efc:	20010ed4 	.word	0x20010ed4

08015f00 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8015f00:	b580      	push	{r7, lr}
 8015f02:	b088      	sub	sp, #32
 8015f04:	af00      	add	r7, sp, #0
 8015f06:	60f8      	str	r0, [r7, #12]
 8015f08:	60b9      	str	r1, [r7, #8]
 8015f0a:	603b      	str	r3, [r7, #0]
 8015f0c:	4613      	mov	r3, r2
 8015f0e:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8015f10:	68fb      	ldr	r3, [r7, #12]
 8015f12:	2b00      	cmp	r3, #0
 8015f14:	d108      	bne.n	8015f28 <dhcp_create_msg+0x28>
 8015f16:	4b5f      	ldr	r3, [pc, #380]	@ (8016094 <dhcp_create_msg+0x194>)
 8015f18:	f240 7269 	movw	r2, #1897	@ 0x769
 8015f1c:	495e      	ldr	r1, [pc, #376]	@ (8016098 <dhcp_create_msg+0x198>)
 8015f1e:	485f      	ldr	r0, [pc, #380]	@ (801609c <dhcp_create_msg+0x19c>)
 8015f20:	f002 ff10 	bl	8018d44 <iprintf>
 8015f24:	2300      	movs	r3, #0
 8015f26:	e0b1      	b.n	801608c <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8015f28:	68bb      	ldr	r3, [r7, #8]
 8015f2a:	2b00      	cmp	r3, #0
 8015f2c:	d108      	bne.n	8015f40 <dhcp_create_msg+0x40>
 8015f2e:	4b59      	ldr	r3, [pc, #356]	@ (8016094 <dhcp_create_msg+0x194>)
 8015f30:	f240 726a 	movw	r2, #1898	@ 0x76a
 8015f34:	495a      	ldr	r1, [pc, #360]	@ (80160a0 <dhcp_create_msg+0x1a0>)
 8015f36:	4859      	ldr	r0, [pc, #356]	@ (801609c <dhcp_create_msg+0x19c>)
 8015f38:	f002 ff04 	bl	8018d44 <iprintf>
 8015f3c:	2300      	movs	r3, #0
 8015f3e:	e0a5      	b.n	801608c <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8015f40:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8015f44:	f44f 719a 	mov.w	r1, #308	@ 0x134
 8015f48:	2036      	movs	r0, #54	@ 0x36
 8015f4a:	f7f6 fcdd 	bl	800c908 <pbuf_alloc>
 8015f4e:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8015f50:	69bb      	ldr	r3, [r7, #24]
 8015f52:	2b00      	cmp	r3, #0
 8015f54:	d101      	bne.n	8015f5a <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8015f56:	2300      	movs	r3, #0
 8015f58:	e098      	b.n	801608c <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8015f5a:	69bb      	ldr	r3, [r7, #24]
 8015f5c:	895b      	ldrh	r3, [r3, #10]
 8015f5e:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 8015f62:	d206      	bcs.n	8015f72 <dhcp_create_msg+0x72>
 8015f64:	4b4b      	ldr	r3, [pc, #300]	@ (8016094 <dhcp_create_msg+0x194>)
 8015f66:	f240 7271 	movw	r2, #1905	@ 0x771
 8015f6a:	494e      	ldr	r1, [pc, #312]	@ (80160a4 <dhcp_create_msg+0x1a4>)
 8015f6c:	484b      	ldr	r0, [pc, #300]	@ (801609c <dhcp_create_msg+0x19c>)
 8015f6e:	f002 fee9 	bl	8018d44 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8015f72:	79fb      	ldrb	r3, [r7, #7]
 8015f74:	2b03      	cmp	r3, #3
 8015f76:	d103      	bne.n	8015f80 <dhcp_create_msg+0x80>
 8015f78:	68bb      	ldr	r3, [r7, #8]
 8015f7a:	795b      	ldrb	r3, [r3, #5]
 8015f7c:	2b03      	cmp	r3, #3
 8015f7e:	d10d      	bne.n	8015f9c <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8015f80:	68bb      	ldr	r3, [r7, #8]
 8015f82:	799b      	ldrb	r3, [r3, #6]
 8015f84:	2b00      	cmp	r3, #0
 8015f86:	d105      	bne.n	8015f94 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8015f88:	f002 fddc 	bl	8018b44 <rand>
 8015f8c:	4603      	mov	r3, r0
 8015f8e:	461a      	mov	r2, r3
 8015f90:	4b45      	ldr	r3, [pc, #276]	@ (80160a8 <dhcp_create_msg+0x1a8>)
 8015f92:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8015f94:	4b44      	ldr	r3, [pc, #272]	@ (80160a8 <dhcp_create_msg+0x1a8>)
 8015f96:	681a      	ldr	r2, [r3, #0]
 8015f98:	68bb      	ldr	r3, [r7, #8]
 8015f9a:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8015f9c:	69bb      	ldr	r3, [r7, #24]
 8015f9e:	685b      	ldr	r3, [r3, #4]
 8015fa0:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8015fa2:	f44f 729a 	mov.w	r2, #308	@ 0x134
 8015fa6:	2100      	movs	r1, #0
 8015fa8:	6978      	ldr	r0, [r7, #20]
 8015faa:	f002 ff6a 	bl	8018e82 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8015fae:	697b      	ldr	r3, [r7, #20]
 8015fb0:	2201      	movs	r2, #1
 8015fb2:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8015fb4:	697b      	ldr	r3, [r7, #20]
 8015fb6:	2201      	movs	r2, #1
 8015fb8:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8015fba:	68fb      	ldr	r3, [r7, #12]
 8015fbc:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8015fc0:	697b      	ldr	r3, [r7, #20]
 8015fc2:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8015fc4:	68bb      	ldr	r3, [r7, #8]
 8015fc6:	681b      	ldr	r3, [r3, #0]
 8015fc8:	4618      	mov	r0, r3
 8015fca:	f7f5 fb62 	bl	800b692 <lwip_htonl>
 8015fce:	4602      	mov	r2, r0
 8015fd0:	697b      	ldr	r3, [r7, #20]
 8015fd2:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8015fd4:	79fb      	ldrb	r3, [r7, #7]
 8015fd6:	2b08      	cmp	r3, #8
 8015fd8:	d010      	beq.n	8015ffc <dhcp_create_msg+0xfc>
 8015fda:	79fb      	ldrb	r3, [r7, #7]
 8015fdc:	2b04      	cmp	r3, #4
 8015fde:	d00d      	beq.n	8015ffc <dhcp_create_msg+0xfc>
 8015fe0:	79fb      	ldrb	r3, [r7, #7]
 8015fe2:	2b07      	cmp	r3, #7
 8015fe4:	d00a      	beq.n	8015ffc <dhcp_create_msg+0xfc>
 8015fe6:	79fb      	ldrb	r3, [r7, #7]
 8015fe8:	2b03      	cmp	r3, #3
 8015fea:	d10c      	bne.n	8016006 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8015fec:	68bb      	ldr	r3, [r7, #8]
 8015fee:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8015ff0:	2b05      	cmp	r3, #5
 8015ff2:	d003      	beq.n	8015ffc <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8015ff4:	68bb      	ldr	r3, [r7, #8]
 8015ff6:	795b      	ldrb	r3, [r3, #5]
 8015ff8:	2b04      	cmp	r3, #4
 8015ffa:	d104      	bne.n	8016006 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8015ffc:	68fb      	ldr	r3, [r7, #12]
 8015ffe:	3304      	adds	r3, #4
 8016000:	681a      	ldr	r2, [r3, #0]
 8016002:	697b      	ldr	r3, [r7, #20]
 8016004:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8016006:	2300      	movs	r3, #0
 8016008:	83fb      	strh	r3, [r7, #30]
 801600a:	e00c      	b.n	8016026 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 801600c:	8bfa      	ldrh	r2, [r7, #30]
 801600e:	8bfb      	ldrh	r3, [r7, #30]
 8016010:	68f9      	ldr	r1, [r7, #12]
 8016012:	440a      	add	r2, r1
 8016014:	f892 102a 	ldrb.w	r1, [r2, #42]	@ 0x2a
 8016018:	697a      	ldr	r2, [r7, #20]
 801601a:	4413      	add	r3, r2
 801601c:	460a      	mov	r2, r1
 801601e:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8016020:	8bfb      	ldrh	r3, [r7, #30]
 8016022:	3301      	adds	r3, #1
 8016024:	83fb      	strh	r3, [r7, #30]
 8016026:	8bfb      	ldrh	r3, [r7, #30]
 8016028:	2b05      	cmp	r3, #5
 801602a:	d9ef      	bls.n	801600c <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801602c:	697b      	ldr	r3, [r7, #20]
 801602e:	2200      	movs	r2, #0
 8016030:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 8016034:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 8016038:	2200      	movs	r2, #0
 801603a:	f062 027d 	orn	r2, r2, #125	@ 0x7d
 801603e:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8016042:	2200      	movs	r2, #0
 8016044:	f042 0253 	orr.w	r2, r2, #83	@ 0x53
 8016048:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
 801604c:	2200      	movs	r2, #0
 801604e:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 8016052:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8016056:	697b      	ldr	r3, [r7, #20]
 8016058:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801605c:	2301      	movs	r3, #1
 801605e:	2235      	movs	r2, #53	@ 0x35
 8016060:	2000      	movs	r0, #0
 8016062:	f7ff fadb 	bl	801561c <dhcp_option>
 8016066:	4603      	mov	r3, r0
 8016068:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 801606a:	697b      	ldr	r3, [r7, #20]
 801606c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8016070:	79fa      	ldrb	r2, [r7, #7]
 8016072:	8a7b      	ldrh	r3, [r7, #18]
 8016074:	4618      	mov	r0, r3
 8016076:	f7ff fb05 	bl	8015684 <dhcp_option_byte>
 801607a:	4603      	mov	r3, r0
 801607c:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 801607e:	683b      	ldr	r3, [r7, #0]
 8016080:	2b00      	cmp	r3, #0
 8016082:	d002      	beq.n	801608a <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8016084:	683b      	ldr	r3, [r7, #0]
 8016086:	8a7a      	ldrh	r2, [r7, #18]
 8016088:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 801608a:	69bb      	ldr	r3, [r7, #24]
}
 801608c:	4618      	mov	r0, r3
 801608e:	3720      	adds	r7, #32
 8016090:	46bd      	mov	sp, r7
 8016092:	bd80      	pop	{r7, pc}
 8016094:	0801d2c8 	.word	0x0801d2c8
 8016098:	0801d5e8 	.word	0x0801d5e8
 801609c:	0801d328 	.word	0x0801d328
 80160a0:	0801d608 	.word	0x0801d608
 80160a4:	0801d628 	.word	0x0801d628
 80160a8:	20010f04 	.word	0x20010f04

080160ac <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 80160ac:	b580      	push	{r7, lr}
 80160ae:	b084      	sub	sp, #16
 80160b0:	af00      	add	r7, sp, #0
 80160b2:	4603      	mov	r3, r0
 80160b4:	60b9      	str	r1, [r7, #8]
 80160b6:	607a      	str	r2, [r7, #4]
 80160b8:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 80160ba:	89fb      	ldrh	r3, [r7, #14]
 80160bc:	1c5a      	adds	r2, r3, #1
 80160be:	81fa      	strh	r2, [r7, #14]
 80160c0:	461a      	mov	r2, r3
 80160c2:	68bb      	ldr	r3, [r7, #8]
 80160c4:	4413      	add	r3, r2
 80160c6:	22ff      	movs	r2, #255	@ 0xff
 80160c8:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80160ca:	e007      	b.n	80160dc <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 80160cc:	89fb      	ldrh	r3, [r7, #14]
 80160ce:	1c5a      	adds	r2, r3, #1
 80160d0:	81fa      	strh	r2, [r7, #14]
 80160d2:	461a      	mov	r2, r3
 80160d4:	68bb      	ldr	r3, [r7, #8]
 80160d6:	4413      	add	r3, r2
 80160d8:	2200      	movs	r2, #0
 80160da:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80160dc:	89fb      	ldrh	r3, [r7, #14]
 80160de:	2b43      	cmp	r3, #67	@ 0x43
 80160e0:	d904      	bls.n	80160ec <dhcp_option_trailer+0x40>
 80160e2:	89fb      	ldrh	r3, [r7, #14]
 80160e4:	f003 0303 	and.w	r3, r3, #3
 80160e8:	2b00      	cmp	r3, #0
 80160ea:	d002      	beq.n	80160f2 <dhcp_option_trailer+0x46>
 80160ec:	89fb      	ldrh	r3, [r7, #14]
 80160ee:	2b43      	cmp	r3, #67	@ 0x43
 80160f0:	d9ec      	bls.n	80160cc <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 80160f2:	89fb      	ldrh	r3, [r7, #14]
 80160f4:	33f0      	adds	r3, #240	@ 0xf0
 80160f6:	b29b      	uxth	r3, r3
 80160f8:	4619      	mov	r1, r3
 80160fa:	6878      	ldr	r0, [r7, #4]
 80160fc:	f7f6 fd62 	bl	800cbc4 <pbuf_realloc>
}
 8016100:	bf00      	nop
 8016102:	3710      	adds	r7, #16
 8016104:	46bd      	mov	sp, r7
 8016106:	bd80      	pop	{r7, pc}

08016108 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8016108:	b480      	push	{r7}
 801610a:	b085      	sub	sp, #20
 801610c:	af00      	add	r7, sp, #0
 801610e:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8016110:	687b      	ldr	r3, [r7, #4]
 8016112:	2b00      	cmp	r3, #0
 8016114:	d017      	beq.n	8016146 <dhcp_supplied_address+0x3e>
 8016116:	687b      	ldr	r3, [r7, #4]
 8016118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801611a:	2b00      	cmp	r3, #0
 801611c:	d013      	beq.n	8016146 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801611e:	687b      	ldr	r3, [r7, #4]
 8016120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016122:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8016124:	68fb      	ldr	r3, [r7, #12]
 8016126:	795b      	ldrb	r3, [r3, #5]
 8016128:	2b0a      	cmp	r3, #10
 801612a:	d007      	beq.n	801613c <dhcp_supplied_address+0x34>
 801612c:	68fb      	ldr	r3, [r7, #12]
 801612e:	795b      	ldrb	r3, [r3, #5]
 8016130:	2b05      	cmp	r3, #5
 8016132:	d003      	beq.n	801613c <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8016134:	68fb      	ldr	r3, [r7, #12]
 8016136:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8016138:	2b04      	cmp	r3, #4
 801613a:	d101      	bne.n	8016140 <dhcp_supplied_address+0x38>
 801613c:	2301      	movs	r3, #1
 801613e:	e000      	b.n	8016142 <dhcp_supplied_address+0x3a>
 8016140:	2300      	movs	r3, #0
 8016142:	b2db      	uxtb	r3, r3
 8016144:	e000      	b.n	8016148 <dhcp_supplied_address+0x40>
  }
  return 0;
 8016146:	2300      	movs	r3, #0
}
 8016148:	4618      	mov	r0, r3
 801614a:	3714      	adds	r7, #20
 801614c:	46bd      	mov	sp, r7
 801614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016152:	4770      	bx	lr

08016154 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8016154:	b580      	push	{r7, lr}
 8016156:	b082      	sub	sp, #8
 8016158:	af00      	add	r7, sp, #0
 801615a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801615c:	4915      	ldr	r1, [pc, #84]	@ (80161b4 <etharp_free_entry+0x60>)
 801615e:	687a      	ldr	r2, [r7, #4]
 8016160:	4613      	mov	r3, r2
 8016162:	005b      	lsls	r3, r3, #1
 8016164:	4413      	add	r3, r2
 8016166:	00db      	lsls	r3, r3, #3
 8016168:	440b      	add	r3, r1
 801616a:	681b      	ldr	r3, [r3, #0]
 801616c:	2b00      	cmp	r3, #0
 801616e:	d013      	beq.n	8016198 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8016170:	4910      	ldr	r1, [pc, #64]	@ (80161b4 <etharp_free_entry+0x60>)
 8016172:	687a      	ldr	r2, [r7, #4]
 8016174:	4613      	mov	r3, r2
 8016176:	005b      	lsls	r3, r3, #1
 8016178:	4413      	add	r3, r2
 801617a:	00db      	lsls	r3, r3, #3
 801617c:	440b      	add	r3, r1
 801617e:	681b      	ldr	r3, [r3, #0]
 8016180:	4618      	mov	r0, r3
 8016182:	f7f6 fea5 	bl	800ced0 <pbuf_free>
    arp_table[i].q = NULL;
 8016186:	490b      	ldr	r1, [pc, #44]	@ (80161b4 <etharp_free_entry+0x60>)
 8016188:	687a      	ldr	r2, [r7, #4]
 801618a:	4613      	mov	r3, r2
 801618c:	005b      	lsls	r3, r3, #1
 801618e:	4413      	add	r3, r2
 8016190:	00db      	lsls	r3, r3, #3
 8016192:	440b      	add	r3, r1
 8016194:	2200      	movs	r2, #0
 8016196:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8016198:	4906      	ldr	r1, [pc, #24]	@ (80161b4 <etharp_free_entry+0x60>)
 801619a:	687a      	ldr	r2, [r7, #4]
 801619c:	4613      	mov	r3, r2
 801619e:	005b      	lsls	r3, r3, #1
 80161a0:	4413      	add	r3, r2
 80161a2:	00db      	lsls	r3, r3, #3
 80161a4:	440b      	add	r3, r1
 80161a6:	3314      	adds	r3, #20
 80161a8:	2200      	movs	r2, #0
 80161aa:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80161ac:	bf00      	nop
 80161ae:	3708      	adds	r7, #8
 80161b0:	46bd      	mov	sp, r7
 80161b2:	bd80      	pop	{r7, pc}
 80161b4:	20010f08 	.word	0x20010f08

080161b8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80161b8:	b580      	push	{r7, lr}
 80161ba:	b082      	sub	sp, #8
 80161bc:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80161be:	2300      	movs	r3, #0
 80161c0:	607b      	str	r3, [r7, #4]
 80161c2:	e096      	b.n	80162f2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80161c4:	494f      	ldr	r1, [pc, #316]	@ (8016304 <etharp_tmr+0x14c>)
 80161c6:	687a      	ldr	r2, [r7, #4]
 80161c8:	4613      	mov	r3, r2
 80161ca:	005b      	lsls	r3, r3, #1
 80161cc:	4413      	add	r3, r2
 80161ce:	00db      	lsls	r3, r3, #3
 80161d0:	440b      	add	r3, r1
 80161d2:	3314      	adds	r3, #20
 80161d4:	781b      	ldrb	r3, [r3, #0]
 80161d6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80161d8:	78fb      	ldrb	r3, [r7, #3]
 80161da:	2b00      	cmp	r3, #0
 80161dc:	f000 8086 	beq.w	80162ec <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80161e0:	4948      	ldr	r1, [pc, #288]	@ (8016304 <etharp_tmr+0x14c>)
 80161e2:	687a      	ldr	r2, [r7, #4]
 80161e4:	4613      	mov	r3, r2
 80161e6:	005b      	lsls	r3, r3, #1
 80161e8:	4413      	add	r3, r2
 80161ea:	00db      	lsls	r3, r3, #3
 80161ec:	440b      	add	r3, r1
 80161ee:	3312      	adds	r3, #18
 80161f0:	881b      	ldrh	r3, [r3, #0]
 80161f2:	3301      	adds	r3, #1
 80161f4:	b298      	uxth	r0, r3
 80161f6:	4943      	ldr	r1, [pc, #268]	@ (8016304 <etharp_tmr+0x14c>)
 80161f8:	687a      	ldr	r2, [r7, #4]
 80161fa:	4613      	mov	r3, r2
 80161fc:	005b      	lsls	r3, r3, #1
 80161fe:	4413      	add	r3, r2
 8016200:	00db      	lsls	r3, r3, #3
 8016202:	440b      	add	r3, r1
 8016204:	3312      	adds	r3, #18
 8016206:	4602      	mov	r2, r0
 8016208:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801620a:	493e      	ldr	r1, [pc, #248]	@ (8016304 <etharp_tmr+0x14c>)
 801620c:	687a      	ldr	r2, [r7, #4]
 801620e:	4613      	mov	r3, r2
 8016210:	005b      	lsls	r3, r3, #1
 8016212:	4413      	add	r3, r2
 8016214:	00db      	lsls	r3, r3, #3
 8016216:	440b      	add	r3, r1
 8016218:	3312      	adds	r3, #18
 801621a:	881b      	ldrh	r3, [r3, #0]
 801621c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8016220:	d215      	bcs.n	801624e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016222:	4938      	ldr	r1, [pc, #224]	@ (8016304 <etharp_tmr+0x14c>)
 8016224:	687a      	ldr	r2, [r7, #4]
 8016226:	4613      	mov	r3, r2
 8016228:	005b      	lsls	r3, r3, #1
 801622a:	4413      	add	r3, r2
 801622c:	00db      	lsls	r3, r3, #3
 801622e:	440b      	add	r3, r1
 8016230:	3314      	adds	r3, #20
 8016232:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016234:	2b01      	cmp	r3, #1
 8016236:	d10e      	bne.n	8016256 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8016238:	4932      	ldr	r1, [pc, #200]	@ (8016304 <etharp_tmr+0x14c>)
 801623a:	687a      	ldr	r2, [r7, #4]
 801623c:	4613      	mov	r3, r2
 801623e:	005b      	lsls	r3, r3, #1
 8016240:	4413      	add	r3, r2
 8016242:	00db      	lsls	r3, r3, #3
 8016244:	440b      	add	r3, r1
 8016246:	3312      	adds	r3, #18
 8016248:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801624a:	2b04      	cmp	r3, #4
 801624c:	d903      	bls.n	8016256 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801624e:	6878      	ldr	r0, [r7, #4]
 8016250:	f7ff ff80 	bl	8016154 <etharp_free_entry>
 8016254:	e04a      	b.n	80162ec <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8016256:	492b      	ldr	r1, [pc, #172]	@ (8016304 <etharp_tmr+0x14c>)
 8016258:	687a      	ldr	r2, [r7, #4]
 801625a:	4613      	mov	r3, r2
 801625c:	005b      	lsls	r3, r3, #1
 801625e:	4413      	add	r3, r2
 8016260:	00db      	lsls	r3, r3, #3
 8016262:	440b      	add	r3, r1
 8016264:	3314      	adds	r3, #20
 8016266:	781b      	ldrb	r3, [r3, #0]
 8016268:	2b03      	cmp	r3, #3
 801626a:	d10a      	bne.n	8016282 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801626c:	4925      	ldr	r1, [pc, #148]	@ (8016304 <etharp_tmr+0x14c>)
 801626e:	687a      	ldr	r2, [r7, #4]
 8016270:	4613      	mov	r3, r2
 8016272:	005b      	lsls	r3, r3, #1
 8016274:	4413      	add	r3, r2
 8016276:	00db      	lsls	r3, r3, #3
 8016278:	440b      	add	r3, r1
 801627a:	3314      	adds	r3, #20
 801627c:	2204      	movs	r2, #4
 801627e:	701a      	strb	r2, [r3, #0]
 8016280:	e034      	b.n	80162ec <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8016282:	4920      	ldr	r1, [pc, #128]	@ (8016304 <etharp_tmr+0x14c>)
 8016284:	687a      	ldr	r2, [r7, #4]
 8016286:	4613      	mov	r3, r2
 8016288:	005b      	lsls	r3, r3, #1
 801628a:	4413      	add	r3, r2
 801628c:	00db      	lsls	r3, r3, #3
 801628e:	440b      	add	r3, r1
 8016290:	3314      	adds	r3, #20
 8016292:	781b      	ldrb	r3, [r3, #0]
 8016294:	2b04      	cmp	r3, #4
 8016296:	d10a      	bne.n	80162ae <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8016298:	491a      	ldr	r1, [pc, #104]	@ (8016304 <etharp_tmr+0x14c>)
 801629a:	687a      	ldr	r2, [r7, #4]
 801629c:	4613      	mov	r3, r2
 801629e:	005b      	lsls	r3, r3, #1
 80162a0:	4413      	add	r3, r2
 80162a2:	00db      	lsls	r3, r3, #3
 80162a4:	440b      	add	r3, r1
 80162a6:	3314      	adds	r3, #20
 80162a8:	2202      	movs	r2, #2
 80162aa:	701a      	strb	r2, [r3, #0]
 80162ac:	e01e      	b.n	80162ec <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80162ae:	4915      	ldr	r1, [pc, #84]	@ (8016304 <etharp_tmr+0x14c>)
 80162b0:	687a      	ldr	r2, [r7, #4]
 80162b2:	4613      	mov	r3, r2
 80162b4:	005b      	lsls	r3, r3, #1
 80162b6:	4413      	add	r3, r2
 80162b8:	00db      	lsls	r3, r3, #3
 80162ba:	440b      	add	r3, r1
 80162bc:	3314      	adds	r3, #20
 80162be:	781b      	ldrb	r3, [r3, #0]
 80162c0:	2b01      	cmp	r3, #1
 80162c2:	d113      	bne.n	80162ec <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80162c4:	490f      	ldr	r1, [pc, #60]	@ (8016304 <etharp_tmr+0x14c>)
 80162c6:	687a      	ldr	r2, [r7, #4]
 80162c8:	4613      	mov	r3, r2
 80162ca:	005b      	lsls	r3, r3, #1
 80162cc:	4413      	add	r3, r2
 80162ce:	00db      	lsls	r3, r3, #3
 80162d0:	440b      	add	r3, r1
 80162d2:	3308      	adds	r3, #8
 80162d4:	6818      	ldr	r0, [r3, #0]
 80162d6:	687a      	ldr	r2, [r7, #4]
 80162d8:	4613      	mov	r3, r2
 80162da:	005b      	lsls	r3, r3, #1
 80162dc:	4413      	add	r3, r2
 80162de:	00db      	lsls	r3, r3, #3
 80162e0:	4a08      	ldr	r2, [pc, #32]	@ (8016304 <etharp_tmr+0x14c>)
 80162e2:	4413      	add	r3, r2
 80162e4:	3304      	adds	r3, #4
 80162e6:	4619      	mov	r1, r3
 80162e8:	f000 fe72 	bl	8016fd0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80162ec:	687b      	ldr	r3, [r7, #4]
 80162ee:	3301      	adds	r3, #1
 80162f0:	607b      	str	r3, [r7, #4]
 80162f2:	687b      	ldr	r3, [r7, #4]
 80162f4:	2b09      	cmp	r3, #9
 80162f6:	f77f af65 	ble.w	80161c4 <etharp_tmr+0xc>
      }
    }
  }
}
 80162fa:	bf00      	nop
 80162fc:	bf00      	nop
 80162fe:	3708      	adds	r7, #8
 8016300:	46bd      	mov	sp, r7
 8016302:	bd80      	pop	{r7, pc}
 8016304:	20010f08 	.word	0x20010f08

08016308 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8016308:	b580      	push	{r7, lr}
 801630a:	b08a      	sub	sp, #40	@ 0x28
 801630c:	af00      	add	r7, sp, #0
 801630e:	60f8      	str	r0, [r7, #12]
 8016310:	460b      	mov	r3, r1
 8016312:	607a      	str	r2, [r7, #4]
 8016314:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8016316:	230a      	movs	r3, #10
 8016318:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801631a:	230a      	movs	r3, #10
 801631c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801631e:	230a      	movs	r3, #10
 8016320:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 8016322:	2300      	movs	r3, #0
 8016324:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8016326:	230a      	movs	r3, #10
 8016328:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801632a:	2300      	movs	r3, #0
 801632c:	83bb      	strh	r3, [r7, #28]
 801632e:	2300      	movs	r3, #0
 8016330:	837b      	strh	r3, [r7, #26]
 8016332:	2300      	movs	r3, #0
 8016334:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016336:	2300      	movs	r3, #0
 8016338:	843b      	strh	r3, [r7, #32]
 801633a:	e0ae      	b.n	801649a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801633c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016340:	49a6      	ldr	r1, [pc, #664]	@ (80165dc <etharp_find_entry+0x2d4>)
 8016342:	4613      	mov	r3, r2
 8016344:	005b      	lsls	r3, r3, #1
 8016346:	4413      	add	r3, r2
 8016348:	00db      	lsls	r3, r3, #3
 801634a:	440b      	add	r3, r1
 801634c:	3314      	adds	r3, #20
 801634e:	781b      	ldrb	r3, [r3, #0]
 8016350:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8016352:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8016356:	2b0a      	cmp	r3, #10
 8016358:	d105      	bne.n	8016366 <etharp_find_entry+0x5e>
 801635a:	7dfb      	ldrb	r3, [r7, #23]
 801635c:	2b00      	cmp	r3, #0
 801635e:	d102      	bne.n	8016366 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8016360:	8c3b      	ldrh	r3, [r7, #32]
 8016362:	847b      	strh	r3, [r7, #34]	@ 0x22
 8016364:	e095      	b.n	8016492 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8016366:	7dfb      	ldrb	r3, [r7, #23]
 8016368:	2b00      	cmp	r3, #0
 801636a:	f000 8092 	beq.w	8016492 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801636e:	7dfb      	ldrb	r3, [r7, #23]
 8016370:	2b01      	cmp	r3, #1
 8016372:	d009      	beq.n	8016388 <etharp_find_entry+0x80>
 8016374:	7dfb      	ldrb	r3, [r7, #23]
 8016376:	2b01      	cmp	r3, #1
 8016378:	d806      	bhi.n	8016388 <etharp_find_entry+0x80>
 801637a:	4b99      	ldr	r3, [pc, #612]	@ (80165e0 <etharp_find_entry+0x2d8>)
 801637c:	f240 1223 	movw	r2, #291	@ 0x123
 8016380:	4998      	ldr	r1, [pc, #608]	@ (80165e4 <etharp_find_entry+0x2dc>)
 8016382:	4899      	ldr	r0, [pc, #612]	@ (80165e8 <etharp_find_entry+0x2e0>)
 8016384:	f002 fcde 	bl	8018d44 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8016388:	68fb      	ldr	r3, [r7, #12]
 801638a:	2b00      	cmp	r3, #0
 801638c:	d020      	beq.n	80163d0 <etharp_find_entry+0xc8>
 801638e:	68fb      	ldr	r3, [r7, #12]
 8016390:	6819      	ldr	r1, [r3, #0]
 8016392:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016396:	4891      	ldr	r0, [pc, #580]	@ (80165dc <etharp_find_entry+0x2d4>)
 8016398:	4613      	mov	r3, r2
 801639a:	005b      	lsls	r3, r3, #1
 801639c:	4413      	add	r3, r2
 801639e:	00db      	lsls	r3, r3, #3
 80163a0:	4403      	add	r3, r0
 80163a2:	3304      	adds	r3, #4
 80163a4:	681b      	ldr	r3, [r3, #0]
 80163a6:	4299      	cmp	r1, r3
 80163a8:	d112      	bne.n	80163d0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80163aa:	687b      	ldr	r3, [r7, #4]
 80163ac:	2b00      	cmp	r3, #0
 80163ae:	d00c      	beq.n	80163ca <etharp_find_entry+0xc2>
 80163b0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80163b4:	4989      	ldr	r1, [pc, #548]	@ (80165dc <etharp_find_entry+0x2d4>)
 80163b6:	4613      	mov	r3, r2
 80163b8:	005b      	lsls	r3, r3, #1
 80163ba:	4413      	add	r3, r2
 80163bc:	00db      	lsls	r3, r3, #3
 80163be:	440b      	add	r3, r1
 80163c0:	3308      	adds	r3, #8
 80163c2:	681b      	ldr	r3, [r3, #0]
 80163c4:	687a      	ldr	r2, [r7, #4]
 80163c6:	429a      	cmp	r2, r3
 80163c8:	d102      	bne.n	80163d0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80163ca:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80163ce:	e100      	b.n	80165d2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80163d0:	7dfb      	ldrb	r3, [r7, #23]
 80163d2:	2b01      	cmp	r3, #1
 80163d4:	d140      	bne.n	8016458 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80163d6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80163da:	4980      	ldr	r1, [pc, #512]	@ (80165dc <etharp_find_entry+0x2d4>)
 80163dc:	4613      	mov	r3, r2
 80163de:	005b      	lsls	r3, r3, #1
 80163e0:	4413      	add	r3, r2
 80163e2:	00db      	lsls	r3, r3, #3
 80163e4:	440b      	add	r3, r1
 80163e6:	681b      	ldr	r3, [r3, #0]
 80163e8:	2b00      	cmp	r3, #0
 80163ea:	d01a      	beq.n	8016422 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80163ec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80163f0:	497a      	ldr	r1, [pc, #488]	@ (80165dc <etharp_find_entry+0x2d4>)
 80163f2:	4613      	mov	r3, r2
 80163f4:	005b      	lsls	r3, r3, #1
 80163f6:	4413      	add	r3, r2
 80163f8:	00db      	lsls	r3, r3, #3
 80163fa:	440b      	add	r3, r1
 80163fc:	3312      	adds	r3, #18
 80163fe:	881b      	ldrh	r3, [r3, #0]
 8016400:	8bba      	ldrh	r2, [r7, #28]
 8016402:	429a      	cmp	r2, r3
 8016404:	d845      	bhi.n	8016492 <etharp_find_entry+0x18a>
            old_queue = i;
 8016406:	8c3b      	ldrh	r3, [r7, #32]
 8016408:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801640a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801640e:	4973      	ldr	r1, [pc, #460]	@ (80165dc <etharp_find_entry+0x2d4>)
 8016410:	4613      	mov	r3, r2
 8016412:	005b      	lsls	r3, r3, #1
 8016414:	4413      	add	r3, r2
 8016416:	00db      	lsls	r3, r3, #3
 8016418:	440b      	add	r3, r1
 801641a:	3312      	adds	r3, #18
 801641c:	881b      	ldrh	r3, [r3, #0]
 801641e:	83bb      	strh	r3, [r7, #28]
 8016420:	e037      	b.n	8016492 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8016422:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016426:	496d      	ldr	r1, [pc, #436]	@ (80165dc <etharp_find_entry+0x2d4>)
 8016428:	4613      	mov	r3, r2
 801642a:	005b      	lsls	r3, r3, #1
 801642c:	4413      	add	r3, r2
 801642e:	00db      	lsls	r3, r3, #3
 8016430:	440b      	add	r3, r1
 8016432:	3312      	adds	r3, #18
 8016434:	881b      	ldrh	r3, [r3, #0]
 8016436:	8b7a      	ldrh	r2, [r7, #26]
 8016438:	429a      	cmp	r2, r3
 801643a:	d82a      	bhi.n	8016492 <etharp_find_entry+0x18a>
            old_pending = i;
 801643c:	8c3b      	ldrh	r3, [r7, #32]
 801643e:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8016440:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016444:	4965      	ldr	r1, [pc, #404]	@ (80165dc <etharp_find_entry+0x2d4>)
 8016446:	4613      	mov	r3, r2
 8016448:	005b      	lsls	r3, r3, #1
 801644a:	4413      	add	r3, r2
 801644c:	00db      	lsls	r3, r3, #3
 801644e:	440b      	add	r3, r1
 8016450:	3312      	adds	r3, #18
 8016452:	881b      	ldrh	r3, [r3, #0]
 8016454:	837b      	strh	r3, [r7, #26]
 8016456:	e01c      	b.n	8016492 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8016458:	7dfb      	ldrb	r3, [r7, #23]
 801645a:	2b01      	cmp	r3, #1
 801645c:	d919      	bls.n	8016492 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801645e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016462:	495e      	ldr	r1, [pc, #376]	@ (80165dc <etharp_find_entry+0x2d4>)
 8016464:	4613      	mov	r3, r2
 8016466:	005b      	lsls	r3, r3, #1
 8016468:	4413      	add	r3, r2
 801646a:	00db      	lsls	r3, r3, #3
 801646c:	440b      	add	r3, r1
 801646e:	3312      	adds	r3, #18
 8016470:	881b      	ldrh	r3, [r3, #0]
 8016472:	8b3a      	ldrh	r2, [r7, #24]
 8016474:	429a      	cmp	r2, r3
 8016476:	d80c      	bhi.n	8016492 <etharp_find_entry+0x18a>
            old_stable = i;
 8016478:	8c3b      	ldrh	r3, [r7, #32]
 801647a:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 801647c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016480:	4956      	ldr	r1, [pc, #344]	@ (80165dc <etharp_find_entry+0x2d4>)
 8016482:	4613      	mov	r3, r2
 8016484:	005b      	lsls	r3, r3, #1
 8016486:	4413      	add	r3, r2
 8016488:	00db      	lsls	r3, r3, #3
 801648a:	440b      	add	r3, r1
 801648c:	3312      	adds	r3, #18
 801648e:	881b      	ldrh	r3, [r3, #0]
 8016490:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016492:	8c3b      	ldrh	r3, [r7, #32]
 8016494:	3301      	adds	r3, #1
 8016496:	b29b      	uxth	r3, r3
 8016498:	843b      	strh	r3, [r7, #32]
 801649a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801649e:	2b09      	cmp	r3, #9
 80164a0:	f77f af4c 	ble.w	801633c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80164a4:	7afb      	ldrb	r3, [r7, #11]
 80164a6:	f003 0302 	and.w	r3, r3, #2
 80164aa:	2b00      	cmp	r3, #0
 80164ac:	d108      	bne.n	80164c0 <etharp_find_entry+0x1b8>
 80164ae:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80164b2:	2b0a      	cmp	r3, #10
 80164b4:	d107      	bne.n	80164c6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80164b6:	7afb      	ldrb	r3, [r7, #11]
 80164b8:	f003 0301 	and.w	r3, r3, #1
 80164bc:	2b00      	cmp	r3, #0
 80164be:	d102      	bne.n	80164c6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80164c0:	f04f 33ff 	mov.w	r3, #4294967295
 80164c4:	e085      	b.n	80165d2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80164c6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80164ca:	2b09      	cmp	r3, #9
 80164cc:	dc02      	bgt.n	80164d4 <etharp_find_entry+0x1cc>
    i = empty;
 80164ce:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80164d0:	843b      	strh	r3, [r7, #32]
 80164d2:	e039      	b.n	8016548 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80164d4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80164d8:	2b09      	cmp	r3, #9
 80164da:	dc14      	bgt.n	8016506 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80164dc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80164de:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80164e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80164e4:	493d      	ldr	r1, [pc, #244]	@ (80165dc <etharp_find_entry+0x2d4>)
 80164e6:	4613      	mov	r3, r2
 80164e8:	005b      	lsls	r3, r3, #1
 80164ea:	4413      	add	r3, r2
 80164ec:	00db      	lsls	r3, r3, #3
 80164ee:	440b      	add	r3, r1
 80164f0:	681b      	ldr	r3, [r3, #0]
 80164f2:	2b00      	cmp	r3, #0
 80164f4:	d018      	beq.n	8016528 <etharp_find_entry+0x220>
 80164f6:	4b3a      	ldr	r3, [pc, #232]	@ (80165e0 <etharp_find_entry+0x2d8>)
 80164f8:	f240 126d 	movw	r2, #365	@ 0x16d
 80164fc:	493b      	ldr	r1, [pc, #236]	@ (80165ec <etharp_find_entry+0x2e4>)
 80164fe:	483a      	ldr	r0, [pc, #232]	@ (80165e8 <etharp_find_entry+0x2e0>)
 8016500:	f002 fc20 	bl	8018d44 <iprintf>
 8016504:	e010      	b.n	8016528 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8016506:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801650a:	2b09      	cmp	r3, #9
 801650c:	dc02      	bgt.n	8016514 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801650e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8016510:	843b      	strh	r3, [r7, #32]
 8016512:	e009      	b.n	8016528 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8016514:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8016518:	2b09      	cmp	r3, #9
 801651a:	dc02      	bgt.n	8016522 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801651c:	8bfb      	ldrh	r3, [r7, #30]
 801651e:	843b      	strh	r3, [r7, #32]
 8016520:	e002      	b.n	8016528 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8016522:	f04f 33ff 	mov.w	r3, #4294967295
 8016526:	e054      	b.n	80165d2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016528:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801652c:	2b09      	cmp	r3, #9
 801652e:	dd06      	ble.n	801653e <etharp_find_entry+0x236>
 8016530:	4b2b      	ldr	r3, [pc, #172]	@ (80165e0 <etharp_find_entry+0x2d8>)
 8016532:	f240 127f 	movw	r2, #383	@ 0x17f
 8016536:	492e      	ldr	r1, [pc, #184]	@ (80165f0 <etharp_find_entry+0x2e8>)
 8016538:	482b      	ldr	r0, [pc, #172]	@ (80165e8 <etharp_find_entry+0x2e0>)
 801653a:	f002 fc03 	bl	8018d44 <iprintf>
    etharp_free_entry(i);
 801653e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016542:	4618      	mov	r0, r3
 8016544:	f7ff fe06 	bl	8016154 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016548:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801654c:	2b09      	cmp	r3, #9
 801654e:	dd06      	ble.n	801655e <etharp_find_entry+0x256>
 8016550:	4b23      	ldr	r3, [pc, #140]	@ (80165e0 <etharp_find_entry+0x2d8>)
 8016552:	f240 1283 	movw	r2, #387	@ 0x183
 8016556:	4926      	ldr	r1, [pc, #152]	@ (80165f0 <etharp_find_entry+0x2e8>)
 8016558:	4823      	ldr	r0, [pc, #140]	@ (80165e8 <etharp_find_entry+0x2e0>)
 801655a:	f002 fbf3 	bl	8018d44 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801655e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016562:	491e      	ldr	r1, [pc, #120]	@ (80165dc <etharp_find_entry+0x2d4>)
 8016564:	4613      	mov	r3, r2
 8016566:	005b      	lsls	r3, r3, #1
 8016568:	4413      	add	r3, r2
 801656a:	00db      	lsls	r3, r3, #3
 801656c:	440b      	add	r3, r1
 801656e:	3314      	adds	r3, #20
 8016570:	781b      	ldrb	r3, [r3, #0]
 8016572:	2b00      	cmp	r3, #0
 8016574:	d006      	beq.n	8016584 <etharp_find_entry+0x27c>
 8016576:	4b1a      	ldr	r3, [pc, #104]	@ (80165e0 <etharp_find_entry+0x2d8>)
 8016578:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 801657c:	491d      	ldr	r1, [pc, #116]	@ (80165f4 <etharp_find_entry+0x2ec>)
 801657e:	481a      	ldr	r0, [pc, #104]	@ (80165e8 <etharp_find_entry+0x2e0>)
 8016580:	f002 fbe0 	bl	8018d44 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8016584:	68fb      	ldr	r3, [r7, #12]
 8016586:	2b00      	cmp	r3, #0
 8016588:	d00b      	beq.n	80165a2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801658a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801658e:	68fb      	ldr	r3, [r7, #12]
 8016590:	6819      	ldr	r1, [r3, #0]
 8016592:	4812      	ldr	r0, [pc, #72]	@ (80165dc <etharp_find_entry+0x2d4>)
 8016594:	4613      	mov	r3, r2
 8016596:	005b      	lsls	r3, r3, #1
 8016598:	4413      	add	r3, r2
 801659a:	00db      	lsls	r3, r3, #3
 801659c:	4403      	add	r3, r0
 801659e:	3304      	adds	r3, #4
 80165a0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80165a2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80165a6:	490d      	ldr	r1, [pc, #52]	@ (80165dc <etharp_find_entry+0x2d4>)
 80165a8:	4613      	mov	r3, r2
 80165aa:	005b      	lsls	r3, r3, #1
 80165ac:	4413      	add	r3, r2
 80165ae:	00db      	lsls	r3, r3, #3
 80165b0:	440b      	add	r3, r1
 80165b2:	3312      	adds	r3, #18
 80165b4:	2200      	movs	r2, #0
 80165b6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80165b8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80165bc:	4907      	ldr	r1, [pc, #28]	@ (80165dc <etharp_find_entry+0x2d4>)
 80165be:	4613      	mov	r3, r2
 80165c0:	005b      	lsls	r3, r3, #1
 80165c2:	4413      	add	r3, r2
 80165c4:	00db      	lsls	r3, r3, #3
 80165c6:	440b      	add	r3, r1
 80165c8:	3308      	adds	r3, #8
 80165ca:	687a      	ldr	r2, [r7, #4]
 80165cc:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80165ce:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80165d2:	4618      	mov	r0, r3
 80165d4:	3728      	adds	r7, #40	@ 0x28
 80165d6:	46bd      	mov	sp, r7
 80165d8:	bd80      	pop	{r7, pc}
 80165da:	bf00      	nop
 80165dc:	20010f08 	.word	0x20010f08
 80165e0:	0801d668 	.word	0x0801d668
 80165e4:	0801d6a0 	.word	0x0801d6a0
 80165e8:	0801d6e0 	.word	0x0801d6e0
 80165ec:	0801d708 	.word	0x0801d708
 80165f0:	0801d720 	.word	0x0801d720
 80165f4:	0801d734 	.word	0x0801d734

080165f8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80165f8:	b580      	push	{r7, lr}
 80165fa:	b088      	sub	sp, #32
 80165fc:	af02      	add	r7, sp, #8
 80165fe:	60f8      	str	r0, [r7, #12]
 8016600:	60b9      	str	r1, [r7, #8]
 8016602:	607a      	str	r2, [r7, #4]
 8016604:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8016606:	68fb      	ldr	r3, [r7, #12]
 8016608:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801660c:	2b06      	cmp	r3, #6
 801660e:	d006      	beq.n	801661e <etharp_update_arp_entry+0x26>
 8016610:	4b48      	ldr	r3, [pc, #288]	@ (8016734 <etharp_update_arp_entry+0x13c>)
 8016612:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8016616:	4948      	ldr	r1, [pc, #288]	@ (8016738 <etharp_update_arp_entry+0x140>)
 8016618:	4848      	ldr	r0, [pc, #288]	@ (801673c <etharp_update_arp_entry+0x144>)
 801661a:	f002 fb93 	bl	8018d44 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801661e:	68bb      	ldr	r3, [r7, #8]
 8016620:	2b00      	cmp	r3, #0
 8016622:	d012      	beq.n	801664a <etharp_update_arp_entry+0x52>
 8016624:	68bb      	ldr	r3, [r7, #8]
 8016626:	681b      	ldr	r3, [r3, #0]
 8016628:	2b00      	cmp	r3, #0
 801662a:	d00e      	beq.n	801664a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801662c:	68bb      	ldr	r3, [r7, #8]
 801662e:	681b      	ldr	r3, [r3, #0]
 8016630:	68f9      	ldr	r1, [r7, #12]
 8016632:	4618      	mov	r0, r3
 8016634:	f001 f920 	bl	8017878 <ip4_addr_isbroadcast_u32>
 8016638:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801663a:	2b00      	cmp	r3, #0
 801663c:	d105      	bne.n	801664a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801663e:	68bb      	ldr	r3, [r7, #8]
 8016640:	681b      	ldr	r3, [r3, #0]
 8016642:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016646:	2be0      	cmp	r3, #224	@ 0xe0
 8016648:	d102      	bne.n	8016650 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801664a:	f06f 030f 	mvn.w	r3, #15
 801664e:	e06c      	b.n	801672a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8016650:	78fb      	ldrb	r3, [r7, #3]
 8016652:	68fa      	ldr	r2, [r7, #12]
 8016654:	4619      	mov	r1, r3
 8016656:	68b8      	ldr	r0, [r7, #8]
 8016658:	f7ff fe56 	bl	8016308 <etharp_find_entry>
 801665c:	4603      	mov	r3, r0
 801665e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8016660:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8016664:	2b00      	cmp	r3, #0
 8016666:	da02      	bge.n	801666e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8016668:	8afb      	ldrh	r3, [r7, #22]
 801666a:	b25b      	sxtb	r3, r3
 801666c:	e05d      	b.n	801672a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801666e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016672:	4933      	ldr	r1, [pc, #204]	@ (8016740 <etharp_update_arp_entry+0x148>)
 8016674:	4613      	mov	r3, r2
 8016676:	005b      	lsls	r3, r3, #1
 8016678:	4413      	add	r3, r2
 801667a:	00db      	lsls	r3, r3, #3
 801667c:	440b      	add	r3, r1
 801667e:	3314      	adds	r3, #20
 8016680:	2202      	movs	r2, #2
 8016682:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8016684:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016688:	492d      	ldr	r1, [pc, #180]	@ (8016740 <etharp_update_arp_entry+0x148>)
 801668a:	4613      	mov	r3, r2
 801668c:	005b      	lsls	r3, r3, #1
 801668e:	4413      	add	r3, r2
 8016690:	00db      	lsls	r3, r3, #3
 8016692:	440b      	add	r3, r1
 8016694:	3308      	adds	r3, #8
 8016696:	68fa      	ldr	r2, [r7, #12]
 8016698:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801669a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801669e:	4613      	mov	r3, r2
 80166a0:	005b      	lsls	r3, r3, #1
 80166a2:	4413      	add	r3, r2
 80166a4:	00db      	lsls	r3, r3, #3
 80166a6:	3308      	adds	r3, #8
 80166a8:	4a25      	ldr	r2, [pc, #148]	@ (8016740 <etharp_update_arp_entry+0x148>)
 80166aa:	4413      	add	r3, r2
 80166ac:	3304      	adds	r3, #4
 80166ae:	2206      	movs	r2, #6
 80166b0:	6879      	ldr	r1, [r7, #4]
 80166b2:	4618      	mov	r0, r3
 80166b4:	f002 fd47 	bl	8019146 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80166b8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80166bc:	4920      	ldr	r1, [pc, #128]	@ (8016740 <etharp_update_arp_entry+0x148>)
 80166be:	4613      	mov	r3, r2
 80166c0:	005b      	lsls	r3, r3, #1
 80166c2:	4413      	add	r3, r2
 80166c4:	00db      	lsls	r3, r3, #3
 80166c6:	440b      	add	r3, r1
 80166c8:	3312      	adds	r3, #18
 80166ca:	2200      	movs	r2, #0
 80166cc:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80166ce:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80166d2:	491b      	ldr	r1, [pc, #108]	@ (8016740 <etharp_update_arp_entry+0x148>)
 80166d4:	4613      	mov	r3, r2
 80166d6:	005b      	lsls	r3, r3, #1
 80166d8:	4413      	add	r3, r2
 80166da:	00db      	lsls	r3, r3, #3
 80166dc:	440b      	add	r3, r1
 80166de:	681b      	ldr	r3, [r3, #0]
 80166e0:	2b00      	cmp	r3, #0
 80166e2:	d021      	beq.n	8016728 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80166e4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80166e8:	4915      	ldr	r1, [pc, #84]	@ (8016740 <etharp_update_arp_entry+0x148>)
 80166ea:	4613      	mov	r3, r2
 80166ec:	005b      	lsls	r3, r3, #1
 80166ee:	4413      	add	r3, r2
 80166f0:	00db      	lsls	r3, r3, #3
 80166f2:	440b      	add	r3, r1
 80166f4:	681b      	ldr	r3, [r3, #0]
 80166f6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80166f8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80166fc:	4910      	ldr	r1, [pc, #64]	@ (8016740 <etharp_update_arp_entry+0x148>)
 80166fe:	4613      	mov	r3, r2
 8016700:	005b      	lsls	r3, r3, #1
 8016702:	4413      	add	r3, r2
 8016704:	00db      	lsls	r3, r3, #3
 8016706:	440b      	add	r3, r1
 8016708:	2200      	movs	r2, #0
 801670a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801670c:	68fb      	ldr	r3, [r7, #12]
 801670e:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 8016712:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8016716:	9300      	str	r3, [sp, #0]
 8016718:	687b      	ldr	r3, [r7, #4]
 801671a:	6939      	ldr	r1, [r7, #16]
 801671c:	68f8      	ldr	r0, [r7, #12]
 801671e:	f001 ffb9 	bl	8018694 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8016722:	6938      	ldr	r0, [r7, #16]
 8016724:	f7f6 fbd4 	bl	800ced0 <pbuf_free>
  }
  return ERR_OK;
 8016728:	2300      	movs	r3, #0
}
 801672a:	4618      	mov	r0, r3
 801672c:	3718      	adds	r7, #24
 801672e:	46bd      	mov	sp, r7
 8016730:	bd80      	pop	{r7, pc}
 8016732:	bf00      	nop
 8016734:	0801d668 	.word	0x0801d668
 8016738:	0801d760 	.word	0x0801d760
 801673c:	0801d6e0 	.word	0x0801d6e0
 8016740:	20010f08 	.word	0x20010f08

08016744 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8016744:	b580      	push	{r7, lr}
 8016746:	b084      	sub	sp, #16
 8016748:	af00      	add	r7, sp, #0
 801674a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801674c:	2300      	movs	r3, #0
 801674e:	60fb      	str	r3, [r7, #12]
 8016750:	e01e      	b.n	8016790 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8016752:	4913      	ldr	r1, [pc, #76]	@ (80167a0 <etharp_cleanup_netif+0x5c>)
 8016754:	68fa      	ldr	r2, [r7, #12]
 8016756:	4613      	mov	r3, r2
 8016758:	005b      	lsls	r3, r3, #1
 801675a:	4413      	add	r3, r2
 801675c:	00db      	lsls	r3, r3, #3
 801675e:	440b      	add	r3, r1
 8016760:	3314      	adds	r3, #20
 8016762:	781b      	ldrb	r3, [r3, #0]
 8016764:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8016766:	7afb      	ldrb	r3, [r7, #11]
 8016768:	2b00      	cmp	r3, #0
 801676a:	d00e      	beq.n	801678a <etharp_cleanup_netif+0x46>
 801676c:	490c      	ldr	r1, [pc, #48]	@ (80167a0 <etharp_cleanup_netif+0x5c>)
 801676e:	68fa      	ldr	r2, [r7, #12]
 8016770:	4613      	mov	r3, r2
 8016772:	005b      	lsls	r3, r3, #1
 8016774:	4413      	add	r3, r2
 8016776:	00db      	lsls	r3, r3, #3
 8016778:	440b      	add	r3, r1
 801677a:	3308      	adds	r3, #8
 801677c:	681b      	ldr	r3, [r3, #0]
 801677e:	687a      	ldr	r2, [r7, #4]
 8016780:	429a      	cmp	r2, r3
 8016782:	d102      	bne.n	801678a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8016784:	68f8      	ldr	r0, [r7, #12]
 8016786:	f7ff fce5 	bl	8016154 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801678a:	68fb      	ldr	r3, [r7, #12]
 801678c:	3301      	adds	r3, #1
 801678e:	60fb      	str	r3, [r7, #12]
 8016790:	68fb      	ldr	r3, [r7, #12]
 8016792:	2b09      	cmp	r3, #9
 8016794:	dddd      	ble.n	8016752 <etharp_cleanup_netif+0xe>
    }
  }
}
 8016796:	bf00      	nop
 8016798:	bf00      	nop
 801679a:	3710      	adds	r7, #16
 801679c:	46bd      	mov	sp, r7
 801679e:	bd80      	pop	{r7, pc}
 80167a0:	20010f08 	.word	0x20010f08

080167a4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80167a4:	b5b0      	push	{r4, r5, r7, lr}
 80167a6:	b08a      	sub	sp, #40	@ 0x28
 80167a8:	af04      	add	r7, sp, #16
 80167aa:	6078      	str	r0, [r7, #4]
 80167ac:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80167ae:	683b      	ldr	r3, [r7, #0]
 80167b0:	2b00      	cmp	r3, #0
 80167b2:	d107      	bne.n	80167c4 <etharp_input+0x20>
 80167b4:	4b3f      	ldr	r3, [pc, #252]	@ (80168b4 <etharp_input+0x110>)
 80167b6:	f240 228a 	movw	r2, #650	@ 0x28a
 80167ba:	493f      	ldr	r1, [pc, #252]	@ (80168b8 <etharp_input+0x114>)
 80167bc:	483f      	ldr	r0, [pc, #252]	@ (80168bc <etharp_input+0x118>)
 80167be:	f002 fac1 	bl	8018d44 <iprintf>
 80167c2:	e074      	b.n	80168ae <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 80167c4:	687b      	ldr	r3, [r7, #4]
 80167c6:	685b      	ldr	r3, [r3, #4]
 80167c8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80167ca:	693b      	ldr	r3, [r7, #16]
 80167cc:	881b      	ldrh	r3, [r3, #0]
 80167ce:	b29b      	uxth	r3, r3
 80167d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80167d4:	d10c      	bne.n	80167f0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80167d6:	693b      	ldr	r3, [r7, #16]
 80167d8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80167da:	2b06      	cmp	r3, #6
 80167dc:	d108      	bne.n	80167f0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80167de:	693b      	ldr	r3, [r7, #16]
 80167e0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80167e2:	2b04      	cmp	r3, #4
 80167e4:	d104      	bne.n	80167f0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80167e6:	693b      	ldr	r3, [r7, #16]
 80167e8:	885b      	ldrh	r3, [r3, #2]
 80167ea:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80167ec:	2b08      	cmp	r3, #8
 80167ee:	d003      	beq.n	80167f8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80167f0:	6878      	ldr	r0, [r7, #4]
 80167f2:	f7f6 fb6d 	bl	800ced0 <pbuf_free>
    return;
 80167f6:	e05a      	b.n	80168ae <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80167f8:	693b      	ldr	r3, [r7, #16]
 80167fa:	330e      	adds	r3, #14
 80167fc:	681b      	ldr	r3, [r3, #0]
 80167fe:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8016800:	693b      	ldr	r3, [r7, #16]
 8016802:	3318      	adds	r3, #24
 8016804:	681b      	ldr	r3, [r3, #0]
 8016806:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016808:	683b      	ldr	r3, [r7, #0]
 801680a:	3304      	adds	r3, #4
 801680c:	681b      	ldr	r3, [r3, #0]
 801680e:	2b00      	cmp	r3, #0
 8016810:	d102      	bne.n	8016818 <etharp_input+0x74>
    for_us = 0;
 8016812:	2300      	movs	r3, #0
 8016814:	75fb      	strb	r3, [r7, #23]
 8016816:	e009      	b.n	801682c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8016818:	68ba      	ldr	r2, [r7, #8]
 801681a:	683b      	ldr	r3, [r7, #0]
 801681c:	3304      	adds	r3, #4
 801681e:	681b      	ldr	r3, [r3, #0]
 8016820:	429a      	cmp	r2, r3
 8016822:	bf0c      	ite	eq
 8016824:	2301      	moveq	r3, #1
 8016826:	2300      	movne	r3, #0
 8016828:	b2db      	uxtb	r3, r3
 801682a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801682c:	693b      	ldr	r3, [r7, #16]
 801682e:	f103 0208 	add.w	r2, r3, #8
 8016832:	7dfb      	ldrb	r3, [r7, #23]
 8016834:	2b00      	cmp	r3, #0
 8016836:	d001      	beq.n	801683c <etharp_input+0x98>
 8016838:	2301      	movs	r3, #1
 801683a:	e000      	b.n	801683e <etharp_input+0x9a>
 801683c:	2302      	movs	r3, #2
 801683e:	f107 010c 	add.w	r1, r7, #12
 8016842:	6838      	ldr	r0, [r7, #0]
 8016844:	f7ff fed8 	bl	80165f8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8016848:	693b      	ldr	r3, [r7, #16]
 801684a:	88db      	ldrh	r3, [r3, #6]
 801684c:	b29b      	uxth	r3, r3
 801684e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8016852:	d003      	beq.n	801685c <etharp_input+0xb8>
 8016854:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016858:	d01e      	beq.n	8016898 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801685a:	e025      	b.n	80168a8 <etharp_input+0x104>
      if (for_us) {
 801685c:	7dfb      	ldrb	r3, [r7, #23]
 801685e:	2b00      	cmp	r3, #0
 8016860:	d021      	beq.n	80168a6 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8016862:	683b      	ldr	r3, [r7, #0]
 8016864:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 8016868:	693b      	ldr	r3, [r7, #16]
 801686a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801686e:	683b      	ldr	r3, [r7, #0]
 8016870:	f103 052a 	add.w	r5, r3, #42	@ 0x2a
 8016874:	683b      	ldr	r3, [r7, #0]
 8016876:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8016878:	693a      	ldr	r2, [r7, #16]
 801687a:	3208      	adds	r2, #8
        etharp_raw(netif,
 801687c:	2102      	movs	r1, #2
 801687e:	9103      	str	r1, [sp, #12]
 8016880:	f107 010c 	add.w	r1, r7, #12
 8016884:	9102      	str	r1, [sp, #8]
 8016886:	9201      	str	r2, [sp, #4]
 8016888:	9300      	str	r3, [sp, #0]
 801688a:	462b      	mov	r3, r5
 801688c:	4622      	mov	r2, r4
 801688e:	4601      	mov	r1, r0
 8016890:	6838      	ldr	r0, [r7, #0]
 8016892:	f000 faef 	bl	8016e74 <etharp_raw>
      break;
 8016896:	e006      	b.n	80168a6 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8016898:	f107 030c 	add.w	r3, r7, #12
 801689c:	4619      	mov	r1, r3
 801689e:	6838      	ldr	r0, [r7, #0]
 80168a0:	f7fe fa02 	bl	8014ca8 <dhcp_arp_reply>
      break;
 80168a4:	e000      	b.n	80168a8 <etharp_input+0x104>
      break;
 80168a6:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80168a8:	6878      	ldr	r0, [r7, #4]
 80168aa:	f7f6 fb11 	bl	800ced0 <pbuf_free>
}
 80168ae:	3718      	adds	r7, #24
 80168b0:	46bd      	mov	sp, r7
 80168b2:	bdb0      	pop	{r4, r5, r7, pc}
 80168b4:	0801d668 	.word	0x0801d668
 80168b8:	0801d7b8 	.word	0x0801d7b8
 80168bc:	0801d6e0 	.word	0x0801d6e0

080168c0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80168c0:	b580      	push	{r7, lr}
 80168c2:	b086      	sub	sp, #24
 80168c4:	af02      	add	r7, sp, #8
 80168c6:	60f8      	str	r0, [r7, #12]
 80168c8:	60b9      	str	r1, [r7, #8]
 80168ca:	4613      	mov	r3, r2
 80168cc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80168ce:	79fa      	ldrb	r2, [r7, #7]
 80168d0:	4944      	ldr	r1, [pc, #272]	@ (80169e4 <etharp_output_to_arp_index+0x124>)
 80168d2:	4613      	mov	r3, r2
 80168d4:	005b      	lsls	r3, r3, #1
 80168d6:	4413      	add	r3, r2
 80168d8:	00db      	lsls	r3, r3, #3
 80168da:	440b      	add	r3, r1
 80168dc:	3314      	adds	r3, #20
 80168de:	781b      	ldrb	r3, [r3, #0]
 80168e0:	2b01      	cmp	r3, #1
 80168e2:	d806      	bhi.n	80168f2 <etharp_output_to_arp_index+0x32>
 80168e4:	4b40      	ldr	r3, [pc, #256]	@ (80169e8 <etharp_output_to_arp_index+0x128>)
 80168e6:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80168ea:	4940      	ldr	r1, [pc, #256]	@ (80169ec <etharp_output_to_arp_index+0x12c>)
 80168ec:	4840      	ldr	r0, [pc, #256]	@ (80169f0 <etharp_output_to_arp_index+0x130>)
 80168ee:	f002 fa29 	bl	8018d44 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80168f2:	79fa      	ldrb	r2, [r7, #7]
 80168f4:	493b      	ldr	r1, [pc, #236]	@ (80169e4 <etharp_output_to_arp_index+0x124>)
 80168f6:	4613      	mov	r3, r2
 80168f8:	005b      	lsls	r3, r3, #1
 80168fa:	4413      	add	r3, r2
 80168fc:	00db      	lsls	r3, r3, #3
 80168fe:	440b      	add	r3, r1
 8016900:	3314      	adds	r3, #20
 8016902:	781b      	ldrb	r3, [r3, #0]
 8016904:	2b02      	cmp	r3, #2
 8016906:	d153      	bne.n	80169b0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8016908:	79fa      	ldrb	r2, [r7, #7]
 801690a:	4936      	ldr	r1, [pc, #216]	@ (80169e4 <etharp_output_to_arp_index+0x124>)
 801690c:	4613      	mov	r3, r2
 801690e:	005b      	lsls	r3, r3, #1
 8016910:	4413      	add	r3, r2
 8016912:	00db      	lsls	r3, r3, #3
 8016914:	440b      	add	r3, r1
 8016916:	3312      	adds	r3, #18
 8016918:	881b      	ldrh	r3, [r3, #0]
 801691a:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 801691e:	d919      	bls.n	8016954 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8016920:	79fa      	ldrb	r2, [r7, #7]
 8016922:	4613      	mov	r3, r2
 8016924:	005b      	lsls	r3, r3, #1
 8016926:	4413      	add	r3, r2
 8016928:	00db      	lsls	r3, r3, #3
 801692a:	4a2e      	ldr	r2, [pc, #184]	@ (80169e4 <etharp_output_to_arp_index+0x124>)
 801692c:	4413      	add	r3, r2
 801692e:	3304      	adds	r3, #4
 8016930:	4619      	mov	r1, r3
 8016932:	68f8      	ldr	r0, [r7, #12]
 8016934:	f000 fb4c 	bl	8016fd0 <etharp_request>
 8016938:	4603      	mov	r3, r0
 801693a:	2b00      	cmp	r3, #0
 801693c:	d138      	bne.n	80169b0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801693e:	79fa      	ldrb	r2, [r7, #7]
 8016940:	4928      	ldr	r1, [pc, #160]	@ (80169e4 <etharp_output_to_arp_index+0x124>)
 8016942:	4613      	mov	r3, r2
 8016944:	005b      	lsls	r3, r3, #1
 8016946:	4413      	add	r3, r2
 8016948:	00db      	lsls	r3, r3, #3
 801694a:	440b      	add	r3, r1
 801694c:	3314      	adds	r3, #20
 801694e:	2203      	movs	r2, #3
 8016950:	701a      	strb	r2, [r3, #0]
 8016952:	e02d      	b.n	80169b0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8016954:	79fa      	ldrb	r2, [r7, #7]
 8016956:	4923      	ldr	r1, [pc, #140]	@ (80169e4 <etharp_output_to_arp_index+0x124>)
 8016958:	4613      	mov	r3, r2
 801695a:	005b      	lsls	r3, r3, #1
 801695c:	4413      	add	r3, r2
 801695e:	00db      	lsls	r3, r3, #3
 8016960:	440b      	add	r3, r1
 8016962:	3312      	adds	r3, #18
 8016964:	881b      	ldrh	r3, [r3, #0]
 8016966:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801696a:	d321      	bcc.n	80169b0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801696c:	79fa      	ldrb	r2, [r7, #7]
 801696e:	4613      	mov	r3, r2
 8016970:	005b      	lsls	r3, r3, #1
 8016972:	4413      	add	r3, r2
 8016974:	00db      	lsls	r3, r3, #3
 8016976:	4a1b      	ldr	r2, [pc, #108]	@ (80169e4 <etharp_output_to_arp_index+0x124>)
 8016978:	4413      	add	r3, r2
 801697a:	1d19      	adds	r1, r3, #4
 801697c:	79fa      	ldrb	r2, [r7, #7]
 801697e:	4613      	mov	r3, r2
 8016980:	005b      	lsls	r3, r3, #1
 8016982:	4413      	add	r3, r2
 8016984:	00db      	lsls	r3, r3, #3
 8016986:	3308      	adds	r3, #8
 8016988:	4a16      	ldr	r2, [pc, #88]	@ (80169e4 <etharp_output_to_arp_index+0x124>)
 801698a:	4413      	add	r3, r2
 801698c:	3304      	adds	r3, #4
 801698e:	461a      	mov	r2, r3
 8016990:	68f8      	ldr	r0, [r7, #12]
 8016992:	f000 fafb 	bl	8016f8c <etharp_request_dst>
 8016996:	4603      	mov	r3, r0
 8016998:	2b00      	cmp	r3, #0
 801699a:	d109      	bne.n	80169b0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801699c:	79fa      	ldrb	r2, [r7, #7]
 801699e:	4911      	ldr	r1, [pc, #68]	@ (80169e4 <etharp_output_to_arp_index+0x124>)
 80169a0:	4613      	mov	r3, r2
 80169a2:	005b      	lsls	r3, r3, #1
 80169a4:	4413      	add	r3, r2
 80169a6:	00db      	lsls	r3, r3, #3
 80169a8:	440b      	add	r3, r1
 80169aa:	3314      	adds	r3, #20
 80169ac:	2203      	movs	r2, #3
 80169ae:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80169b0:	68fb      	ldr	r3, [r7, #12]
 80169b2:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
 80169b6:	79fa      	ldrb	r2, [r7, #7]
 80169b8:	4613      	mov	r3, r2
 80169ba:	005b      	lsls	r3, r3, #1
 80169bc:	4413      	add	r3, r2
 80169be:	00db      	lsls	r3, r3, #3
 80169c0:	3308      	adds	r3, #8
 80169c2:	4a08      	ldr	r2, [pc, #32]	@ (80169e4 <etharp_output_to_arp_index+0x124>)
 80169c4:	4413      	add	r3, r2
 80169c6:	3304      	adds	r3, #4
 80169c8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80169cc:	9200      	str	r2, [sp, #0]
 80169ce:	460a      	mov	r2, r1
 80169d0:	68b9      	ldr	r1, [r7, #8]
 80169d2:	68f8      	ldr	r0, [r7, #12]
 80169d4:	f001 fe5e 	bl	8018694 <ethernet_output>
 80169d8:	4603      	mov	r3, r0
}
 80169da:	4618      	mov	r0, r3
 80169dc:	3710      	adds	r7, #16
 80169de:	46bd      	mov	sp, r7
 80169e0:	bd80      	pop	{r7, pc}
 80169e2:	bf00      	nop
 80169e4:	20010f08 	.word	0x20010f08
 80169e8:	0801d668 	.word	0x0801d668
 80169ec:	0801d7d8 	.word	0x0801d7d8
 80169f0:	0801d6e0 	.word	0x0801d6e0

080169f4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80169f4:	b580      	push	{r7, lr}
 80169f6:	b08a      	sub	sp, #40	@ 0x28
 80169f8:	af02      	add	r7, sp, #8
 80169fa:	60f8      	str	r0, [r7, #12]
 80169fc:	60b9      	str	r1, [r7, #8]
 80169fe:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016a04:	68fb      	ldr	r3, [r7, #12]
 8016a06:	2b00      	cmp	r3, #0
 8016a08:	d106      	bne.n	8016a18 <etharp_output+0x24>
 8016a0a:	4b73      	ldr	r3, [pc, #460]	@ (8016bd8 <etharp_output+0x1e4>)
 8016a0c:	f240 321e 	movw	r2, #798	@ 0x31e
 8016a10:	4972      	ldr	r1, [pc, #456]	@ (8016bdc <etharp_output+0x1e8>)
 8016a12:	4873      	ldr	r0, [pc, #460]	@ (8016be0 <etharp_output+0x1ec>)
 8016a14:	f002 f996 	bl	8018d44 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8016a18:	68bb      	ldr	r3, [r7, #8]
 8016a1a:	2b00      	cmp	r3, #0
 8016a1c:	d106      	bne.n	8016a2c <etharp_output+0x38>
 8016a1e:	4b6e      	ldr	r3, [pc, #440]	@ (8016bd8 <etharp_output+0x1e4>)
 8016a20:	f240 321f 	movw	r2, #799	@ 0x31f
 8016a24:	496f      	ldr	r1, [pc, #444]	@ (8016be4 <etharp_output+0x1f0>)
 8016a26:	486e      	ldr	r0, [pc, #440]	@ (8016be0 <etharp_output+0x1ec>)
 8016a28:	f002 f98c 	bl	8018d44 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8016a2c:	687b      	ldr	r3, [r7, #4]
 8016a2e:	2b00      	cmp	r3, #0
 8016a30:	d106      	bne.n	8016a40 <etharp_output+0x4c>
 8016a32:	4b69      	ldr	r3, [pc, #420]	@ (8016bd8 <etharp_output+0x1e4>)
 8016a34:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8016a38:	496b      	ldr	r1, [pc, #428]	@ (8016be8 <etharp_output+0x1f4>)
 8016a3a:	4869      	ldr	r0, [pc, #420]	@ (8016be0 <etharp_output+0x1ec>)
 8016a3c:	f002 f982 	bl	8018d44 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8016a40:	687b      	ldr	r3, [r7, #4]
 8016a42:	681b      	ldr	r3, [r3, #0]
 8016a44:	68f9      	ldr	r1, [r7, #12]
 8016a46:	4618      	mov	r0, r3
 8016a48:	f000 ff16 	bl	8017878 <ip4_addr_isbroadcast_u32>
 8016a4c:	4603      	mov	r3, r0
 8016a4e:	2b00      	cmp	r3, #0
 8016a50:	d002      	beq.n	8016a58 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8016a52:	4b66      	ldr	r3, [pc, #408]	@ (8016bec <etharp_output+0x1f8>)
 8016a54:	61fb      	str	r3, [r7, #28]
 8016a56:	e0af      	b.n	8016bb8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8016a58:	687b      	ldr	r3, [r7, #4]
 8016a5a:	681b      	ldr	r3, [r3, #0]
 8016a5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8016a60:	2be0      	cmp	r3, #224	@ 0xe0
 8016a62:	d118      	bne.n	8016a96 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8016a64:	2301      	movs	r3, #1
 8016a66:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8016a68:	2300      	movs	r3, #0
 8016a6a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8016a6c:	235e      	movs	r3, #94	@ 0x5e
 8016a6e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8016a70:	687b      	ldr	r3, [r7, #4]
 8016a72:	3301      	adds	r3, #1
 8016a74:	781b      	ldrb	r3, [r3, #0]
 8016a76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016a7a:	b2db      	uxtb	r3, r3
 8016a7c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8016a7e:	687b      	ldr	r3, [r7, #4]
 8016a80:	3302      	adds	r3, #2
 8016a82:	781b      	ldrb	r3, [r3, #0]
 8016a84:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8016a86:	687b      	ldr	r3, [r7, #4]
 8016a88:	3303      	adds	r3, #3
 8016a8a:	781b      	ldrb	r3, [r3, #0]
 8016a8c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8016a8e:	f107 0310 	add.w	r3, r7, #16
 8016a92:	61fb      	str	r3, [r7, #28]
 8016a94:	e090      	b.n	8016bb8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016a96:	687b      	ldr	r3, [r7, #4]
 8016a98:	681a      	ldr	r2, [r3, #0]
 8016a9a:	68fb      	ldr	r3, [r7, #12]
 8016a9c:	3304      	adds	r3, #4
 8016a9e:	681b      	ldr	r3, [r3, #0]
 8016aa0:	405a      	eors	r2, r3
 8016aa2:	68fb      	ldr	r3, [r7, #12]
 8016aa4:	3308      	adds	r3, #8
 8016aa6:	681b      	ldr	r3, [r3, #0]
 8016aa8:	4013      	ands	r3, r2
 8016aaa:	2b00      	cmp	r3, #0
 8016aac:	d012      	beq.n	8016ad4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8016aae:	687b      	ldr	r3, [r7, #4]
 8016ab0:	681b      	ldr	r3, [r3, #0]
 8016ab2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016ab4:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8016ab8:	4293      	cmp	r3, r2
 8016aba:	d00b      	beq.n	8016ad4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8016abc:	68fb      	ldr	r3, [r7, #12]
 8016abe:	330c      	adds	r3, #12
 8016ac0:	681b      	ldr	r3, [r3, #0]
 8016ac2:	2b00      	cmp	r3, #0
 8016ac4:	d003      	beq.n	8016ace <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8016ac6:	68fb      	ldr	r3, [r7, #12]
 8016ac8:	330c      	adds	r3, #12
 8016aca:	61bb      	str	r3, [r7, #24]
 8016acc:	e002      	b.n	8016ad4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8016ace:	f06f 0303 	mvn.w	r3, #3
 8016ad2:	e07d      	b.n	8016bd0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016ad4:	4b46      	ldr	r3, [pc, #280]	@ (8016bf0 <etharp_output+0x1fc>)
 8016ad6:	781b      	ldrb	r3, [r3, #0]
 8016ad8:	4619      	mov	r1, r3
 8016ada:	4a46      	ldr	r2, [pc, #280]	@ (8016bf4 <etharp_output+0x200>)
 8016adc:	460b      	mov	r3, r1
 8016ade:	005b      	lsls	r3, r3, #1
 8016ae0:	440b      	add	r3, r1
 8016ae2:	00db      	lsls	r3, r3, #3
 8016ae4:	4413      	add	r3, r2
 8016ae6:	3314      	adds	r3, #20
 8016ae8:	781b      	ldrb	r3, [r3, #0]
 8016aea:	2b01      	cmp	r3, #1
 8016aec:	d925      	bls.n	8016b3a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016aee:	4b40      	ldr	r3, [pc, #256]	@ (8016bf0 <etharp_output+0x1fc>)
 8016af0:	781b      	ldrb	r3, [r3, #0]
 8016af2:	4619      	mov	r1, r3
 8016af4:	4a3f      	ldr	r2, [pc, #252]	@ (8016bf4 <etharp_output+0x200>)
 8016af6:	460b      	mov	r3, r1
 8016af8:	005b      	lsls	r3, r3, #1
 8016afa:	440b      	add	r3, r1
 8016afc:	00db      	lsls	r3, r3, #3
 8016afe:	4413      	add	r3, r2
 8016b00:	3308      	adds	r3, #8
 8016b02:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016b04:	68fa      	ldr	r2, [r7, #12]
 8016b06:	429a      	cmp	r2, r3
 8016b08:	d117      	bne.n	8016b3a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8016b0a:	69bb      	ldr	r3, [r7, #24]
 8016b0c:	681a      	ldr	r2, [r3, #0]
 8016b0e:	4b38      	ldr	r3, [pc, #224]	@ (8016bf0 <etharp_output+0x1fc>)
 8016b10:	781b      	ldrb	r3, [r3, #0]
 8016b12:	4618      	mov	r0, r3
 8016b14:	4937      	ldr	r1, [pc, #220]	@ (8016bf4 <etharp_output+0x200>)
 8016b16:	4603      	mov	r3, r0
 8016b18:	005b      	lsls	r3, r3, #1
 8016b1a:	4403      	add	r3, r0
 8016b1c:	00db      	lsls	r3, r3, #3
 8016b1e:	440b      	add	r3, r1
 8016b20:	3304      	adds	r3, #4
 8016b22:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016b24:	429a      	cmp	r2, r3
 8016b26:	d108      	bne.n	8016b3a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8016b28:	4b31      	ldr	r3, [pc, #196]	@ (8016bf0 <etharp_output+0x1fc>)
 8016b2a:	781b      	ldrb	r3, [r3, #0]
 8016b2c:	461a      	mov	r2, r3
 8016b2e:	68b9      	ldr	r1, [r7, #8]
 8016b30:	68f8      	ldr	r0, [r7, #12]
 8016b32:	f7ff fec5 	bl	80168c0 <etharp_output_to_arp_index>
 8016b36:	4603      	mov	r3, r0
 8016b38:	e04a      	b.n	8016bd0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016b3a:	2300      	movs	r3, #0
 8016b3c:	75fb      	strb	r3, [r7, #23]
 8016b3e:	e031      	b.n	8016ba4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016b40:	7dfa      	ldrb	r2, [r7, #23]
 8016b42:	492c      	ldr	r1, [pc, #176]	@ (8016bf4 <etharp_output+0x200>)
 8016b44:	4613      	mov	r3, r2
 8016b46:	005b      	lsls	r3, r3, #1
 8016b48:	4413      	add	r3, r2
 8016b4a:	00db      	lsls	r3, r3, #3
 8016b4c:	440b      	add	r3, r1
 8016b4e:	3314      	adds	r3, #20
 8016b50:	781b      	ldrb	r3, [r3, #0]
 8016b52:	2b01      	cmp	r3, #1
 8016b54:	d923      	bls.n	8016b9e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8016b56:	7dfa      	ldrb	r2, [r7, #23]
 8016b58:	4926      	ldr	r1, [pc, #152]	@ (8016bf4 <etharp_output+0x200>)
 8016b5a:	4613      	mov	r3, r2
 8016b5c:	005b      	lsls	r3, r3, #1
 8016b5e:	4413      	add	r3, r2
 8016b60:	00db      	lsls	r3, r3, #3
 8016b62:	440b      	add	r3, r1
 8016b64:	3308      	adds	r3, #8
 8016b66:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016b68:	68fa      	ldr	r2, [r7, #12]
 8016b6a:	429a      	cmp	r2, r3
 8016b6c:	d117      	bne.n	8016b9e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8016b6e:	69bb      	ldr	r3, [r7, #24]
 8016b70:	6819      	ldr	r1, [r3, #0]
 8016b72:	7dfa      	ldrb	r2, [r7, #23]
 8016b74:	481f      	ldr	r0, [pc, #124]	@ (8016bf4 <etharp_output+0x200>)
 8016b76:	4613      	mov	r3, r2
 8016b78:	005b      	lsls	r3, r3, #1
 8016b7a:	4413      	add	r3, r2
 8016b7c:	00db      	lsls	r3, r3, #3
 8016b7e:	4403      	add	r3, r0
 8016b80:	3304      	adds	r3, #4
 8016b82:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8016b84:	4299      	cmp	r1, r3
 8016b86:	d10a      	bne.n	8016b9e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8016b88:	4a19      	ldr	r2, [pc, #100]	@ (8016bf0 <etharp_output+0x1fc>)
 8016b8a:	7dfb      	ldrb	r3, [r7, #23]
 8016b8c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8016b8e:	7dfb      	ldrb	r3, [r7, #23]
 8016b90:	461a      	mov	r2, r3
 8016b92:	68b9      	ldr	r1, [r7, #8]
 8016b94:	68f8      	ldr	r0, [r7, #12]
 8016b96:	f7ff fe93 	bl	80168c0 <etharp_output_to_arp_index>
 8016b9a:	4603      	mov	r3, r0
 8016b9c:	e018      	b.n	8016bd0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016b9e:	7dfb      	ldrb	r3, [r7, #23]
 8016ba0:	3301      	adds	r3, #1
 8016ba2:	75fb      	strb	r3, [r7, #23]
 8016ba4:	7dfb      	ldrb	r3, [r7, #23]
 8016ba6:	2b09      	cmp	r3, #9
 8016ba8:	d9ca      	bls.n	8016b40 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8016baa:	68ba      	ldr	r2, [r7, #8]
 8016bac:	69b9      	ldr	r1, [r7, #24]
 8016bae:	68f8      	ldr	r0, [r7, #12]
 8016bb0:	f000 f822 	bl	8016bf8 <etharp_query>
 8016bb4:	4603      	mov	r3, r0
 8016bb6:	e00b      	b.n	8016bd0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8016bb8:	68fb      	ldr	r3, [r7, #12]
 8016bba:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 8016bbe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8016bc2:	9300      	str	r3, [sp, #0]
 8016bc4:	69fb      	ldr	r3, [r7, #28]
 8016bc6:	68b9      	ldr	r1, [r7, #8]
 8016bc8:	68f8      	ldr	r0, [r7, #12]
 8016bca:	f001 fd63 	bl	8018694 <ethernet_output>
 8016bce:	4603      	mov	r3, r0
}
 8016bd0:	4618      	mov	r0, r3
 8016bd2:	3720      	adds	r7, #32
 8016bd4:	46bd      	mov	sp, r7
 8016bd6:	bd80      	pop	{r7, pc}
 8016bd8:	0801d668 	.word	0x0801d668
 8016bdc:	0801d7b8 	.word	0x0801d7b8
 8016be0:	0801d6e0 	.word	0x0801d6e0
 8016be4:	0801d808 	.word	0x0801d808
 8016be8:	0801d7a8 	.word	0x0801d7a8
 8016bec:	08027fb4 	.word	0x08027fb4
 8016bf0:	20010ff8 	.word	0x20010ff8
 8016bf4:	20010f08 	.word	0x20010f08

08016bf8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8016bf8:	b580      	push	{r7, lr}
 8016bfa:	b08c      	sub	sp, #48	@ 0x30
 8016bfc:	af02      	add	r7, sp, #8
 8016bfe:	60f8      	str	r0, [r7, #12]
 8016c00:	60b9      	str	r1, [r7, #8]
 8016c02:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8016c04:	68fb      	ldr	r3, [r7, #12]
 8016c06:	332a      	adds	r3, #42	@ 0x2a
 8016c08:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8016c0a:	23ff      	movs	r3, #255	@ 0xff
 8016c0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8016c10:	2300      	movs	r3, #0
 8016c12:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016c14:	68bb      	ldr	r3, [r7, #8]
 8016c16:	681b      	ldr	r3, [r3, #0]
 8016c18:	68f9      	ldr	r1, [r7, #12]
 8016c1a:	4618      	mov	r0, r3
 8016c1c:	f000 fe2c 	bl	8017878 <ip4_addr_isbroadcast_u32>
 8016c20:	4603      	mov	r3, r0
 8016c22:	2b00      	cmp	r3, #0
 8016c24:	d10c      	bne.n	8016c40 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016c26:	68bb      	ldr	r3, [r7, #8]
 8016c28:	681b      	ldr	r3, [r3, #0]
 8016c2a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016c2e:	2be0      	cmp	r3, #224	@ 0xe0
 8016c30:	d006      	beq.n	8016c40 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016c32:	68bb      	ldr	r3, [r7, #8]
 8016c34:	2b00      	cmp	r3, #0
 8016c36:	d003      	beq.n	8016c40 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8016c38:	68bb      	ldr	r3, [r7, #8]
 8016c3a:	681b      	ldr	r3, [r3, #0]
 8016c3c:	2b00      	cmp	r3, #0
 8016c3e:	d102      	bne.n	8016c46 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016c40:	f06f 030f 	mvn.w	r3, #15
 8016c44:	e101      	b.n	8016e4a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8016c46:	68fa      	ldr	r2, [r7, #12]
 8016c48:	2101      	movs	r1, #1
 8016c4a:	68b8      	ldr	r0, [r7, #8]
 8016c4c:	f7ff fb5c 	bl	8016308 <etharp_find_entry>
 8016c50:	4603      	mov	r3, r0
 8016c52:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8016c54:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016c58:	2b00      	cmp	r3, #0
 8016c5a:	da02      	bge.n	8016c62 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8016c5c:	8a7b      	ldrh	r3, [r7, #18]
 8016c5e:	b25b      	sxtb	r3, r3
 8016c60:	e0f3      	b.n	8016e4a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8016c62:	8a7b      	ldrh	r3, [r7, #18]
 8016c64:	2b7e      	cmp	r3, #126	@ 0x7e
 8016c66:	d906      	bls.n	8016c76 <etharp_query+0x7e>
 8016c68:	4b7a      	ldr	r3, [pc, #488]	@ (8016e54 <etharp_query+0x25c>)
 8016c6a:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8016c6e:	497a      	ldr	r1, [pc, #488]	@ (8016e58 <etharp_query+0x260>)
 8016c70:	487a      	ldr	r0, [pc, #488]	@ (8016e5c <etharp_query+0x264>)
 8016c72:	f002 f867 	bl	8018d44 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8016c76:	8a7b      	ldrh	r3, [r7, #18]
 8016c78:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8016c7a:	7c7a      	ldrb	r2, [r7, #17]
 8016c7c:	4978      	ldr	r1, [pc, #480]	@ (8016e60 <etharp_query+0x268>)
 8016c7e:	4613      	mov	r3, r2
 8016c80:	005b      	lsls	r3, r3, #1
 8016c82:	4413      	add	r3, r2
 8016c84:	00db      	lsls	r3, r3, #3
 8016c86:	440b      	add	r3, r1
 8016c88:	3314      	adds	r3, #20
 8016c8a:	781b      	ldrb	r3, [r3, #0]
 8016c8c:	2b00      	cmp	r3, #0
 8016c8e:	d115      	bne.n	8016cbc <etharp_query+0xc4>
    is_new_entry = 1;
 8016c90:	2301      	movs	r3, #1
 8016c92:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8016c94:	7c7a      	ldrb	r2, [r7, #17]
 8016c96:	4972      	ldr	r1, [pc, #456]	@ (8016e60 <etharp_query+0x268>)
 8016c98:	4613      	mov	r3, r2
 8016c9a:	005b      	lsls	r3, r3, #1
 8016c9c:	4413      	add	r3, r2
 8016c9e:	00db      	lsls	r3, r3, #3
 8016ca0:	440b      	add	r3, r1
 8016ca2:	3314      	adds	r3, #20
 8016ca4:	2201      	movs	r2, #1
 8016ca6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8016ca8:	7c7a      	ldrb	r2, [r7, #17]
 8016caa:	496d      	ldr	r1, [pc, #436]	@ (8016e60 <etharp_query+0x268>)
 8016cac:	4613      	mov	r3, r2
 8016cae:	005b      	lsls	r3, r3, #1
 8016cb0:	4413      	add	r3, r2
 8016cb2:	00db      	lsls	r3, r3, #3
 8016cb4:	440b      	add	r3, r1
 8016cb6:	3308      	adds	r3, #8
 8016cb8:	68fa      	ldr	r2, [r7, #12]
 8016cba:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8016cbc:	7c7a      	ldrb	r2, [r7, #17]
 8016cbe:	4968      	ldr	r1, [pc, #416]	@ (8016e60 <etharp_query+0x268>)
 8016cc0:	4613      	mov	r3, r2
 8016cc2:	005b      	lsls	r3, r3, #1
 8016cc4:	4413      	add	r3, r2
 8016cc6:	00db      	lsls	r3, r3, #3
 8016cc8:	440b      	add	r3, r1
 8016cca:	3314      	adds	r3, #20
 8016ccc:	781b      	ldrb	r3, [r3, #0]
 8016cce:	2b01      	cmp	r3, #1
 8016cd0:	d011      	beq.n	8016cf6 <etharp_query+0xfe>
 8016cd2:	7c7a      	ldrb	r2, [r7, #17]
 8016cd4:	4962      	ldr	r1, [pc, #392]	@ (8016e60 <etharp_query+0x268>)
 8016cd6:	4613      	mov	r3, r2
 8016cd8:	005b      	lsls	r3, r3, #1
 8016cda:	4413      	add	r3, r2
 8016cdc:	00db      	lsls	r3, r3, #3
 8016cde:	440b      	add	r3, r1
 8016ce0:	3314      	adds	r3, #20
 8016ce2:	781b      	ldrb	r3, [r3, #0]
 8016ce4:	2b01      	cmp	r3, #1
 8016ce6:	d806      	bhi.n	8016cf6 <etharp_query+0xfe>
 8016ce8:	4b5a      	ldr	r3, [pc, #360]	@ (8016e54 <etharp_query+0x25c>)
 8016cea:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8016cee:	495d      	ldr	r1, [pc, #372]	@ (8016e64 <etharp_query+0x26c>)
 8016cf0:	485a      	ldr	r0, [pc, #360]	@ (8016e5c <etharp_query+0x264>)
 8016cf2:	f002 f827 	bl	8018d44 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8016cf6:	6a3b      	ldr	r3, [r7, #32]
 8016cf8:	2b00      	cmp	r3, #0
 8016cfa:	d102      	bne.n	8016d02 <etharp_query+0x10a>
 8016cfc:	687b      	ldr	r3, [r7, #4]
 8016cfe:	2b00      	cmp	r3, #0
 8016d00:	d10c      	bne.n	8016d1c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8016d02:	68b9      	ldr	r1, [r7, #8]
 8016d04:	68f8      	ldr	r0, [r7, #12]
 8016d06:	f000 f963 	bl	8016fd0 <etharp_request>
 8016d0a:	4603      	mov	r3, r0
 8016d0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8016d10:	687b      	ldr	r3, [r7, #4]
 8016d12:	2b00      	cmp	r3, #0
 8016d14:	d102      	bne.n	8016d1c <etharp_query+0x124>
      return result;
 8016d16:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8016d1a:	e096      	b.n	8016e4a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8016d1c:	687b      	ldr	r3, [r7, #4]
 8016d1e:	2b00      	cmp	r3, #0
 8016d20:	d106      	bne.n	8016d30 <etharp_query+0x138>
 8016d22:	4b4c      	ldr	r3, [pc, #304]	@ (8016e54 <etharp_query+0x25c>)
 8016d24:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8016d28:	494f      	ldr	r1, [pc, #316]	@ (8016e68 <etharp_query+0x270>)
 8016d2a:	484c      	ldr	r0, [pc, #304]	@ (8016e5c <etharp_query+0x264>)
 8016d2c:	f002 f80a 	bl	8018d44 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8016d30:	7c7a      	ldrb	r2, [r7, #17]
 8016d32:	494b      	ldr	r1, [pc, #300]	@ (8016e60 <etharp_query+0x268>)
 8016d34:	4613      	mov	r3, r2
 8016d36:	005b      	lsls	r3, r3, #1
 8016d38:	4413      	add	r3, r2
 8016d3a:	00db      	lsls	r3, r3, #3
 8016d3c:	440b      	add	r3, r1
 8016d3e:	3314      	adds	r3, #20
 8016d40:	781b      	ldrb	r3, [r3, #0]
 8016d42:	2b01      	cmp	r3, #1
 8016d44:	d917      	bls.n	8016d76 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8016d46:	4a49      	ldr	r2, [pc, #292]	@ (8016e6c <etharp_query+0x274>)
 8016d48:	7c7b      	ldrb	r3, [r7, #17]
 8016d4a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8016d4c:	7c7a      	ldrb	r2, [r7, #17]
 8016d4e:	4613      	mov	r3, r2
 8016d50:	005b      	lsls	r3, r3, #1
 8016d52:	4413      	add	r3, r2
 8016d54:	00db      	lsls	r3, r3, #3
 8016d56:	3308      	adds	r3, #8
 8016d58:	4a41      	ldr	r2, [pc, #260]	@ (8016e60 <etharp_query+0x268>)
 8016d5a:	4413      	add	r3, r2
 8016d5c:	3304      	adds	r3, #4
 8016d5e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8016d62:	9200      	str	r2, [sp, #0]
 8016d64:	697a      	ldr	r2, [r7, #20]
 8016d66:	6879      	ldr	r1, [r7, #4]
 8016d68:	68f8      	ldr	r0, [r7, #12]
 8016d6a:	f001 fc93 	bl	8018694 <ethernet_output>
 8016d6e:	4603      	mov	r3, r0
 8016d70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8016d74:	e067      	b.n	8016e46 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016d76:	7c7a      	ldrb	r2, [r7, #17]
 8016d78:	4939      	ldr	r1, [pc, #228]	@ (8016e60 <etharp_query+0x268>)
 8016d7a:	4613      	mov	r3, r2
 8016d7c:	005b      	lsls	r3, r3, #1
 8016d7e:	4413      	add	r3, r2
 8016d80:	00db      	lsls	r3, r3, #3
 8016d82:	440b      	add	r3, r1
 8016d84:	3314      	adds	r3, #20
 8016d86:	781b      	ldrb	r3, [r3, #0]
 8016d88:	2b01      	cmp	r3, #1
 8016d8a:	d15c      	bne.n	8016e46 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8016d8c:	2300      	movs	r3, #0
 8016d8e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8016d90:	687b      	ldr	r3, [r7, #4]
 8016d92:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016d94:	e01c      	b.n	8016dd0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8016d96:	69fb      	ldr	r3, [r7, #28]
 8016d98:	895a      	ldrh	r2, [r3, #10]
 8016d9a:	69fb      	ldr	r3, [r7, #28]
 8016d9c:	891b      	ldrh	r3, [r3, #8]
 8016d9e:	429a      	cmp	r2, r3
 8016da0:	d10a      	bne.n	8016db8 <etharp_query+0x1c0>
 8016da2:	69fb      	ldr	r3, [r7, #28]
 8016da4:	681b      	ldr	r3, [r3, #0]
 8016da6:	2b00      	cmp	r3, #0
 8016da8:	d006      	beq.n	8016db8 <etharp_query+0x1c0>
 8016daa:	4b2a      	ldr	r3, [pc, #168]	@ (8016e54 <etharp_query+0x25c>)
 8016dac:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8016db0:	492f      	ldr	r1, [pc, #188]	@ (8016e70 <etharp_query+0x278>)
 8016db2:	482a      	ldr	r0, [pc, #168]	@ (8016e5c <etharp_query+0x264>)
 8016db4:	f001 ffc6 	bl	8018d44 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8016db8:	69fb      	ldr	r3, [r7, #28]
 8016dba:	7b1b      	ldrb	r3, [r3, #12]
 8016dbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016dc0:	2b00      	cmp	r3, #0
 8016dc2:	d002      	beq.n	8016dca <etharp_query+0x1d2>
        copy_needed = 1;
 8016dc4:	2301      	movs	r3, #1
 8016dc6:	61bb      	str	r3, [r7, #24]
        break;
 8016dc8:	e005      	b.n	8016dd6 <etharp_query+0x1de>
      }
      p = p->next;
 8016dca:	69fb      	ldr	r3, [r7, #28]
 8016dcc:	681b      	ldr	r3, [r3, #0]
 8016dce:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016dd0:	69fb      	ldr	r3, [r7, #28]
 8016dd2:	2b00      	cmp	r3, #0
 8016dd4:	d1df      	bne.n	8016d96 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8016dd6:	69bb      	ldr	r3, [r7, #24]
 8016dd8:	2b00      	cmp	r3, #0
 8016dda:	d007      	beq.n	8016dec <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8016ddc:	687a      	ldr	r2, [r7, #4]
 8016dde:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8016de2:	200e      	movs	r0, #14
 8016de4:	f7f6 faec 	bl	800d3c0 <pbuf_clone>
 8016de8:	61f8      	str	r0, [r7, #28]
 8016dea:	e004      	b.n	8016df6 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8016dec:	687b      	ldr	r3, [r7, #4]
 8016dee:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8016df0:	69f8      	ldr	r0, [r7, #28]
 8016df2:	f7f6 f913 	bl	800d01c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8016df6:	69fb      	ldr	r3, [r7, #28]
 8016df8:	2b00      	cmp	r3, #0
 8016dfa:	d021      	beq.n	8016e40 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8016dfc:	7c7a      	ldrb	r2, [r7, #17]
 8016dfe:	4918      	ldr	r1, [pc, #96]	@ (8016e60 <etharp_query+0x268>)
 8016e00:	4613      	mov	r3, r2
 8016e02:	005b      	lsls	r3, r3, #1
 8016e04:	4413      	add	r3, r2
 8016e06:	00db      	lsls	r3, r3, #3
 8016e08:	440b      	add	r3, r1
 8016e0a:	681b      	ldr	r3, [r3, #0]
 8016e0c:	2b00      	cmp	r3, #0
 8016e0e:	d00a      	beq.n	8016e26 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8016e10:	7c7a      	ldrb	r2, [r7, #17]
 8016e12:	4913      	ldr	r1, [pc, #76]	@ (8016e60 <etharp_query+0x268>)
 8016e14:	4613      	mov	r3, r2
 8016e16:	005b      	lsls	r3, r3, #1
 8016e18:	4413      	add	r3, r2
 8016e1a:	00db      	lsls	r3, r3, #3
 8016e1c:	440b      	add	r3, r1
 8016e1e:	681b      	ldr	r3, [r3, #0]
 8016e20:	4618      	mov	r0, r3
 8016e22:	f7f6 f855 	bl	800ced0 <pbuf_free>
      }
      arp_table[i].q = p;
 8016e26:	7c7a      	ldrb	r2, [r7, #17]
 8016e28:	490d      	ldr	r1, [pc, #52]	@ (8016e60 <etharp_query+0x268>)
 8016e2a:	4613      	mov	r3, r2
 8016e2c:	005b      	lsls	r3, r3, #1
 8016e2e:	4413      	add	r3, r2
 8016e30:	00db      	lsls	r3, r3, #3
 8016e32:	440b      	add	r3, r1
 8016e34:	69fa      	ldr	r2, [r7, #28]
 8016e36:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8016e38:	2300      	movs	r3, #0
 8016e3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8016e3e:	e002      	b.n	8016e46 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8016e40:	23ff      	movs	r3, #255	@ 0xff
 8016e42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8016e46:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8016e4a:	4618      	mov	r0, r3
 8016e4c:	3728      	adds	r7, #40	@ 0x28
 8016e4e:	46bd      	mov	sp, r7
 8016e50:	bd80      	pop	{r7, pc}
 8016e52:	bf00      	nop
 8016e54:	0801d668 	.word	0x0801d668
 8016e58:	0801d814 	.word	0x0801d814
 8016e5c:	0801d6e0 	.word	0x0801d6e0
 8016e60:	20010f08 	.word	0x20010f08
 8016e64:	0801d824 	.word	0x0801d824
 8016e68:	0801d808 	.word	0x0801d808
 8016e6c:	20010ff8 	.word	0x20010ff8
 8016e70:	0801d84c 	.word	0x0801d84c

08016e74 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8016e74:	b580      	push	{r7, lr}
 8016e76:	b08a      	sub	sp, #40	@ 0x28
 8016e78:	af02      	add	r7, sp, #8
 8016e7a:	60f8      	str	r0, [r7, #12]
 8016e7c:	60b9      	str	r1, [r7, #8]
 8016e7e:	607a      	str	r2, [r7, #4]
 8016e80:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8016e82:	2300      	movs	r3, #0
 8016e84:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016e86:	68fb      	ldr	r3, [r7, #12]
 8016e88:	2b00      	cmp	r3, #0
 8016e8a:	d106      	bne.n	8016e9a <etharp_raw+0x26>
 8016e8c:	4b3a      	ldr	r3, [pc, #232]	@ (8016f78 <etharp_raw+0x104>)
 8016e8e:	f240 4257 	movw	r2, #1111	@ 0x457
 8016e92:	493a      	ldr	r1, [pc, #232]	@ (8016f7c <etharp_raw+0x108>)
 8016e94:	483a      	ldr	r0, [pc, #232]	@ (8016f80 <etharp_raw+0x10c>)
 8016e96:	f001 ff55 	bl	8018d44 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8016e9a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016e9e:	211c      	movs	r1, #28
 8016ea0:	200e      	movs	r0, #14
 8016ea2:	f7f5 fd31 	bl	800c908 <pbuf_alloc>
 8016ea6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8016ea8:	69bb      	ldr	r3, [r7, #24]
 8016eaa:	2b00      	cmp	r3, #0
 8016eac:	d102      	bne.n	8016eb4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8016eae:	f04f 33ff 	mov.w	r3, #4294967295
 8016eb2:	e05d      	b.n	8016f70 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8016eb4:	69bb      	ldr	r3, [r7, #24]
 8016eb6:	895b      	ldrh	r3, [r3, #10]
 8016eb8:	2b1b      	cmp	r3, #27
 8016eba:	d806      	bhi.n	8016eca <etharp_raw+0x56>
 8016ebc:	4b2e      	ldr	r3, [pc, #184]	@ (8016f78 <etharp_raw+0x104>)
 8016ebe:	f240 4262 	movw	r2, #1122	@ 0x462
 8016ec2:	4930      	ldr	r1, [pc, #192]	@ (8016f84 <etharp_raw+0x110>)
 8016ec4:	482e      	ldr	r0, [pc, #184]	@ (8016f80 <etharp_raw+0x10c>)
 8016ec6:	f001 ff3d 	bl	8018d44 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8016eca:	69bb      	ldr	r3, [r7, #24]
 8016ecc:	685b      	ldr	r3, [r3, #4]
 8016ece:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8016ed0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8016ed2:	4618      	mov	r0, r3
 8016ed4:	f7f4 fbc8 	bl	800b668 <lwip_htons>
 8016ed8:	4603      	mov	r3, r0
 8016eda:	461a      	mov	r2, r3
 8016edc:	697b      	ldr	r3, [r7, #20]
 8016ede:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8016ee0:	68fb      	ldr	r3, [r7, #12]
 8016ee2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8016ee6:	2b06      	cmp	r3, #6
 8016ee8:	d006      	beq.n	8016ef8 <etharp_raw+0x84>
 8016eea:	4b23      	ldr	r3, [pc, #140]	@ (8016f78 <etharp_raw+0x104>)
 8016eec:	f240 4269 	movw	r2, #1129	@ 0x469
 8016ef0:	4925      	ldr	r1, [pc, #148]	@ (8016f88 <etharp_raw+0x114>)
 8016ef2:	4823      	ldr	r0, [pc, #140]	@ (8016f80 <etharp_raw+0x10c>)
 8016ef4:	f001 ff26 	bl	8018d44 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8016ef8:	697b      	ldr	r3, [r7, #20]
 8016efa:	3308      	adds	r3, #8
 8016efc:	2206      	movs	r2, #6
 8016efe:	6839      	ldr	r1, [r7, #0]
 8016f00:	4618      	mov	r0, r3
 8016f02:	f002 f920 	bl	8019146 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8016f06:	697b      	ldr	r3, [r7, #20]
 8016f08:	3312      	adds	r3, #18
 8016f0a:	2206      	movs	r2, #6
 8016f0c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8016f0e:	4618      	mov	r0, r3
 8016f10:	f002 f919 	bl	8019146 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8016f14:	697b      	ldr	r3, [r7, #20]
 8016f16:	330e      	adds	r3, #14
 8016f18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016f1a:	6812      	ldr	r2, [r2, #0]
 8016f1c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8016f1e:	697b      	ldr	r3, [r7, #20]
 8016f20:	3318      	adds	r3, #24
 8016f22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016f24:	6812      	ldr	r2, [r2, #0]
 8016f26:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8016f28:	697b      	ldr	r3, [r7, #20]
 8016f2a:	2200      	movs	r2, #0
 8016f2c:	701a      	strb	r2, [r3, #0]
 8016f2e:	2200      	movs	r2, #0
 8016f30:	f042 0201 	orr.w	r2, r2, #1
 8016f34:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8016f36:	697b      	ldr	r3, [r7, #20]
 8016f38:	2200      	movs	r2, #0
 8016f3a:	f042 0208 	orr.w	r2, r2, #8
 8016f3e:	709a      	strb	r2, [r3, #2]
 8016f40:	2200      	movs	r2, #0
 8016f42:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8016f44:	697b      	ldr	r3, [r7, #20]
 8016f46:	2206      	movs	r2, #6
 8016f48:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8016f4a:	697b      	ldr	r3, [r7, #20]
 8016f4c:	2204      	movs	r2, #4
 8016f4e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8016f50:	f640 0306 	movw	r3, #2054	@ 0x806
 8016f54:	9300      	str	r3, [sp, #0]
 8016f56:	687b      	ldr	r3, [r7, #4]
 8016f58:	68ba      	ldr	r2, [r7, #8]
 8016f5a:	69b9      	ldr	r1, [r7, #24]
 8016f5c:	68f8      	ldr	r0, [r7, #12]
 8016f5e:	f001 fb99 	bl	8018694 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8016f62:	69b8      	ldr	r0, [r7, #24]
 8016f64:	f7f5 ffb4 	bl	800ced0 <pbuf_free>
  p = NULL;
 8016f68:	2300      	movs	r3, #0
 8016f6a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8016f6c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016f70:	4618      	mov	r0, r3
 8016f72:	3720      	adds	r7, #32
 8016f74:	46bd      	mov	sp, r7
 8016f76:	bd80      	pop	{r7, pc}
 8016f78:	0801d668 	.word	0x0801d668
 8016f7c:	0801d7b8 	.word	0x0801d7b8
 8016f80:	0801d6e0 	.word	0x0801d6e0
 8016f84:	0801d868 	.word	0x0801d868
 8016f88:	0801d89c 	.word	0x0801d89c

08016f8c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8016f8c:	b580      	push	{r7, lr}
 8016f8e:	b088      	sub	sp, #32
 8016f90:	af04      	add	r7, sp, #16
 8016f92:	60f8      	str	r0, [r7, #12]
 8016f94:	60b9      	str	r1, [r7, #8]
 8016f96:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016f98:	68fb      	ldr	r3, [r7, #12]
 8016f9a:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8016f9e:	68fb      	ldr	r3, [r7, #12]
 8016fa0:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 8016fa4:	68fb      	ldr	r3, [r7, #12]
 8016fa6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016fa8:	2201      	movs	r2, #1
 8016faa:	9203      	str	r2, [sp, #12]
 8016fac:	68ba      	ldr	r2, [r7, #8]
 8016fae:	9202      	str	r2, [sp, #8]
 8016fb0:	4a06      	ldr	r2, [pc, #24]	@ (8016fcc <etharp_request_dst+0x40>)
 8016fb2:	9201      	str	r2, [sp, #4]
 8016fb4:	9300      	str	r3, [sp, #0]
 8016fb6:	4603      	mov	r3, r0
 8016fb8:	687a      	ldr	r2, [r7, #4]
 8016fba:	68f8      	ldr	r0, [r7, #12]
 8016fbc:	f7ff ff5a 	bl	8016e74 <etharp_raw>
 8016fc0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8016fc2:	4618      	mov	r0, r3
 8016fc4:	3710      	adds	r7, #16
 8016fc6:	46bd      	mov	sp, r7
 8016fc8:	bd80      	pop	{r7, pc}
 8016fca:	bf00      	nop
 8016fcc:	08027fbc 	.word	0x08027fbc

08016fd0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8016fd0:	b580      	push	{r7, lr}
 8016fd2:	b082      	sub	sp, #8
 8016fd4:	af00      	add	r7, sp, #0
 8016fd6:	6078      	str	r0, [r7, #4]
 8016fd8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8016fda:	4a05      	ldr	r2, [pc, #20]	@ (8016ff0 <etharp_request+0x20>)
 8016fdc:	6839      	ldr	r1, [r7, #0]
 8016fde:	6878      	ldr	r0, [r7, #4]
 8016fe0:	f7ff ffd4 	bl	8016f8c <etharp_request_dst>
 8016fe4:	4603      	mov	r3, r0
}
 8016fe6:	4618      	mov	r0, r3
 8016fe8:	3708      	adds	r7, #8
 8016fea:	46bd      	mov	sp, r7
 8016fec:	bd80      	pop	{r7, pc}
 8016fee:	bf00      	nop
 8016ff0:	08027fb4 	.word	0x08027fb4

08016ff4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8016ff4:	b580      	push	{r7, lr}
 8016ff6:	b08e      	sub	sp, #56	@ 0x38
 8016ff8:	af04      	add	r7, sp, #16
 8016ffa:	6078      	str	r0, [r7, #4]
 8016ffc:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8016ffe:	4b79      	ldr	r3, [pc, #484]	@ (80171e4 <icmp_input+0x1f0>)
 8017000:	689b      	ldr	r3, [r3, #8]
 8017002:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8017004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017006:	781b      	ldrb	r3, [r3, #0]
 8017008:	f003 030f 	and.w	r3, r3, #15
 801700c:	b2db      	uxtb	r3, r3
 801700e:	009b      	lsls	r3, r3, #2
 8017010:	b2db      	uxtb	r3, r3
 8017012:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8017014:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017016:	2b13      	cmp	r3, #19
 8017018:	f240 80cd 	bls.w	80171b6 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801701c:	687b      	ldr	r3, [r7, #4]
 801701e:	895b      	ldrh	r3, [r3, #10]
 8017020:	2b03      	cmp	r3, #3
 8017022:	f240 80ca 	bls.w	80171ba <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8017026:	687b      	ldr	r3, [r7, #4]
 8017028:	685b      	ldr	r3, [r3, #4]
 801702a:	781b      	ldrb	r3, [r3, #0]
 801702c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8017030:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8017034:	2b00      	cmp	r3, #0
 8017036:	f000 80b7 	beq.w	80171a8 <icmp_input+0x1b4>
 801703a:	2b08      	cmp	r3, #8
 801703c:	f040 80b7 	bne.w	80171ae <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8017040:	4b69      	ldr	r3, [pc, #420]	@ (80171e8 <icmp_input+0x1f4>)
 8017042:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017044:	4b67      	ldr	r3, [pc, #412]	@ (80171e4 <icmp_input+0x1f0>)
 8017046:	695b      	ldr	r3, [r3, #20]
 8017048:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801704c:	2be0      	cmp	r3, #224	@ 0xe0
 801704e:	f000 80bb 	beq.w	80171c8 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8017052:	4b64      	ldr	r3, [pc, #400]	@ (80171e4 <icmp_input+0x1f0>)
 8017054:	695b      	ldr	r3, [r3, #20]
 8017056:	4a63      	ldr	r2, [pc, #396]	@ (80171e4 <icmp_input+0x1f0>)
 8017058:	6812      	ldr	r2, [r2, #0]
 801705a:	4611      	mov	r1, r2
 801705c:	4618      	mov	r0, r3
 801705e:	f000 fc0b 	bl	8017878 <ip4_addr_isbroadcast_u32>
 8017062:	4603      	mov	r3, r0
 8017064:	2b00      	cmp	r3, #0
 8017066:	f040 80b1 	bne.w	80171cc <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801706a:	687b      	ldr	r3, [r7, #4]
 801706c:	891b      	ldrh	r3, [r3, #8]
 801706e:	2b07      	cmp	r3, #7
 8017070:	f240 80a5 	bls.w	80171be <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8017074:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017076:	330e      	adds	r3, #14
 8017078:	4619      	mov	r1, r3
 801707a:	6878      	ldr	r0, [r7, #4]
 801707c:	f7f5 fe92 	bl	800cda4 <pbuf_add_header>
 8017080:	4603      	mov	r3, r0
 8017082:	2b00      	cmp	r3, #0
 8017084:	d04b      	beq.n	801711e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8017086:	687b      	ldr	r3, [r7, #4]
 8017088:	891a      	ldrh	r2, [r3, #8]
 801708a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801708c:	4413      	add	r3, r2
 801708e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8017090:	687b      	ldr	r3, [r7, #4]
 8017092:	891b      	ldrh	r3, [r3, #8]
 8017094:	8b7a      	ldrh	r2, [r7, #26]
 8017096:	429a      	cmp	r2, r3
 8017098:	f0c0 809a 	bcc.w	80171d0 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801709c:	8b7b      	ldrh	r3, [r7, #26]
 801709e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80170a2:	4619      	mov	r1, r3
 80170a4:	200e      	movs	r0, #14
 80170a6:	f7f5 fc2f 	bl	800c908 <pbuf_alloc>
 80170aa:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80170ac:	697b      	ldr	r3, [r7, #20]
 80170ae:	2b00      	cmp	r3, #0
 80170b0:	f000 8090 	beq.w	80171d4 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80170b4:	697b      	ldr	r3, [r7, #20]
 80170b6:	895b      	ldrh	r3, [r3, #10]
 80170b8:	461a      	mov	r2, r3
 80170ba:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80170bc:	3308      	adds	r3, #8
 80170be:	429a      	cmp	r2, r3
 80170c0:	d203      	bcs.n	80170ca <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80170c2:	6978      	ldr	r0, [r7, #20]
 80170c4:	f7f5 ff04 	bl	800ced0 <pbuf_free>
          goto icmperr;
 80170c8:	e085      	b.n	80171d6 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80170ca:	697b      	ldr	r3, [r7, #20]
 80170cc:	685b      	ldr	r3, [r3, #4]
 80170ce:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80170d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80170d2:	4618      	mov	r0, r3
 80170d4:	f002 f837 	bl	8019146 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80170d8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80170da:	4619      	mov	r1, r3
 80170dc:	6978      	ldr	r0, [r7, #20]
 80170de:	f7f5 fe71 	bl	800cdc4 <pbuf_remove_header>
 80170e2:	4603      	mov	r3, r0
 80170e4:	2b00      	cmp	r3, #0
 80170e6:	d009      	beq.n	80170fc <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80170e8:	4b40      	ldr	r3, [pc, #256]	@ (80171ec <icmp_input+0x1f8>)
 80170ea:	22b6      	movs	r2, #182	@ 0xb6
 80170ec:	4940      	ldr	r1, [pc, #256]	@ (80171f0 <icmp_input+0x1fc>)
 80170ee:	4841      	ldr	r0, [pc, #260]	@ (80171f4 <icmp_input+0x200>)
 80170f0:	f001 fe28 	bl	8018d44 <iprintf>
          pbuf_free(r);
 80170f4:	6978      	ldr	r0, [r7, #20]
 80170f6:	f7f5 feeb 	bl	800ced0 <pbuf_free>
          goto icmperr;
 80170fa:	e06c      	b.n	80171d6 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80170fc:	6879      	ldr	r1, [r7, #4]
 80170fe:	6978      	ldr	r0, [r7, #20]
 8017100:	f7f6 f81a 	bl	800d138 <pbuf_copy>
 8017104:	4603      	mov	r3, r0
 8017106:	2b00      	cmp	r3, #0
 8017108:	d003      	beq.n	8017112 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801710a:	6978      	ldr	r0, [r7, #20]
 801710c:	f7f5 fee0 	bl	800ced0 <pbuf_free>
          goto icmperr;
 8017110:	e061      	b.n	80171d6 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8017112:	6878      	ldr	r0, [r7, #4]
 8017114:	f7f5 fedc 	bl	800ced0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8017118:	697b      	ldr	r3, [r7, #20]
 801711a:	607b      	str	r3, [r7, #4]
 801711c:	e00f      	b.n	801713e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801711e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017120:	330e      	adds	r3, #14
 8017122:	4619      	mov	r1, r3
 8017124:	6878      	ldr	r0, [r7, #4]
 8017126:	f7f5 fe4d 	bl	800cdc4 <pbuf_remove_header>
 801712a:	4603      	mov	r3, r0
 801712c:	2b00      	cmp	r3, #0
 801712e:	d006      	beq.n	801713e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8017130:	4b2e      	ldr	r3, [pc, #184]	@ (80171ec <icmp_input+0x1f8>)
 8017132:	22c7      	movs	r2, #199	@ 0xc7
 8017134:	4930      	ldr	r1, [pc, #192]	@ (80171f8 <icmp_input+0x204>)
 8017136:	482f      	ldr	r0, [pc, #188]	@ (80171f4 <icmp_input+0x200>)
 8017138:	f001 fe04 	bl	8018d44 <iprintf>
          goto icmperr;
 801713c:	e04b      	b.n	80171d6 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801713e:	687b      	ldr	r3, [r7, #4]
 8017140:	685b      	ldr	r3, [r3, #4]
 8017142:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8017144:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017146:	4619      	mov	r1, r3
 8017148:	6878      	ldr	r0, [r7, #4]
 801714a:	f7f5 fe2b 	bl	800cda4 <pbuf_add_header>
 801714e:	4603      	mov	r3, r0
 8017150:	2b00      	cmp	r3, #0
 8017152:	d12b      	bne.n	80171ac <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8017154:	687b      	ldr	r3, [r7, #4]
 8017156:	685b      	ldr	r3, [r3, #4]
 8017158:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801715a:	69fb      	ldr	r3, [r7, #28]
 801715c:	681a      	ldr	r2, [r3, #0]
 801715e:	68fb      	ldr	r3, [r7, #12]
 8017160:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8017162:	4b20      	ldr	r3, [pc, #128]	@ (80171e4 <icmp_input+0x1f0>)
 8017164:	691a      	ldr	r2, [r3, #16]
 8017166:	68fb      	ldr	r3, [r7, #12]
 8017168:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801716a:	693b      	ldr	r3, [r7, #16]
 801716c:	2200      	movs	r2, #0
 801716e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8017170:	693b      	ldr	r3, [r7, #16]
 8017172:	2200      	movs	r2, #0
 8017174:	709a      	strb	r2, [r3, #2]
 8017176:	2200      	movs	r2, #0
 8017178:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801717a:	68fb      	ldr	r3, [r7, #12]
 801717c:	22ff      	movs	r2, #255	@ 0xff
 801717e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8017180:	68fb      	ldr	r3, [r7, #12]
 8017182:	2200      	movs	r2, #0
 8017184:	729a      	strb	r2, [r3, #10]
 8017186:	2200      	movs	r2, #0
 8017188:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801718a:	683b      	ldr	r3, [r7, #0]
 801718c:	9302      	str	r3, [sp, #8]
 801718e:	2301      	movs	r3, #1
 8017190:	9301      	str	r3, [sp, #4]
 8017192:	2300      	movs	r3, #0
 8017194:	9300      	str	r3, [sp, #0]
 8017196:	23ff      	movs	r3, #255	@ 0xff
 8017198:	2200      	movs	r2, #0
 801719a:	69f9      	ldr	r1, [r7, #28]
 801719c:	6878      	ldr	r0, [r7, #4]
 801719e:	f000 fa93 	bl	80176c8 <ip4_output_if>
 80171a2:	4603      	mov	r3, r0
 80171a4:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80171a6:	e001      	b.n	80171ac <icmp_input+0x1b8>
      break;
 80171a8:	bf00      	nop
 80171aa:	e000      	b.n	80171ae <icmp_input+0x1ba>
      break;
 80171ac:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80171ae:	6878      	ldr	r0, [r7, #4]
 80171b0:	f7f5 fe8e 	bl	800ced0 <pbuf_free>
  return;
 80171b4:	e013      	b.n	80171de <icmp_input+0x1ea>
    goto lenerr;
 80171b6:	bf00      	nop
 80171b8:	e002      	b.n	80171c0 <icmp_input+0x1cc>
    goto lenerr;
 80171ba:	bf00      	nop
 80171bc:	e000      	b.n	80171c0 <icmp_input+0x1cc>
        goto lenerr;
 80171be:	bf00      	nop
lenerr:
  pbuf_free(p);
 80171c0:	6878      	ldr	r0, [r7, #4]
 80171c2:	f7f5 fe85 	bl	800ced0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80171c6:	e00a      	b.n	80171de <icmp_input+0x1ea>
        goto icmperr;
 80171c8:	bf00      	nop
 80171ca:	e004      	b.n	80171d6 <icmp_input+0x1e2>
        goto icmperr;
 80171cc:	bf00      	nop
 80171ce:	e002      	b.n	80171d6 <icmp_input+0x1e2>
          goto icmperr;
 80171d0:	bf00      	nop
 80171d2:	e000      	b.n	80171d6 <icmp_input+0x1e2>
          goto icmperr;
 80171d4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80171d6:	6878      	ldr	r0, [r7, #4]
 80171d8:	f7f5 fe7a 	bl	800ced0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80171dc:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80171de:	3728      	adds	r7, #40	@ 0x28
 80171e0:	46bd      	mov	sp, r7
 80171e2:	bd80      	pop	{r7, pc}
 80171e4:	2000d700 	.word	0x2000d700
 80171e8:	2000d714 	.word	0x2000d714
 80171ec:	0801d8e0 	.word	0x0801d8e0
 80171f0:	0801d918 	.word	0x0801d918
 80171f4:	0801d950 	.word	0x0801d950
 80171f8:	0801d978 	.word	0x0801d978

080171fc <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80171fc:	b580      	push	{r7, lr}
 80171fe:	b082      	sub	sp, #8
 8017200:	af00      	add	r7, sp, #0
 8017202:	6078      	str	r0, [r7, #4]
 8017204:	460b      	mov	r3, r1
 8017206:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8017208:	78fb      	ldrb	r3, [r7, #3]
 801720a:	461a      	mov	r2, r3
 801720c:	2103      	movs	r1, #3
 801720e:	6878      	ldr	r0, [r7, #4]
 8017210:	f000 f814 	bl	801723c <icmp_send_response>
}
 8017214:	bf00      	nop
 8017216:	3708      	adds	r7, #8
 8017218:	46bd      	mov	sp, r7
 801721a:	bd80      	pop	{r7, pc}

0801721c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801721c:	b580      	push	{r7, lr}
 801721e:	b082      	sub	sp, #8
 8017220:	af00      	add	r7, sp, #0
 8017222:	6078      	str	r0, [r7, #4]
 8017224:	460b      	mov	r3, r1
 8017226:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8017228:	78fb      	ldrb	r3, [r7, #3]
 801722a:	461a      	mov	r2, r3
 801722c:	210b      	movs	r1, #11
 801722e:	6878      	ldr	r0, [r7, #4]
 8017230:	f000 f804 	bl	801723c <icmp_send_response>
}
 8017234:	bf00      	nop
 8017236:	3708      	adds	r7, #8
 8017238:	46bd      	mov	sp, r7
 801723a:	bd80      	pop	{r7, pc}

0801723c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801723c:	b580      	push	{r7, lr}
 801723e:	b08c      	sub	sp, #48	@ 0x30
 8017240:	af04      	add	r7, sp, #16
 8017242:	6078      	str	r0, [r7, #4]
 8017244:	460b      	mov	r3, r1
 8017246:	70fb      	strb	r3, [r7, #3]
 8017248:	4613      	mov	r3, r2
 801724a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801724c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8017250:	2124      	movs	r1, #36	@ 0x24
 8017252:	2022      	movs	r0, #34	@ 0x22
 8017254:	f7f5 fb58 	bl	800c908 <pbuf_alloc>
 8017258:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801725a:	69fb      	ldr	r3, [r7, #28]
 801725c:	2b00      	cmp	r3, #0
 801725e:	d04c      	beq.n	80172fa <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8017260:	69fb      	ldr	r3, [r7, #28]
 8017262:	895b      	ldrh	r3, [r3, #10]
 8017264:	2b23      	cmp	r3, #35	@ 0x23
 8017266:	d806      	bhi.n	8017276 <icmp_send_response+0x3a>
 8017268:	4b26      	ldr	r3, [pc, #152]	@ (8017304 <icmp_send_response+0xc8>)
 801726a:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 801726e:	4926      	ldr	r1, [pc, #152]	@ (8017308 <icmp_send_response+0xcc>)
 8017270:	4826      	ldr	r0, [pc, #152]	@ (801730c <icmp_send_response+0xd0>)
 8017272:	f001 fd67 	bl	8018d44 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8017276:	687b      	ldr	r3, [r7, #4]
 8017278:	685b      	ldr	r3, [r3, #4]
 801727a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801727c:	69fb      	ldr	r3, [r7, #28]
 801727e:	685b      	ldr	r3, [r3, #4]
 8017280:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8017282:	697b      	ldr	r3, [r7, #20]
 8017284:	78fa      	ldrb	r2, [r7, #3]
 8017286:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8017288:	697b      	ldr	r3, [r7, #20]
 801728a:	78ba      	ldrb	r2, [r7, #2]
 801728c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801728e:	697b      	ldr	r3, [r7, #20]
 8017290:	2200      	movs	r2, #0
 8017292:	711a      	strb	r2, [r3, #4]
 8017294:	2200      	movs	r2, #0
 8017296:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8017298:	697b      	ldr	r3, [r7, #20]
 801729a:	2200      	movs	r2, #0
 801729c:	719a      	strb	r2, [r3, #6]
 801729e:	2200      	movs	r2, #0
 80172a0:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80172a2:	69fb      	ldr	r3, [r7, #28]
 80172a4:	685b      	ldr	r3, [r3, #4]
 80172a6:	f103 0008 	add.w	r0, r3, #8
 80172aa:	687b      	ldr	r3, [r7, #4]
 80172ac:	685b      	ldr	r3, [r3, #4]
 80172ae:	221c      	movs	r2, #28
 80172b0:	4619      	mov	r1, r3
 80172b2:	f001 ff48 	bl	8019146 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80172b6:	69bb      	ldr	r3, [r7, #24]
 80172b8:	68db      	ldr	r3, [r3, #12]
 80172ba:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80172bc:	f107 030c 	add.w	r3, r7, #12
 80172c0:	4618      	mov	r0, r3
 80172c2:	f000 f825 	bl	8017310 <ip4_route>
 80172c6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80172c8:	693b      	ldr	r3, [r7, #16]
 80172ca:	2b00      	cmp	r3, #0
 80172cc:	d011      	beq.n	80172f2 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80172ce:	697b      	ldr	r3, [r7, #20]
 80172d0:	2200      	movs	r2, #0
 80172d2:	709a      	strb	r2, [r3, #2]
 80172d4:	2200      	movs	r2, #0
 80172d6:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80172d8:	f107 020c 	add.w	r2, r7, #12
 80172dc:	693b      	ldr	r3, [r7, #16]
 80172de:	9302      	str	r3, [sp, #8]
 80172e0:	2301      	movs	r3, #1
 80172e2:	9301      	str	r3, [sp, #4]
 80172e4:	2300      	movs	r3, #0
 80172e6:	9300      	str	r3, [sp, #0]
 80172e8:	23ff      	movs	r3, #255	@ 0xff
 80172ea:	2100      	movs	r1, #0
 80172ec:	69f8      	ldr	r0, [r7, #28]
 80172ee:	f000 f9eb 	bl	80176c8 <ip4_output_if>
  }
  pbuf_free(q);
 80172f2:	69f8      	ldr	r0, [r7, #28]
 80172f4:	f7f5 fdec 	bl	800ced0 <pbuf_free>
 80172f8:	e000      	b.n	80172fc <icmp_send_response+0xc0>
    return;
 80172fa:	bf00      	nop
}
 80172fc:	3720      	adds	r7, #32
 80172fe:	46bd      	mov	sp, r7
 8017300:	bd80      	pop	{r7, pc}
 8017302:	bf00      	nop
 8017304:	0801d8e0 	.word	0x0801d8e0
 8017308:	0801d9ac 	.word	0x0801d9ac
 801730c:	0801d950 	.word	0x0801d950

08017310 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8017310:	b480      	push	{r7}
 8017312:	b085      	sub	sp, #20
 8017314:	af00      	add	r7, sp, #0
 8017316:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8017318:	4b33      	ldr	r3, [pc, #204]	@ (80173e8 <ip4_route+0xd8>)
 801731a:	681b      	ldr	r3, [r3, #0]
 801731c:	60fb      	str	r3, [r7, #12]
 801731e:	e036      	b.n	801738e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017320:	68fb      	ldr	r3, [r7, #12]
 8017322:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8017326:	f003 0301 	and.w	r3, r3, #1
 801732a:	b2db      	uxtb	r3, r3
 801732c:	2b00      	cmp	r3, #0
 801732e:	d02b      	beq.n	8017388 <ip4_route+0x78>
 8017330:	68fb      	ldr	r3, [r7, #12]
 8017332:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8017336:	089b      	lsrs	r3, r3, #2
 8017338:	f003 0301 	and.w	r3, r3, #1
 801733c:	b2db      	uxtb	r3, r3
 801733e:	2b00      	cmp	r3, #0
 8017340:	d022      	beq.n	8017388 <ip4_route+0x78>
 8017342:	68fb      	ldr	r3, [r7, #12]
 8017344:	3304      	adds	r3, #4
 8017346:	681b      	ldr	r3, [r3, #0]
 8017348:	2b00      	cmp	r3, #0
 801734a:	d01d      	beq.n	8017388 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801734c:	687b      	ldr	r3, [r7, #4]
 801734e:	681a      	ldr	r2, [r3, #0]
 8017350:	68fb      	ldr	r3, [r7, #12]
 8017352:	3304      	adds	r3, #4
 8017354:	681b      	ldr	r3, [r3, #0]
 8017356:	405a      	eors	r2, r3
 8017358:	68fb      	ldr	r3, [r7, #12]
 801735a:	3308      	adds	r3, #8
 801735c:	681b      	ldr	r3, [r3, #0]
 801735e:	4013      	ands	r3, r2
 8017360:	2b00      	cmp	r3, #0
 8017362:	d101      	bne.n	8017368 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8017364:	68fb      	ldr	r3, [r7, #12]
 8017366:	e038      	b.n	80173da <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8017368:	68fb      	ldr	r3, [r7, #12]
 801736a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801736e:	f003 0302 	and.w	r3, r3, #2
 8017372:	2b00      	cmp	r3, #0
 8017374:	d108      	bne.n	8017388 <ip4_route+0x78>
 8017376:	687b      	ldr	r3, [r7, #4]
 8017378:	681a      	ldr	r2, [r3, #0]
 801737a:	68fb      	ldr	r3, [r7, #12]
 801737c:	330c      	adds	r3, #12
 801737e:	681b      	ldr	r3, [r3, #0]
 8017380:	429a      	cmp	r2, r3
 8017382:	d101      	bne.n	8017388 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8017384:	68fb      	ldr	r3, [r7, #12]
 8017386:	e028      	b.n	80173da <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8017388:	68fb      	ldr	r3, [r7, #12]
 801738a:	681b      	ldr	r3, [r3, #0]
 801738c:	60fb      	str	r3, [r7, #12]
 801738e:	68fb      	ldr	r3, [r7, #12]
 8017390:	2b00      	cmp	r3, #0
 8017392:	d1c5      	bne.n	8017320 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017394:	4b15      	ldr	r3, [pc, #84]	@ (80173ec <ip4_route+0xdc>)
 8017396:	681b      	ldr	r3, [r3, #0]
 8017398:	2b00      	cmp	r3, #0
 801739a:	d01a      	beq.n	80173d2 <ip4_route+0xc2>
 801739c:	4b13      	ldr	r3, [pc, #76]	@ (80173ec <ip4_route+0xdc>)
 801739e:	681b      	ldr	r3, [r3, #0]
 80173a0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80173a4:	f003 0301 	and.w	r3, r3, #1
 80173a8:	2b00      	cmp	r3, #0
 80173aa:	d012      	beq.n	80173d2 <ip4_route+0xc2>
 80173ac:	4b0f      	ldr	r3, [pc, #60]	@ (80173ec <ip4_route+0xdc>)
 80173ae:	681b      	ldr	r3, [r3, #0]
 80173b0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80173b4:	f003 0304 	and.w	r3, r3, #4
 80173b8:	2b00      	cmp	r3, #0
 80173ba:	d00a      	beq.n	80173d2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80173bc:	4b0b      	ldr	r3, [pc, #44]	@ (80173ec <ip4_route+0xdc>)
 80173be:	681b      	ldr	r3, [r3, #0]
 80173c0:	3304      	adds	r3, #4
 80173c2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80173c4:	2b00      	cmp	r3, #0
 80173c6:	d004      	beq.n	80173d2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80173c8:	687b      	ldr	r3, [r7, #4]
 80173ca:	681b      	ldr	r3, [r3, #0]
 80173cc:	b2db      	uxtb	r3, r3
 80173ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80173d0:	d101      	bne.n	80173d6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80173d2:	2300      	movs	r3, #0
 80173d4:	e001      	b.n	80173da <ip4_route+0xca>
  }

  return netif_default;
 80173d6:	4b05      	ldr	r3, [pc, #20]	@ (80173ec <ip4_route+0xdc>)
 80173d8:	681b      	ldr	r3, [r3, #0]
}
 80173da:	4618      	mov	r0, r3
 80173dc:	3714      	adds	r7, #20
 80173de:	46bd      	mov	sp, r7
 80173e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173e4:	4770      	bx	lr
 80173e6:	bf00      	nop
 80173e8:	20010e68 	.word	0x20010e68
 80173ec:	20010e6c 	.word	0x20010e6c

080173f0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80173f0:	b580      	push	{r7, lr}
 80173f2:	b082      	sub	sp, #8
 80173f4:	af00      	add	r7, sp, #0
 80173f6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80173f8:	687b      	ldr	r3, [r7, #4]
 80173fa:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80173fe:	f003 0301 	and.w	r3, r3, #1
 8017402:	b2db      	uxtb	r3, r3
 8017404:	2b00      	cmp	r3, #0
 8017406:	d016      	beq.n	8017436 <ip4_input_accept+0x46>
 8017408:	687b      	ldr	r3, [r7, #4]
 801740a:	3304      	adds	r3, #4
 801740c:	681b      	ldr	r3, [r3, #0]
 801740e:	2b00      	cmp	r3, #0
 8017410:	d011      	beq.n	8017436 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017412:	4b0b      	ldr	r3, [pc, #44]	@ (8017440 <ip4_input_accept+0x50>)
 8017414:	695a      	ldr	r2, [r3, #20]
 8017416:	687b      	ldr	r3, [r7, #4]
 8017418:	3304      	adds	r3, #4
 801741a:	681b      	ldr	r3, [r3, #0]
 801741c:	429a      	cmp	r2, r3
 801741e:	d008      	beq.n	8017432 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8017420:	4b07      	ldr	r3, [pc, #28]	@ (8017440 <ip4_input_accept+0x50>)
 8017422:	695b      	ldr	r3, [r3, #20]
 8017424:	6879      	ldr	r1, [r7, #4]
 8017426:	4618      	mov	r0, r3
 8017428:	f000 fa26 	bl	8017878 <ip4_addr_isbroadcast_u32>
 801742c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801742e:	2b00      	cmp	r3, #0
 8017430:	d001      	beq.n	8017436 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8017432:	2301      	movs	r3, #1
 8017434:	e000      	b.n	8017438 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8017436:	2300      	movs	r3, #0
}
 8017438:	4618      	mov	r0, r3
 801743a:	3708      	adds	r7, #8
 801743c:	46bd      	mov	sp, r7
 801743e:	bd80      	pop	{r7, pc}
 8017440:	2000d700 	.word	0x2000d700

08017444 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8017444:	b580      	push	{r7, lr}
 8017446:	b088      	sub	sp, #32
 8017448:	af00      	add	r7, sp, #0
 801744a:	6078      	str	r0, [r7, #4]
 801744c:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801744e:	2301      	movs	r3, #1
 8017450:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8017452:	687b      	ldr	r3, [r7, #4]
 8017454:	685b      	ldr	r3, [r3, #4]
 8017456:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8017458:	69fb      	ldr	r3, [r7, #28]
 801745a:	781b      	ldrb	r3, [r3, #0]
 801745c:	091b      	lsrs	r3, r3, #4
 801745e:	b2db      	uxtb	r3, r3
 8017460:	2b04      	cmp	r3, #4
 8017462:	d004      	beq.n	801746e <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8017464:	6878      	ldr	r0, [r7, #4]
 8017466:	f7f5 fd33 	bl	800ced0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801746a:	2300      	movs	r3, #0
 801746c:	e123      	b.n	80176b6 <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801746e:	69fb      	ldr	r3, [r7, #28]
 8017470:	781b      	ldrb	r3, [r3, #0]
 8017472:	f003 030f 	and.w	r3, r3, #15
 8017476:	b2db      	uxtb	r3, r3
 8017478:	009b      	lsls	r3, r3, #2
 801747a:	b2db      	uxtb	r3, r3
 801747c:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801747e:	69fb      	ldr	r3, [r7, #28]
 8017480:	885b      	ldrh	r3, [r3, #2]
 8017482:	b29b      	uxth	r3, r3
 8017484:	4618      	mov	r0, r3
 8017486:	f7f4 f8ef 	bl	800b668 <lwip_htons>
 801748a:	4603      	mov	r3, r0
 801748c:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801748e:	687b      	ldr	r3, [r7, #4]
 8017490:	891b      	ldrh	r3, [r3, #8]
 8017492:	8a3a      	ldrh	r2, [r7, #16]
 8017494:	429a      	cmp	r2, r3
 8017496:	d204      	bcs.n	80174a2 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8017498:	8a3b      	ldrh	r3, [r7, #16]
 801749a:	4619      	mov	r1, r3
 801749c:	6878      	ldr	r0, [r7, #4]
 801749e:	f7f5 fb91 	bl	800cbc4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80174a2:	687b      	ldr	r3, [r7, #4]
 80174a4:	895b      	ldrh	r3, [r3, #10]
 80174a6:	8a7a      	ldrh	r2, [r7, #18]
 80174a8:	429a      	cmp	r2, r3
 80174aa:	d807      	bhi.n	80174bc <ip4_input+0x78>
 80174ac:	687b      	ldr	r3, [r7, #4]
 80174ae:	891b      	ldrh	r3, [r3, #8]
 80174b0:	8a3a      	ldrh	r2, [r7, #16]
 80174b2:	429a      	cmp	r2, r3
 80174b4:	d802      	bhi.n	80174bc <ip4_input+0x78>
 80174b6:	8a7b      	ldrh	r3, [r7, #18]
 80174b8:	2b13      	cmp	r3, #19
 80174ba:	d804      	bhi.n	80174c6 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80174bc:	6878      	ldr	r0, [r7, #4]
 80174be:	f7f5 fd07 	bl	800ced0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80174c2:	2300      	movs	r3, #0
 80174c4:	e0f7      	b.n	80176b6 <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80174c6:	69fb      	ldr	r3, [r7, #28]
 80174c8:	691b      	ldr	r3, [r3, #16]
 80174ca:	4a7d      	ldr	r2, [pc, #500]	@ (80176c0 <ip4_input+0x27c>)
 80174cc:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80174ce:	69fb      	ldr	r3, [r7, #28]
 80174d0:	68db      	ldr	r3, [r3, #12]
 80174d2:	4a7b      	ldr	r2, [pc, #492]	@ (80176c0 <ip4_input+0x27c>)
 80174d4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80174d6:	4b7a      	ldr	r3, [pc, #488]	@ (80176c0 <ip4_input+0x27c>)
 80174d8:	695b      	ldr	r3, [r3, #20]
 80174da:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80174de:	2be0      	cmp	r3, #224	@ 0xe0
 80174e0:	d112      	bne.n	8017508 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80174e2:	683b      	ldr	r3, [r7, #0]
 80174e4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80174e8:	f003 0301 	and.w	r3, r3, #1
 80174ec:	b2db      	uxtb	r3, r3
 80174ee:	2b00      	cmp	r3, #0
 80174f0:	d007      	beq.n	8017502 <ip4_input+0xbe>
 80174f2:	683b      	ldr	r3, [r7, #0]
 80174f4:	3304      	adds	r3, #4
 80174f6:	681b      	ldr	r3, [r3, #0]
 80174f8:	2b00      	cmp	r3, #0
 80174fa:	d002      	beq.n	8017502 <ip4_input+0xbe>
      netif = inp;
 80174fc:	683b      	ldr	r3, [r7, #0]
 80174fe:	61bb      	str	r3, [r7, #24]
 8017500:	e02a      	b.n	8017558 <ip4_input+0x114>
    } else {
      netif = NULL;
 8017502:	2300      	movs	r3, #0
 8017504:	61bb      	str	r3, [r7, #24]
 8017506:	e027      	b.n	8017558 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8017508:	6838      	ldr	r0, [r7, #0]
 801750a:	f7ff ff71 	bl	80173f0 <ip4_input_accept>
 801750e:	4603      	mov	r3, r0
 8017510:	2b00      	cmp	r3, #0
 8017512:	d002      	beq.n	801751a <ip4_input+0xd6>
      netif = inp;
 8017514:	683b      	ldr	r3, [r7, #0]
 8017516:	61bb      	str	r3, [r7, #24]
 8017518:	e01e      	b.n	8017558 <ip4_input+0x114>
    } else {
      netif = NULL;
 801751a:	2300      	movs	r3, #0
 801751c:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801751e:	4b68      	ldr	r3, [pc, #416]	@ (80176c0 <ip4_input+0x27c>)
 8017520:	695b      	ldr	r3, [r3, #20]
 8017522:	b2db      	uxtb	r3, r3
 8017524:	2b7f      	cmp	r3, #127	@ 0x7f
 8017526:	d017      	beq.n	8017558 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8017528:	4b66      	ldr	r3, [pc, #408]	@ (80176c4 <ip4_input+0x280>)
 801752a:	681b      	ldr	r3, [r3, #0]
 801752c:	61bb      	str	r3, [r7, #24]
 801752e:	e00e      	b.n	801754e <ip4_input+0x10a>
          if (netif == inp) {
 8017530:	69ba      	ldr	r2, [r7, #24]
 8017532:	683b      	ldr	r3, [r7, #0]
 8017534:	429a      	cmp	r2, r3
 8017536:	d006      	beq.n	8017546 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8017538:	69b8      	ldr	r0, [r7, #24]
 801753a:	f7ff ff59 	bl	80173f0 <ip4_input_accept>
 801753e:	4603      	mov	r3, r0
 8017540:	2b00      	cmp	r3, #0
 8017542:	d108      	bne.n	8017556 <ip4_input+0x112>
 8017544:	e000      	b.n	8017548 <ip4_input+0x104>
            continue;
 8017546:	bf00      	nop
        NETIF_FOREACH(netif) {
 8017548:	69bb      	ldr	r3, [r7, #24]
 801754a:	681b      	ldr	r3, [r3, #0]
 801754c:	61bb      	str	r3, [r7, #24]
 801754e:	69bb      	ldr	r3, [r7, #24]
 8017550:	2b00      	cmp	r3, #0
 8017552:	d1ed      	bne.n	8017530 <ip4_input+0xec>
 8017554:	e000      	b.n	8017558 <ip4_input+0x114>
            break;
 8017556:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8017558:	69bb      	ldr	r3, [r7, #24]
 801755a:	2b00      	cmp	r3, #0
 801755c:	d111      	bne.n	8017582 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801755e:	69fb      	ldr	r3, [r7, #28]
 8017560:	7a5b      	ldrb	r3, [r3, #9]
 8017562:	2b11      	cmp	r3, #17
 8017564:	d10d      	bne.n	8017582 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8017566:	8a7b      	ldrh	r3, [r7, #18]
 8017568:	69fa      	ldr	r2, [r7, #28]
 801756a:	4413      	add	r3, r2
 801756c:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801756e:	68fb      	ldr	r3, [r7, #12]
 8017570:	885b      	ldrh	r3, [r3, #2]
 8017572:	b29b      	uxth	r3, r3
 8017574:	f5b3 4f88 	cmp.w	r3, #17408	@ 0x4400
 8017578:	d103      	bne.n	8017582 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801757a:	683b      	ldr	r3, [r7, #0]
 801757c:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 801757e:	2300      	movs	r3, #0
 8017580:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8017582:	697b      	ldr	r3, [r7, #20]
 8017584:	2b00      	cmp	r3, #0
 8017586:	d017      	beq.n	80175b8 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8017588:	4b4d      	ldr	r3, [pc, #308]	@ (80176c0 <ip4_input+0x27c>)
 801758a:	691b      	ldr	r3, [r3, #16]
 801758c:	2b00      	cmp	r3, #0
 801758e:	d013      	beq.n	80175b8 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017590:	4b4b      	ldr	r3, [pc, #300]	@ (80176c0 <ip4_input+0x27c>)
 8017592:	691b      	ldr	r3, [r3, #16]
 8017594:	6839      	ldr	r1, [r7, #0]
 8017596:	4618      	mov	r0, r3
 8017598:	f000 f96e 	bl	8017878 <ip4_addr_isbroadcast_u32>
 801759c:	4603      	mov	r3, r0
 801759e:	2b00      	cmp	r3, #0
 80175a0:	d105      	bne.n	80175ae <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80175a2:	4b47      	ldr	r3, [pc, #284]	@ (80176c0 <ip4_input+0x27c>)
 80175a4:	691b      	ldr	r3, [r3, #16]
 80175a6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80175aa:	2be0      	cmp	r3, #224	@ 0xe0
 80175ac:	d104      	bne.n	80175b8 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80175ae:	6878      	ldr	r0, [r7, #4]
 80175b0:	f7f5 fc8e 	bl	800ced0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80175b4:	2300      	movs	r3, #0
 80175b6:	e07e      	b.n	80176b6 <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80175b8:	69bb      	ldr	r3, [r7, #24]
 80175ba:	2b00      	cmp	r3, #0
 80175bc:	d104      	bne.n	80175c8 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80175be:	6878      	ldr	r0, [r7, #4]
 80175c0:	f7f5 fc86 	bl	800ced0 <pbuf_free>
    return ERR_OK;
 80175c4:	2300      	movs	r3, #0
 80175c6:	e076      	b.n	80176b6 <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80175c8:	69fb      	ldr	r3, [r7, #28]
 80175ca:	88db      	ldrh	r3, [r3, #6]
 80175cc:	b29b      	uxth	r3, r3
 80175ce:	461a      	mov	r2, r3
 80175d0:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 80175d4:	4013      	ands	r3, r2
 80175d6:	2b00      	cmp	r3, #0
 80175d8:	d00b      	beq.n	80175f2 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80175da:	6878      	ldr	r0, [r7, #4]
 80175dc:	f000 fc92 	bl	8017f04 <ip4_reass>
 80175e0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80175e2:	687b      	ldr	r3, [r7, #4]
 80175e4:	2b00      	cmp	r3, #0
 80175e6:	d101      	bne.n	80175ec <ip4_input+0x1a8>
      return ERR_OK;
 80175e8:	2300      	movs	r3, #0
 80175ea:	e064      	b.n	80176b6 <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80175ec:	687b      	ldr	r3, [r7, #4]
 80175ee:	685b      	ldr	r3, [r3, #4]
 80175f0:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80175f2:	4a33      	ldr	r2, [pc, #204]	@ (80176c0 <ip4_input+0x27c>)
 80175f4:	69bb      	ldr	r3, [r7, #24]
 80175f6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80175f8:	4a31      	ldr	r2, [pc, #196]	@ (80176c0 <ip4_input+0x27c>)
 80175fa:	683b      	ldr	r3, [r7, #0]
 80175fc:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80175fe:	4a30      	ldr	r2, [pc, #192]	@ (80176c0 <ip4_input+0x27c>)
 8017600:	69fb      	ldr	r3, [r7, #28]
 8017602:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8017604:	69fb      	ldr	r3, [r7, #28]
 8017606:	781b      	ldrb	r3, [r3, #0]
 8017608:	f003 030f 	and.w	r3, r3, #15
 801760c:	b2db      	uxtb	r3, r3
 801760e:	009b      	lsls	r3, r3, #2
 8017610:	b2db      	uxtb	r3, r3
 8017612:	461a      	mov	r2, r3
 8017614:	4b2a      	ldr	r3, [pc, #168]	@ (80176c0 <ip4_input+0x27c>)
 8017616:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8017618:	8a7b      	ldrh	r3, [r7, #18]
 801761a:	4619      	mov	r1, r3
 801761c:	6878      	ldr	r0, [r7, #4]
 801761e:	f7f5 fbd1 	bl	800cdc4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8017622:	69fb      	ldr	r3, [r7, #28]
 8017624:	7a5b      	ldrb	r3, [r3, #9]
 8017626:	2b11      	cmp	r3, #17
 8017628:	d006      	beq.n	8017638 <ip4_input+0x1f4>
 801762a:	2b11      	cmp	r3, #17
 801762c:	dc13      	bgt.n	8017656 <ip4_input+0x212>
 801762e:	2b01      	cmp	r3, #1
 8017630:	d00c      	beq.n	801764c <ip4_input+0x208>
 8017632:	2b06      	cmp	r3, #6
 8017634:	d005      	beq.n	8017642 <ip4_input+0x1fe>
 8017636:	e00e      	b.n	8017656 <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8017638:	6839      	ldr	r1, [r7, #0]
 801763a:	6878      	ldr	r0, [r7, #4]
 801763c:	f7fc fae4 	bl	8013c08 <udp_input>
        break;
 8017640:	e026      	b.n	8017690 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8017642:	6839      	ldr	r1, [r7, #0]
 8017644:	6878      	ldr	r0, [r7, #4]
 8017646:	f7f7 fea3 	bl	800f390 <tcp_input>
        break;
 801764a:	e021      	b.n	8017690 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801764c:	6839      	ldr	r1, [r7, #0]
 801764e:	6878      	ldr	r0, [r7, #4]
 8017650:	f7ff fcd0 	bl	8016ff4 <icmp_input>
        break;
 8017654:	e01c      	b.n	8017690 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017656:	4b1a      	ldr	r3, [pc, #104]	@ (80176c0 <ip4_input+0x27c>)
 8017658:	695b      	ldr	r3, [r3, #20]
 801765a:	69b9      	ldr	r1, [r7, #24]
 801765c:	4618      	mov	r0, r3
 801765e:	f000 f90b 	bl	8017878 <ip4_addr_isbroadcast_u32>
 8017662:	4603      	mov	r3, r0
 8017664:	2b00      	cmp	r3, #0
 8017666:	d10f      	bne.n	8017688 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017668:	4b15      	ldr	r3, [pc, #84]	@ (80176c0 <ip4_input+0x27c>)
 801766a:	695b      	ldr	r3, [r3, #20]
 801766c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017670:	2be0      	cmp	r3, #224	@ 0xe0
 8017672:	d009      	beq.n	8017688 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8017674:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8017678:	4619      	mov	r1, r3
 801767a:	6878      	ldr	r0, [r7, #4]
 801767c:	f7f5 fc15 	bl	800ceaa <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8017680:	2102      	movs	r1, #2
 8017682:	6878      	ldr	r0, [r7, #4]
 8017684:	f7ff fdba 	bl	80171fc <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8017688:	6878      	ldr	r0, [r7, #4]
 801768a:	f7f5 fc21 	bl	800ced0 <pbuf_free>
        break;
 801768e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8017690:	4b0b      	ldr	r3, [pc, #44]	@ (80176c0 <ip4_input+0x27c>)
 8017692:	2200      	movs	r2, #0
 8017694:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8017696:	4b0a      	ldr	r3, [pc, #40]	@ (80176c0 <ip4_input+0x27c>)
 8017698:	2200      	movs	r2, #0
 801769a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801769c:	4b08      	ldr	r3, [pc, #32]	@ (80176c0 <ip4_input+0x27c>)
 801769e:	2200      	movs	r2, #0
 80176a0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80176a2:	4b07      	ldr	r3, [pc, #28]	@ (80176c0 <ip4_input+0x27c>)
 80176a4:	2200      	movs	r2, #0
 80176a6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80176a8:	4b05      	ldr	r3, [pc, #20]	@ (80176c0 <ip4_input+0x27c>)
 80176aa:	2200      	movs	r2, #0
 80176ac:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80176ae:	4b04      	ldr	r3, [pc, #16]	@ (80176c0 <ip4_input+0x27c>)
 80176b0:	2200      	movs	r2, #0
 80176b2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80176b4:	2300      	movs	r3, #0
}
 80176b6:	4618      	mov	r0, r3
 80176b8:	3720      	adds	r7, #32
 80176ba:	46bd      	mov	sp, r7
 80176bc:	bd80      	pop	{r7, pc}
 80176be:	bf00      	nop
 80176c0:	2000d700 	.word	0x2000d700
 80176c4:	20010e68 	.word	0x20010e68

080176c8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80176c8:	b580      	push	{r7, lr}
 80176ca:	b08a      	sub	sp, #40	@ 0x28
 80176cc:	af04      	add	r7, sp, #16
 80176ce:	60f8      	str	r0, [r7, #12]
 80176d0:	60b9      	str	r1, [r7, #8]
 80176d2:	607a      	str	r2, [r7, #4]
 80176d4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80176d6:	68bb      	ldr	r3, [r7, #8]
 80176d8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80176da:	687b      	ldr	r3, [r7, #4]
 80176dc:	2b00      	cmp	r3, #0
 80176de:	d009      	beq.n	80176f4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80176e0:	68bb      	ldr	r3, [r7, #8]
 80176e2:	2b00      	cmp	r3, #0
 80176e4:	d003      	beq.n	80176ee <ip4_output_if+0x26>
 80176e6:	68bb      	ldr	r3, [r7, #8]
 80176e8:	681b      	ldr	r3, [r3, #0]
 80176ea:	2b00      	cmp	r3, #0
 80176ec:	d102      	bne.n	80176f4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80176ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80176f0:	3304      	adds	r3, #4
 80176f2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80176f4:	78fa      	ldrb	r2, [r7, #3]
 80176f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80176f8:	9302      	str	r3, [sp, #8]
 80176fa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80176fe:	9301      	str	r3, [sp, #4]
 8017700:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017704:	9300      	str	r3, [sp, #0]
 8017706:	4613      	mov	r3, r2
 8017708:	687a      	ldr	r2, [r7, #4]
 801770a:	6979      	ldr	r1, [r7, #20]
 801770c:	68f8      	ldr	r0, [r7, #12]
 801770e:	f000 f805 	bl	801771c <ip4_output_if_src>
 8017712:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8017714:	4618      	mov	r0, r3
 8017716:	3718      	adds	r7, #24
 8017718:	46bd      	mov	sp, r7
 801771a:	bd80      	pop	{r7, pc}

0801771c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801771c:	b580      	push	{r7, lr}
 801771e:	b088      	sub	sp, #32
 8017720:	af00      	add	r7, sp, #0
 8017722:	60f8      	str	r0, [r7, #12]
 8017724:	60b9      	str	r1, [r7, #8]
 8017726:	607a      	str	r2, [r7, #4]
 8017728:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801772a:	68fb      	ldr	r3, [r7, #12]
 801772c:	7b9b      	ldrb	r3, [r3, #14]
 801772e:	2b01      	cmp	r3, #1
 8017730:	d006      	beq.n	8017740 <ip4_output_if_src+0x24>
 8017732:	4b4b      	ldr	r3, [pc, #300]	@ (8017860 <ip4_output_if_src+0x144>)
 8017734:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8017738:	494a      	ldr	r1, [pc, #296]	@ (8017864 <ip4_output_if_src+0x148>)
 801773a:	484b      	ldr	r0, [pc, #300]	@ (8017868 <ip4_output_if_src+0x14c>)
 801773c:	f001 fb02 	bl	8018d44 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8017740:	687b      	ldr	r3, [r7, #4]
 8017742:	2b00      	cmp	r3, #0
 8017744:	d060      	beq.n	8017808 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8017746:	2314      	movs	r3, #20
 8017748:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801774a:	2114      	movs	r1, #20
 801774c:	68f8      	ldr	r0, [r7, #12]
 801774e:	f7f5 fb29 	bl	800cda4 <pbuf_add_header>
 8017752:	4603      	mov	r3, r0
 8017754:	2b00      	cmp	r3, #0
 8017756:	d002      	beq.n	801775e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017758:	f06f 0301 	mvn.w	r3, #1
 801775c:	e07c      	b.n	8017858 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801775e:	68fb      	ldr	r3, [r7, #12]
 8017760:	685b      	ldr	r3, [r3, #4]
 8017762:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8017764:	68fb      	ldr	r3, [r7, #12]
 8017766:	895b      	ldrh	r3, [r3, #10]
 8017768:	2b13      	cmp	r3, #19
 801776a:	d806      	bhi.n	801777a <ip4_output_if_src+0x5e>
 801776c:	4b3c      	ldr	r3, [pc, #240]	@ (8017860 <ip4_output_if_src+0x144>)
 801776e:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8017772:	493e      	ldr	r1, [pc, #248]	@ (801786c <ip4_output_if_src+0x150>)
 8017774:	483c      	ldr	r0, [pc, #240]	@ (8017868 <ip4_output_if_src+0x14c>)
 8017776:	f001 fae5 	bl	8018d44 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801777a:	69fb      	ldr	r3, [r7, #28]
 801777c:	78fa      	ldrb	r2, [r7, #3]
 801777e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8017780:	69fb      	ldr	r3, [r7, #28]
 8017782:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8017786:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8017788:	687b      	ldr	r3, [r7, #4]
 801778a:	681a      	ldr	r2, [r3, #0]
 801778c:	69fb      	ldr	r3, [r7, #28]
 801778e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8017790:	8b7b      	ldrh	r3, [r7, #26]
 8017792:	089b      	lsrs	r3, r3, #2
 8017794:	b29b      	uxth	r3, r3
 8017796:	b2db      	uxtb	r3, r3
 8017798:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801779c:	b2da      	uxtb	r2, r3
 801779e:	69fb      	ldr	r3, [r7, #28]
 80177a0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80177a2:	69fb      	ldr	r3, [r7, #28]
 80177a4:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80177a8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80177aa:	68fb      	ldr	r3, [r7, #12]
 80177ac:	891b      	ldrh	r3, [r3, #8]
 80177ae:	4618      	mov	r0, r3
 80177b0:	f7f3 ff5a 	bl	800b668 <lwip_htons>
 80177b4:	4603      	mov	r3, r0
 80177b6:	461a      	mov	r2, r3
 80177b8:	69fb      	ldr	r3, [r7, #28]
 80177ba:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80177bc:	69fb      	ldr	r3, [r7, #28]
 80177be:	2200      	movs	r2, #0
 80177c0:	719a      	strb	r2, [r3, #6]
 80177c2:	2200      	movs	r2, #0
 80177c4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80177c6:	4b2a      	ldr	r3, [pc, #168]	@ (8017870 <ip4_output_if_src+0x154>)
 80177c8:	881b      	ldrh	r3, [r3, #0]
 80177ca:	4618      	mov	r0, r3
 80177cc:	f7f3 ff4c 	bl	800b668 <lwip_htons>
 80177d0:	4603      	mov	r3, r0
 80177d2:	461a      	mov	r2, r3
 80177d4:	69fb      	ldr	r3, [r7, #28]
 80177d6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80177d8:	4b25      	ldr	r3, [pc, #148]	@ (8017870 <ip4_output_if_src+0x154>)
 80177da:	881b      	ldrh	r3, [r3, #0]
 80177dc:	3301      	adds	r3, #1
 80177de:	b29a      	uxth	r2, r3
 80177e0:	4b23      	ldr	r3, [pc, #140]	@ (8017870 <ip4_output_if_src+0x154>)
 80177e2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80177e4:	68bb      	ldr	r3, [r7, #8]
 80177e6:	2b00      	cmp	r3, #0
 80177e8:	d104      	bne.n	80177f4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80177ea:	4b22      	ldr	r3, [pc, #136]	@ (8017874 <ip4_output_if_src+0x158>)
 80177ec:	681a      	ldr	r2, [r3, #0]
 80177ee:	69fb      	ldr	r3, [r7, #28]
 80177f0:	60da      	str	r2, [r3, #12]
 80177f2:	e003      	b.n	80177fc <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80177f4:	68bb      	ldr	r3, [r7, #8]
 80177f6:	681a      	ldr	r2, [r3, #0]
 80177f8:	69fb      	ldr	r3, [r7, #28]
 80177fa:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80177fc:	69fb      	ldr	r3, [r7, #28]
 80177fe:	2200      	movs	r2, #0
 8017800:	729a      	strb	r2, [r3, #10]
 8017802:	2200      	movs	r2, #0
 8017804:	72da      	strb	r2, [r3, #11]
 8017806:	e00f      	b.n	8017828 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8017808:	68fb      	ldr	r3, [r7, #12]
 801780a:	895b      	ldrh	r3, [r3, #10]
 801780c:	2b13      	cmp	r3, #19
 801780e:	d802      	bhi.n	8017816 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017810:	f06f 0301 	mvn.w	r3, #1
 8017814:	e020      	b.n	8017858 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8017816:	68fb      	ldr	r3, [r7, #12]
 8017818:	685b      	ldr	r3, [r3, #4]
 801781a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801781c:	69fb      	ldr	r3, [r7, #28]
 801781e:	691b      	ldr	r3, [r3, #16]
 8017820:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8017822:	f107 0314 	add.w	r3, r7, #20
 8017826:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8017828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801782a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801782c:	2b00      	cmp	r3, #0
 801782e:	d00c      	beq.n	801784a <ip4_output_if_src+0x12e>
 8017830:	68fb      	ldr	r3, [r7, #12]
 8017832:	891a      	ldrh	r2, [r3, #8]
 8017834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017836:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017838:	429a      	cmp	r2, r3
 801783a:	d906      	bls.n	801784a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801783c:	687a      	ldr	r2, [r7, #4]
 801783e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8017840:	68f8      	ldr	r0, [r7, #12]
 8017842:	f000 fd53 	bl	80182ec <ip4_frag>
 8017846:	4603      	mov	r3, r0
 8017848:	e006      	b.n	8017858 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801784a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801784c:	695b      	ldr	r3, [r3, #20]
 801784e:	687a      	ldr	r2, [r7, #4]
 8017850:	68f9      	ldr	r1, [r7, #12]
 8017852:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017854:	4798      	blx	r3
 8017856:	4603      	mov	r3, r0
}
 8017858:	4618      	mov	r0, r3
 801785a:	3720      	adds	r7, #32
 801785c:	46bd      	mov	sp, r7
 801785e:	bd80      	pop	{r7, pc}
 8017860:	0801d9d8 	.word	0x0801d9d8
 8017864:	0801da0c 	.word	0x0801da0c
 8017868:	0801da18 	.word	0x0801da18
 801786c:	0801da40 	.word	0x0801da40
 8017870:	20010ffa 	.word	0x20010ffa
 8017874:	08027fac 	.word	0x08027fac

08017878 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8017878:	b480      	push	{r7}
 801787a:	b085      	sub	sp, #20
 801787c:	af00      	add	r7, sp, #0
 801787e:	6078      	str	r0, [r7, #4]
 8017880:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8017882:	687b      	ldr	r3, [r7, #4]
 8017884:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8017886:	687b      	ldr	r3, [r7, #4]
 8017888:	f1b3 3fff 	cmp.w	r3, #4294967295
 801788c:	d002      	beq.n	8017894 <ip4_addr_isbroadcast_u32+0x1c>
 801788e:	687b      	ldr	r3, [r7, #4]
 8017890:	2b00      	cmp	r3, #0
 8017892:	d101      	bne.n	8017898 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8017894:	2301      	movs	r3, #1
 8017896:	e02a      	b.n	80178ee <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8017898:	683b      	ldr	r3, [r7, #0]
 801789a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801789e:	f003 0302 	and.w	r3, r3, #2
 80178a2:	2b00      	cmp	r3, #0
 80178a4:	d101      	bne.n	80178aa <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80178a6:	2300      	movs	r3, #0
 80178a8:	e021      	b.n	80178ee <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80178aa:	683b      	ldr	r3, [r7, #0]
 80178ac:	3304      	adds	r3, #4
 80178ae:	681b      	ldr	r3, [r3, #0]
 80178b0:	687a      	ldr	r2, [r7, #4]
 80178b2:	429a      	cmp	r2, r3
 80178b4:	d101      	bne.n	80178ba <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80178b6:	2300      	movs	r3, #0
 80178b8:	e019      	b.n	80178ee <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80178ba:	68fa      	ldr	r2, [r7, #12]
 80178bc:	683b      	ldr	r3, [r7, #0]
 80178be:	3304      	adds	r3, #4
 80178c0:	681b      	ldr	r3, [r3, #0]
 80178c2:	405a      	eors	r2, r3
 80178c4:	683b      	ldr	r3, [r7, #0]
 80178c6:	3308      	adds	r3, #8
 80178c8:	681b      	ldr	r3, [r3, #0]
 80178ca:	4013      	ands	r3, r2
 80178cc:	2b00      	cmp	r3, #0
 80178ce:	d10d      	bne.n	80178ec <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80178d0:	683b      	ldr	r3, [r7, #0]
 80178d2:	3308      	adds	r3, #8
 80178d4:	681b      	ldr	r3, [r3, #0]
 80178d6:	43da      	mvns	r2, r3
 80178d8:	687b      	ldr	r3, [r7, #4]
 80178da:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80178dc:	683b      	ldr	r3, [r7, #0]
 80178de:	3308      	adds	r3, #8
 80178e0:	681b      	ldr	r3, [r3, #0]
 80178e2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80178e4:	429a      	cmp	r2, r3
 80178e6:	d101      	bne.n	80178ec <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80178e8:	2301      	movs	r3, #1
 80178ea:	e000      	b.n	80178ee <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80178ec:	2300      	movs	r3, #0
  }
}
 80178ee:	4618      	mov	r0, r3
 80178f0:	3714      	adds	r7, #20
 80178f2:	46bd      	mov	sp, r7
 80178f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178f8:	4770      	bx	lr
	...

080178fc <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80178fc:	b580      	push	{r7, lr}
 80178fe:	b084      	sub	sp, #16
 8017900:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8017902:	2300      	movs	r3, #0
 8017904:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8017906:	4b12      	ldr	r3, [pc, #72]	@ (8017950 <ip_reass_tmr+0x54>)
 8017908:	681b      	ldr	r3, [r3, #0]
 801790a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801790c:	e018      	b.n	8017940 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801790e:	68fb      	ldr	r3, [r7, #12]
 8017910:	7fdb      	ldrb	r3, [r3, #31]
 8017912:	2b00      	cmp	r3, #0
 8017914:	d00b      	beq.n	801792e <ip_reass_tmr+0x32>
      r->timer--;
 8017916:	68fb      	ldr	r3, [r7, #12]
 8017918:	7fdb      	ldrb	r3, [r3, #31]
 801791a:	3b01      	subs	r3, #1
 801791c:	b2da      	uxtb	r2, r3
 801791e:	68fb      	ldr	r3, [r7, #12]
 8017920:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8017922:	68fb      	ldr	r3, [r7, #12]
 8017924:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8017926:	68fb      	ldr	r3, [r7, #12]
 8017928:	681b      	ldr	r3, [r3, #0]
 801792a:	60fb      	str	r3, [r7, #12]
 801792c:	e008      	b.n	8017940 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801792e:	68fb      	ldr	r3, [r7, #12]
 8017930:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8017932:	68fb      	ldr	r3, [r7, #12]
 8017934:	681b      	ldr	r3, [r3, #0]
 8017936:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8017938:	68b9      	ldr	r1, [r7, #8]
 801793a:	6878      	ldr	r0, [r7, #4]
 801793c:	f000 f80a 	bl	8017954 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8017940:	68fb      	ldr	r3, [r7, #12]
 8017942:	2b00      	cmp	r3, #0
 8017944:	d1e3      	bne.n	801790e <ip_reass_tmr+0x12>
    }
  }
}
 8017946:	bf00      	nop
 8017948:	bf00      	nop
 801794a:	3710      	adds	r7, #16
 801794c:	46bd      	mov	sp, r7
 801794e:	bd80      	pop	{r7, pc}
 8017950:	20010ffc 	.word	0x20010ffc

08017954 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017954:	b580      	push	{r7, lr}
 8017956:	b088      	sub	sp, #32
 8017958:	af00      	add	r7, sp, #0
 801795a:	6078      	str	r0, [r7, #4]
 801795c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801795e:	2300      	movs	r3, #0
 8017960:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8017962:	683a      	ldr	r2, [r7, #0]
 8017964:	687b      	ldr	r3, [r7, #4]
 8017966:	429a      	cmp	r2, r3
 8017968:	d105      	bne.n	8017976 <ip_reass_free_complete_datagram+0x22>
 801796a:	4b45      	ldr	r3, [pc, #276]	@ (8017a80 <ip_reass_free_complete_datagram+0x12c>)
 801796c:	22ab      	movs	r2, #171	@ 0xab
 801796e:	4945      	ldr	r1, [pc, #276]	@ (8017a84 <ip_reass_free_complete_datagram+0x130>)
 8017970:	4845      	ldr	r0, [pc, #276]	@ (8017a88 <ip_reass_free_complete_datagram+0x134>)
 8017972:	f001 f9e7 	bl	8018d44 <iprintf>
  if (prev != NULL) {
 8017976:	683b      	ldr	r3, [r7, #0]
 8017978:	2b00      	cmp	r3, #0
 801797a:	d00a      	beq.n	8017992 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801797c:	683b      	ldr	r3, [r7, #0]
 801797e:	681b      	ldr	r3, [r3, #0]
 8017980:	687a      	ldr	r2, [r7, #4]
 8017982:	429a      	cmp	r2, r3
 8017984:	d005      	beq.n	8017992 <ip_reass_free_complete_datagram+0x3e>
 8017986:	4b3e      	ldr	r3, [pc, #248]	@ (8017a80 <ip_reass_free_complete_datagram+0x12c>)
 8017988:	22ad      	movs	r2, #173	@ 0xad
 801798a:	4940      	ldr	r1, [pc, #256]	@ (8017a8c <ip_reass_free_complete_datagram+0x138>)
 801798c:	483e      	ldr	r0, [pc, #248]	@ (8017a88 <ip_reass_free_complete_datagram+0x134>)
 801798e:	f001 f9d9 	bl	8018d44 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8017992:	687b      	ldr	r3, [r7, #4]
 8017994:	685b      	ldr	r3, [r3, #4]
 8017996:	685b      	ldr	r3, [r3, #4]
 8017998:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801799a:	697b      	ldr	r3, [r7, #20]
 801799c:	889b      	ldrh	r3, [r3, #4]
 801799e:	b29b      	uxth	r3, r3
 80179a0:	2b00      	cmp	r3, #0
 80179a2:	d12a      	bne.n	80179fa <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80179a4:	687b      	ldr	r3, [r7, #4]
 80179a6:	685b      	ldr	r3, [r3, #4]
 80179a8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80179aa:	697b      	ldr	r3, [r7, #20]
 80179ac:	681a      	ldr	r2, [r3, #0]
 80179ae:	687b      	ldr	r3, [r7, #4]
 80179b0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80179b2:	69bb      	ldr	r3, [r7, #24]
 80179b4:	6858      	ldr	r0, [r3, #4]
 80179b6:	687b      	ldr	r3, [r7, #4]
 80179b8:	3308      	adds	r3, #8
 80179ba:	2214      	movs	r2, #20
 80179bc:	4619      	mov	r1, r3
 80179be:	f001 fbc2 	bl	8019146 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80179c2:	2101      	movs	r1, #1
 80179c4:	69b8      	ldr	r0, [r7, #24]
 80179c6:	f7ff fc29 	bl	801721c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80179ca:	69b8      	ldr	r0, [r7, #24]
 80179cc:	f7f5 fb0e 	bl	800cfec <pbuf_clen>
 80179d0:	4603      	mov	r3, r0
 80179d2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80179d4:	8bfa      	ldrh	r2, [r7, #30]
 80179d6:	8a7b      	ldrh	r3, [r7, #18]
 80179d8:	4413      	add	r3, r2
 80179da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80179de:	db05      	blt.n	80179ec <ip_reass_free_complete_datagram+0x98>
 80179e0:	4b27      	ldr	r3, [pc, #156]	@ (8017a80 <ip_reass_free_complete_datagram+0x12c>)
 80179e2:	22bc      	movs	r2, #188	@ 0xbc
 80179e4:	492a      	ldr	r1, [pc, #168]	@ (8017a90 <ip_reass_free_complete_datagram+0x13c>)
 80179e6:	4828      	ldr	r0, [pc, #160]	@ (8017a88 <ip_reass_free_complete_datagram+0x134>)
 80179e8:	f001 f9ac 	bl	8018d44 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80179ec:	8bfa      	ldrh	r2, [r7, #30]
 80179ee:	8a7b      	ldrh	r3, [r7, #18]
 80179f0:	4413      	add	r3, r2
 80179f2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80179f4:	69b8      	ldr	r0, [r7, #24]
 80179f6:	f7f5 fa6b 	bl	800ced0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80179fa:	687b      	ldr	r3, [r7, #4]
 80179fc:	685b      	ldr	r3, [r3, #4]
 80179fe:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8017a00:	e01f      	b.n	8017a42 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8017a02:	69bb      	ldr	r3, [r7, #24]
 8017a04:	685b      	ldr	r3, [r3, #4]
 8017a06:	617b      	str	r3, [r7, #20]
    pcur = p;
 8017a08:	69bb      	ldr	r3, [r7, #24]
 8017a0a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8017a0c:	697b      	ldr	r3, [r7, #20]
 8017a0e:	681b      	ldr	r3, [r3, #0]
 8017a10:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8017a12:	68f8      	ldr	r0, [r7, #12]
 8017a14:	f7f5 faea 	bl	800cfec <pbuf_clen>
 8017a18:	4603      	mov	r3, r0
 8017a1a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017a1c:	8bfa      	ldrh	r2, [r7, #30]
 8017a1e:	8a7b      	ldrh	r3, [r7, #18]
 8017a20:	4413      	add	r3, r2
 8017a22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8017a26:	db05      	blt.n	8017a34 <ip_reass_free_complete_datagram+0xe0>
 8017a28:	4b15      	ldr	r3, [pc, #84]	@ (8017a80 <ip_reass_free_complete_datagram+0x12c>)
 8017a2a:	22cc      	movs	r2, #204	@ 0xcc
 8017a2c:	4918      	ldr	r1, [pc, #96]	@ (8017a90 <ip_reass_free_complete_datagram+0x13c>)
 8017a2e:	4816      	ldr	r0, [pc, #88]	@ (8017a88 <ip_reass_free_complete_datagram+0x134>)
 8017a30:	f001 f988 	bl	8018d44 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017a34:	8bfa      	ldrh	r2, [r7, #30]
 8017a36:	8a7b      	ldrh	r3, [r7, #18]
 8017a38:	4413      	add	r3, r2
 8017a3a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8017a3c:	68f8      	ldr	r0, [r7, #12]
 8017a3e:	f7f5 fa47 	bl	800ced0 <pbuf_free>
  while (p != NULL) {
 8017a42:	69bb      	ldr	r3, [r7, #24]
 8017a44:	2b00      	cmp	r3, #0
 8017a46:	d1dc      	bne.n	8017a02 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8017a48:	6839      	ldr	r1, [r7, #0]
 8017a4a:	6878      	ldr	r0, [r7, #4]
 8017a4c:	f000 f8c2 	bl	8017bd4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8017a50:	4b10      	ldr	r3, [pc, #64]	@ (8017a94 <ip_reass_free_complete_datagram+0x140>)
 8017a52:	881b      	ldrh	r3, [r3, #0]
 8017a54:	8bfa      	ldrh	r2, [r7, #30]
 8017a56:	429a      	cmp	r2, r3
 8017a58:	d905      	bls.n	8017a66 <ip_reass_free_complete_datagram+0x112>
 8017a5a:	4b09      	ldr	r3, [pc, #36]	@ (8017a80 <ip_reass_free_complete_datagram+0x12c>)
 8017a5c:	22d2      	movs	r2, #210	@ 0xd2
 8017a5e:	490e      	ldr	r1, [pc, #56]	@ (8017a98 <ip_reass_free_complete_datagram+0x144>)
 8017a60:	4809      	ldr	r0, [pc, #36]	@ (8017a88 <ip_reass_free_complete_datagram+0x134>)
 8017a62:	f001 f96f 	bl	8018d44 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8017a66:	4b0b      	ldr	r3, [pc, #44]	@ (8017a94 <ip_reass_free_complete_datagram+0x140>)
 8017a68:	881a      	ldrh	r2, [r3, #0]
 8017a6a:	8bfb      	ldrh	r3, [r7, #30]
 8017a6c:	1ad3      	subs	r3, r2, r3
 8017a6e:	b29a      	uxth	r2, r3
 8017a70:	4b08      	ldr	r3, [pc, #32]	@ (8017a94 <ip_reass_free_complete_datagram+0x140>)
 8017a72:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8017a74:	8bfb      	ldrh	r3, [r7, #30]
}
 8017a76:	4618      	mov	r0, r3
 8017a78:	3720      	adds	r7, #32
 8017a7a:	46bd      	mov	sp, r7
 8017a7c:	bd80      	pop	{r7, pc}
 8017a7e:	bf00      	nop
 8017a80:	0801da70 	.word	0x0801da70
 8017a84:	0801daac 	.word	0x0801daac
 8017a88:	0801dab8 	.word	0x0801dab8
 8017a8c:	0801dae0 	.word	0x0801dae0
 8017a90:	0801daf4 	.word	0x0801daf4
 8017a94:	20011000 	.word	0x20011000
 8017a98:	0801db14 	.word	0x0801db14

08017a9c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8017a9c:	b580      	push	{r7, lr}
 8017a9e:	b08a      	sub	sp, #40	@ 0x28
 8017aa0:	af00      	add	r7, sp, #0
 8017aa2:	6078      	str	r0, [r7, #4]
 8017aa4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8017aa6:	2300      	movs	r3, #0
 8017aa8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8017aaa:	2300      	movs	r3, #0
 8017aac:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8017aae:	2300      	movs	r3, #0
 8017ab0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8017ab2:	2300      	movs	r3, #0
 8017ab4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8017ab6:	2300      	movs	r3, #0
 8017ab8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8017aba:	4b28      	ldr	r3, [pc, #160]	@ (8017b5c <ip_reass_remove_oldest_datagram+0xc0>)
 8017abc:	681b      	ldr	r3, [r3, #0]
 8017abe:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8017ac0:	e030      	b.n	8017b24 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8017ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017ac4:	695a      	ldr	r2, [r3, #20]
 8017ac6:	687b      	ldr	r3, [r7, #4]
 8017ac8:	68db      	ldr	r3, [r3, #12]
 8017aca:	429a      	cmp	r2, r3
 8017acc:	d10c      	bne.n	8017ae8 <ip_reass_remove_oldest_datagram+0x4c>
 8017ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017ad0:	699a      	ldr	r2, [r3, #24]
 8017ad2:	687b      	ldr	r3, [r7, #4]
 8017ad4:	691b      	ldr	r3, [r3, #16]
 8017ad6:	429a      	cmp	r2, r3
 8017ad8:	d106      	bne.n	8017ae8 <ip_reass_remove_oldest_datagram+0x4c>
 8017ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017adc:	899a      	ldrh	r2, [r3, #12]
 8017ade:	687b      	ldr	r3, [r7, #4]
 8017ae0:	889b      	ldrh	r3, [r3, #4]
 8017ae2:	b29b      	uxth	r3, r3
 8017ae4:	429a      	cmp	r2, r3
 8017ae6:	d014      	beq.n	8017b12 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8017ae8:	693b      	ldr	r3, [r7, #16]
 8017aea:	3301      	adds	r3, #1
 8017aec:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8017aee:	6a3b      	ldr	r3, [r7, #32]
 8017af0:	2b00      	cmp	r3, #0
 8017af2:	d104      	bne.n	8017afe <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8017af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017af6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017af8:	69fb      	ldr	r3, [r7, #28]
 8017afa:	61bb      	str	r3, [r7, #24]
 8017afc:	e009      	b.n	8017b12 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8017afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b00:	7fda      	ldrb	r2, [r3, #31]
 8017b02:	6a3b      	ldr	r3, [r7, #32]
 8017b04:	7fdb      	ldrb	r3, [r3, #31]
 8017b06:	429a      	cmp	r2, r3
 8017b08:	d803      	bhi.n	8017b12 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8017b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b0c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017b0e:	69fb      	ldr	r3, [r7, #28]
 8017b10:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8017b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b14:	681b      	ldr	r3, [r3, #0]
 8017b16:	2b00      	cmp	r3, #0
 8017b18:	d001      	beq.n	8017b1e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8017b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b1c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8017b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b20:	681b      	ldr	r3, [r3, #0]
 8017b22:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8017b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b26:	2b00      	cmp	r3, #0
 8017b28:	d1cb      	bne.n	8017ac2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8017b2a:	6a3b      	ldr	r3, [r7, #32]
 8017b2c:	2b00      	cmp	r3, #0
 8017b2e:	d008      	beq.n	8017b42 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8017b30:	69b9      	ldr	r1, [r7, #24]
 8017b32:	6a38      	ldr	r0, [r7, #32]
 8017b34:	f7ff ff0e 	bl	8017954 <ip_reass_free_complete_datagram>
 8017b38:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8017b3a:	697a      	ldr	r2, [r7, #20]
 8017b3c:	68fb      	ldr	r3, [r7, #12]
 8017b3e:	4413      	add	r3, r2
 8017b40:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8017b42:	697a      	ldr	r2, [r7, #20]
 8017b44:	683b      	ldr	r3, [r7, #0]
 8017b46:	429a      	cmp	r2, r3
 8017b48:	da02      	bge.n	8017b50 <ip_reass_remove_oldest_datagram+0xb4>
 8017b4a:	693b      	ldr	r3, [r7, #16]
 8017b4c:	2b01      	cmp	r3, #1
 8017b4e:	dcac      	bgt.n	8017aaa <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8017b50:	697b      	ldr	r3, [r7, #20]
}
 8017b52:	4618      	mov	r0, r3
 8017b54:	3728      	adds	r7, #40	@ 0x28
 8017b56:	46bd      	mov	sp, r7
 8017b58:	bd80      	pop	{r7, pc}
 8017b5a:	bf00      	nop
 8017b5c:	20010ffc 	.word	0x20010ffc

08017b60 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8017b60:	b580      	push	{r7, lr}
 8017b62:	b084      	sub	sp, #16
 8017b64:	af00      	add	r7, sp, #0
 8017b66:	6078      	str	r0, [r7, #4]
 8017b68:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017b6a:	2004      	movs	r0, #4
 8017b6c:	f7f4 fa8a 	bl	800c084 <memp_malloc>
 8017b70:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8017b72:	68fb      	ldr	r3, [r7, #12]
 8017b74:	2b00      	cmp	r3, #0
 8017b76:	d110      	bne.n	8017b9a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8017b78:	6839      	ldr	r1, [r7, #0]
 8017b7a:	6878      	ldr	r0, [r7, #4]
 8017b7c:	f7ff ff8e 	bl	8017a9c <ip_reass_remove_oldest_datagram>
 8017b80:	4602      	mov	r2, r0
 8017b82:	683b      	ldr	r3, [r7, #0]
 8017b84:	4293      	cmp	r3, r2
 8017b86:	dc03      	bgt.n	8017b90 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017b88:	2004      	movs	r0, #4
 8017b8a:	f7f4 fa7b 	bl	800c084 <memp_malloc>
 8017b8e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8017b90:	68fb      	ldr	r3, [r7, #12]
 8017b92:	2b00      	cmp	r3, #0
 8017b94:	d101      	bne.n	8017b9a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8017b96:	2300      	movs	r3, #0
 8017b98:	e016      	b.n	8017bc8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8017b9a:	2220      	movs	r2, #32
 8017b9c:	2100      	movs	r1, #0
 8017b9e:	68f8      	ldr	r0, [r7, #12]
 8017ba0:	f001 f96f 	bl	8018e82 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8017ba4:	68fb      	ldr	r3, [r7, #12]
 8017ba6:	220f      	movs	r2, #15
 8017ba8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8017baa:	4b09      	ldr	r3, [pc, #36]	@ (8017bd0 <ip_reass_enqueue_new_datagram+0x70>)
 8017bac:	681a      	ldr	r2, [r3, #0]
 8017bae:	68fb      	ldr	r3, [r7, #12]
 8017bb0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8017bb2:	4a07      	ldr	r2, [pc, #28]	@ (8017bd0 <ip_reass_enqueue_new_datagram+0x70>)
 8017bb4:	68fb      	ldr	r3, [r7, #12]
 8017bb6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8017bb8:	68fb      	ldr	r3, [r7, #12]
 8017bba:	3308      	adds	r3, #8
 8017bbc:	2214      	movs	r2, #20
 8017bbe:	6879      	ldr	r1, [r7, #4]
 8017bc0:	4618      	mov	r0, r3
 8017bc2:	f001 fac0 	bl	8019146 <memcpy>
  return ipr;
 8017bc6:	68fb      	ldr	r3, [r7, #12]
}
 8017bc8:	4618      	mov	r0, r3
 8017bca:	3710      	adds	r7, #16
 8017bcc:	46bd      	mov	sp, r7
 8017bce:	bd80      	pop	{r7, pc}
 8017bd0:	20010ffc 	.word	0x20010ffc

08017bd4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017bd4:	b580      	push	{r7, lr}
 8017bd6:	b082      	sub	sp, #8
 8017bd8:	af00      	add	r7, sp, #0
 8017bda:	6078      	str	r0, [r7, #4]
 8017bdc:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8017bde:	4b10      	ldr	r3, [pc, #64]	@ (8017c20 <ip_reass_dequeue_datagram+0x4c>)
 8017be0:	681b      	ldr	r3, [r3, #0]
 8017be2:	687a      	ldr	r2, [r7, #4]
 8017be4:	429a      	cmp	r2, r3
 8017be6:	d104      	bne.n	8017bf2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8017be8:	687b      	ldr	r3, [r7, #4]
 8017bea:	681b      	ldr	r3, [r3, #0]
 8017bec:	4a0c      	ldr	r2, [pc, #48]	@ (8017c20 <ip_reass_dequeue_datagram+0x4c>)
 8017bee:	6013      	str	r3, [r2, #0]
 8017bf0:	e00d      	b.n	8017c0e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8017bf2:	683b      	ldr	r3, [r7, #0]
 8017bf4:	2b00      	cmp	r3, #0
 8017bf6:	d106      	bne.n	8017c06 <ip_reass_dequeue_datagram+0x32>
 8017bf8:	4b0a      	ldr	r3, [pc, #40]	@ (8017c24 <ip_reass_dequeue_datagram+0x50>)
 8017bfa:	f240 1245 	movw	r2, #325	@ 0x145
 8017bfe:	490a      	ldr	r1, [pc, #40]	@ (8017c28 <ip_reass_dequeue_datagram+0x54>)
 8017c00:	480a      	ldr	r0, [pc, #40]	@ (8017c2c <ip_reass_dequeue_datagram+0x58>)
 8017c02:	f001 f89f 	bl	8018d44 <iprintf>
    prev->next = ipr->next;
 8017c06:	687b      	ldr	r3, [r7, #4]
 8017c08:	681a      	ldr	r2, [r3, #0]
 8017c0a:	683b      	ldr	r3, [r7, #0]
 8017c0c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8017c0e:	6879      	ldr	r1, [r7, #4]
 8017c10:	2004      	movs	r0, #4
 8017c12:	f7f4 faad 	bl	800c170 <memp_free>
}
 8017c16:	bf00      	nop
 8017c18:	3708      	adds	r7, #8
 8017c1a:	46bd      	mov	sp, r7
 8017c1c:	bd80      	pop	{r7, pc}
 8017c1e:	bf00      	nop
 8017c20:	20010ffc 	.word	0x20010ffc
 8017c24:	0801da70 	.word	0x0801da70
 8017c28:	0801db38 	.word	0x0801db38
 8017c2c:	0801dab8 	.word	0x0801dab8

08017c30 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8017c30:	b580      	push	{r7, lr}
 8017c32:	b08c      	sub	sp, #48	@ 0x30
 8017c34:	af00      	add	r7, sp, #0
 8017c36:	60f8      	str	r0, [r7, #12]
 8017c38:	60b9      	str	r1, [r7, #8]
 8017c3a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8017c3c:	2300      	movs	r3, #0
 8017c3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8017c40:	2301      	movs	r3, #1
 8017c42:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8017c44:	68bb      	ldr	r3, [r7, #8]
 8017c46:	685b      	ldr	r3, [r3, #4]
 8017c48:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8017c4a:	69fb      	ldr	r3, [r7, #28]
 8017c4c:	885b      	ldrh	r3, [r3, #2]
 8017c4e:	b29b      	uxth	r3, r3
 8017c50:	4618      	mov	r0, r3
 8017c52:	f7f3 fd09 	bl	800b668 <lwip_htons>
 8017c56:	4603      	mov	r3, r0
 8017c58:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8017c5a:	69fb      	ldr	r3, [r7, #28]
 8017c5c:	781b      	ldrb	r3, [r3, #0]
 8017c5e:	f003 030f 	and.w	r3, r3, #15
 8017c62:	b2db      	uxtb	r3, r3
 8017c64:	009b      	lsls	r3, r3, #2
 8017c66:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8017c68:	7e7b      	ldrb	r3, [r7, #25]
 8017c6a:	b29b      	uxth	r3, r3
 8017c6c:	8b7a      	ldrh	r2, [r7, #26]
 8017c6e:	429a      	cmp	r2, r3
 8017c70:	d202      	bcs.n	8017c78 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017c72:	f04f 33ff 	mov.w	r3, #4294967295
 8017c76:	e135      	b.n	8017ee4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8017c78:	7e7b      	ldrb	r3, [r7, #25]
 8017c7a:	b29b      	uxth	r3, r3
 8017c7c:	8b7a      	ldrh	r2, [r7, #26]
 8017c7e:	1ad3      	subs	r3, r2, r3
 8017c80:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8017c82:	69fb      	ldr	r3, [r7, #28]
 8017c84:	88db      	ldrh	r3, [r3, #6]
 8017c86:	b29b      	uxth	r3, r3
 8017c88:	4618      	mov	r0, r3
 8017c8a:	f7f3 fced 	bl	800b668 <lwip_htons>
 8017c8e:	4603      	mov	r3, r0
 8017c90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017c94:	b29b      	uxth	r3, r3
 8017c96:	00db      	lsls	r3, r3, #3
 8017c98:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8017c9a:	68bb      	ldr	r3, [r7, #8]
 8017c9c:	685b      	ldr	r3, [r3, #4]
 8017c9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8017ca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017ca2:	2200      	movs	r2, #0
 8017ca4:	701a      	strb	r2, [r3, #0]
 8017ca6:	2200      	movs	r2, #0
 8017ca8:	705a      	strb	r2, [r3, #1]
 8017caa:	2200      	movs	r2, #0
 8017cac:	709a      	strb	r2, [r3, #2]
 8017cae:	2200      	movs	r2, #0
 8017cb0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8017cb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017cb4:	8afa      	ldrh	r2, [r7, #22]
 8017cb6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8017cb8:	8afa      	ldrh	r2, [r7, #22]
 8017cba:	8b7b      	ldrh	r3, [r7, #26]
 8017cbc:	4413      	add	r3, r2
 8017cbe:	b29a      	uxth	r2, r3
 8017cc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017cc2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8017cc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017cc6:	88db      	ldrh	r3, [r3, #6]
 8017cc8:	b29b      	uxth	r3, r3
 8017cca:	8afa      	ldrh	r2, [r7, #22]
 8017ccc:	429a      	cmp	r2, r3
 8017cce:	d902      	bls.n	8017cd6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8017cd4:	e106      	b.n	8017ee4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8017cd6:	68fb      	ldr	r3, [r7, #12]
 8017cd8:	685b      	ldr	r3, [r3, #4]
 8017cda:	627b      	str	r3, [r7, #36]	@ 0x24
 8017cdc:	e068      	b.n	8017db0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8017cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017ce0:	685b      	ldr	r3, [r3, #4]
 8017ce2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8017ce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017ce6:	889b      	ldrh	r3, [r3, #4]
 8017ce8:	b29a      	uxth	r2, r3
 8017cea:	693b      	ldr	r3, [r7, #16]
 8017cec:	889b      	ldrh	r3, [r3, #4]
 8017cee:	b29b      	uxth	r3, r3
 8017cf0:	429a      	cmp	r2, r3
 8017cf2:	d235      	bcs.n	8017d60 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8017cf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017cf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017cf8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8017cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017cfc:	2b00      	cmp	r3, #0
 8017cfe:	d020      	beq.n	8017d42 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8017d00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017d02:	889b      	ldrh	r3, [r3, #4]
 8017d04:	b29a      	uxth	r2, r3
 8017d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017d08:	88db      	ldrh	r3, [r3, #6]
 8017d0a:	b29b      	uxth	r3, r3
 8017d0c:	429a      	cmp	r2, r3
 8017d0e:	d307      	bcc.n	8017d20 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8017d10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017d12:	88db      	ldrh	r3, [r3, #6]
 8017d14:	b29a      	uxth	r2, r3
 8017d16:	693b      	ldr	r3, [r7, #16]
 8017d18:	889b      	ldrh	r3, [r3, #4]
 8017d1a:	b29b      	uxth	r3, r3
 8017d1c:	429a      	cmp	r2, r3
 8017d1e:	d902      	bls.n	8017d26 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017d20:	f04f 33ff 	mov.w	r3, #4294967295
 8017d24:	e0de      	b.n	8017ee4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8017d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017d28:	68ba      	ldr	r2, [r7, #8]
 8017d2a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8017d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017d2e:	88db      	ldrh	r3, [r3, #6]
 8017d30:	b29a      	uxth	r2, r3
 8017d32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017d34:	889b      	ldrh	r3, [r3, #4]
 8017d36:	b29b      	uxth	r3, r3
 8017d38:	429a      	cmp	r2, r3
 8017d3a:	d03d      	beq.n	8017db8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017d3c:	2300      	movs	r3, #0
 8017d3e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8017d40:	e03a      	b.n	8017db8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8017d42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017d44:	88db      	ldrh	r3, [r3, #6]
 8017d46:	b29a      	uxth	r2, r3
 8017d48:	693b      	ldr	r3, [r7, #16]
 8017d4a:	889b      	ldrh	r3, [r3, #4]
 8017d4c:	b29b      	uxth	r3, r3
 8017d4e:	429a      	cmp	r2, r3
 8017d50:	d902      	bls.n	8017d58 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017d52:	f04f 33ff 	mov.w	r3, #4294967295
 8017d56:	e0c5      	b.n	8017ee4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8017d58:	68fb      	ldr	r3, [r7, #12]
 8017d5a:	68ba      	ldr	r2, [r7, #8]
 8017d5c:	605a      	str	r2, [r3, #4]
      break;
 8017d5e:	e02b      	b.n	8017db8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8017d60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017d62:	889b      	ldrh	r3, [r3, #4]
 8017d64:	b29a      	uxth	r2, r3
 8017d66:	693b      	ldr	r3, [r7, #16]
 8017d68:	889b      	ldrh	r3, [r3, #4]
 8017d6a:	b29b      	uxth	r3, r3
 8017d6c:	429a      	cmp	r2, r3
 8017d6e:	d102      	bne.n	8017d76 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017d70:	f04f 33ff 	mov.w	r3, #4294967295
 8017d74:	e0b6      	b.n	8017ee4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8017d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017d78:	889b      	ldrh	r3, [r3, #4]
 8017d7a:	b29a      	uxth	r2, r3
 8017d7c:	693b      	ldr	r3, [r7, #16]
 8017d7e:	88db      	ldrh	r3, [r3, #6]
 8017d80:	b29b      	uxth	r3, r3
 8017d82:	429a      	cmp	r2, r3
 8017d84:	d202      	bcs.n	8017d8c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017d86:	f04f 33ff 	mov.w	r3, #4294967295
 8017d8a:	e0ab      	b.n	8017ee4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8017d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017d8e:	2b00      	cmp	r3, #0
 8017d90:	d009      	beq.n	8017da6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8017d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017d94:	88db      	ldrh	r3, [r3, #6]
 8017d96:	b29a      	uxth	r2, r3
 8017d98:	693b      	ldr	r3, [r7, #16]
 8017d9a:	889b      	ldrh	r3, [r3, #4]
 8017d9c:	b29b      	uxth	r3, r3
 8017d9e:	429a      	cmp	r2, r3
 8017da0:	d001      	beq.n	8017da6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017da2:	2300      	movs	r3, #0
 8017da4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8017da6:	693b      	ldr	r3, [r7, #16]
 8017da8:	681b      	ldr	r3, [r3, #0]
 8017daa:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8017dac:	693b      	ldr	r3, [r7, #16]
 8017dae:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8017db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017db2:	2b00      	cmp	r3, #0
 8017db4:	d193      	bne.n	8017cde <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8017db6:	e000      	b.n	8017dba <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8017db8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8017dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017dbc:	2b00      	cmp	r3, #0
 8017dbe:	d12d      	bne.n	8017e1c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8017dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017dc2:	2b00      	cmp	r3, #0
 8017dc4:	d01c      	beq.n	8017e00 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8017dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017dc8:	88db      	ldrh	r3, [r3, #6]
 8017dca:	b29a      	uxth	r2, r3
 8017dcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017dce:	889b      	ldrh	r3, [r3, #4]
 8017dd0:	b29b      	uxth	r3, r3
 8017dd2:	429a      	cmp	r2, r3
 8017dd4:	d906      	bls.n	8017de4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8017dd6:	4b45      	ldr	r3, [pc, #276]	@ (8017eec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017dd8:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8017ddc:	4944      	ldr	r1, [pc, #272]	@ (8017ef0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8017dde:	4845      	ldr	r0, [pc, #276]	@ (8017ef4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017de0:	f000 ffb0 	bl	8018d44 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8017de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017de6:	68ba      	ldr	r2, [r7, #8]
 8017de8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8017dea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017dec:	88db      	ldrh	r3, [r3, #6]
 8017dee:	b29a      	uxth	r2, r3
 8017df0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017df2:	889b      	ldrh	r3, [r3, #4]
 8017df4:	b29b      	uxth	r3, r3
 8017df6:	429a      	cmp	r2, r3
 8017df8:	d010      	beq.n	8017e1c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8017dfa:	2300      	movs	r3, #0
 8017dfc:	623b      	str	r3, [r7, #32]
 8017dfe:	e00d      	b.n	8017e1c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8017e00:	68fb      	ldr	r3, [r7, #12]
 8017e02:	685b      	ldr	r3, [r3, #4]
 8017e04:	2b00      	cmp	r3, #0
 8017e06:	d006      	beq.n	8017e16 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8017e08:	4b38      	ldr	r3, [pc, #224]	@ (8017eec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017e0a:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8017e0e:	493a      	ldr	r1, [pc, #232]	@ (8017ef8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8017e10:	4838      	ldr	r0, [pc, #224]	@ (8017ef4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017e12:	f000 ff97 	bl	8018d44 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8017e16:	68fb      	ldr	r3, [r7, #12]
 8017e18:	68ba      	ldr	r2, [r7, #8]
 8017e1a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8017e1c:	687b      	ldr	r3, [r7, #4]
 8017e1e:	2b00      	cmp	r3, #0
 8017e20:	d105      	bne.n	8017e2e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8017e22:	68fb      	ldr	r3, [r7, #12]
 8017e24:	7f9b      	ldrb	r3, [r3, #30]
 8017e26:	f003 0301 	and.w	r3, r3, #1
 8017e2a:	2b00      	cmp	r3, #0
 8017e2c:	d059      	beq.n	8017ee2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8017e2e:	6a3b      	ldr	r3, [r7, #32]
 8017e30:	2b00      	cmp	r3, #0
 8017e32:	d04f      	beq.n	8017ed4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8017e34:	68fb      	ldr	r3, [r7, #12]
 8017e36:	685b      	ldr	r3, [r3, #4]
 8017e38:	2b00      	cmp	r3, #0
 8017e3a:	d006      	beq.n	8017e4a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8017e3c:	68fb      	ldr	r3, [r7, #12]
 8017e3e:	685b      	ldr	r3, [r3, #4]
 8017e40:	685b      	ldr	r3, [r3, #4]
 8017e42:	889b      	ldrh	r3, [r3, #4]
 8017e44:	b29b      	uxth	r3, r3
 8017e46:	2b00      	cmp	r3, #0
 8017e48:	d002      	beq.n	8017e50 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8017e4a:	2300      	movs	r3, #0
 8017e4c:	623b      	str	r3, [r7, #32]
 8017e4e:	e041      	b.n	8017ed4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8017e50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017e52:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8017e54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017e56:	681b      	ldr	r3, [r3, #0]
 8017e58:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8017e5a:	e012      	b.n	8017e82 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8017e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017e5e:	685b      	ldr	r3, [r3, #4]
 8017e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8017e62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017e64:	88db      	ldrh	r3, [r3, #6]
 8017e66:	b29a      	uxth	r2, r3
 8017e68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017e6a:	889b      	ldrh	r3, [r3, #4]
 8017e6c:	b29b      	uxth	r3, r3
 8017e6e:	429a      	cmp	r2, r3
 8017e70:	d002      	beq.n	8017e78 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8017e72:	2300      	movs	r3, #0
 8017e74:	623b      	str	r3, [r7, #32]
            break;
 8017e76:	e007      	b.n	8017e88 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8017e78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017e7a:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8017e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017e7e:	681b      	ldr	r3, [r3, #0]
 8017e80:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8017e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017e84:	2b00      	cmp	r3, #0
 8017e86:	d1e9      	bne.n	8017e5c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8017e88:	6a3b      	ldr	r3, [r7, #32]
 8017e8a:	2b00      	cmp	r3, #0
 8017e8c:	d022      	beq.n	8017ed4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8017e8e:	68fb      	ldr	r3, [r7, #12]
 8017e90:	685b      	ldr	r3, [r3, #4]
 8017e92:	2b00      	cmp	r3, #0
 8017e94:	d106      	bne.n	8017ea4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8017e96:	4b15      	ldr	r3, [pc, #84]	@ (8017eec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017e98:	f240 12df 	movw	r2, #479	@ 0x1df
 8017e9c:	4917      	ldr	r1, [pc, #92]	@ (8017efc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8017e9e:	4815      	ldr	r0, [pc, #84]	@ (8017ef4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017ea0:	f000 ff50 	bl	8018d44 <iprintf>
          LWIP_ASSERT("sanity check",
 8017ea4:	68fb      	ldr	r3, [r7, #12]
 8017ea6:	685b      	ldr	r3, [r3, #4]
 8017ea8:	685b      	ldr	r3, [r3, #4]
 8017eaa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017eac:	429a      	cmp	r2, r3
 8017eae:	d106      	bne.n	8017ebe <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8017eb0:	4b0e      	ldr	r3, [pc, #56]	@ (8017eec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017eb2:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8017eb6:	4911      	ldr	r1, [pc, #68]	@ (8017efc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8017eb8:	480e      	ldr	r0, [pc, #56]	@ (8017ef4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017eba:	f000 ff43 	bl	8018d44 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8017ebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017ec0:	681b      	ldr	r3, [r3, #0]
 8017ec2:	2b00      	cmp	r3, #0
 8017ec4:	d006      	beq.n	8017ed4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8017ec6:	4b09      	ldr	r3, [pc, #36]	@ (8017eec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017ec8:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8017ecc:	490c      	ldr	r1, [pc, #48]	@ (8017f00 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8017ece:	4809      	ldr	r0, [pc, #36]	@ (8017ef4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017ed0:	f000 ff38 	bl	8018d44 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8017ed4:	6a3b      	ldr	r3, [r7, #32]
 8017ed6:	2b00      	cmp	r3, #0
 8017ed8:	bf14      	ite	ne
 8017eda:	2301      	movne	r3, #1
 8017edc:	2300      	moveq	r3, #0
 8017ede:	b2db      	uxtb	r3, r3
 8017ee0:	e000      	b.n	8017ee4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8017ee2:	2300      	movs	r3, #0
}
 8017ee4:	4618      	mov	r0, r3
 8017ee6:	3730      	adds	r7, #48	@ 0x30
 8017ee8:	46bd      	mov	sp, r7
 8017eea:	bd80      	pop	{r7, pc}
 8017eec:	0801da70 	.word	0x0801da70
 8017ef0:	0801db54 	.word	0x0801db54
 8017ef4:	0801dab8 	.word	0x0801dab8
 8017ef8:	0801db74 	.word	0x0801db74
 8017efc:	0801dbac 	.word	0x0801dbac
 8017f00:	0801dbbc 	.word	0x0801dbbc

08017f04 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8017f04:	b580      	push	{r7, lr}
 8017f06:	b08e      	sub	sp, #56	@ 0x38
 8017f08:	af00      	add	r7, sp, #0
 8017f0a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8017f0c:	687b      	ldr	r3, [r7, #4]
 8017f0e:	685b      	ldr	r3, [r3, #4]
 8017f10:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8017f12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017f14:	781b      	ldrb	r3, [r3, #0]
 8017f16:	f003 030f 	and.w	r3, r3, #15
 8017f1a:	b2db      	uxtb	r3, r3
 8017f1c:	009b      	lsls	r3, r3, #2
 8017f1e:	b2db      	uxtb	r3, r3
 8017f20:	2b14      	cmp	r3, #20
 8017f22:	f040 8171 	bne.w	8018208 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8017f26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017f28:	88db      	ldrh	r3, [r3, #6]
 8017f2a:	b29b      	uxth	r3, r3
 8017f2c:	4618      	mov	r0, r3
 8017f2e:	f7f3 fb9b 	bl	800b668 <lwip_htons>
 8017f32:	4603      	mov	r3, r0
 8017f34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017f38:	b29b      	uxth	r3, r3
 8017f3a:	00db      	lsls	r3, r3, #3
 8017f3c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8017f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017f40:	885b      	ldrh	r3, [r3, #2]
 8017f42:	b29b      	uxth	r3, r3
 8017f44:	4618      	mov	r0, r3
 8017f46:	f7f3 fb8f 	bl	800b668 <lwip_htons>
 8017f4a:	4603      	mov	r3, r0
 8017f4c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8017f4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017f50:	781b      	ldrb	r3, [r3, #0]
 8017f52:	f003 030f 	and.w	r3, r3, #15
 8017f56:	b2db      	uxtb	r3, r3
 8017f58:	009b      	lsls	r3, r3, #2
 8017f5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8017f5e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8017f62:	b29b      	uxth	r3, r3
 8017f64:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8017f66:	429a      	cmp	r2, r3
 8017f68:	f0c0 8150 	bcc.w	801820c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8017f6c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8017f70:	b29b      	uxth	r3, r3
 8017f72:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8017f74:	1ad3      	subs	r3, r2, r3
 8017f76:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8017f78:	6878      	ldr	r0, [r7, #4]
 8017f7a:	f7f5 f837 	bl	800cfec <pbuf_clen>
 8017f7e:	4603      	mov	r3, r0
 8017f80:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8017f82:	4b8c      	ldr	r3, [pc, #560]	@ (80181b4 <ip4_reass+0x2b0>)
 8017f84:	881b      	ldrh	r3, [r3, #0]
 8017f86:	461a      	mov	r2, r3
 8017f88:	8c3b      	ldrh	r3, [r7, #32]
 8017f8a:	4413      	add	r3, r2
 8017f8c:	2b0a      	cmp	r3, #10
 8017f8e:	dd10      	ble.n	8017fb2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017f90:	8c3b      	ldrh	r3, [r7, #32]
 8017f92:	4619      	mov	r1, r3
 8017f94:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017f96:	f7ff fd81 	bl	8017a9c <ip_reass_remove_oldest_datagram>
 8017f9a:	4603      	mov	r3, r0
 8017f9c:	2b00      	cmp	r3, #0
 8017f9e:	f000 8137 	beq.w	8018210 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8017fa2:	4b84      	ldr	r3, [pc, #528]	@ (80181b4 <ip4_reass+0x2b0>)
 8017fa4:	881b      	ldrh	r3, [r3, #0]
 8017fa6:	461a      	mov	r2, r3
 8017fa8:	8c3b      	ldrh	r3, [r7, #32]
 8017faa:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017fac:	2b0a      	cmp	r3, #10
 8017fae:	f300 812f 	bgt.w	8018210 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017fb2:	4b81      	ldr	r3, [pc, #516]	@ (80181b8 <ip4_reass+0x2b4>)
 8017fb4:	681b      	ldr	r3, [r3, #0]
 8017fb6:	633b      	str	r3, [r7, #48]	@ 0x30
 8017fb8:	e015      	b.n	8017fe6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8017fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017fbc:	695a      	ldr	r2, [r3, #20]
 8017fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017fc0:	68db      	ldr	r3, [r3, #12]
 8017fc2:	429a      	cmp	r2, r3
 8017fc4:	d10c      	bne.n	8017fe0 <ip4_reass+0xdc>
 8017fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017fc8:	699a      	ldr	r2, [r3, #24]
 8017fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017fcc:	691b      	ldr	r3, [r3, #16]
 8017fce:	429a      	cmp	r2, r3
 8017fd0:	d106      	bne.n	8017fe0 <ip4_reass+0xdc>
 8017fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017fd4:	899a      	ldrh	r2, [r3, #12]
 8017fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017fd8:	889b      	ldrh	r3, [r3, #4]
 8017fda:	b29b      	uxth	r3, r3
 8017fdc:	429a      	cmp	r2, r3
 8017fde:	d006      	beq.n	8017fee <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017fe2:	681b      	ldr	r3, [r3, #0]
 8017fe4:	633b      	str	r3, [r7, #48]	@ 0x30
 8017fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017fe8:	2b00      	cmp	r3, #0
 8017fea:	d1e6      	bne.n	8017fba <ip4_reass+0xb6>
 8017fec:	e000      	b.n	8017ff0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8017fee:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8017ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017ff2:	2b00      	cmp	r3, #0
 8017ff4:	d109      	bne.n	801800a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8017ff6:	8c3b      	ldrh	r3, [r7, #32]
 8017ff8:	4619      	mov	r1, r3
 8017ffa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017ffc:	f7ff fdb0 	bl	8017b60 <ip_reass_enqueue_new_datagram>
 8018000:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8018002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018004:	2b00      	cmp	r3, #0
 8018006:	d11c      	bne.n	8018042 <ip4_reass+0x13e>
      goto nullreturn;
 8018008:	e105      	b.n	8018216 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801800a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801800c:	88db      	ldrh	r3, [r3, #6]
 801800e:	b29b      	uxth	r3, r3
 8018010:	4618      	mov	r0, r3
 8018012:	f7f3 fb29 	bl	800b668 <lwip_htons>
 8018016:	4603      	mov	r3, r0
 8018018:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801801c:	2b00      	cmp	r3, #0
 801801e:	d110      	bne.n	8018042 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8018020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018022:	89db      	ldrh	r3, [r3, #14]
 8018024:	4618      	mov	r0, r3
 8018026:	f7f3 fb1f 	bl	800b668 <lwip_htons>
 801802a:	4603      	mov	r3, r0
 801802c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8018030:	2b00      	cmp	r3, #0
 8018032:	d006      	beq.n	8018042 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8018034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018036:	3308      	adds	r3, #8
 8018038:	2214      	movs	r2, #20
 801803a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801803c:	4618      	mov	r0, r3
 801803e:	f001 f882 	bl	8019146 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8018042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018044:	88db      	ldrh	r3, [r3, #6]
 8018046:	b29b      	uxth	r3, r3
 8018048:	f003 0320 	and.w	r3, r3, #32
 801804c:	2b00      	cmp	r3, #0
 801804e:	bf0c      	ite	eq
 8018050:	2301      	moveq	r3, #1
 8018052:	2300      	movne	r3, #0
 8018054:	b2db      	uxtb	r3, r3
 8018056:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8018058:	69fb      	ldr	r3, [r7, #28]
 801805a:	2b00      	cmp	r3, #0
 801805c:	d00e      	beq.n	801807c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801805e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8018060:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018062:	4413      	add	r3, r2
 8018064:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8018066:	8b7a      	ldrh	r2, [r7, #26]
 8018068:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801806a:	429a      	cmp	r2, r3
 801806c:	f0c0 80a0 	bcc.w	80181b0 <ip4_reass+0x2ac>
 8018070:	8b7b      	ldrh	r3, [r7, #26]
 8018072:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8018076:	4293      	cmp	r3, r2
 8018078:	f200 809a 	bhi.w	80181b0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801807c:	69fa      	ldr	r2, [r7, #28]
 801807e:	6879      	ldr	r1, [r7, #4]
 8018080:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018082:	f7ff fdd5 	bl	8017c30 <ip_reass_chain_frag_into_datagram_and_validate>
 8018086:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8018088:	697b      	ldr	r3, [r7, #20]
 801808a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801808e:	f000 809b 	beq.w	80181c8 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8018092:	4b48      	ldr	r3, [pc, #288]	@ (80181b4 <ip4_reass+0x2b0>)
 8018094:	881a      	ldrh	r2, [r3, #0]
 8018096:	8c3b      	ldrh	r3, [r7, #32]
 8018098:	4413      	add	r3, r2
 801809a:	b29a      	uxth	r2, r3
 801809c:	4b45      	ldr	r3, [pc, #276]	@ (80181b4 <ip4_reass+0x2b0>)
 801809e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80180a0:	69fb      	ldr	r3, [r7, #28]
 80180a2:	2b00      	cmp	r3, #0
 80180a4:	d00d      	beq.n	80180c2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80180a6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80180a8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80180aa:	4413      	add	r3, r2
 80180ac:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80180ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80180b0:	8a7a      	ldrh	r2, [r7, #18]
 80180b2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80180b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80180b6:	7f9b      	ldrb	r3, [r3, #30]
 80180b8:	f043 0301 	orr.w	r3, r3, #1
 80180bc:	b2da      	uxtb	r2, r3
 80180be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80180c0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80180c2:	697b      	ldr	r3, [r7, #20]
 80180c4:	2b01      	cmp	r3, #1
 80180c6:	d171      	bne.n	80181ac <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80180c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80180ca:	8b9b      	ldrh	r3, [r3, #28]
 80180cc:	3314      	adds	r3, #20
 80180ce:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80180d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80180d2:	685b      	ldr	r3, [r3, #4]
 80180d4:	685b      	ldr	r3, [r3, #4]
 80180d6:	681b      	ldr	r3, [r3, #0]
 80180d8:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80180da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80180dc:	685b      	ldr	r3, [r3, #4]
 80180de:	685b      	ldr	r3, [r3, #4]
 80180e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80180e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80180e4:	3308      	adds	r3, #8
 80180e6:	2214      	movs	r2, #20
 80180e8:	4619      	mov	r1, r3
 80180ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80180ec:	f001 f82b 	bl	8019146 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80180f0:	8a3b      	ldrh	r3, [r7, #16]
 80180f2:	4618      	mov	r0, r3
 80180f4:	f7f3 fab8 	bl	800b668 <lwip_htons>
 80180f8:	4603      	mov	r3, r0
 80180fa:	461a      	mov	r2, r3
 80180fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80180fe:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8018100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018102:	2200      	movs	r2, #0
 8018104:	719a      	strb	r2, [r3, #6]
 8018106:	2200      	movs	r2, #0
 8018108:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801810a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801810c:	2200      	movs	r2, #0
 801810e:	729a      	strb	r2, [r3, #10]
 8018110:	2200      	movs	r2, #0
 8018112:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8018114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018116:	685b      	ldr	r3, [r3, #4]
 8018118:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801811a:	e00d      	b.n	8018138 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801811c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801811e:	685b      	ldr	r3, [r3, #4]
 8018120:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8018122:	2114      	movs	r1, #20
 8018124:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8018126:	f7f4 fe4d 	bl	800cdc4 <pbuf_remove_header>
      pbuf_cat(p, r);
 801812a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801812c:	6878      	ldr	r0, [r7, #4]
 801812e:	f7f4 ff9d 	bl	800d06c <pbuf_cat>
      r = iprh->next_pbuf;
 8018132:	68fb      	ldr	r3, [r7, #12]
 8018134:	681b      	ldr	r3, [r3, #0]
 8018136:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8018138:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801813a:	2b00      	cmp	r3, #0
 801813c:	d1ee      	bne.n	801811c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801813e:	4b1e      	ldr	r3, [pc, #120]	@ (80181b8 <ip4_reass+0x2b4>)
 8018140:	681b      	ldr	r3, [r3, #0]
 8018142:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018144:	429a      	cmp	r2, r3
 8018146:	d102      	bne.n	801814e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8018148:	2300      	movs	r3, #0
 801814a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801814c:	e010      	b.n	8018170 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801814e:	4b1a      	ldr	r3, [pc, #104]	@ (80181b8 <ip4_reass+0x2b4>)
 8018150:	681b      	ldr	r3, [r3, #0]
 8018152:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018154:	e007      	b.n	8018166 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8018156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018158:	681b      	ldr	r3, [r3, #0]
 801815a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801815c:	429a      	cmp	r2, r3
 801815e:	d006      	beq.n	801816e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018162:	681b      	ldr	r3, [r3, #0]
 8018164:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018166:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018168:	2b00      	cmp	r3, #0
 801816a:	d1f4      	bne.n	8018156 <ip4_reass+0x252>
 801816c:	e000      	b.n	8018170 <ip4_reass+0x26c>
          break;
 801816e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8018170:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8018172:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018174:	f7ff fd2e 	bl	8017bd4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8018178:	6878      	ldr	r0, [r7, #4]
 801817a:	f7f4 ff37 	bl	800cfec <pbuf_clen>
 801817e:	4603      	mov	r3, r0
 8018180:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8018182:	4b0c      	ldr	r3, [pc, #48]	@ (80181b4 <ip4_reass+0x2b0>)
 8018184:	881b      	ldrh	r3, [r3, #0]
 8018186:	8c3a      	ldrh	r2, [r7, #32]
 8018188:	429a      	cmp	r2, r3
 801818a:	d906      	bls.n	801819a <ip4_reass+0x296>
 801818c:	4b0b      	ldr	r3, [pc, #44]	@ (80181bc <ip4_reass+0x2b8>)
 801818e:	f240 229b 	movw	r2, #667	@ 0x29b
 8018192:	490b      	ldr	r1, [pc, #44]	@ (80181c0 <ip4_reass+0x2bc>)
 8018194:	480b      	ldr	r0, [pc, #44]	@ (80181c4 <ip4_reass+0x2c0>)
 8018196:	f000 fdd5 	bl	8018d44 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801819a:	4b06      	ldr	r3, [pc, #24]	@ (80181b4 <ip4_reass+0x2b0>)
 801819c:	881a      	ldrh	r2, [r3, #0]
 801819e:	8c3b      	ldrh	r3, [r7, #32]
 80181a0:	1ad3      	subs	r3, r2, r3
 80181a2:	b29a      	uxth	r2, r3
 80181a4:	4b03      	ldr	r3, [pc, #12]	@ (80181b4 <ip4_reass+0x2b0>)
 80181a6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80181a8:	687b      	ldr	r3, [r7, #4]
 80181aa:	e038      	b.n	801821e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80181ac:	2300      	movs	r3, #0
 80181ae:	e036      	b.n	801821e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80181b0:	bf00      	nop
 80181b2:	e00a      	b.n	80181ca <ip4_reass+0x2c6>
 80181b4:	20011000 	.word	0x20011000
 80181b8:	20010ffc 	.word	0x20010ffc
 80181bc:	0801da70 	.word	0x0801da70
 80181c0:	0801dbe0 	.word	0x0801dbe0
 80181c4:	0801dab8 	.word	0x0801dab8
    goto nullreturn_ipr;
 80181c8:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80181ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80181cc:	2b00      	cmp	r3, #0
 80181ce:	d106      	bne.n	80181de <ip4_reass+0x2da>
 80181d0:	4b15      	ldr	r3, [pc, #84]	@ (8018228 <ip4_reass+0x324>)
 80181d2:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 80181d6:	4915      	ldr	r1, [pc, #84]	@ (801822c <ip4_reass+0x328>)
 80181d8:	4815      	ldr	r0, [pc, #84]	@ (8018230 <ip4_reass+0x32c>)
 80181da:	f000 fdb3 	bl	8018d44 <iprintf>
  if (ipr->p == NULL) {
 80181de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80181e0:	685b      	ldr	r3, [r3, #4]
 80181e2:	2b00      	cmp	r3, #0
 80181e4:	d116      	bne.n	8018214 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80181e6:	4b13      	ldr	r3, [pc, #76]	@ (8018234 <ip4_reass+0x330>)
 80181e8:	681b      	ldr	r3, [r3, #0]
 80181ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80181ec:	429a      	cmp	r2, r3
 80181ee:	d006      	beq.n	80181fe <ip4_reass+0x2fa>
 80181f0:	4b0d      	ldr	r3, [pc, #52]	@ (8018228 <ip4_reass+0x324>)
 80181f2:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80181f6:	4910      	ldr	r1, [pc, #64]	@ (8018238 <ip4_reass+0x334>)
 80181f8:	480d      	ldr	r0, [pc, #52]	@ (8018230 <ip4_reass+0x32c>)
 80181fa:	f000 fda3 	bl	8018d44 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80181fe:	2100      	movs	r1, #0
 8018200:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018202:	f7ff fce7 	bl	8017bd4 <ip_reass_dequeue_datagram>
 8018206:	e006      	b.n	8018216 <ip4_reass+0x312>
    goto nullreturn;
 8018208:	bf00      	nop
 801820a:	e004      	b.n	8018216 <ip4_reass+0x312>
    goto nullreturn;
 801820c:	bf00      	nop
 801820e:	e002      	b.n	8018216 <ip4_reass+0x312>
      goto nullreturn;
 8018210:	bf00      	nop
 8018212:	e000      	b.n	8018216 <ip4_reass+0x312>
  }

nullreturn:
 8018214:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8018216:	6878      	ldr	r0, [r7, #4]
 8018218:	f7f4 fe5a 	bl	800ced0 <pbuf_free>
  return NULL;
 801821c:	2300      	movs	r3, #0
}
 801821e:	4618      	mov	r0, r3
 8018220:	3738      	adds	r7, #56	@ 0x38
 8018222:	46bd      	mov	sp, r7
 8018224:	bd80      	pop	{r7, pc}
 8018226:	bf00      	nop
 8018228:	0801da70 	.word	0x0801da70
 801822c:	0801dbfc 	.word	0x0801dbfc
 8018230:	0801dab8 	.word	0x0801dab8
 8018234:	20010ffc 	.word	0x20010ffc
 8018238:	0801dc08 	.word	0x0801dc08

0801823c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801823c:	b580      	push	{r7, lr}
 801823e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8018240:	2005      	movs	r0, #5
 8018242:	f7f3 ff1f 	bl	800c084 <memp_malloc>
 8018246:	4603      	mov	r3, r0
}
 8018248:	4618      	mov	r0, r3
 801824a:	bd80      	pop	{r7, pc}

0801824c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801824c:	b580      	push	{r7, lr}
 801824e:	b082      	sub	sp, #8
 8018250:	af00      	add	r7, sp, #0
 8018252:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8018254:	687b      	ldr	r3, [r7, #4]
 8018256:	2b00      	cmp	r3, #0
 8018258:	d106      	bne.n	8018268 <ip_frag_free_pbuf_custom_ref+0x1c>
 801825a:	4b07      	ldr	r3, [pc, #28]	@ (8018278 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801825c:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8018260:	4906      	ldr	r1, [pc, #24]	@ (801827c <ip_frag_free_pbuf_custom_ref+0x30>)
 8018262:	4807      	ldr	r0, [pc, #28]	@ (8018280 <ip_frag_free_pbuf_custom_ref+0x34>)
 8018264:	f000 fd6e 	bl	8018d44 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8018268:	6879      	ldr	r1, [r7, #4]
 801826a:	2005      	movs	r0, #5
 801826c:	f7f3 ff80 	bl	800c170 <memp_free>
}
 8018270:	bf00      	nop
 8018272:	3708      	adds	r7, #8
 8018274:	46bd      	mov	sp, r7
 8018276:	bd80      	pop	{r7, pc}
 8018278:	0801da70 	.word	0x0801da70
 801827c:	0801dc28 	.word	0x0801dc28
 8018280:	0801dab8 	.word	0x0801dab8

08018284 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8018284:	b580      	push	{r7, lr}
 8018286:	b084      	sub	sp, #16
 8018288:	af00      	add	r7, sp, #0
 801828a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801828c:	687b      	ldr	r3, [r7, #4]
 801828e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8018290:	68fb      	ldr	r3, [r7, #12]
 8018292:	2b00      	cmp	r3, #0
 8018294:	d106      	bne.n	80182a4 <ipfrag_free_pbuf_custom+0x20>
 8018296:	4b11      	ldr	r3, [pc, #68]	@ (80182dc <ipfrag_free_pbuf_custom+0x58>)
 8018298:	f240 22ce 	movw	r2, #718	@ 0x2ce
 801829c:	4910      	ldr	r1, [pc, #64]	@ (80182e0 <ipfrag_free_pbuf_custom+0x5c>)
 801829e:	4811      	ldr	r0, [pc, #68]	@ (80182e4 <ipfrag_free_pbuf_custom+0x60>)
 80182a0:	f000 fd50 	bl	8018d44 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80182a4:	68fa      	ldr	r2, [r7, #12]
 80182a6:	687b      	ldr	r3, [r7, #4]
 80182a8:	429a      	cmp	r2, r3
 80182aa:	d006      	beq.n	80182ba <ipfrag_free_pbuf_custom+0x36>
 80182ac:	4b0b      	ldr	r3, [pc, #44]	@ (80182dc <ipfrag_free_pbuf_custom+0x58>)
 80182ae:	f240 22cf 	movw	r2, #719	@ 0x2cf
 80182b2:	490d      	ldr	r1, [pc, #52]	@ (80182e8 <ipfrag_free_pbuf_custom+0x64>)
 80182b4:	480b      	ldr	r0, [pc, #44]	@ (80182e4 <ipfrag_free_pbuf_custom+0x60>)
 80182b6:	f000 fd45 	bl	8018d44 <iprintf>
  if (pcr->original != NULL) {
 80182ba:	68fb      	ldr	r3, [r7, #12]
 80182bc:	695b      	ldr	r3, [r3, #20]
 80182be:	2b00      	cmp	r3, #0
 80182c0:	d004      	beq.n	80182cc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80182c2:	68fb      	ldr	r3, [r7, #12]
 80182c4:	695b      	ldr	r3, [r3, #20]
 80182c6:	4618      	mov	r0, r3
 80182c8:	f7f4 fe02 	bl	800ced0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80182cc:	68f8      	ldr	r0, [r7, #12]
 80182ce:	f7ff ffbd 	bl	801824c <ip_frag_free_pbuf_custom_ref>
}
 80182d2:	bf00      	nop
 80182d4:	3710      	adds	r7, #16
 80182d6:	46bd      	mov	sp, r7
 80182d8:	bd80      	pop	{r7, pc}
 80182da:	bf00      	nop
 80182dc:	0801da70 	.word	0x0801da70
 80182e0:	0801dc34 	.word	0x0801dc34
 80182e4:	0801dab8 	.word	0x0801dab8
 80182e8:	0801dc40 	.word	0x0801dc40

080182ec <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80182ec:	b580      	push	{r7, lr}
 80182ee:	b094      	sub	sp, #80	@ 0x50
 80182f0:	af02      	add	r7, sp, #8
 80182f2:	60f8      	str	r0, [r7, #12]
 80182f4:	60b9      	str	r1, [r7, #8]
 80182f6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80182f8:	2300      	movs	r3, #0
 80182fa:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80182fe:	68bb      	ldr	r3, [r7, #8]
 8018300:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8018302:	3b14      	subs	r3, #20
 8018304:	2b00      	cmp	r3, #0
 8018306:	da00      	bge.n	801830a <ip4_frag+0x1e>
 8018308:	3307      	adds	r3, #7
 801830a:	10db      	asrs	r3, r3, #3
 801830c:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801830e:	2314      	movs	r3, #20
 8018310:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8018312:	68fb      	ldr	r3, [r7, #12]
 8018314:	685b      	ldr	r3, [r3, #4]
 8018316:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8018318:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801831a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801831c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801831e:	781b      	ldrb	r3, [r3, #0]
 8018320:	f003 030f 	and.w	r3, r3, #15
 8018324:	b2db      	uxtb	r3, r3
 8018326:	009b      	lsls	r3, r3, #2
 8018328:	b2db      	uxtb	r3, r3
 801832a:	2b14      	cmp	r3, #20
 801832c:	d002      	beq.n	8018334 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801832e:	f06f 0305 	mvn.w	r3, #5
 8018332:	e110      	b.n	8018556 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8018334:	68fb      	ldr	r3, [r7, #12]
 8018336:	895b      	ldrh	r3, [r3, #10]
 8018338:	2b13      	cmp	r3, #19
 801833a:	d809      	bhi.n	8018350 <ip4_frag+0x64>
 801833c:	4b88      	ldr	r3, [pc, #544]	@ (8018560 <ip4_frag+0x274>)
 801833e:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8018342:	4988      	ldr	r1, [pc, #544]	@ (8018564 <ip4_frag+0x278>)
 8018344:	4888      	ldr	r0, [pc, #544]	@ (8018568 <ip4_frag+0x27c>)
 8018346:	f000 fcfd 	bl	8018d44 <iprintf>
 801834a:	f06f 0305 	mvn.w	r3, #5
 801834e:	e102      	b.n	8018556 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8018350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018352:	88db      	ldrh	r3, [r3, #6]
 8018354:	b29b      	uxth	r3, r3
 8018356:	4618      	mov	r0, r3
 8018358:	f7f3 f986 	bl	800b668 <lwip_htons>
 801835c:	4603      	mov	r3, r0
 801835e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8018360:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8018362:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018366:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801836a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801836c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8018370:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8018372:	68fb      	ldr	r3, [r7, #12]
 8018374:	891b      	ldrh	r3, [r3, #8]
 8018376:	3b14      	subs	r3, #20
 8018378:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 801837c:	e0e1      	b.n	8018542 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801837e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8018380:	00db      	lsls	r3, r3, #3
 8018382:	b29b      	uxth	r3, r3
 8018384:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8018388:	4293      	cmp	r3, r2
 801838a:	bf28      	it	cs
 801838c:	4613      	movcs	r3, r2
 801838e:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8018390:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8018394:	2114      	movs	r1, #20
 8018396:	200e      	movs	r0, #14
 8018398:	f7f4 fab6 	bl	800c908 <pbuf_alloc>
 801839c:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801839e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80183a0:	2b00      	cmp	r3, #0
 80183a2:	f000 80d5 	beq.w	8018550 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80183a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80183a8:	895b      	ldrh	r3, [r3, #10]
 80183aa:	2b13      	cmp	r3, #19
 80183ac:	d806      	bhi.n	80183bc <ip4_frag+0xd0>
 80183ae:	4b6c      	ldr	r3, [pc, #432]	@ (8018560 <ip4_frag+0x274>)
 80183b0:	f44f 7249 	mov.w	r2, #804	@ 0x324
 80183b4:	496d      	ldr	r1, [pc, #436]	@ (801856c <ip4_frag+0x280>)
 80183b6:	486c      	ldr	r0, [pc, #432]	@ (8018568 <ip4_frag+0x27c>)
 80183b8:	f000 fcc4 	bl	8018d44 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80183bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80183be:	685b      	ldr	r3, [r3, #4]
 80183c0:	2214      	movs	r2, #20
 80183c2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80183c4:	4618      	mov	r0, r3
 80183c6:	f000 febe 	bl	8019146 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80183ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80183cc:	685b      	ldr	r3, [r3, #4]
 80183ce:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 80183d0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80183d2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 80183d6:	e064      	b.n	80184a2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80183d8:	68fb      	ldr	r3, [r7, #12]
 80183da:	895a      	ldrh	r2, [r3, #10]
 80183dc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80183de:	1ad3      	subs	r3, r2, r3
 80183e0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80183e2:	68fb      	ldr	r3, [r7, #12]
 80183e4:	895b      	ldrh	r3, [r3, #10]
 80183e6:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80183e8:	429a      	cmp	r2, r3
 80183ea:	d906      	bls.n	80183fa <ip4_frag+0x10e>
 80183ec:	4b5c      	ldr	r3, [pc, #368]	@ (8018560 <ip4_frag+0x274>)
 80183ee:	f240 322d 	movw	r2, #813	@ 0x32d
 80183f2:	495f      	ldr	r1, [pc, #380]	@ (8018570 <ip4_frag+0x284>)
 80183f4:	485c      	ldr	r0, [pc, #368]	@ (8018568 <ip4_frag+0x27c>)
 80183f6:	f000 fca5 	bl	8018d44 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80183fa:	8bfa      	ldrh	r2, [r7, #30]
 80183fc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8018400:	4293      	cmp	r3, r2
 8018402:	bf28      	it	cs
 8018404:	4613      	movcs	r3, r2
 8018406:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801840a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801840e:	2b00      	cmp	r3, #0
 8018410:	d105      	bne.n	801841e <ip4_frag+0x132>
        poff = 0;
 8018412:	2300      	movs	r3, #0
 8018414:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8018416:	68fb      	ldr	r3, [r7, #12]
 8018418:	681b      	ldr	r3, [r3, #0]
 801841a:	60fb      	str	r3, [r7, #12]
        continue;
 801841c:	e041      	b.n	80184a2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801841e:	f7ff ff0d 	bl	801823c <ip_frag_alloc_pbuf_custom_ref>
 8018422:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8018424:	69bb      	ldr	r3, [r7, #24]
 8018426:	2b00      	cmp	r3, #0
 8018428:	d103      	bne.n	8018432 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801842a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801842c:	f7f4 fd50 	bl	800ced0 <pbuf_free>
        goto memerr;
 8018430:	e08f      	b.n	8018552 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018432:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8018434:	68fb      	ldr	r3, [r7, #12]
 8018436:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018438:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801843a:	4413      	add	r3, r2
 801843c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8018440:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8018444:	9201      	str	r2, [sp, #4]
 8018446:	9300      	str	r3, [sp, #0]
 8018448:	4603      	mov	r3, r0
 801844a:	2241      	movs	r2, #65	@ 0x41
 801844c:	2000      	movs	r0, #0
 801844e:	f7f4 fb85 	bl	800cb5c <pbuf_alloced_custom>
 8018452:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8018454:	697b      	ldr	r3, [r7, #20]
 8018456:	2b00      	cmp	r3, #0
 8018458:	d106      	bne.n	8018468 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801845a:	69b8      	ldr	r0, [r7, #24]
 801845c:	f7ff fef6 	bl	801824c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8018460:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018462:	f7f4 fd35 	bl	800ced0 <pbuf_free>
        goto memerr;
 8018466:	e074      	b.n	8018552 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8018468:	68f8      	ldr	r0, [r7, #12]
 801846a:	f7f4 fdd7 	bl	800d01c <pbuf_ref>
      pcr->original = p;
 801846e:	69bb      	ldr	r3, [r7, #24]
 8018470:	68fa      	ldr	r2, [r7, #12]
 8018472:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8018474:	69bb      	ldr	r3, [r7, #24]
 8018476:	4a3f      	ldr	r2, [pc, #252]	@ (8018574 <ip4_frag+0x288>)
 8018478:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801847a:	6979      	ldr	r1, [r7, #20]
 801847c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801847e:	f7f4 fdf5 	bl	800d06c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8018482:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8018486:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801848a:	1ad3      	subs	r3, r2, r3
 801848c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8018490:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8018494:	2b00      	cmp	r3, #0
 8018496:	d004      	beq.n	80184a2 <ip4_frag+0x1b6>
        poff = 0;
 8018498:	2300      	movs	r3, #0
 801849a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801849c:	68fb      	ldr	r3, [r7, #12]
 801849e:	681b      	ldr	r3, [r3, #0]
 80184a0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80184a2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80184a6:	2b00      	cmp	r3, #0
 80184a8:	d196      	bne.n	80183d8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80184aa:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80184ac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80184b0:	4413      	add	r3, r2
 80184b2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80184b4:	68bb      	ldr	r3, [r7, #8]
 80184b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80184b8:	f1a3 0213 	sub.w	r2, r3, #19
 80184bc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80184c0:	429a      	cmp	r2, r3
 80184c2:	bfcc      	ite	gt
 80184c4:	2301      	movgt	r3, #1
 80184c6:	2300      	movle	r3, #0
 80184c8:	b2db      	uxtb	r3, r3
 80184ca:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80184cc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80184d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80184d4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 80184d6:	6a3b      	ldr	r3, [r7, #32]
 80184d8:	2b00      	cmp	r3, #0
 80184da:	d002      	beq.n	80184e2 <ip4_frag+0x1f6>
 80184dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80184de:	2b00      	cmp	r3, #0
 80184e0:	d003      	beq.n	80184ea <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80184e2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80184e4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80184e8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80184ea:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80184ec:	4618      	mov	r0, r3
 80184ee:	f7f3 f8bb 	bl	800b668 <lwip_htons>
 80184f2:	4603      	mov	r3, r0
 80184f4:	461a      	mov	r2, r3
 80184f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80184f8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80184fa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80184fc:	3314      	adds	r3, #20
 80184fe:	b29b      	uxth	r3, r3
 8018500:	4618      	mov	r0, r3
 8018502:	f7f3 f8b1 	bl	800b668 <lwip_htons>
 8018506:	4603      	mov	r3, r0
 8018508:	461a      	mov	r2, r3
 801850a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801850c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801850e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018510:	2200      	movs	r2, #0
 8018512:	729a      	strb	r2, [r3, #10]
 8018514:	2200      	movs	r2, #0
 8018516:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8018518:	68bb      	ldr	r3, [r7, #8]
 801851a:	695b      	ldr	r3, [r3, #20]
 801851c:	687a      	ldr	r2, [r7, #4]
 801851e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8018520:	68b8      	ldr	r0, [r7, #8]
 8018522:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8018524:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018526:	f7f4 fcd3 	bl	800ced0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801852a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801852e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8018530:	1ad3      	subs	r3, r2, r3
 8018532:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8018536:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801853a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801853c:	4413      	add	r3, r2
 801853e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8018542:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8018546:	2b00      	cmp	r3, #0
 8018548:	f47f af19 	bne.w	801837e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801854c:	2300      	movs	r3, #0
 801854e:	e002      	b.n	8018556 <ip4_frag+0x26a>
      goto memerr;
 8018550:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8018552:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018556:	4618      	mov	r0, r3
 8018558:	3748      	adds	r7, #72	@ 0x48
 801855a:	46bd      	mov	sp, r7
 801855c:	bd80      	pop	{r7, pc}
 801855e:	bf00      	nop
 8018560:	0801da70 	.word	0x0801da70
 8018564:	0801dc4c 	.word	0x0801dc4c
 8018568:	0801dab8 	.word	0x0801dab8
 801856c:	0801dc68 	.word	0x0801dc68
 8018570:	0801dc88 	.word	0x0801dc88
 8018574:	08018285 	.word	0x08018285

08018578 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8018578:	b580      	push	{r7, lr}
 801857a:	b086      	sub	sp, #24
 801857c:	af00      	add	r7, sp, #0
 801857e:	6078      	str	r0, [r7, #4]
 8018580:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8018582:	230e      	movs	r3, #14
 8018584:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8018586:	687b      	ldr	r3, [r7, #4]
 8018588:	895b      	ldrh	r3, [r3, #10]
 801858a:	2b0e      	cmp	r3, #14
 801858c:	d96e      	bls.n	801866c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801858e:	687b      	ldr	r3, [r7, #4]
 8018590:	7bdb      	ldrb	r3, [r3, #15]
 8018592:	2b00      	cmp	r3, #0
 8018594:	d106      	bne.n	80185a4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8018596:	683b      	ldr	r3, [r7, #0]
 8018598:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801859c:	3301      	adds	r3, #1
 801859e:	b2da      	uxtb	r2, r3
 80185a0:	687b      	ldr	r3, [r7, #4]
 80185a2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80185a4:	687b      	ldr	r3, [r7, #4]
 80185a6:	685b      	ldr	r3, [r3, #4]
 80185a8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80185aa:	693b      	ldr	r3, [r7, #16]
 80185ac:	7b1a      	ldrb	r2, [r3, #12]
 80185ae:	7b5b      	ldrb	r3, [r3, #13]
 80185b0:	021b      	lsls	r3, r3, #8
 80185b2:	4313      	orrs	r3, r2
 80185b4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80185b6:	693b      	ldr	r3, [r7, #16]
 80185b8:	781b      	ldrb	r3, [r3, #0]
 80185ba:	f003 0301 	and.w	r3, r3, #1
 80185be:	2b00      	cmp	r3, #0
 80185c0:	d023      	beq.n	801860a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80185c2:	693b      	ldr	r3, [r7, #16]
 80185c4:	781b      	ldrb	r3, [r3, #0]
 80185c6:	2b01      	cmp	r3, #1
 80185c8:	d10f      	bne.n	80185ea <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80185ca:	693b      	ldr	r3, [r7, #16]
 80185cc:	785b      	ldrb	r3, [r3, #1]
 80185ce:	2b00      	cmp	r3, #0
 80185d0:	d11b      	bne.n	801860a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80185d2:	693b      	ldr	r3, [r7, #16]
 80185d4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80185d6:	2b5e      	cmp	r3, #94	@ 0x5e
 80185d8:	d117      	bne.n	801860a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80185da:	687b      	ldr	r3, [r7, #4]
 80185dc:	7b5b      	ldrb	r3, [r3, #13]
 80185de:	f043 0310 	orr.w	r3, r3, #16
 80185e2:	b2da      	uxtb	r2, r3
 80185e4:	687b      	ldr	r3, [r7, #4]
 80185e6:	735a      	strb	r2, [r3, #13]
 80185e8:	e00f      	b.n	801860a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80185ea:	693b      	ldr	r3, [r7, #16]
 80185ec:	2206      	movs	r2, #6
 80185ee:	4928      	ldr	r1, [pc, #160]	@ (8018690 <ethernet_input+0x118>)
 80185f0:	4618      	mov	r0, r3
 80185f2:	f000 fc1c 	bl	8018e2e <memcmp>
 80185f6:	4603      	mov	r3, r0
 80185f8:	2b00      	cmp	r3, #0
 80185fa:	d106      	bne.n	801860a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80185fc:	687b      	ldr	r3, [r7, #4]
 80185fe:	7b5b      	ldrb	r3, [r3, #13]
 8018600:	f043 0308 	orr.w	r3, r3, #8
 8018604:	b2da      	uxtb	r2, r3
 8018606:	687b      	ldr	r3, [r7, #4]
 8018608:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801860a:	89fb      	ldrh	r3, [r7, #14]
 801860c:	2b08      	cmp	r3, #8
 801860e:	d003      	beq.n	8018618 <ethernet_input+0xa0>
 8018610:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8018614:	d014      	beq.n	8018640 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8018616:	e032      	b.n	801867e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018618:	683b      	ldr	r3, [r7, #0]
 801861a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801861e:	f003 0308 	and.w	r3, r3, #8
 8018622:	2b00      	cmp	r3, #0
 8018624:	d024      	beq.n	8018670 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8018626:	8afb      	ldrh	r3, [r7, #22]
 8018628:	4619      	mov	r1, r3
 801862a:	6878      	ldr	r0, [r7, #4]
 801862c:	f7f4 fbca 	bl	800cdc4 <pbuf_remove_header>
 8018630:	4603      	mov	r3, r0
 8018632:	2b00      	cmp	r3, #0
 8018634:	d11e      	bne.n	8018674 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8018636:	6839      	ldr	r1, [r7, #0]
 8018638:	6878      	ldr	r0, [r7, #4]
 801863a:	f7fe ff03 	bl	8017444 <ip4_input>
      break;
 801863e:	e013      	b.n	8018668 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018640:	683b      	ldr	r3, [r7, #0]
 8018642:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8018646:	f003 0308 	and.w	r3, r3, #8
 801864a:	2b00      	cmp	r3, #0
 801864c:	d014      	beq.n	8018678 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801864e:	8afb      	ldrh	r3, [r7, #22]
 8018650:	4619      	mov	r1, r3
 8018652:	6878      	ldr	r0, [r7, #4]
 8018654:	f7f4 fbb6 	bl	800cdc4 <pbuf_remove_header>
 8018658:	4603      	mov	r3, r0
 801865a:	2b00      	cmp	r3, #0
 801865c:	d10e      	bne.n	801867c <ethernet_input+0x104>
        etharp_input(p, netif);
 801865e:	6839      	ldr	r1, [r7, #0]
 8018660:	6878      	ldr	r0, [r7, #4]
 8018662:	f7fe f89f 	bl	80167a4 <etharp_input>
      break;
 8018666:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8018668:	2300      	movs	r3, #0
 801866a:	e00c      	b.n	8018686 <ethernet_input+0x10e>
    goto free_and_return;
 801866c:	bf00      	nop
 801866e:	e006      	b.n	801867e <ethernet_input+0x106>
        goto free_and_return;
 8018670:	bf00      	nop
 8018672:	e004      	b.n	801867e <ethernet_input+0x106>
        goto free_and_return;
 8018674:	bf00      	nop
 8018676:	e002      	b.n	801867e <ethernet_input+0x106>
        goto free_and_return;
 8018678:	bf00      	nop
 801867a:	e000      	b.n	801867e <ethernet_input+0x106>
        goto free_and_return;
 801867c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801867e:	6878      	ldr	r0, [r7, #4]
 8018680:	f7f4 fc26 	bl	800ced0 <pbuf_free>
  return ERR_OK;
 8018684:	2300      	movs	r3, #0
}
 8018686:	4618      	mov	r0, r3
 8018688:	3718      	adds	r7, #24
 801868a:	46bd      	mov	sp, r7
 801868c:	bd80      	pop	{r7, pc}
 801868e:	bf00      	nop
 8018690:	08027fb4 	.word	0x08027fb4

08018694 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8018694:	b580      	push	{r7, lr}
 8018696:	b086      	sub	sp, #24
 8018698:	af00      	add	r7, sp, #0
 801869a:	60f8      	str	r0, [r7, #12]
 801869c:	60b9      	str	r1, [r7, #8]
 801869e:	607a      	str	r2, [r7, #4]
 80186a0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80186a2:	8c3b      	ldrh	r3, [r7, #32]
 80186a4:	4618      	mov	r0, r3
 80186a6:	f7f2 ffdf 	bl	800b668 <lwip_htons>
 80186aa:	4603      	mov	r3, r0
 80186ac:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80186ae:	210e      	movs	r1, #14
 80186b0:	68b8      	ldr	r0, [r7, #8]
 80186b2:	f7f4 fb77 	bl	800cda4 <pbuf_add_header>
 80186b6:	4603      	mov	r3, r0
 80186b8:	2b00      	cmp	r3, #0
 80186ba:	d125      	bne.n	8018708 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80186bc:	68bb      	ldr	r3, [r7, #8]
 80186be:	685b      	ldr	r3, [r3, #4]
 80186c0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80186c2:	693b      	ldr	r3, [r7, #16]
 80186c4:	8afa      	ldrh	r2, [r7, #22]
 80186c6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80186c8:	693b      	ldr	r3, [r7, #16]
 80186ca:	2206      	movs	r2, #6
 80186cc:	6839      	ldr	r1, [r7, #0]
 80186ce:	4618      	mov	r0, r3
 80186d0:	f000 fd39 	bl	8019146 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80186d4:	693b      	ldr	r3, [r7, #16]
 80186d6:	3306      	adds	r3, #6
 80186d8:	2206      	movs	r2, #6
 80186da:	6879      	ldr	r1, [r7, #4]
 80186dc:	4618      	mov	r0, r3
 80186de:	f000 fd32 	bl	8019146 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80186e2:	68fb      	ldr	r3, [r7, #12]
 80186e4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80186e8:	2b06      	cmp	r3, #6
 80186ea:	d006      	beq.n	80186fa <ethernet_output+0x66>
 80186ec:	4b0a      	ldr	r3, [pc, #40]	@ (8018718 <ethernet_output+0x84>)
 80186ee:	f44f 7299 	mov.w	r2, #306	@ 0x132
 80186f2:	490a      	ldr	r1, [pc, #40]	@ (801871c <ethernet_output+0x88>)
 80186f4:	480a      	ldr	r0, [pc, #40]	@ (8018720 <ethernet_output+0x8c>)
 80186f6:	f000 fb25 	bl	8018d44 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80186fa:	68fb      	ldr	r3, [r7, #12]
 80186fc:	699b      	ldr	r3, [r3, #24]
 80186fe:	68b9      	ldr	r1, [r7, #8]
 8018700:	68f8      	ldr	r0, [r7, #12]
 8018702:	4798      	blx	r3
 8018704:	4603      	mov	r3, r0
 8018706:	e002      	b.n	801870e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8018708:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801870a:	f06f 0301 	mvn.w	r3, #1
}
 801870e:	4618      	mov	r0, r3
 8018710:	3718      	adds	r7, #24
 8018712:	46bd      	mov	sp, r7
 8018714:	bd80      	pop	{r7, pc}
 8018716:	bf00      	nop
 8018718:	0801dc98 	.word	0x0801dc98
 801871c:	0801dcd0 	.word	0x0801dcd0
 8018720:	0801dd04 	.word	0x0801dd04

08018724 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8018724:	b580      	push	{r7, lr}
 8018726:	b086      	sub	sp, #24
 8018728:	af00      	add	r7, sp, #0
 801872a:	6078      	str	r0, [r7, #4]
 801872c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801872e:	683b      	ldr	r3, [r7, #0]
 8018730:	60bb      	str	r3, [r7, #8]
 8018732:	2304      	movs	r3, #4
 8018734:	60fb      	str	r3, [r7, #12]
 8018736:	2300      	movs	r3, #0
 8018738:	613b      	str	r3, [r7, #16]
 801873a:	2300      	movs	r3, #0
 801873c:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801873e:	f107 0308 	add.w	r3, r7, #8
 8018742:	2100      	movs	r1, #0
 8018744:	4618      	mov	r0, r3
 8018746:	f7ec feb2 	bl	80054ae <osMessageCreate>
 801874a:	4602      	mov	r2, r0
 801874c:	687b      	ldr	r3, [r7, #4]
 801874e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8018750:	687b      	ldr	r3, [r7, #4]
 8018752:	681b      	ldr	r3, [r3, #0]
 8018754:	2b00      	cmp	r3, #0
 8018756:	d102      	bne.n	801875e <sys_mbox_new+0x3a>
    return ERR_MEM;
 8018758:	f04f 33ff 	mov.w	r3, #4294967295
 801875c:	e000      	b.n	8018760 <sys_mbox_new+0x3c>

  return ERR_OK;
 801875e:	2300      	movs	r3, #0
}
 8018760:	4618      	mov	r0, r3
 8018762:	3718      	adds	r7, #24
 8018764:	46bd      	mov	sp, r7
 8018766:	bd80      	pop	{r7, pc}

08018768 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8018768:	b580      	push	{r7, lr}
 801876a:	b082      	sub	sp, #8
 801876c:	af00      	add	r7, sp, #0
 801876e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8018770:	687b      	ldr	r3, [r7, #4]
 8018772:	681b      	ldr	r3, [r3, #0]
 8018774:	4618      	mov	r0, r3
 8018776:	f7ec ff77 	bl	8005668 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 801877a:	687b      	ldr	r3, [r7, #4]
 801877c:	681b      	ldr	r3, [r3, #0]
 801877e:	4618      	mov	r0, r3
 8018780:	f7ec ff88 	bl	8005694 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8018784:	bf00      	nop
 8018786:	3708      	adds	r7, #8
 8018788:	46bd      	mov	sp, r7
 801878a:	bd80      	pop	{r7, pc}

0801878c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801878c:	b580      	push	{r7, lr}
 801878e:	b084      	sub	sp, #16
 8018790:	af00      	add	r7, sp, #0
 8018792:	6078      	str	r0, [r7, #4]
 8018794:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8018796:	687b      	ldr	r3, [r7, #4]
 8018798:	681b      	ldr	r3, [r3, #0]
 801879a:	6839      	ldr	r1, [r7, #0]
 801879c:	2200      	movs	r2, #0
 801879e:	4618      	mov	r0, r3
 80187a0:	f7ec feae 	bl	8005500 <osMessagePut>
 80187a4:	4603      	mov	r3, r0
 80187a6:	2b00      	cmp	r3, #0
 80187a8:	d102      	bne.n	80187b0 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 80187aa:	2300      	movs	r3, #0
 80187ac:	73fb      	strb	r3, [r7, #15]
 80187ae:	e001      	b.n	80187b4 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80187b0:	23ff      	movs	r3, #255	@ 0xff
 80187b2:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80187b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80187b8:	4618      	mov	r0, r3
 80187ba:	3710      	adds	r7, #16
 80187bc:	46bd      	mov	sp, r7
 80187be:	bd80      	pop	{r7, pc}

080187c0 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80187c0:	b580      	push	{r7, lr}
 80187c2:	b08c      	sub	sp, #48	@ 0x30
 80187c4:	af00      	add	r7, sp, #0
 80187c6:	61f8      	str	r0, [r7, #28]
 80187c8:	61b9      	str	r1, [r7, #24]
 80187ca:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 80187cc:	f7ec fc9a 	bl	8005104 <osKernelSysTick>
 80187d0:	62f8      	str	r0, [r7, #44]	@ 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80187d2:	697b      	ldr	r3, [r7, #20]
 80187d4:	2b00      	cmp	r3, #0
 80187d6:	d017      	beq.n	8018808 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 80187d8:	69fb      	ldr	r3, [r7, #28]
 80187da:	6819      	ldr	r1, [r3, #0]
 80187dc:	f107 0320 	add.w	r3, r7, #32
 80187e0:	697a      	ldr	r2, [r7, #20]
 80187e2:	4618      	mov	r0, r3
 80187e4:	f7ec fecc 	bl	8005580 <osMessageGet>

    if(event.status == osEventMessage)
 80187e8:	6a3b      	ldr	r3, [r7, #32]
 80187ea:	2b10      	cmp	r3, #16
 80187ec:	d109      	bne.n	8018802 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 80187ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80187f0:	461a      	mov	r2, r3
 80187f2:	69bb      	ldr	r3, [r7, #24]
 80187f4:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 80187f6:	f7ec fc85 	bl	8005104 <osKernelSysTick>
 80187fa:	4602      	mov	r2, r0
 80187fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80187fe:	1ad3      	subs	r3, r2, r3
 8018800:	e019      	b.n	8018836 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8018802:	f04f 33ff 	mov.w	r3, #4294967295
 8018806:	e016      	b.n	8018836 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8018808:	69fb      	ldr	r3, [r7, #28]
 801880a:	6819      	ldr	r1, [r3, #0]
 801880c:	463b      	mov	r3, r7
 801880e:	f04f 32ff 	mov.w	r2, #4294967295
 8018812:	4618      	mov	r0, r3
 8018814:	f7ec feb4 	bl	8005580 <osMessageGet>
 8018818:	f107 0320 	add.w	r3, r7, #32
 801881c:	463a      	mov	r2, r7
 801881e:	ca07      	ldmia	r2, {r0, r1, r2}
 8018820:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8018824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018826:	461a      	mov	r2, r3
 8018828:	69bb      	ldr	r3, [r7, #24]
 801882a:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801882c:	f7ec fc6a 	bl	8005104 <osKernelSysTick>
 8018830:	4602      	mov	r2, r0
 8018832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018834:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8018836:	4618      	mov	r0, r3
 8018838:	3730      	adds	r7, #48	@ 0x30
 801883a:	46bd      	mov	sp, r7
 801883c:	bd80      	pop	{r7, pc}

0801883e <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801883e:	b580      	push	{r7, lr}
 8018840:	b086      	sub	sp, #24
 8018842:	af00      	add	r7, sp, #0
 8018844:	6078      	str	r0, [r7, #4]
 8018846:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8018848:	687b      	ldr	r3, [r7, #4]
 801884a:	6819      	ldr	r1, [r3, #0]
 801884c:	f107 030c 	add.w	r3, r7, #12
 8018850:	2200      	movs	r2, #0
 8018852:	4618      	mov	r0, r3
 8018854:	f7ec fe94 	bl	8005580 <osMessageGet>

  if(event.status == osEventMessage)
 8018858:	68fb      	ldr	r3, [r7, #12]
 801885a:	2b10      	cmp	r3, #16
 801885c:	d105      	bne.n	801886a <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 801885e:	693b      	ldr	r3, [r7, #16]
 8018860:	461a      	mov	r2, r3
 8018862:	683b      	ldr	r3, [r7, #0]
 8018864:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8018866:	2300      	movs	r3, #0
 8018868:	e001      	b.n	801886e <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801886a:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801886e:	4618      	mov	r0, r3
 8018870:	3718      	adds	r7, #24
 8018872:	46bd      	mov	sp, r7
 8018874:	bd80      	pop	{r7, pc}

08018876 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8018876:	b480      	push	{r7}
 8018878:	b083      	sub	sp, #12
 801887a:	af00      	add	r7, sp, #0
 801887c:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801887e:	687b      	ldr	r3, [r7, #4]
 8018880:	681b      	ldr	r3, [r3, #0]
 8018882:	2b00      	cmp	r3, #0
 8018884:	d101      	bne.n	801888a <sys_mbox_valid+0x14>
    return 0;
 8018886:	2300      	movs	r3, #0
 8018888:	e000      	b.n	801888c <sys_mbox_valid+0x16>
  else
    return 1;
 801888a:	2301      	movs	r3, #1
}
 801888c:	4618      	mov	r0, r3
 801888e:	370c      	adds	r7, #12
 8018890:	46bd      	mov	sp, r7
 8018892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018896:	4770      	bx	lr

08018898 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8018898:	b480      	push	{r7}
 801889a:	b083      	sub	sp, #12
 801889c:	af00      	add	r7, sp, #0
 801889e:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 80188a0:	687b      	ldr	r3, [r7, #4]
 80188a2:	2200      	movs	r2, #0
 80188a4:	601a      	str	r2, [r3, #0]
}
 80188a6:	bf00      	nop
 80188a8:	370c      	adds	r7, #12
 80188aa:	46bd      	mov	sp, r7
 80188ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188b0:	4770      	bx	lr

080188b2 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 80188b2:	b580      	push	{r7, lr}
 80188b4:	b084      	sub	sp, #16
 80188b6:	af00      	add	r7, sp, #0
 80188b8:	6078      	str	r0, [r7, #4]
 80188ba:	460b      	mov	r3, r1
 80188bc:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 80188be:	2300      	movs	r3, #0
 80188c0:	60bb      	str	r3, [r7, #8]
 80188c2:	2300      	movs	r3, #0
 80188c4:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 80188c6:	f107 0308 	add.w	r3, r7, #8
 80188ca:	2101      	movs	r1, #1
 80188cc:	4618      	mov	r0, r3
 80188ce:	f7ec fd25 	bl	800531c <osSemaphoreCreate>
 80188d2:	4602      	mov	r2, r0
 80188d4:	687b      	ldr	r3, [r7, #4]
 80188d6:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 80188d8:	687b      	ldr	r3, [r7, #4]
 80188da:	681b      	ldr	r3, [r3, #0]
 80188dc:	2b00      	cmp	r3, #0
 80188de:	d102      	bne.n	80188e6 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80188e0:	f04f 33ff 	mov.w	r3, #4294967295
 80188e4:	e009      	b.n	80188fa <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 80188e6:	78fb      	ldrb	r3, [r7, #3]
 80188e8:	2b00      	cmp	r3, #0
 80188ea:	d105      	bne.n	80188f8 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 80188ec:	687b      	ldr	r3, [r7, #4]
 80188ee:	681b      	ldr	r3, [r3, #0]
 80188f0:	2100      	movs	r1, #0
 80188f2:	4618      	mov	r0, r3
 80188f4:	f7ec fd44 	bl	8005380 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 80188f8:	2300      	movs	r3, #0
}
 80188fa:	4618      	mov	r0, r3
 80188fc:	3710      	adds	r7, #16
 80188fe:	46bd      	mov	sp, r7
 8018900:	bd80      	pop	{r7, pc}

08018902 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8018902:	b580      	push	{r7, lr}
 8018904:	b084      	sub	sp, #16
 8018906:	af00      	add	r7, sp, #0
 8018908:	6078      	str	r0, [r7, #4]
 801890a:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 801890c:	f7ec fbfa 	bl	8005104 <osKernelSysTick>
 8018910:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8018912:	683b      	ldr	r3, [r7, #0]
 8018914:	2b00      	cmp	r3, #0
 8018916:	d011      	beq.n	801893c <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8018918:	687b      	ldr	r3, [r7, #4]
 801891a:	681b      	ldr	r3, [r3, #0]
 801891c:	6839      	ldr	r1, [r7, #0]
 801891e:	4618      	mov	r0, r3
 8018920:	f7ec fd2e 	bl	8005380 <osSemaphoreWait>
 8018924:	4603      	mov	r3, r0
 8018926:	2b00      	cmp	r3, #0
 8018928:	d105      	bne.n	8018936 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 801892a:	f7ec fbeb 	bl	8005104 <osKernelSysTick>
 801892e:	4602      	mov	r2, r0
 8018930:	68fb      	ldr	r3, [r7, #12]
 8018932:	1ad3      	subs	r3, r2, r3
 8018934:	e012      	b.n	801895c <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8018936:	f04f 33ff 	mov.w	r3, #4294967295
 801893a:	e00f      	b.n	801895c <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 801893c:	bf00      	nop
 801893e:	687b      	ldr	r3, [r7, #4]
 8018940:	681b      	ldr	r3, [r3, #0]
 8018942:	f04f 31ff 	mov.w	r1, #4294967295
 8018946:	4618      	mov	r0, r3
 8018948:	f7ec fd1a 	bl	8005380 <osSemaphoreWait>
 801894c:	4603      	mov	r3, r0
 801894e:	2b00      	cmp	r3, #0
 8018950:	d1f5      	bne.n	801893e <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8018952:	f7ec fbd7 	bl	8005104 <osKernelSysTick>
 8018956:	4602      	mov	r2, r0
 8018958:	68fb      	ldr	r3, [r7, #12]
 801895a:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801895c:	4618      	mov	r0, r3
 801895e:	3710      	adds	r7, #16
 8018960:	46bd      	mov	sp, r7
 8018962:	bd80      	pop	{r7, pc}

08018964 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8018964:	b580      	push	{r7, lr}
 8018966:	b082      	sub	sp, #8
 8018968:	af00      	add	r7, sp, #0
 801896a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801896c:	687b      	ldr	r3, [r7, #4]
 801896e:	681b      	ldr	r3, [r3, #0]
 8018970:	4618      	mov	r0, r3
 8018972:	f7ec fd53 	bl	800541c <osSemaphoreRelease>
}
 8018976:	bf00      	nop
 8018978:	3708      	adds	r7, #8
 801897a:	46bd      	mov	sp, r7
 801897c:	bd80      	pop	{r7, pc}

0801897e <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801897e:	b580      	push	{r7, lr}
 8018980:	b082      	sub	sp, #8
 8018982:	af00      	add	r7, sp, #0
 8018984:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8018986:	687b      	ldr	r3, [r7, #4]
 8018988:	681b      	ldr	r3, [r3, #0]
 801898a:	4618      	mov	r0, r3
 801898c:	f7ec fd7c 	bl	8005488 <osSemaphoreDelete>
}
 8018990:	bf00      	nop
 8018992:	3708      	adds	r7, #8
 8018994:	46bd      	mov	sp, r7
 8018996:	bd80      	pop	{r7, pc}

08018998 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8018998:	b480      	push	{r7}
 801899a:	b083      	sub	sp, #12
 801899c:	af00      	add	r7, sp, #0
 801899e:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 80189a0:	687b      	ldr	r3, [r7, #4]
 80189a2:	681b      	ldr	r3, [r3, #0]
 80189a4:	2b00      	cmp	r3, #0
 80189a6:	d101      	bne.n	80189ac <sys_sem_valid+0x14>
    return 0;
 80189a8:	2300      	movs	r3, #0
 80189aa:	e000      	b.n	80189ae <sys_sem_valid+0x16>
  else
    return 1;
 80189ac:	2301      	movs	r3, #1
}
 80189ae:	4618      	mov	r0, r3
 80189b0:	370c      	adds	r7, #12
 80189b2:	46bd      	mov	sp, r7
 80189b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189b8:	4770      	bx	lr

080189ba <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 80189ba:	b480      	push	{r7}
 80189bc:	b083      	sub	sp, #12
 80189be:	af00      	add	r7, sp, #0
 80189c0:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 80189c2:	687b      	ldr	r3, [r7, #4]
 80189c4:	2200      	movs	r2, #0
 80189c6:	601a      	str	r2, [r3, #0]
}
 80189c8:	bf00      	nop
 80189ca:	370c      	adds	r7, #12
 80189cc:	46bd      	mov	sp, r7
 80189ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189d2:	4770      	bx	lr

080189d4 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80189d4:	b580      	push	{r7, lr}
 80189d6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 80189d8:	4803      	ldr	r0, [pc, #12]	@ (80189e8 <sys_init+0x14>)
 80189da:	f7ec fc03 	bl	80051e4 <osMutexCreate>
 80189de:	4603      	mov	r3, r0
 80189e0:	4a02      	ldr	r2, [pc, #8]	@ (80189ec <sys_init+0x18>)
 80189e2:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 80189e4:	bf00      	nop
 80189e6:	bd80      	pop	{r7, pc}
 80189e8:	08027fc4 	.word	0x08027fc4
 80189ec:	20011004 	.word	0x20011004

080189f0 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80189f0:	b580      	push	{r7, lr}
 80189f2:	b084      	sub	sp, #16
 80189f4:	af00      	add	r7, sp, #0
 80189f6:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 80189f8:	2300      	movs	r3, #0
 80189fa:	60bb      	str	r3, [r7, #8]
 80189fc:	2300      	movs	r3, #0
 80189fe:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8018a00:	f107 0308 	add.w	r3, r7, #8
 8018a04:	4618      	mov	r0, r3
 8018a06:	f7ec fbed 	bl	80051e4 <osMutexCreate>
 8018a0a:	4602      	mov	r2, r0
 8018a0c:	687b      	ldr	r3, [r7, #4]
 8018a0e:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8018a10:	687b      	ldr	r3, [r7, #4]
 8018a12:	681b      	ldr	r3, [r3, #0]
 8018a14:	2b00      	cmp	r3, #0
 8018a16:	d102      	bne.n	8018a1e <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8018a18:	f04f 33ff 	mov.w	r3, #4294967295
 8018a1c:	e000      	b.n	8018a20 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8018a1e:	2300      	movs	r3, #0
}
 8018a20:	4618      	mov	r0, r3
 8018a22:	3710      	adds	r7, #16
 8018a24:	46bd      	mov	sp, r7
 8018a26:	bd80      	pop	{r7, pc}

08018a28 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8018a28:	b580      	push	{r7, lr}
 8018a2a:	b082      	sub	sp, #8
 8018a2c:	af00      	add	r7, sp, #0
 8018a2e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8018a30:	687b      	ldr	r3, [r7, #4]
 8018a32:	681b      	ldr	r3, [r3, #0]
 8018a34:	f04f 31ff 	mov.w	r1, #4294967295
 8018a38:	4618      	mov	r0, r3
 8018a3a:	f7ec fbeb 	bl	8005214 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8018a3e:	bf00      	nop
 8018a40:	3708      	adds	r7, #8
 8018a42:	46bd      	mov	sp, r7
 8018a44:	bd80      	pop	{r7, pc}

08018a46 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8018a46:	b580      	push	{r7, lr}
 8018a48:	b082      	sub	sp, #8
 8018a4a:	af00      	add	r7, sp, #0
 8018a4c:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8018a4e:	687b      	ldr	r3, [r7, #4]
 8018a50:	681b      	ldr	r3, [r3, #0]
 8018a52:	4618      	mov	r0, r3
 8018a54:	f7ec fc2c 	bl	80052b0 <osMutexRelease>
}
 8018a58:	bf00      	nop
 8018a5a:	3708      	adds	r7, #8
 8018a5c:	46bd      	mov	sp, r7
 8018a5e:	bd80      	pop	{r7, pc}

08018a60 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8018a60:	b580      	push	{r7, lr}
 8018a62:	b08c      	sub	sp, #48	@ 0x30
 8018a64:	af00      	add	r7, sp, #0
 8018a66:	60f8      	str	r0, [r7, #12]
 8018a68:	60b9      	str	r1, [r7, #8]
 8018a6a:	607a      	str	r2, [r7, #4]
 8018a6c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8018a6e:	f107 0314 	add.w	r3, r7, #20
 8018a72:	2200      	movs	r2, #0
 8018a74:	601a      	str	r2, [r3, #0]
 8018a76:	605a      	str	r2, [r3, #4]
 8018a78:	609a      	str	r2, [r3, #8]
 8018a7a:	60da      	str	r2, [r3, #12]
 8018a7c:	611a      	str	r2, [r3, #16]
 8018a7e:	615a      	str	r2, [r3, #20]
 8018a80:	619a      	str	r2, [r3, #24]
 8018a82:	68fb      	ldr	r3, [r7, #12]
 8018a84:	617b      	str	r3, [r7, #20]
 8018a86:	68bb      	ldr	r3, [r7, #8]
 8018a88:	61bb      	str	r3, [r7, #24]
 8018a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018a8c:	b21b      	sxth	r3, r3
 8018a8e:	83bb      	strh	r3, [r7, #28]
 8018a90:	683b      	ldr	r3, [r7, #0]
 8018a92:	627b      	str	r3, [r7, #36]	@ 0x24
  return osThreadCreate(&os_thread_def, arg);
 8018a94:	f107 0314 	add.w	r3, r7, #20
 8018a98:	6879      	ldr	r1, [r7, #4]
 8018a9a:	4618      	mov	r0, r3
 8018a9c:	f7ec fb42 	bl	8005124 <osThreadCreate>
 8018aa0:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8018aa2:	4618      	mov	r0, r3
 8018aa4:	3730      	adds	r7, #48	@ 0x30
 8018aa6:	46bd      	mov	sp, r7
 8018aa8:	bd80      	pop	{r7, pc}
	...

08018aac <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8018aac:	b580      	push	{r7, lr}
 8018aae:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8018ab0:	4b04      	ldr	r3, [pc, #16]	@ (8018ac4 <sys_arch_protect+0x18>)
 8018ab2:	681b      	ldr	r3, [r3, #0]
 8018ab4:	f04f 31ff 	mov.w	r1, #4294967295
 8018ab8:	4618      	mov	r0, r3
 8018aba:	f7ec fbab 	bl	8005214 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8018abe:	2301      	movs	r3, #1
}
 8018ac0:	4618      	mov	r0, r3
 8018ac2:	bd80      	pop	{r7, pc}
 8018ac4:	20011004 	.word	0x20011004

08018ac8 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8018ac8:	b580      	push	{r7, lr}
 8018aca:	b082      	sub	sp, #8
 8018acc:	af00      	add	r7, sp, #0
 8018ace:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8018ad0:	4b04      	ldr	r3, [pc, #16]	@ (8018ae4 <sys_arch_unprotect+0x1c>)
 8018ad2:	681b      	ldr	r3, [r3, #0]
 8018ad4:	4618      	mov	r0, r3
 8018ad6:	f7ec fbeb 	bl	80052b0 <osMutexRelease>
}
 8018ada:	bf00      	nop
 8018adc:	3708      	adds	r7, #8
 8018ade:	46bd      	mov	sp, r7
 8018ae0:	bd80      	pop	{r7, pc}
 8018ae2:	bf00      	nop
 8018ae4:	20011004 	.word	0x20011004

08018ae8 <srand>:
 8018ae8:	b538      	push	{r3, r4, r5, lr}
 8018aea:	4b10      	ldr	r3, [pc, #64]	@ (8018b2c <srand+0x44>)
 8018aec:	681d      	ldr	r5, [r3, #0]
 8018aee:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8018af0:	4604      	mov	r4, r0
 8018af2:	b9b3      	cbnz	r3, 8018b22 <srand+0x3a>
 8018af4:	2018      	movs	r0, #24
 8018af6:	f000 fb9d 	bl	8019234 <malloc>
 8018afa:	4602      	mov	r2, r0
 8018afc:	6328      	str	r0, [r5, #48]	@ 0x30
 8018afe:	b920      	cbnz	r0, 8018b0a <srand+0x22>
 8018b00:	4b0b      	ldr	r3, [pc, #44]	@ (8018b30 <srand+0x48>)
 8018b02:	480c      	ldr	r0, [pc, #48]	@ (8018b34 <srand+0x4c>)
 8018b04:	2146      	movs	r1, #70	@ 0x46
 8018b06:	f000 fb2d 	bl	8019164 <__assert_func>
 8018b0a:	490b      	ldr	r1, [pc, #44]	@ (8018b38 <srand+0x50>)
 8018b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8018b3c <srand+0x54>)
 8018b0e:	e9c0 1300 	strd	r1, r3, [r0]
 8018b12:	4b0b      	ldr	r3, [pc, #44]	@ (8018b40 <srand+0x58>)
 8018b14:	6083      	str	r3, [r0, #8]
 8018b16:	230b      	movs	r3, #11
 8018b18:	8183      	strh	r3, [r0, #12]
 8018b1a:	2100      	movs	r1, #0
 8018b1c:	2001      	movs	r0, #1
 8018b1e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8018b22:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8018b24:	2200      	movs	r2, #0
 8018b26:	611c      	str	r4, [r3, #16]
 8018b28:	615a      	str	r2, [r3, #20]
 8018b2a:	bd38      	pop	{r3, r4, r5, pc}
 8018b2c:	20000040 	.word	0x20000040
 8018b30:	08027fcc 	.word	0x08027fcc
 8018b34:	08027fe3 	.word	0x08027fe3
 8018b38:	abcd330e 	.word	0xabcd330e
 8018b3c:	e66d1234 	.word	0xe66d1234
 8018b40:	0005deec 	.word	0x0005deec

08018b44 <rand>:
 8018b44:	4b16      	ldr	r3, [pc, #88]	@ (8018ba0 <rand+0x5c>)
 8018b46:	b510      	push	{r4, lr}
 8018b48:	681c      	ldr	r4, [r3, #0]
 8018b4a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018b4c:	b9b3      	cbnz	r3, 8018b7c <rand+0x38>
 8018b4e:	2018      	movs	r0, #24
 8018b50:	f000 fb70 	bl	8019234 <malloc>
 8018b54:	4602      	mov	r2, r0
 8018b56:	6320      	str	r0, [r4, #48]	@ 0x30
 8018b58:	b920      	cbnz	r0, 8018b64 <rand+0x20>
 8018b5a:	4b12      	ldr	r3, [pc, #72]	@ (8018ba4 <rand+0x60>)
 8018b5c:	4812      	ldr	r0, [pc, #72]	@ (8018ba8 <rand+0x64>)
 8018b5e:	2152      	movs	r1, #82	@ 0x52
 8018b60:	f000 fb00 	bl	8019164 <__assert_func>
 8018b64:	4911      	ldr	r1, [pc, #68]	@ (8018bac <rand+0x68>)
 8018b66:	4b12      	ldr	r3, [pc, #72]	@ (8018bb0 <rand+0x6c>)
 8018b68:	e9c0 1300 	strd	r1, r3, [r0]
 8018b6c:	4b11      	ldr	r3, [pc, #68]	@ (8018bb4 <rand+0x70>)
 8018b6e:	6083      	str	r3, [r0, #8]
 8018b70:	230b      	movs	r3, #11
 8018b72:	8183      	strh	r3, [r0, #12]
 8018b74:	2100      	movs	r1, #0
 8018b76:	2001      	movs	r0, #1
 8018b78:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8018b7c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8018b7e:	480e      	ldr	r0, [pc, #56]	@ (8018bb8 <rand+0x74>)
 8018b80:	690b      	ldr	r3, [r1, #16]
 8018b82:	694c      	ldr	r4, [r1, #20]
 8018b84:	4a0d      	ldr	r2, [pc, #52]	@ (8018bbc <rand+0x78>)
 8018b86:	4358      	muls	r0, r3
 8018b88:	fb02 0004 	mla	r0, r2, r4, r0
 8018b8c:	fba3 3202 	umull	r3, r2, r3, r2
 8018b90:	3301      	adds	r3, #1
 8018b92:	eb40 0002 	adc.w	r0, r0, r2
 8018b96:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8018b9a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8018b9e:	bd10      	pop	{r4, pc}
 8018ba0:	20000040 	.word	0x20000040
 8018ba4:	08027fcc 	.word	0x08027fcc
 8018ba8:	08027fe3 	.word	0x08027fe3
 8018bac:	abcd330e 	.word	0xabcd330e
 8018bb0:	e66d1234 	.word	0xe66d1234
 8018bb4:	0005deec 	.word	0x0005deec
 8018bb8:	5851f42d 	.word	0x5851f42d
 8018bbc:	4c957f2d 	.word	0x4c957f2d

08018bc0 <std>:
 8018bc0:	2300      	movs	r3, #0
 8018bc2:	b510      	push	{r4, lr}
 8018bc4:	4604      	mov	r4, r0
 8018bc6:	e9c0 3300 	strd	r3, r3, [r0]
 8018bca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018bce:	6083      	str	r3, [r0, #8]
 8018bd0:	8181      	strh	r1, [r0, #12]
 8018bd2:	6643      	str	r3, [r0, #100]	@ 0x64
 8018bd4:	81c2      	strh	r2, [r0, #14]
 8018bd6:	6183      	str	r3, [r0, #24]
 8018bd8:	4619      	mov	r1, r3
 8018bda:	2208      	movs	r2, #8
 8018bdc:	305c      	adds	r0, #92	@ 0x5c
 8018bde:	f000 f950 	bl	8018e82 <memset>
 8018be2:	4b0d      	ldr	r3, [pc, #52]	@ (8018c18 <std+0x58>)
 8018be4:	6263      	str	r3, [r4, #36]	@ 0x24
 8018be6:	4b0d      	ldr	r3, [pc, #52]	@ (8018c1c <std+0x5c>)
 8018be8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8018bea:	4b0d      	ldr	r3, [pc, #52]	@ (8018c20 <std+0x60>)
 8018bec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8018bee:	4b0d      	ldr	r3, [pc, #52]	@ (8018c24 <std+0x64>)
 8018bf0:	6323      	str	r3, [r4, #48]	@ 0x30
 8018bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8018c28 <std+0x68>)
 8018bf4:	6224      	str	r4, [r4, #32]
 8018bf6:	429c      	cmp	r4, r3
 8018bf8:	d006      	beq.n	8018c08 <std+0x48>
 8018bfa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8018bfe:	4294      	cmp	r4, r2
 8018c00:	d002      	beq.n	8018c08 <std+0x48>
 8018c02:	33d0      	adds	r3, #208	@ 0xd0
 8018c04:	429c      	cmp	r4, r3
 8018c06:	d105      	bne.n	8018c14 <std+0x54>
 8018c08:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8018c0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018c10:	f000 ba96 	b.w	8019140 <__retarget_lock_init_recursive>
 8018c14:	bd10      	pop	{r4, pc}
 8018c16:	bf00      	nop
 8018c18:	08018da9 	.word	0x08018da9
 8018c1c:	08018dcb 	.word	0x08018dcb
 8018c20:	08018e03 	.word	0x08018e03
 8018c24:	08018e27 	.word	0x08018e27
 8018c28:	20011008 	.word	0x20011008

08018c2c <stdio_exit_handler>:
 8018c2c:	4a02      	ldr	r2, [pc, #8]	@ (8018c38 <stdio_exit_handler+0xc>)
 8018c2e:	4903      	ldr	r1, [pc, #12]	@ (8018c3c <stdio_exit_handler+0x10>)
 8018c30:	4803      	ldr	r0, [pc, #12]	@ (8018c40 <stdio_exit_handler+0x14>)
 8018c32:	f000 b869 	b.w	8018d08 <_fwalk_sglue>
 8018c36:	bf00      	nop
 8018c38:	20000034 	.word	0x20000034
 8018c3c:	08019cf9 	.word	0x08019cf9
 8018c40:	20000044 	.word	0x20000044

08018c44 <cleanup_stdio>:
 8018c44:	6841      	ldr	r1, [r0, #4]
 8018c46:	4b0c      	ldr	r3, [pc, #48]	@ (8018c78 <cleanup_stdio+0x34>)
 8018c48:	4299      	cmp	r1, r3
 8018c4a:	b510      	push	{r4, lr}
 8018c4c:	4604      	mov	r4, r0
 8018c4e:	d001      	beq.n	8018c54 <cleanup_stdio+0x10>
 8018c50:	f001 f852 	bl	8019cf8 <_fflush_r>
 8018c54:	68a1      	ldr	r1, [r4, #8]
 8018c56:	4b09      	ldr	r3, [pc, #36]	@ (8018c7c <cleanup_stdio+0x38>)
 8018c58:	4299      	cmp	r1, r3
 8018c5a:	d002      	beq.n	8018c62 <cleanup_stdio+0x1e>
 8018c5c:	4620      	mov	r0, r4
 8018c5e:	f001 f84b 	bl	8019cf8 <_fflush_r>
 8018c62:	68e1      	ldr	r1, [r4, #12]
 8018c64:	4b06      	ldr	r3, [pc, #24]	@ (8018c80 <cleanup_stdio+0x3c>)
 8018c66:	4299      	cmp	r1, r3
 8018c68:	d004      	beq.n	8018c74 <cleanup_stdio+0x30>
 8018c6a:	4620      	mov	r0, r4
 8018c6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018c70:	f001 b842 	b.w	8019cf8 <_fflush_r>
 8018c74:	bd10      	pop	{r4, pc}
 8018c76:	bf00      	nop
 8018c78:	20011008 	.word	0x20011008
 8018c7c:	20011070 	.word	0x20011070
 8018c80:	200110d8 	.word	0x200110d8

08018c84 <global_stdio_init.part.0>:
 8018c84:	b510      	push	{r4, lr}
 8018c86:	4b0b      	ldr	r3, [pc, #44]	@ (8018cb4 <global_stdio_init.part.0+0x30>)
 8018c88:	4c0b      	ldr	r4, [pc, #44]	@ (8018cb8 <global_stdio_init.part.0+0x34>)
 8018c8a:	4a0c      	ldr	r2, [pc, #48]	@ (8018cbc <global_stdio_init.part.0+0x38>)
 8018c8c:	601a      	str	r2, [r3, #0]
 8018c8e:	4620      	mov	r0, r4
 8018c90:	2200      	movs	r2, #0
 8018c92:	2104      	movs	r1, #4
 8018c94:	f7ff ff94 	bl	8018bc0 <std>
 8018c98:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8018c9c:	2201      	movs	r2, #1
 8018c9e:	2109      	movs	r1, #9
 8018ca0:	f7ff ff8e 	bl	8018bc0 <std>
 8018ca4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8018ca8:	2202      	movs	r2, #2
 8018caa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018cae:	2112      	movs	r1, #18
 8018cb0:	f7ff bf86 	b.w	8018bc0 <std>
 8018cb4:	20011140 	.word	0x20011140
 8018cb8:	20011008 	.word	0x20011008
 8018cbc:	08018c2d 	.word	0x08018c2d

08018cc0 <__sfp_lock_acquire>:
 8018cc0:	4801      	ldr	r0, [pc, #4]	@ (8018cc8 <__sfp_lock_acquire+0x8>)
 8018cc2:	f000 ba3e 	b.w	8019142 <__retarget_lock_acquire_recursive>
 8018cc6:	bf00      	nop
 8018cc8:	20011149 	.word	0x20011149

08018ccc <__sfp_lock_release>:
 8018ccc:	4801      	ldr	r0, [pc, #4]	@ (8018cd4 <__sfp_lock_release+0x8>)
 8018cce:	f000 ba39 	b.w	8019144 <__retarget_lock_release_recursive>
 8018cd2:	bf00      	nop
 8018cd4:	20011149 	.word	0x20011149

08018cd8 <__sinit>:
 8018cd8:	b510      	push	{r4, lr}
 8018cda:	4604      	mov	r4, r0
 8018cdc:	f7ff fff0 	bl	8018cc0 <__sfp_lock_acquire>
 8018ce0:	6a23      	ldr	r3, [r4, #32]
 8018ce2:	b11b      	cbz	r3, 8018cec <__sinit+0x14>
 8018ce4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018ce8:	f7ff bff0 	b.w	8018ccc <__sfp_lock_release>
 8018cec:	4b04      	ldr	r3, [pc, #16]	@ (8018d00 <__sinit+0x28>)
 8018cee:	6223      	str	r3, [r4, #32]
 8018cf0:	4b04      	ldr	r3, [pc, #16]	@ (8018d04 <__sinit+0x2c>)
 8018cf2:	681b      	ldr	r3, [r3, #0]
 8018cf4:	2b00      	cmp	r3, #0
 8018cf6:	d1f5      	bne.n	8018ce4 <__sinit+0xc>
 8018cf8:	f7ff ffc4 	bl	8018c84 <global_stdio_init.part.0>
 8018cfc:	e7f2      	b.n	8018ce4 <__sinit+0xc>
 8018cfe:	bf00      	nop
 8018d00:	08018c45 	.word	0x08018c45
 8018d04:	20011140 	.word	0x20011140

08018d08 <_fwalk_sglue>:
 8018d08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018d0c:	4607      	mov	r7, r0
 8018d0e:	4688      	mov	r8, r1
 8018d10:	4614      	mov	r4, r2
 8018d12:	2600      	movs	r6, #0
 8018d14:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018d18:	f1b9 0901 	subs.w	r9, r9, #1
 8018d1c:	d505      	bpl.n	8018d2a <_fwalk_sglue+0x22>
 8018d1e:	6824      	ldr	r4, [r4, #0]
 8018d20:	2c00      	cmp	r4, #0
 8018d22:	d1f7      	bne.n	8018d14 <_fwalk_sglue+0xc>
 8018d24:	4630      	mov	r0, r6
 8018d26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018d2a:	89ab      	ldrh	r3, [r5, #12]
 8018d2c:	2b01      	cmp	r3, #1
 8018d2e:	d907      	bls.n	8018d40 <_fwalk_sglue+0x38>
 8018d30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018d34:	3301      	adds	r3, #1
 8018d36:	d003      	beq.n	8018d40 <_fwalk_sglue+0x38>
 8018d38:	4629      	mov	r1, r5
 8018d3a:	4638      	mov	r0, r7
 8018d3c:	47c0      	blx	r8
 8018d3e:	4306      	orrs	r6, r0
 8018d40:	3568      	adds	r5, #104	@ 0x68
 8018d42:	e7e9      	b.n	8018d18 <_fwalk_sglue+0x10>

08018d44 <iprintf>:
 8018d44:	b40f      	push	{r0, r1, r2, r3}
 8018d46:	b507      	push	{r0, r1, r2, lr}
 8018d48:	4906      	ldr	r1, [pc, #24]	@ (8018d64 <iprintf+0x20>)
 8018d4a:	ab04      	add	r3, sp, #16
 8018d4c:	6808      	ldr	r0, [r1, #0]
 8018d4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8018d52:	6881      	ldr	r1, [r0, #8]
 8018d54:	9301      	str	r3, [sp, #4]
 8018d56:	f000 fca5 	bl	80196a4 <_vfiprintf_r>
 8018d5a:	b003      	add	sp, #12
 8018d5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8018d60:	b004      	add	sp, #16
 8018d62:	4770      	bx	lr
 8018d64:	20000040 	.word	0x20000040

08018d68 <siprintf>:
 8018d68:	b40e      	push	{r1, r2, r3}
 8018d6a:	b500      	push	{lr}
 8018d6c:	b09c      	sub	sp, #112	@ 0x70
 8018d6e:	ab1d      	add	r3, sp, #116	@ 0x74
 8018d70:	9002      	str	r0, [sp, #8]
 8018d72:	9006      	str	r0, [sp, #24]
 8018d74:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8018d78:	4809      	ldr	r0, [pc, #36]	@ (8018da0 <siprintf+0x38>)
 8018d7a:	9107      	str	r1, [sp, #28]
 8018d7c:	9104      	str	r1, [sp, #16]
 8018d7e:	4909      	ldr	r1, [pc, #36]	@ (8018da4 <siprintf+0x3c>)
 8018d80:	f853 2b04 	ldr.w	r2, [r3], #4
 8018d84:	9105      	str	r1, [sp, #20]
 8018d86:	6800      	ldr	r0, [r0, #0]
 8018d88:	9301      	str	r3, [sp, #4]
 8018d8a:	a902      	add	r1, sp, #8
 8018d8c:	f000 fb64 	bl	8019458 <_svfiprintf_r>
 8018d90:	9b02      	ldr	r3, [sp, #8]
 8018d92:	2200      	movs	r2, #0
 8018d94:	701a      	strb	r2, [r3, #0]
 8018d96:	b01c      	add	sp, #112	@ 0x70
 8018d98:	f85d eb04 	ldr.w	lr, [sp], #4
 8018d9c:	b003      	add	sp, #12
 8018d9e:	4770      	bx	lr
 8018da0:	20000040 	.word	0x20000040
 8018da4:	ffff0208 	.word	0xffff0208

08018da8 <__sread>:
 8018da8:	b510      	push	{r4, lr}
 8018daa:	460c      	mov	r4, r1
 8018dac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018db0:	f000 f97e 	bl	80190b0 <_read_r>
 8018db4:	2800      	cmp	r0, #0
 8018db6:	bfab      	itete	ge
 8018db8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8018dba:	89a3      	ldrhlt	r3, [r4, #12]
 8018dbc:	181b      	addge	r3, r3, r0
 8018dbe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8018dc2:	bfac      	ite	ge
 8018dc4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8018dc6:	81a3      	strhlt	r3, [r4, #12]
 8018dc8:	bd10      	pop	{r4, pc}

08018dca <__swrite>:
 8018dca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018dce:	461f      	mov	r7, r3
 8018dd0:	898b      	ldrh	r3, [r1, #12]
 8018dd2:	05db      	lsls	r3, r3, #23
 8018dd4:	4605      	mov	r5, r0
 8018dd6:	460c      	mov	r4, r1
 8018dd8:	4616      	mov	r6, r2
 8018dda:	d505      	bpl.n	8018de8 <__swrite+0x1e>
 8018ddc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018de0:	2302      	movs	r3, #2
 8018de2:	2200      	movs	r2, #0
 8018de4:	f000 f952 	bl	801908c <_lseek_r>
 8018de8:	89a3      	ldrh	r3, [r4, #12]
 8018dea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018dee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8018df2:	81a3      	strh	r3, [r4, #12]
 8018df4:	4632      	mov	r2, r6
 8018df6:	463b      	mov	r3, r7
 8018df8:	4628      	mov	r0, r5
 8018dfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018dfe:	f000 b969 	b.w	80190d4 <_write_r>

08018e02 <__sseek>:
 8018e02:	b510      	push	{r4, lr}
 8018e04:	460c      	mov	r4, r1
 8018e06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018e0a:	f000 f93f 	bl	801908c <_lseek_r>
 8018e0e:	1c43      	adds	r3, r0, #1
 8018e10:	89a3      	ldrh	r3, [r4, #12]
 8018e12:	bf15      	itete	ne
 8018e14:	6560      	strne	r0, [r4, #84]	@ 0x54
 8018e16:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8018e1a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8018e1e:	81a3      	strheq	r3, [r4, #12]
 8018e20:	bf18      	it	ne
 8018e22:	81a3      	strhne	r3, [r4, #12]
 8018e24:	bd10      	pop	{r4, pc}

08018e26 <__sclose>:
 8018e26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018e2a:	f000 b8c9 	b.w	8018fc0 <_close_r>

08018e2e <memcmp>:
 8018e2e:	b510      	push	{r4, lr}
 8018e30:	3901      	subs	r1, #1
 8018e32:	4402      	add	r2, r0
 8018e34:	4290      	cmp	r0, r2
 8018e36:	d101      	bne.n	8018e3c <memcmp+0xe>
 8018e38:	2000      	movs	r0, #0
 8018e3a:	e005      	b.n	8018e48 <memcmp+0x1a>
 8018e3c:	7803      	ldrb	r3, [r0, #0]
 8018e3e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8018e42:	42a3      	cmp	r3, r4
 8018e44:	d001      	beq.n	8018e4a <memcmp+0x1c>
 8018e46:	1b18      	subs	r0, r3, r4
 8018e48:	bd10      	pop	{r4, pc}
 8018e4a:	3001      	adds	r0, #1
 8018e4c:	e7f2      	b.n	8018e34 <memcmp+0x6>

08018e4e <memmove>:
 8018e4e:	4288      	cmp	r0, r1
 8018e50:	b510      	push	{r4, lr}
 8018e52:	eb01 0402 	add.w	r4, r1, r2
 8018e56:	d902      	bls.n	8018e5e <memmove+0x10>
 8018e58:	4284      	cmp	r4, r0
 8018e5a:	4623      	mov	r3, r4
 8018e5c:	d807      	bhi.n	8018e6e <memmove+0x20>
 8018e5e:	1e43      	subs	r3, r0, #1
 8018e60:	42a1      	cmp	r1, r4
 8018e62:	d008      	beq.n	8018e76 <memmove+0x28>
 8018e64:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018e68:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018e6c:	e7f8      	b.n	8018e60 <memmove+0x12>
 8018e6e:	4402      	add	r2, r0
 8018e70:	4601      	mov	r1, r0
 8018e72:	428a      	cmp	r2, r1
 8018e74:	d100      	bne.n	8018e78 <memmove+0x2a>
 8018e76:	bd10      	pop	{r4, pc}
 8018e78:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018e7c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018e80:	e7f7      	b.n	8018e72 <memmove+0x24>

08018e82 <memset>:
 8018e82:	4402      	add	r2, r0
 8018e84:	4603      	mov	r3, r0
 8018e86:	4293      	cmp	r3, r2
 8018e88:	d100      	bne.n	8018e8c <memset+0xa>
 8018e8a:	4770      	bx	lr
 8018e8c:	f803 1b01 	strb.w	r1, [r3], #1
 8018e90:	e7f9      	b.n	8018e86 <memset+0x4>
	...

08018e94 <strcasecmp>:
 8018e94:	b530      	push	{r4, r5, lr}
 8018e96:	4d0b      	ldr	r5, [pc, #44]	@ (8018ec4 <strcasecmp+0x30>)
 8018e98:	4604      	mov	r4, r0
 8018e9a:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018e9e:	5cea      	ldrb	r2, [r5, r3]
 8018ea0:	f002 0203 	and.w	r2, r2, #3
 8018ea4:	2a01      	cmp	r2, #1
 8018ea6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018eaa:	5ca8      	ldrb	r0, [r5, r2]
 8018eac:	f000 0003 	and.w	r0, r0, #3
 8018eb0:	bf08      	it	eq
 8018eb2:	3320      	addeq	r3, #32
 8018eb4:	2801      	cmp	r0, #1
 8018eb6:	bf08      	it	eq
 8018eb8:	3220      	addeq	r2, #32
 8018eba:	1a98      	subs	r0, r3, r2
 8018ebc:	d101      	bne.n	8018ec2 <strcasecmp+0x2e>
 8018ebe:	2a00      	cmp	r2, #0
 8018ec0:	d1eb      	bne.n	8018e9a <strcasecmp+0x6>
 8018ec2:	bd30      	pop	{r4, r5, pc}
 8018ec4:	0802803c 	.word	0x0802803c

08018ec8 <strchr>:
 8018ec8:	b2c9      	uxtb	r1, r1
 8018eca:	4603      	mov	r3, r0
 8018ecc:	4618      	mov	r0, r3
 8018ece:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018ed2:	b112      	cbz	r2, 8018eda <strchr+0x12>
 8018ed4:	428a      	cmp	r2, r1
 8018ed6:	d1f9      	bne.n	8018ecc <strchr+0x4>
 8018ed8:	4770      	bx	lr
 8018eda:	2900      	cmp	r1, #0
 8018edc:	bf18      	it	ne
 8018ede:	2000      	movne	r0, #0
 8018ee0:	4770      	bx	lr

08018ee2 <strncmp>:
 8018ee2:	b510      	push	{r4, lr}
 8018ee4:	b16a      	cbz	r2, 8018f02 <strncmp+0x20>
 8018ee6:	3901      	subs	r1, #1
 8018ee8:	1884      	adds	r4, r0, r2
 8018eea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018eee:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8018ef2:	429a      	cmp	r2, r3
 8018ef4:	d103      	bne.n	8018efe <strncmp+0x1c>
 8018ef6:	42a0      	cmp	r0, r4
 8018ef8:	d001      	beq.n	8018efe <strncmp+0x1c>
 8018efa:	2a00      	cmp	r2, #0
 8018efc:	d1f5      	bne.n	8018eea <strncmp+0x8>
 8018efe:	1ad0      	subs	r0, r2, r3
 8018f00:	bd10      	pop	{r4, pc}
 8018f02:	4610      	mov	r0, r2
 8018f04:	e7fc      	b.n	8018f00 <strncmp+0x1e>
	...

08018f08 <strtok>:
 8018f08:	4b16      	ldr	r3, [pc, #88]	@ (8018f64 <strtok+0x5c>)
 8018f0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018f0e:	681f      	ldr	r7, [r3, #0]
 8018f10:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8018f12:	4605      	mov	r5, r0
 8018f14:	460e      	mov	r6, r1
 8018f16:	b9ec      	cbnz	r4, 8018f54 <strtok+0x4c>
 8018f18:	2050      	movs	r0, #80	@ 0x50
 8018f1a:	f000 f98b 	bl	8019234 <malloc>
 8018f1e:	4602      	mov	r2, r0
 8018f20:	6478      	str	r0, [r7, #68]	@ 0x44
 8018f22:	b920      	cbnz	r0, 8018f2e <strtok+0x26>
 8018f24:	4b10      	ldr	r3, [pc, #64]	@ (8018f68 <strtok+0x60>)
 8018f26:	4811      	ldr	r0, [pc, #68]	@ (8018f6c <strtok+0x64>)
 8018f28:	215b      	movs	r1, #91	@ 0x5b
 8018f2a:	f000 f91b 	bl	8019164 <__assert_func>
 8018f2e:	e9c0 4400 	strd	r4, r4, [r0]
 8018f32:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8018f36:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8018f3a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8018f3e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8018f42:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8018f46:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8018f4a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8018f4e:	6184      	str	r4, [r0, #24]
 8018f50:	7704      	strb	r4, [r0, #28]
 8018f52:	6244      	str	r4, [r0, #36]	@ 0x24
 8018f54:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8018f56:	4631      	mov	r1, r6
 8018f58:	4628      	mov	r0, r5
 8018f5a:	2301      	movs	r3, #1
 8018f5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018f60:	f000 b806 	b.w	8018f70 <__strtok_r>
 8018f64:	20000040 	.word	0x20000040
 8018f68:	08027fcc 	.word	0x08027fcc
 8018f6c:	0802813c 	.word	0x0802813c

08018f70 <__strtok_r>:
 8018f70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018f72:	4604      	mov	r4, r0
 8018f74:	b908      	cbnz	r0, 8018f7a <__strtok_r+0xa>
 8018f76:	6814      	ldr	r4, [r2, #0]
 8018f78:	b144      	cbz	r4, 8018f8c <__strtok_r+0x1c>
 8018f7a:	4620      	mov	r0, r4
 8018f7c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8018f80:	460f      	mov	r7, r1
 8018f82:	f817 6b01 	ldrb.w	r6, [r7], #1
 8018f86:	b91e      	cbnz	r6, 8018f90 <__strtok_r+0x20>
 8018f88:	b965      	cbnz	r5, 8018fa4 <__strtok_r+0x34>
 8018f8a:	6015      	str	r5, [r2, #0]
 8018f8c:	2000      	movs	r0, #0
 8018f8e:	e005      	b.n	8018f9c <__strtok_r+0x2c>
 8018f90:	42b5      	cmp	r5, r6
 8018f92:	d1f6      	bne.n	8018f82 <__strtok_r+0x12>
 8018f94:	2b00      	cmp	r3, #0
 8018f96:	d1f0      	bne.n	8018f7a <__strtok_r+0xa>
 8018f98:	6014      	str	r4, [r2, #0]
 8018f9a:	7003      	strb	r3, [r0, #0]
 8018f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018f9e:	461c      	mov	r4, r3
 8018fa0:	e00c      	b.n	8018fbc <__strtok_r+0x4c>
 8018fa2:	b915      	cbnz	r5, 8018faa <__strtok_r+0x3a>
 8018fa4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018fa8:	460e      	mov	r6, r1
 8018faa:	f816 5b01 	ldrb.w	r5, [r6], #1
 8018fae:	42ab      	cmp	r3, r5
 8018fb0:	d1f7      	bne.n	8018fa2 <__strtok_r+0x32>
 8018fb2:	2b00      	cmp	r3, #0
 8018fb4:	d0f3      	beq.n	8018f9e <__strtok_r+0x2e>
 8018fb6:	2300      	movs	r3, #0
 8018fb8:	f804 3c01 	strb.w	r3, [r4, #-1]
 8018fbc:	6014      	str	r4, [r2, #0]
 8018fbe:	e7ed      	b.n	8018f9c <__strtok_r+0x2c>

08018fc0 <_close_r>:
 8018fc0:	b538      	push	{r3, r4, r5, lr}
 8018fc2:	4d06      	ldr	r5, [pc, #24]	@ (8018fdc <_close_r+0x1c>)
 8018fc4:	2300      	movs	r3, #0
 8018fc6:	4604      	mov	r4, r0
 8018fc8:	4608      	mov	r0, r1
 8018fca:	602b      	str	r3, [r5, #0]
 8018fcc:	f7e7 fe7a 	bl	8000cc4 <_close>
 8018fd0:	1c43      	adds	r3, r0, #1
 8018fd2:	d102      	bne.n	8018fda <_close_r+0x1a>
 8018fd4:	682b      	ldr	r3, [r5, #0]
 8018fd6:	b103      	cbz	r3, 8018fda <_close_r+0x1a>
 8018fd8:	6023      	str	r3, [r4, #0]
 8018fda:	bd38      	pop	{r3, r4, r5, pc}
 8018fdc:	20011144 	.word	0x20011144

08018fe0 <_reclaim_reent>:
 8018fe0:	4b29      	ldr	r3, [pc, #164]	@ (8019088 <_reclaim_reent+0xa8>)
 8018fe2:	681b      	ldr	r3, [r3, #0]
 8018fe4:	4283      	cmp	r3, r0
 8018fe6:	b570      	push	{r4, r5, r6, lr}
 8018fe8:	4604      	mov	r4, r0
 8018fea:	d04b      	beq.n	8019084 <_reclaim_reent+0xa4>
 8018fec:	69c3      	ldr	r3, [r0, #28]
 8018fee:	b1ab      	cbz	r3, 801901c <_reclaim_reent+0x3c>
 8018ff0:	68db      	ldr	r3, [r3, #12]
 8018ff2:	b16b      	cbz	r3, 8019010 <_reclaim_reent+0x30>
 8018ff4:	2500      	movs	r5, #0
 8018ff6:	69e3      	ldr	r3, [r4, #28]
 8018ff8:	68db      	ldr	r3, [r3, #12]
 8018ffa:	5959      	ldr	r1, [r3, r5]
 8018ffc:	2900      	cmp	r1, #0
 8018ffe:	d13b      	bne.n	8019078 <_reclaim_reent+0x98>
 8019000:	3504      	adds	r5, #4
 8019002:	2d80      	cmp	r5, #128	@ 0x80
 8019004:	d1f7      	bne.n	8018ff6 <_reclaim_reent+0x16>
 8019006:	69e3      	ldr	r3, [r4, #28]
 8019008:	4620      	mov	r0, r4
 801900a:	68d9      	ldr	r1, [r3, #12]
 801900c:	f000 f8c8 	bl	80191a0 <_free_r>
 8019010:	69e3      	ldr	r3, [r4, #28]
 8019012:	6819      	ldr	r1, [r3, #0]
 8019014:	b111      	cbz	r1, 801901c <_reclaim_reent+0x3c>
 8019016:	4620      	mov	r0, r4
 8019018:	f000 f8c2 	bl	80191a0 <_free_r>
 801901c:	6961      	ldr	r1, [r4, #20]
 801901e:	b111      	cbz	r1, 8019026 <_reclaim_reent+0x46>
 8019020:	4620      	mov	r0, r4
 8019022:	f000 f8bd 	bl	80191a0 <_free_r>
 8019026:	69e1      	ldr	r1, [r4, #28]
 8019028:	b111      	cbz	r1, 8019030 <_reclaim_reent+0x50>
 801902a:	4620      	mov	r0, r4
 801902c:	f000 f8b8 	bl	80191a0 <_free_r>
 8019030:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8019032:	b111      	cbz	r1, 801903a <_reclaim_reent+0x5a>
 8019034:	4620      	mov	r0, r4
 8019036:	f000 f8b3 	bl	80191a0 <_free_r>
 801903a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801903c:	b111      	cbz	r1, 8019044 <_reclaim_reent+0x64>
 801903e:	4620      	mov	r0, r4
 8019040:	f000 f8ae 	bl	80191a0 <_free_r>
 8019044:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8019046:	b111      	cbz	r1, 801904e <_reclaim_reent+0x6e>
 8019048:	4620      	mov	r0, r4
 801904a:	f000 f8a9 	bl	80191a0 <_free_r>
 801904e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8019050:	b111      	cbz	r1, 8019058 <_reclaim_reent+0x78>
 8019052:	4620      	mov	r0, r4
 8019054:	f000 f8a4 	bl	80191a0 <_free_r>
 8019058:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801905a:	b111      	cbz	r1, 8019062 <_reclaim_reent+0x82>
 801905c:	4620      	mov	r0, r4
 801905e:	f000 f89f 	bl	80191a0 <_free_r>
 8019062:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8019064:	b111      	cbz	r1, 801906c <_reclaim_reent+0x8c>
 8019066:	4620      	mov	r0, r4
 8019068:	f000 f89a 	bl	80191a0 <_free_r>
 801906c:	6a23      	ldr	r3, [r4, #32]
 801906e:	b14b      	cbz	r3, 8019084 <_reclaim_reent+0xa4>
 8019070:	4620      	mov	r0, r4
 8019072:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019076:	4718      	bx	r3
 8019078:	680e      	ldr	r6, [r1, #0]
 801907a:	4620      	mov	r0, r4
 801907c:	f000 f890 	bl	80191a0 <_free_r>
 8019080:	4631      	mov	r1, r6
 8019082:	e7bb      	b.n	8018ffc <_reclaim_reent+0x1c>
 8019084:	bd70      	pop	{r4, r5, r6, pc}
 8019086:	bf00      	nop
 8019088:	20000040 	.word	0x20000040

0801908c <_lseek_r>:
 801908c:	b538      	push	{r3, r4, r5, lr}
 801908e:	4d07      	ldr	r5, [pc, #28]	@ (80190ac <_lseek_r+0x20>)
 8019090:	4604      	mov	r4, r0
 8019092:	4608      	mov	r0, r1
 8019094:	4611      	mov	r1, r2
 8019096:	2200      	movs	r2, #0
 8019098:	602a      	str	r2, [r5, #0]
 801909a:	461a      	mov	r2, r3
 801909c:	f7e7 fe39 	bl	8000d12 <_lseek>
 80190a0:	1c43      	adds	r3, r0, #1
 80190a2:	d102      	bne.n	80190aa <_lseek_r+0x1e>
 80190a4:	682b      	ldr	r3, [r5, #0]
 80190a6:	b103      	cbz	r3, 80190aa <_lseek_r+0x1e>
 80190a8:	6023      	str	r3, [r4, #0]
 80190aa:	bd38      	pop	{r3, r4, r5, pc}
 80190ac:	20011144 	.word	0x20011144

080190b0 <_read_r>:
 80190b0:	b538      	push	{r3, r4, r5, lr}
 80190b2:	4d07      	ldr	r5, [pc, #28]	@ (80190d0 <_read_r+0x20>)
 80190b4:	4604      	mov	r4, r0
 80190b6:	4608      	mov	r0, r1
 80190b8:	4611      	mov	r1, r2
 80190ba:	2200      	movs	r2, #0
 80190bc:	602a      	str	r2, [r5, #0]
 80190be:	461a      	mov	r2, r3
 80190c0:	f7e7 fdc7 	bl	8000c52 <_read>
 80190c4:	1c43      	adds	r3, r0, #1
 80190c6:	d102      	bne.n	80190ce <_read_r+0x1e>
 80190c8:	682b      	ldr	r3, [r5, #0]
 80190ca:	b103      	cbz	r3, 80190ce <_read_r+0x1e>
 80190cc:	6023      	str	r3, [r4, #0]
 80190ce:	bd38      	pop	{r3, r4, r5, pc}
 80190d0:	20011144 	.word	0x20011144

080190d4 <_write_r>:
 80190d4:	b538      	push	{r3, r4, r5, lr}
 80190d6:	4d07      	ldr	r5, [pc, #28]	@ (80190f4 <_write_r+0x20>)
 80190d8:	4604      	mov	r4, r0
 80190da:	4608      	mov	r0, r1
 80190dc:	4611      	mov	r1, r2
 80190de:	2200      	movs	r2, #0
 80190e0:	602a      	str	r2, [r5, #0]
 80190e2:	461a      	mov	r2, r3
 80190e4:	f7e7 fdd2 	bl	8000c8c <_write>
 80190e8:	1c43      	adds	r3, r0, #1
 80190ea:	d102      	bne.n	80190f2 <_write_r+0x1e>
 80190ec:	682b      	ldr	r3, [r5, #0]
 80190ee:	b103      	cbz	r3, 80190f2 <_write_r+0x1e>
 80190f0:	6023      	str	r3, [r4, #0]
 80190f2:	bd38      	pop	{r3, r4, r5, pc}
 80190f4:	20011144 	.word	0x20011144

080190f8 <__libc_init_array>:
 80190f8:	b570      	push	{r4, r5, r6, lr}
 80190fa:	4d0d      	ldr	r5, [pc, #52]	@ (8019130 <__libc_init_array+0x38>)
 80190fc:	4c0d      	ldr	r4, [pc, #52]	@ (8019134 <__libc_init_array+0x3c>)
 80190fe:	1b64      	subs	r4, r4, r5
 8019100:	10a4      	asrs	r4, r4, #2
 8019102:	2600      	movs	r6, #0
 8019104:	42a6      	cmp	r6, r4
 8019106:	d109      	bne.n	801911c <__libc_init_array+0x24>
 8019108:	4d0b      	ldr	r5, [pc, #44]	@ (8019138 <__libc_init_array+0x40>)
 801910a:	4c0c      	ldr	r4, [pc, #48]	@ (801913c <__libc_init_array+0x44>)
 801910c:	f000 ffd8 	bl	801a0c0 <_init>
 8019110:	1b64      	subs	r4, r4, r5
 8019112:	10a4      	asrs	r4, r4, #2
 8019114:	2600      	movs	r6, #0
 8019116:	42a6      	cmp	r6, r4
 8019118:	d105      	bne.n	8019126 <__libc_init_array+0x2e>
 801911a:	bd70      	pop	{r4, r5, r6, pc}
 801911c:	f855 3b04 	ldr.w	r3, [r5], #4
 8019120:	4798      	blx	r3
 8019122:	3601      	adds	r6, #1
 8019124:	e7ee      	b.n	8019104 <__libc_init_array+0xc>
 8019126:	f855 3b04 	ldr.w	r3, [r5], #4
 801912a:	4798      	blx	r3
 801912c:	3601      	adds	r6, #1
 801912e:	e7f2      	b.n	8019116 <__libc_init_array+0x1e>
 8019130:	08028210 	.word	0x08028210
 8019134:	08028210 	.word	0x08028210
 8019138:	08028210 	.word	0x08028210
 801913c:	08028214 	.word	0x08028214

08019140 <__retarget_lock_init_recursive>:
 8019140:	4770      	bx	lr

08019142 <__retarget_lock_acquire_recursive>:
 8019142:	4770      	bx	lr

08019144 <__retarget_lock_release_recursive>:
 8019144:	4770      	bx	lr

08019146 <memcpy>:
 8019146:	440a      	add	r2, r1
 8019148:	4291      	cmp	r1, r2
 801914a:	f100 33ff 	add.w	r3, r0, #4294967295
 801914e:	d100      	bne.n	8019152 <memcpy+0xc>
 8019150:	4770      	bx	lr
 8019152:	b510      	push	{r4, lr}
 8019154:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019158:	f803 4f01 	strb.w	r4, [r3, #1]!
 801915c:	4291      	cmp	r1, r2
 801915e:	d1f9      	bne.n	8019154 <memcpy+0xe>
 8019160:	bd10      	pop	{r4, pc}
	...

08019164 <__assert_func>:
 8019164:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019166:	4614      	mov	r4, r2
 8019168:	461a      	mov	r2, r3
 801916a:	4b09      	ldr	r3, [pc, #36]	@ (8019190 <__assert_func+0x2c>)
 801916c:	681b      	ldr	r3, [r3, #0]
 801916e:	4605      	mov	r5, r0
 8019170:	68d8      	ldr	r0, [r3, #12]
 8019172:	b954      	cbnz	r4, 801918a <__assert_func+0x26>
 8019174:	4b07      	ldr	r3, [pc, #28]	@ (8019194 <__assert_func+0x30>)
 8019176:	461c      	mov	r4, r3
 8019178:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801917c:	9100      	str	r1, [sp, #0]
 801917e:	462b      	mov	r3, r5
 8019180:	4905      	ldr	r1, [pc, #20]	@ (8019198 <__assert_func+0x34>)
 8019182:	f000 fde1 	bl	8019d48 <fiprintf>
 8019186:	f000 fe95 	bl	8019eb4 <abort>
 801918a:	4b04      	ldr	r3, [pc, #16]	@ (801919c <__assert_func+0x38>)
 801918c:	e7f4      	b.n	8019178 <__assert_func+0x14>
 801918e:	bf00      	nop
 8019190:	20000040 	.word	0x20000040
 8019194:	080281d1 	.word	0x080281d1
 8019198:	080281a3 	.word	0x080281a3
 801919c:	08028196 	.word	0x08028196

080191a0 <_free_r>:
 80191a0:	b538      	push	{r3, r4, r5, lr}
 80191a2:	4605      	mov	r5, r0
 80191a4:	2900      	cmp	r1, #0
 80191a6:	d041      	beq.n	801922c <_free_r+0x8c>
 80191a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80191ac:	1f0c      	subs	r4, r1, #4
 80191ae:	2b00      	cmp	r3, #0
 80191b0:	bfb8      	it	lt
 80191b2:	18e4      	addlt	r4, r4, r3
 80191b4:	f000 f8e8 	bl	8019388 <__malloc_lock>
 80191b8:	4a1d      	ldr	r2, [pc, #116]	@ (8019230 <_free_r+0x90>)
 80191ba:	6813      	ldr	r3, [r2, #0]
 80191bc:	b933      	cbnz	r3, 80191cc <_free_r+0x2c>
 80191be:	6063      	str	r3, [r4, #4]
 80191c0:	6014      	str	r4, [r2, #0]
 80191c2:	4628      	mov	r0, r5
 80191c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80191c8:	f000 b8e4 	b.w	8019394 <__malloc_unlock>
 80191cc:	42a3      	cmp	r3, r4
 80191ce:	d908      	bls.n	80191e2 <_free_r+0x42>
 80191d0:	6820      	ldr	r0, [r4, #0]
 80191d2:	1821      	adds	r1, r4, r0
 80191d4:	428b      	cmp	r3, r1
 80191d6:	bf01      	itttt	eq
 80191d8:	6819      	ldreq	r1, [r3, #0]
 80191da:	685b      	ldreq	r3, [r3, #4]
 80191dc:	1809      	addeq	r1, r1, r0
 80191de:	6021      	streq	r1, [r4, #0]
 80191e0:	e7ed      	b.n	80191be <_free_r+0x1e>
 80191e2:	461a      	mov	r2, r3
 80191e4:	685b      	ldr	r3, [r3, #4]
 80191e6:	b10b      	cbz	r3, 80191ec <_free_r+0x4c>
 80191e8:	42a3      	cmp	r3, r4
 80191ea:	d9fa      	bls.n	80191e2 <_free_r+0x42>
 80191ec:	6811      	ldr	r1, [r2, #0]
 80191ee:	1850      	adds	r0, r2, r1
 80191f0:	42a0      	cmp	r0, r4
 80191f2:	d10b      	bne.n	801920c <_free_r+0x6c>
 80191f4:	6820      	ldr	r0, [r4, #0]
 80191f6:	4401      	add	r1, r0
 80191f8:	1850      	adds	r0, r2, r1
 80191fa:	4283      	cmp	r3, r0
 80191fc:	6011      	str	r1, [r2, #0]
 80191fe:	d1e0      	bne.n	80191c2 <_free_r+0x22>
 8019200:	6818      	ldr	r0, [r3, #0]
 8019202:	685b      	ldr	r3, [r3, #4]
 8019204:	6053      	str	r3, [r2, #4]
 8019206:	4408      	add	r0, r1
 8019208:	6010      	str	r0, [r2, #0]
 801920a:	e7da      	b.n	80191c2 <_free_r+0x22>
 801920c:	d902      	bls.n	8019214 <_free_r+0x74>
 801920e:	230c      	movs	r3, #12
 8019210:	602b      	str	r3, [r5, #0]
 8019212:	e7d6      	b.n	80191c2 <_free_r+0x22>
 8019214:	6820      	ldr	r0, [r4, #0]
 8019216:	1821      	adds	r1, r4, r0
 8019218:	428b      	cmp	r3, r1
 801921a:	bf04      	itt	eq
 801921c:	6819      	ldreq	r1, [r3, #0]
 801921e:	685b      	ldreq	r3, [r3, #4]
 8019220:	6063      	str	r3, [r4, #4]
 8019222:	bf04      	itt	eq
 8019224:	1809      	addeq	r1, r1, r0
 8019226:	6021      	streq	r1, [r4, #0]
 8019228:	6054      	str	r4, [r2, #4]
 801922a:	e7ca      	b.n	80191c2 <_free_r+0x22>
 801922c:	bd38      	pop	{r3, r4, r5, pc}
 801922e:	bf00      	nop
 8019230:	20011150 	.word	0x20011150

08019234 <malloc>:
 8019234:	4b02      	ldr	r3, [pc, #8]	@ (8019240 <malloc+0xc>)
 8019236:	4601      	mov	r1, r0
 8019238:	6818      	ldr	r0, [r3, #0]
 801923a:	f000 b825 	b.w	8019288 <_malloc_r>
 801923e:	bf00      	nop
 8019240:	20000040 	.word	0x20000040

08019244 <sbrk_aligned>:
 8019244:	b570      	push	{r4, r5, r6, lr}
 8019246:	4e0f      	ldr	r6, [pc, #60]	@ (8019284 <sbrk_aligned+0x40>)
 8019248:	460c      	mov	r4, r1
 801924a:	6831      	ldr	r1, [r6, #0]
 801924c:	4605      	mov	r5, r0
 801924e:	b911      	cbnz	r1, 8019256 <sbrk_aligned+0x12>
 8019250:	f000 fe20 	bl	8019e94 <_sbrk_r>
 8019254:	6030      	str	r0, [r6, #0]
 8019256:	4621      	mov	r1, r4
 8019258:	4628      	mov	r0, r5
 801925a:	f000 fe1b 	bl	8019e94 <_sbrk_r>
 801925e:	1c43      	adds	r3, r0, #1
 8019260:	d103      	bne.n	801926a <sbrk_aligned+0x26>
 8019262:	f04f 34ff 	mov.w	r4, #4294967295
 8019266:	4620      	mov	r0, r4
 8019268:	bd70      	pop	{r4, r5, r6, pc}
 801926a:	1cc4      	adds	r4, r0, #3
 801926c:	f024 0403 	bic.w	r4, r4, #3
 8019270:	42a0      	cmp	r0, r4
 8019272:	d0f8      	beq.n	8019266 <sbrk_aligned+0x22>
 8019274:	1a21      	subs	r1, r4, r0
 8019276:	4628      	mov	r0, r5
 8019278:	f000 fe0c 	bl	8019e94 <_sbrk_r>
 801927c:	3001      	adds	r0, #1
 801927e:	d1f2      	bne.n	8019266 <sbrk_aligned+0x22>
 8019280:	e7ef      	b.n	8019262 <sbrk_aligned+0x1e>
 8019282:	bf00      	nop
 8019284:	2001114c 	.word	0x2001114c

08019288 <_malloc_r>:
 8019288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801928c:	1ccd      	adds	r5, r1, #3
 801928e:	f025 0503 	bic.w	r5, r5, #3
 8019292:	3508      	adds	r5, #8
 8019294:	2d0c      	cmp	r5, #12
 8019296:	bf38      	it	cc
 8019298:	250c      	movcc	r5, #12
 801929a:	2d00      	cmp	r5, #0
 801929c:	4606      	mov	r6, r0
 801929e:	db01      	blt.n	80192a4 <_malloc_r+0x1c>
 80192a0:	42a9      	cmp	r1, r5
 80192a2:	d904      	bls.n	80192ae <_malloc_r+0x26>
 80192a4:	230c      	movs	r3, #12
 80192a6:	6033      	str	r3, [r6, #0]
 80192a8:	2000      	movs	r0, #0
 80192aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80192ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8019384 <_malloc_r+0xfc>
 80192b2:	f000 f869 	bl	8019388 <__malloc_lock>
 80192b6:	f8d8 3000 	ldr.w	r3, [r8]
 80192ba:	461c      	mov	r4, r3
 80192bc:	bb44      	cbnz	r4, 8019310 <_malloc_r+0x88>
 80192be:	4629      	mov	r1, r5
 80192c0:	4630      	mov	r0, r6
 80192c2:	f7ff ffbf 	bl	8019244 <sbrk_aligned>
 80192c6:	1c43      	adds	r3, r0, #1
 80192c8:	4604      	mov	r4, r0
 80192ca:	d158      	bne.n	801937e <_malloc_r+0xf6>
 80192cc:	f8d8 4000 	ldr.w	r4, [r8]
 80192d0:	4627      	mov	r7, r4
 80192d2:	2f00      	cmp	r7, #0
 80192d4:	d143      	bne.n	801935e <_malloc_r+0xd6>
 80192d6:	2c00      	cmp	r4, #0
 80192d8:	d04b      	beq.n	8019372 <_malloc_r+0xea>
 80192da:	6823      	ldr	r3, [r4, #0]
 80192dc:	4639      	mov	r1, r7
 80192de:	4630      	mov	r0, r6
 80192e0:	eb04 0903 	add.w	r9, r4, r3
 80192e4:	f000 fdd6 	bl	8019e94 <_sbrk_r>
 80192e8:	4581      	cmp	r9, r0
 80192ea:	d142      	bne.n	8019372 <_malloc_r+0xea>
 80192ec:	6821      	ldr	r1, [r4, #0]
 80192ee:	1a6d      	subs	r5, r5, r1
 80192f0:	4629      	mov	r1, r5
 80192f2:	4630      	mov	r0, r6
 80192f4:	f7ff ffa6 	bl	8019244 <sbrk_aligned>
 80192f8:	3001      	adds	r0, #1
 80192fa:	d03a      	beq.n	8019372 <_malloc_r+0xea>
 80192fc:	6823      	ldr	r3, [r4, #0]
 80192fe:	442b      	add	r3, r5
 8019300:	6023      	str	r3, [r4, #0]
 8019302:	f8d8 3000 	ldr.w	r3, [r8]
 8019306:	685a      	ldr	r2, [r3, #4]
 8019308:	bb62      	cbnz	r2, 8019364 <_malloc_r+0xdc>
 801930a:	f8c8 7000 	str.w	r7, [r8]
 801930e:	e00f      	b.n	8019330 <_malloc_r+0xa8>
 8019310:	6822      	ldr	r2, [r4, #0]
 8019312:	1b52      	subs	r2, r2, r5
 8019314:	d420      	bmi.n	8019358 <_malloc_r+0xd0>
 8019316:	2a0b      	cmp	r2, #11
 8019318:	d917      	bls.n	801934a <_malloc_r+0xc2>
 801931a:	1961      	adds	r1, r4, r5
 801931c:	42a3      	cmp	r3, r4
 801931e:	6025      	str	r5, [r4, #0]
 8019320:	bf18      	it	ne
 8019322:	6059      	strne	r1, [r3, #4]
 8019324:	6863      	ldr	r3, [r4, #4]
 8019326:	bf08      	it	eq
 8019328:	f8c8 1000 	streq.w	r1, [r8]
 801932c:	5162      	str	r2, [r4, r5]
 801932e:	604b      	str	r3, [r1, #4]
 8019330:	4630      	mov	r0, r6
 8019332:	f000 f82f 	bl	8019394 <__malloc_unlock>
 8019336:	f104 000b 	add.w	r0, r4, #11
 801933a:	1d23      	adds	r3, r4, #4
 801933c:	f020 0007 	bic.w	r0, r0, #7
 8019340:	1ac2      	subs	r2, r0, r3
 8019342:	bf1c      	itt	ne
 8019344:	1a1b      	subne	r3, r3, r0
 8019346:	50a3      	strne	r3, [r4, r2]
 8019348:	e7af      	b.n	80192aa <_malloc_r+0x22>
 801934a:	6862      	ldr	r2, [r4, #4]
 801934c:	42a3      	cmp	r3, r4
 801934e:	bf0c      	ite	eq
 8019350:	f8c8 2000 	streq.w	r2, [r8]
 8019354:	605a      	strne	r2, [r3, #4]
 8019356:	e7eb      	b.n	8019330 <_malloc_r+0xa8>
 8019358:	4623      	mov	r3, r4
 801935a:	6864      	ldr	r4, [r4, #4]
 801935c:	e7ae      	b.n	80192bc <_malloc_r+0x34>
 801935e:	463c      	mov	r4, r7
 8019360:	687f      	ldr	r7, [r7, #4]
 8019362:	e7b6      	b.n	80192d2 <_malloc_r+0x4a>
 8019364:	461a      	mov	r2, r3
 8019366:	685b      	ldr	r3, [r3, #4]
 8019368:	42a3      	cmp	r3, r4
 801936a:	d1fb      	bne.n	8019364 <_malloc_r+0xdc>
 801936c:	2300      	movs	r3, #0
 801936e:	6053      	str	r3, [r2, #4]
 8019370:	e7de      	b.n	8019330 <_malloc_r+0xa8>
 8019372:	230c      	movs	r3, #12
 8019374:	6033      	str	r3, [r6, #0]
 8019376:	4630      	mov	r0, r6
 8019378:	f000 f80c 	bl	8019394 <__malloc_unlock>
 801937c:	e794      	b.n	80192a8 <_malloc_r+0x20>
 801937e:	6005      	str	r5, [r0, #0]
 8019380:	e7d6      	b.n	8019330 <_malloc_r+0xa8>
 8019382:	bf00      	nop
 8019384:	20011150 	.word	0x20011150

08019388 <__malloc_lock>:
 8019388:	4801      	ldr	r0, [pc, #4]	@ (8019390 <__malloc_lock+0x8>)
 801938a:	f7ff beda 	b.w	8019142 <__retarget_lock_acquire_recursive>
 801938e:	bf00      	nop
 8019390:	20011148 	.word	0x20011148

08019394 <__malloc_unlock>:
 8019394:	4801      	ldr	r0, [pc, #4]	@ (801939c <__malloc_unlock+0x8>)
 8019396:	f7ff bed5 	b.w	8019144 <__retarget_lock_release_recursive>
 801939a:	bf00      	nop
 801939c:	20011148 	.word	0x20011148

080193a0 <__ssputs_r>:
 80193a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80193a4:	688e      	ldr	r6, [r1, #8]
 80193a6:	461f      	mov	r7, r3
 80193a8:	42be      	cmp	r6, r7
 80193aa:	680b      	ldr	r3, [r1, #0]
 80193ac:	4682      	mov	sl, r0
 80193ae:	460c      	mov	r4, r1
 80193b0:	4690      	mov	r8, r2
 80193b2:	d82d      	bhi.n	8019410 <__ssputs_r+0x70>
 80193b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80193b8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80193bc:	d026      	beq.n	801940c <__ssputs_r+0x6c>
 80193be:	6965      	ldr	r5, [r4, #20]
 80193c0:	6909      	ldr	r1, [r1, #16]
 80193c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80193c6:	eba3 0901 	sub.w	r9, r3, r1
 80193ca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80193ce:	1c7b      	adds	r3, r7, #1
 80193d0:	444b      	add	r3, r9
 80193d2:	106d      	asrs	r5, r5, #1
 80193d4:	429d      	cmp	r5, r3
 80193d6:	bf38      	it	cc
 80193d8:	461d      	movcc	r5, r3
 80193da:	0553      	lsls	r3, r2, #21
 80193dc:	d527      	bpl.n	801942e <__ssputs_r+0x8e>
 80193de:	4629      	mov	r1, r5
 80193e0:	f7ff ff52 	bl	8019288 <_malloc_r>
 80193e4:	4606      	mov	r6, r0
 80193e6:	b360      	cbz	r0, 8019442 <__ssputs_r+0xa2>
 80193e8:	6921      	ldr	r1, [r4, #16]
 80193ea:	464a      	mov	r2, r9
 80193ec:	f7ff feab 	bl	8019146 <memcpy>
 80193f0:	89a3      	ldrh	r3, [r4, #12]
 80193f2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80193f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80193fa:	81a3      	strh	r3, [r4, #12]
 80193fc:	6126      	str	r6, [r4, #16]
 80193fe:	6165      	str	r5, [r4, #20]
 8019400:	444e      	add	r6, r9
 8019402:	eba5 0509 	sub.w	r5, r5, r9
 8019406:	6026      	str	r6, [r4, #0]
 8019408:	60a5      	str	r5, [r4, #8]
 801940a:	463e      	mov	r6, r7
 801940c:	42be      	cmp	r6, r7
 801940e:	d900      	bls.n	8019412 <__ssputs_r+0x72>
 8019410:	463e      	mov	r6, r7
 8019412:	6820      	ldr	r0, [r4, #0]
 8019414:	4632      	mov	r2, r6
 8019416:	4641      	mov	r1, r8
 8019418:	f7ff fd19 	bl	8018e4e <memmove>
 801941c:	68a3      	ldr	r3, [r4, #8]
 801941e:	1b9b      	subs	r3, r3, r6
 8019420:	60a3      	str	r3, [r4, #8]
 8019422:	6823      	ldr	r3, [r4, #0]
 8019424:	4433      	add	r3, r6
 8019426:	6023      	str	r3, [r4, #0]
 8019428:	2000      	movs	r0, #0
 801942a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801942e:	462a      	mov	r2, r5
 8019430:	f000 fd47 	bl	8019ec2 <_realloc_r>
 8019434:	4606      	mov	r6, r0
 8019436:	2800      	cmp	r0, #0
 8019438:	d1e0      	bne.n	80193fc <__ssputs_r+0x5c>
 801943a:	6921      	ldr	r1, [r4, #16]
 801943c:	4650      	mov	r0, sl
 801943e:	f7ff feaf 	bl	80191a0 <_free_r>
 8019442:	230c      	movs	r3, #12
 8019444:	f8ca 3000 	str.w	r3, [sl]
 8019448:	89a3      	ldrh	r3, [r4, #12]
 801944a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801944e:	81a3      	strh	r3, [r4, #12]
 8019450:	f04f 30ff 	mov.w	r0, #4294967295
 8019454:	e7e9      	b.n	801942a <__ssputs_r+0x8a>
	...

08019458 <_svfiprintf_r>:
 8019458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801945c:	4698      	mov	r8, r3
 801945e:	898b      	ldrh	r3, [r1, #12]
 8019460:	061b      	lsls	r3, r3, #24
 8019462:	b09d      	sub	sp, #116	@ 0x74
 8019464:	4607      	mov	r7, r0
 8019466:	460d      	mov	r5, r1
 8019468:	4614      	mov	r4, r2
 801946a:	d510      	bpl.n	801948e <_svfiprintf_r+0x36>
 801946c:	690b      	ldr	r3, [r1, #16]
 801946e:	b973      	cbnz	r3, 801948e <_svfiprintf_r+0x36>
 8019470:	2140      	movs	r1, #64	@ 0x40
 8019472:	f7ff ff09 	bl	8019288 <_malloc_r>
 8019476:	6028      	str	r0, [r5, #0]
 8019478:	6128      	str	r0, [r5, #16]
 801947a:	b930      	cbnz	r0, 801948a <_svfiprintf_r+0x32>
 801947c:	230c      	movs	r3, #12
 801947e:	603b      	str	r3, [r7, #0]
 8019480:	f04f 30ff 	mov.w	r0, #4294967295
 8019484:	b01d      	add	sp, #116	@ 0x74
 8019486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801948a:	2340      	movs	r3, #64	@ 0x40
 801948c:	616b      	str	r3, [r5, #20]
 801948e:	2300      	movs	r3, #0
 8019490:	9309      	str	r3, [sp, #36]	@ 0x24
 8019492:	2320      	movs	r3, #32
 8019494:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8019498:	f8cd 800c 	str.w	r8, [sp, #12]
 801949c:	2330      	movs	r3, #48	@ 0x30
 801949e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801963c <_svfiprintf_r+0x1e4>
 80194a2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80194a6:	f04f 0901 	mov.w	r9, #1
 80194aa:	4623      	mov	r3, r4
 80194ac:	469a      	mov	sl, r3
 80194ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80194b2:	b10a      	cbz	r2, 80194b8 <_svfiprintf_r+0x60>
 80194b4:	2a25      	cmp	r2, #37	@ 0x25
 80194b6:	d1f9      	bne.n	80194ac <_svfiprintf_r+0x54>
 80194b8:	ebba 0b04 	subs.w	fp, sl, r4
 80194bc:	d00b      	beq.n	80194d6 <_svfiprintf_r+0x7e>
 80194be:	465b      	mov	r3, fp
 80194c0:	4622      	mov	r2, r4
 80194c2:	4629      	mov	r1, r5
 80194c4:	4638      	mov	r0, r7
 80194c6:	f7ff ff6b 	bl	80193a0 <__ssputs_r>
 80194ca:	3001      	adds	r0, #1
 80194cc:	f000 80a7 	beq.w	801961e <_svfiprintf_r+0x1c6>
 80194d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80194d2:	445a      	add	r2, fp
 80194d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80194d6:	f89a 3000 	ldrb.w	r3, [sl]
 80194da:	2b00      	cmp	r3, #0
 80194dc:	f000 809f 	beq.w	801961e <_svfiprintf_r+0x1c6>
 80194e0:	2300      	movs	r3, #0
 80194e2:	f04f 32ff 	mov.w	r2, #4294967295
 80194e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80194ea:	f10a 0a01 	add.w	sl, sl, #1
 80194ee:	9304      	str	r3, [sp, #16]
 80194f0:	9307      	str	r3, [sp, #28]
 80194f2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80194f6:	931a      	str	r3, [sp, #104]	@ 0x68
 80194f8:	4654      	mov	r4, sl
 80194fa:	2205      	movs	r2, #5
 80194fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019500:	484e      	ldr	r0, [pc, #312]	@ (801963c <_svfiprintf_r+0x1e4>)
 8019502:	f7e6 fe8d 	bl	8000220 <memchr>
 8019506:	9a04      	ldr	r2, [sp, #16]
 8019508:	b9d8      	cbnz	r0, 8019542 <_svfiprintf_r+0xea>
 801950a:	06d0      	lsls	r0, r2, #27
 801950c:	bf44      	itt	mi
 801950e:	2320      	movmi	r3, #32
 8019510:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019514:	0711      	lsls	r1, r2, #28
 8019516:	bf44      	itt	mi
 8019518:	232b      	movmi	r3, #43	@ 0x2b
 801951a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801951e:	f89a 3000 	ldrb.w	r3, [sl]
 8019522:	2b2a      	cmp	r3, #42	@ 0x2a
 8019524:	d015      	beq.n	8019552 <_svfiprintf_r+0xfa>
 8019526:	9a07      	ldr	r2, [sp, #28]
 8019528:	4654      	mov	r4, sl
 801952a:	2000      	movs	r0, #0
 801952c:	f04f 0c0a 	mov.w	ip, #10
 8019530:	4621      	mov	r1, r4
 8019532:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019536:	3b30      	subs	r3, #48	@ 0x30
 8019538:	2b09      	cmp	r3, #9
 801953a:	d94b      	bls.n	80195d4 <_svfiprintf_r+0x17c>
 801953c:	b1b0      	cbz	r0, 801956c <_svfiprintf_r+0x114>
 801953e:	9207      	str	r2, [sp, #28]
 8019540:	e014      	b.n	801956c <_svfiprintf_r+0x114>
 8019542:	eba0 0308 	sub.w	r3, r0, r8
 8019546:	fa09 f303 	lsl.w	r3, r9, r3
 801954a:	4313      	orrs	r3, r2
 801954c:	9304      	str	r3, [sp, #16]
 801954e:	46a2      	mov	sl, r4
 8019550:	e7d2      	b.n	80194f8 <_svfiprintf_r+0xa0>
 8019552:	9b03      	ldr	r3, [sp, #12]
 8019554:	1d19      	adds	r1, r3, #4
 8019556:	681b      	ldr	r3, [r3, #0]
 8019558:	9103      	str	r1, [sp, #12]
 801955a:	2b00      	cmp	r3, #0
 801955c:	bfbb      	ittet	lt
 801955e:	425b      	neglt	r3, r3
 8019560:	f042 0202 	orrlt.w	r2, r2, #2
 8019564:	9307      	strge	r3, [sp, #28]
 8019566:	9307      	strlt	r3, [sp, #28]
 8019568:	bfb8      	it	lt
 801956a:	9204      	strlt	r2, [sp, #16]
 801956c:	7823      	ldrb	r3, [r4, #0]
 801956e:	2b2e      	cmp	r3, #46	@ 0x2e
 8019570:	d10a      	bne.n	8019588 <_svfiprintf_r+0x130>
 8019572:	7863      	ldrb	r3, [r4, #1]
 8019574:	2b2a      	cmp	r3, #42	@ 0x2a
 8019576:	d132      	bne.n	80195de <_svfiprintf_r+0x186>
 8019578:	9b03      	ldr	r3, [sp, #12]
 801957a:	1d1a      	adds	r2, r3, #4
 801957c:	681b      	ldr	r3, [r3, #0]
 801957e:	9203      	str	r2, [sp, #12]
 8019580:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8019584:	3402      	adds	r4, #2
 8019586:	9305      	str	r3, [sp, #20]
 8019588:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801964c <_svfiprintf_r+0x1f4>
 801958c:	7821      	ldrb	r1, [r4, #0]
 801958e:	2203      	movs	r2, #3
 8019590:	4650      	mov	r0, sl
 8019592:	f7e6 fe45 	bl	8000220 <memchr>
 8019596:	b138      	cbz	r0, 80195a8 <_svfiprintf_r+0x150>
 8019598:	9b04      	ldr	r3, [sp, #16]
 801959a:	eba0 000a 	sub.w	r0, r0, sl
 801959e:	2240      	movs	r2, #64	@ 0x40
 80195a0:	4082      	lsls	r2, r0
 80195a2:	4313      	orrs	r3, r2
 80195a4:	3401      	adds	r4, #1
 80195a6:	9304      	str	r3, [sp, #16]
 80195a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80195ac:	4824      	ldr	r0, [pc, #144]	@ (8019640 <_svfiprintf_r+0x1e8>)
 80195ae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80195b2:	2206      	movs	r2, #6
 80195b4:	f7e6 fe34 	bl	8000220 <memchr>
 80195b8:	2800      	cmp	r0, #0
 80195ba:	d036      	beq.n	801962a <_svfiprintf_r+0x1d2>
 80195bc:	4b21      	ldr	r3, [pc, #132]	@ (8019644 <_svfiprintf_r+0x1ec>)
 80195be:	bb1b      	cbnz	r3, 8019608 <_svfiprintf_r+0x1b0>
 80195c0:	9b03      	ldr	r3, [sp, #12]
 80195c2:	3307      	adds	r3, #7
 80195c4:	f023 0307 	bic.w	r3, r3, #7
 80195c8:	3308      	adds	r3, #8
 80195ca:	9303      	str	r3, [sp, #12]
 80195cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80195ce:	4433      	add	r3, r6
 80195d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80195d2:	e76a      	b.n	80194aa <_svfiprintf_r+0x52>
 80195d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80195d8:	460c      	mov	r4, r1
 80195da:	2001      	movs	r0, #1
 80195dc:	e7a8      	b.n	8019530 <_svfiprintf_r+0xd8>
 80195de:	2300      	movs	r3, #0
 80195e0:	3401      	adds	r4, #1
 80195e2:	9305      	str	r3, [sp, #20]
 80195e4:	4619      	mov	r1, r3
 80195e6:	f04f 0c0a 	mov.w	ip, #10
 80195ea:	4620      	mov	r0, r4
 80195ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80195f0:	3a30      	subs	r2, #48	@ 0x30
 80195f2:	2a09      	cmp	r2, #9
 80195f4:	d903      	bls.n	80195fe <_svfiprintf_r+0x1a6>
 80195f6:	2b00      	cmp	r3, #0
 80195f8:	d0c6      	beq.n	8019588 <_svfiprintf_r+0x130>
 80195fa:	9105      	str	r1, [sp, #20]
 80195fc:	e7c4      	b.n	8019588 <_svfiprintf_r+0x130>
 80195fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8019602:	4604      	mov	r4, r0
 8019604:	2301      	movs	r3, #1
 8019606:	e7f0      	b.n	80195ea <_svfiprintf_r+0x192>
 8019608:	ab03      	add	r3, sp, #12
 801960a:	9300      	str	r3, [sp, #0]
 801960c:	462a      	mov	r2, r5
 801960e:	4b0e      	ldr	r3, [pc, #56]	@ (8019648 <_svfiprintf_r+0x1f0>)
 8019610:	a904      	add	r1, sp, #16
 8019612:	4638      	mov	r0, r7
 8019614:	f3af 8000 	nop.w
 8019618:	1c42      	adds	r2, r0, #1
 801961a:	4606      	mov	r6, r0
 801961c:	d1d6      	bne.n	80195cc <_svfiprintf_r+0x174>
 801961e:	89ab      	ldrh	r3, [r5, #12]
 8019620:	065b      	lsls	r3, r3, #25
 8019622:	f53f af2d 	bmi.w	8019480 <_svfiprintf_r+0x28>
 8019626:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019628:	e72c      	b.n	8019484 <_svfiprintf_r+0x2c>
 801962a:	ab03      	add	r3, sp, #12
 801962c:	9300      	str	r3, [sp, #0]
 801962e:	462a      	mov	r2, r5
 8019630:	4b05      	ldr	r3, [pc, #20]	@ (8019648 <_svfiprintf_r+0x1f0>)
 8019632:	a904      	add	r1, sp, #16
 8019634:	4638      	mov	r0, r7
 8019636:	f000 f9bb 	bl	80199b0 <_printf_i>
 801963a:	e7ed      	b.n	8019618 <_svfiprintf_r+0x1c0>
 801963c:	080281d2 	.word	0x080281d2
 8019640:	080281dc 	.word	0x080281dc
 8019644:	00000000 	.word	0x00000000
 8019648:	080193a1 	.word	0x080193a1
 801964c:	080281d8 	.word	0x080281d8

08019650 <__sfputc_r>:
 8019650:	6893      	ldr	r3, [r2, #8]
 8019652:	3b01      	subs	r3, #1
 8019654:	2b00      	cmp	r3, #0
 8019656:	b410      	push	{r4}
 8019658:	6093      	str	r3, [r2, #8]
 801965a:	da08      	bge.n	801966e <__sfputc_r+0x1e>
 801965c:	6994      	ldr	r4, [r2, #24]
 801965e:	42a3      	cmp	r3, r4
 8019660:	db01      	blt.n	8019666 <__sfputc_r+0x16>
 8019662:	290a      	cmp	r1, #10
 8019664:	d103      	bne.n	801966e <__sfputc_r+0x1e>
 8019666:	f85d 4b04 	ldr.w	r4, [sp], #4
 801966a:	f000 bb7f 	b.w	8019d6c <__swbuf_r>
 801966e:	6813      	ldr	r3, [r2, #0]
 8019670:	1c58      	adds	r0, r3, #1
 8019672:	6010      	str	r0, [r2, #0]
 8019674:	7019      	strb	r1, [r3, #0]
 8019676:	4608      	mov	r0, r1
 8019678:	f85d 4b04 	ldr.w	r4, [sp], #4
 801967c:	4770      	bx	lr

0801967e <__sfputs_r>:
 801967e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019680:	4606      	mov	r6, r0
 8019682:	460f      	mov	r7, r1
 8019684:	4614      	mov	r4, r2
 8019686:	18d5      	adds	r5, r2, r3
 8019688:	42ac      	cmp	r4, r5
 801968a:	d101      	bne.n	8019690 <__sfputs_r+0x12>
 801968c:	2000      	movs	r0, #0
 801968e:	e007      	b.n	80196a0 <__sfputs_r+0x22>
 8019690:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019694:	463a      	mov	r2, r7
 8019696:	4630      	mov	r0, r6
 8019698:	f7ff ffda 	bl	8019650 <__sfputc_r>
 801969c:	1c43      	adds	r3, r0, #1
 801969e:	d1f3      	bne.n	8019688 <__sfputs_r+0xa>
 80196a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080196a4 <_vfiprintf_r>:
 80196a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196a8:	460d      	mov	r5, r1
 80196aa:	b09d      	sub	sp, #116	@ 0x74
 80196ac:	4614      	mov	r4, r2
 80196ae:	4698      	mov	r8, r3
 80196b0:	4606      	mov	r6, r0
 80196b2:	b118      	cbz	r0, 80196bc <_vfiprintf_r+0x18>
 80196b4:	6a03      	ldr	r3, [r0, #32]
 80196b6:	b90b      	cbnz	r3, 80196bc <_vfiprintf_r+0x18>
 80196b8:	f7ff fb0e 	bl	8018cd8 <__sinit>
 80196bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80196be:	07d9      	lsls	r1, r3, #31
 80196c0:	d405      	bmi.n	80196ce <_vfiprintf_r+0x2a>
 80196c2:	89ab      	ldrh	r3, [r5, #12]
 80196c4:	059a      	lsls	r2, r3, #22
 80196c6:	d402      	bmi.n	80196ce <_vfiprintf_r+0x2a>
 80196c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80196ca:	f7ff fd3a 	bl	8019142 <__retarget_lock_acquire_recursive>
 80196ce:	89ab      	ldrh	r3, [r5, #12]
 80196d0:	071b      	lsls	r3, r3, #28
 80196d2:	d501      	bpl.n	80196d8 <_vfiprintf_r+0x34>
 80196d4:	692b      	ldr	r3, [r5, #16]
 80196d6:	b99b      	cbnz	r3, 8019700 <_vfiprintf_r+0x5c>
 80196d8:	4629      	mov	r1, r5
 80196da:	4630      	mov	r0, r6
 80196dc:	f000 fb84 	bl	8019de8 <__swsetup_r>
 80196e0:	b170      	cbz	r0, 8019700 <_vfiprintf_r+0x5c>
 80196e2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80196e4:	07dc      	lsls	r4, r3, #31
 80196e6:	d504      	bpl.n	80196f2 <_vfiprintf_r+0x4e>
 80196e8:	f04f 30ff 	mov.w	r0, #4294967295
 80196ec:	b01d      	add	sp, #116	@ 0x74
 80196ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80196f2:	89ab      	ldrh	r3, [r5, #12]
 80196f4:	0598      	lsls	r0, r3, #22
 80196f6:	d4f7      	bmi.n	80196e8 <_vfiprintf_r+0x44>
 80196f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80196fa:	f7ff fd23 	bl	8019144 <__retarget_lock_release_recursive>
 80196fe:	e7f3      	b.n	80196e8 <_vfiprintf_r+0x44>
 8019700:	2300      	movs	r3, #0
 8019702:	9309      	str	r3, [sp, #36]	@ 0x24
 8019704:	2320      	movs	r3, #32
 8019706:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801970a:	f8cd 800c 	str.w	r8, [sp, #12]
 801970e:	2330      	movs	r3, #48	@ 0x30
 8019710:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80198c0 <_vfiprintf_r+0x21c>
 8019714:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8019718:	f04f 0901 	mov.w	r9, #1
 801971c:	4623      	mov	r3, r4
 801971e:	469a      	mov	sl, r3
 8019720:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019724:	b10a      	cbz	r2, 801972a <_vfiprintf_r+0x86>
 8019726:	2a25      	cmp	r2, #37	@ 0x25
 8019728:	d1f9      	bne.n	801971e <_vfiprintf_r+0x7a>
 801972a:	ebba 0b04 	subs.w	fp, sl, r4
 801972e:	d00b      	beq.n	8019748 <_vfiprintf_r+0xa4>
 8019730:	465b      	mov	r3, fp
 8019732:	4622      	mov	r2, r4
 8019734:	4629      	mov	r1, r5
 8019736:	4630      	mov	r0, r6
 8019738:	f7ff ffa1 	bl	801967e <__sfputs_r>
 801973c:	3001      	adds	r0, #1
 801973e:	f000 80a7 	beq.w	8019890 <_vfiprintf_r+0x1ec>
 8019742:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019744:	445a      	add	r2, fp
 8019746:	9209      	str	r2, [sp, #36]	@ 0x24
 8019748:	f89a 3000 	ldrb.w	r3, [sl]
 801974c:	2b00      	cmp	r3, #0
 801974e:	f000 809f 	beq.w	8019890 <_vfiprintf_r+0x1ec>
 8019752:	2300      	movs	r3, #0
 8019754:	f04f 32ff 	mov.w	r2, #4294967295
 8019758:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801975c:	f10a 0a01 	add.w	sl, sl, #1
 8019760:	9304      	str	r3, [sp, #16]
 8019762:	9307      	str	r3, [sp, #28]
 8019764:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8019768:	931a      	str	r3, [sp, #104]	@ 0x68
 801976a:	4654      	mov	r4, sl
 801976c:	2205      	movs	r2, #5
 801976e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019772:	4853      	ldr	r0, [pc, #332]	@ (80198c0 <_vfiprintf_r+0x21c>)
 8019774:	f7e6 fd54 	bl	8000220 <memchr>
 8019778:	9a04      	ldr	r2, [sp, #16]
 801977a:	b9d8      	cbnz	r0, 80197b4 <_vfiprintf_r+0x110>
 801977c:	06d1      	lsls	r1, r2, #27
 801977e:	bf44      	itt	mi
 8019780:	2320      	movmi	r3, #32
 8019782:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019786:	0713      	lsls	r3, r2, #28
 8019788:	bf44      	itt	mi
 801978a:	232b      	movmi	r3, #43	@ 0x2b
 801978c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019790:	f89a 3000 	ldrb.w	r3, [sl]
 8019794:	2b2a      	cmp	r3, #42	@ 0x2a
 8019796:	d015      	beq.n	80197c4 <_vfiprintf_r+0x120>
 8019798:	9a07      	ldr	r2, [sp, #28]
 801979a:	4654      	mov	r4, sl
 801979c:	2000      	movs	r0, #0
 801979e:	f04f 0c0a 	mov.w	ip, #10
 80197a2:	4621      	mov	r1, r4
 80197a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80197a8:	3b30      	subs	r3, #48	@ 0x30
 80197aa:	2b09      	cmp	r3, #9
 80197ac:	d94b      	bls.n	8019846 <_vfiprintf_r+0x1a2>
 80197ae:	b1b0      	cbz	r0, 80197de <_vfiprintf_r+0x13a>
 80197b0:	9207      	str	r2, [sp, #28]
 80197b2:	e014      	b.n	80197de <_vfiprintf_r+0x13a>
 80197b4:	eba0 0308 	sub.w	r3, r0, r8
 80197b8:	fa09 f303 	lsl.w	r3, r9, r3
 80197bc:	4313      	orrs	r3, r2
 80197be:	9304      	str	r3, [sp, #16]
 80197c0:	46a2      	mov	sl, r4
 80197c2:	e7d2      	b.n	801976a <_vfiprintf_r+0xc6>
 80197c4:	9b03      	ldr	r3, [sp, #12]
 80197c6:	1d19      	adds	r1, r3, #4
 80197c8:	681b      	ldr	r3, [r3, #0]
 80197ca:	9103      	str	r1, [sp, #12]
 80197cc:	2b00      	cmp	r3, #0
 80197ce:	bfbb      	ittet	lt
 80197d0:	425b      	neglt	r3, r3
 80197d2:	f042 0202 	orrlt.w	r2, r2, #2
 80197d6:	9307      	strge	r3, [sp, #28]
 80197d8:	9307      	strlt	r3, [sp, #28]
 80197da:	bfb8      	it	lt
 80197dc:	9204      	strlt	r2, [sp, #16]
 80197de:	7823      	ldrb	r3, [r4, #0]
 80197e0:	2b2e      	cmp	r3, #46	@ 0x2e
 80197e2:	d10a      	bne.n	80197fa <_vfiprintf_r+0x156>
 80197e4:	7863      	ldrb	r3, [r4, #1]
 80197e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80197e8:	d132      	bne.n	8019850 <_vfiprintf_r+0x1ac>
 80197ea:	9b03      	ldr	r3, [sp, #12]
 80197ec:	1d1a      	adds	r2, r3, #4
 80197ee:	681b      	ldr	r3, [r3, #0]
 80197f0:	9203      	str	r2, [sp, #12]
 80197f2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80197f6:	3402      	adds	r4, #2
 80197f8:	9305      	str	r3, [sp, #20]
 80197fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80198d0 <_vfiprintf_r+0x22c>
 80197fe:	7821      	ldrb	r1, [r4, #0]
 8019800:	2203      	movs	r2, #3
 8019802:	4650      	mov	r0, sl
 8019804:	f7e6 fd0c 	bl	8000220 <memchr>
 8019808:	b138      	cbz	r0, 801981a <_vfiprintf_r+0x176>
 801980a:	9b04      	ldr	r3, [sp, #16]
 801980c:	eba0 000a 	sub.w	r0, r0, sl
 8019810:	2240      	movs	r2, #64	@ 0x40
 8019812:	4082      	lsls	r2, r0
 8019814:	4313      	orrs	r3, r2
 8019816:	3401      	adds	r4, #1
 8019818:	9304      	str	r3, [sp, #16]
 801981a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801981e:	4829      	ldr	r0, [pc, #164]	@ (80198c4 <_vfiprintf_r+0x220>)
 8019820:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8019824:	2206      	movs	r2, #6
 8019826:	f7e6 fcfb 	bl	8000220 <memchr>
 801982a:	2800      	cmp	r0, #0
 801982c:	d03f      	beq.n	80198ae <_vfiprintf_r+0x20a>
 801982e:	4b26      	ldr	r3, [pc, #152]	@ (80198c8 <_vfiprintf_r+0x224>)
 8019830:	bb1b      	cbnz	r3, 801987a <_vfiprintf_r+0x1d6>
 8019832:	9b03      	ldr	r3, [sp, #12]
 8019834:	3307      	adds	r3, #7
 8019836:	f023 0307 	bic.w	r3, r3, #7
 801983a:	3308      	adds	r3, #8
 801983c:	9303      	str	r3, [sp, #12]
 801983e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019840:	443b      	add	r3, r7
 8019842:	9309      	str	r3, [sp, #36]	@ 0x24
 8019844:	e76a      	b.n	801971c <_vfiprintf_r+0x78>
 8019846:	fb0c 3202 	mla	r2, ip, r2, r3
 801984a:	460c      	mov	r4, r1
 801984c:	2001      	movs	r0, #1
 801984e:	e7a8      	b.n	80197a2 <_vfiprintf_r+0xfe>
 8019850:	2300      	movs	r3, #0
 8019852:	3401      	adds	r4, #1
 8019854:	9305      	str	r3, [sp, #20]
 8019856:	4619      	mov	r1, r3
 8019858:	f04f 0c0a 	mov.w	ip, #10
 801985c:	4620      	mov	r0, r4
 801985e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019862:	3a30      	subs	r2, #48	@ 0x30
 8019864:	2a09      	cmp	r2, #9
 8019866:	d903      	bls.n	8019870 <_vfiprintf_r+0x1cc>
 8019868:	2b00      	cmp	r3, #0
 801986a:	d0c6      	beq.n	80197fa <_vfiprintf_r+0x156>
 801986c:	9105      	str	r1, [sp, #20]
 801986e:	e7c4      	b.n	80197fa <_vfiprintf_r+0x156>
 8019870:	fb0c 2101 	mla	r1, ip, r1, r2
 8019874:	4604      	mov	r4, r0
 8019876:	2301      	movs	r3, #1
 8019878:	e7f0      	b.n	801985c <_vfiprintf_r+0x1b8>
 801987a:	ab03      	add	r3, sp, #12
 801987c:	9300      	str	r3, [sp, #0]
 801987e:	462a      	mov	r2, r5
 8019880:	4b12      	ldr	r3, [pc, #72]	@ (80198cc <_vfiprintf_r+0x228>)
 8019882:	a904      	add	r1, sp, #16
 8019884:	4630      	mov	r0, r6
 8019886:	f3af 8000 	nop.w
 801988a:	4607      	mov	r7, r0
 801988c:	1c78      	adds	r0, r7, #1
 801988e:	d1d6      	bne.n	801983e <_vfiprintf_r+0x19a>
 8019890:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019892:	07d9      	lsls	r1, r3, #31
 8019894:	d405      	bmi.n	80198a2 <_vfiprintf_r+0x1fe>
 8019896:	89ab      	ldrh	r3, [r5, #12]
 8019898:	059a      	lsls	r2, r3, #22
 801989a:	d402      	bmi.n	80198a2 <_vfiprintf_r+0x1fe>
 801989c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801989e:	f7ff fc51 	bl	8019144 <__retarget_lock_release_recursive>
 80198a2:	89ab      	ldrh	r3, [r5, #12]
 80198a4:	065b      	lsls	r3, r3, #25
 80198a6:	f53f af1f 	bmi.w	80196e8 <_vfiprintf_r+0x44>
 80198aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80198ac:	e71e      	b.n	80196ec <_vfiprintf_r+0x48>
 80198ae:	ab03      	add	r3, sp, #12
 80198b0:	9300      	str	r3, [sp, #0]
 80198b2:	462a      	mov	r2, r5
 80198b4:	4b05      	ldr	r3, [pc, #20]	@ (80198cc <_vfiprintf_r+0x228>)
 80198b6:	a904      	add	r1, sp, #16
 80198b8:	4630      	mov	r0, r6
 80198ba:	f000 f879 	bl	80199b0 <_printf_i>
 80198be:	e7e4      	b.n	801988a <_vfiprintf_r+0x1e6>
 80198c0:	080281d2 	.word	0x080281d2
 80198c4:	080281dc 	.word	0x080281dc
 80198c8:	00000000 	.word	0x00000000
 80198cc:	0801967f 	.word	0x0801967f
 80198d0:	080281d8 	.word	0x080281d8

080198d4 <_printf_common>:
 80198d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80198d8:	4616      	mov	r6, r2
 80198da:	4698      	mov	r8, r3
 80198dc:	688a      	ldr	r2, [r1, #8]
 80198de:	690b      	ldr	r3, [r1, #16]
 80198e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80198e4:	4293      	cmp	r3, r2
 80198e6:	bfb8      	it	lt
 80198e8:	4613      	movlt	r3, r2
 80198ea:	6033      	str	r3, [r6, #0]
 80198ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80198f0:	4607      	mov	r7, r0
 80198f2:	460c      	mov	r4, r1
 80198f4:	b10a      	cbz	r2, 80198fa <_printf_common+0x26>
 80198f6:	3301      	adds	r3, #1
 80198f8:	6033      	str	r3, [r6, #0]
 80198fa:	6823      	ldr	r3, [r4, #0]
 80198fc:	0699      	lsls	r1, r3, #26
 80198fe:	bf42      	ittt	mi
 8019900:	6833      	ldrmi	r3, [r6, #0]
 8019902:	3302      	addmi	r3, #2
 8019904:	6033      	strmi	r3, [r6, #0]
 8019906:	6825      	ldr	r5, [r4, #0]
 8019908:	f015 0506 	ands.w	r5, r5, #6
 801990c:	d106      	bne.n	801991c <_printf_common+0x48>
 801990e:	f104 0a19 	add.w	sl, r4, #25
 8019912:	68e3      	ldr	r3, [r4, #12]
 8019914:	6832      	ldr	r2, [r6, #0]
 8019916:	1a9b      	subs	r3, r3, r2
 8019918:	42ab      	cmp	r3, r5
 801991a:	dc26      	bgt.n	801996a <_printf_common+0x96>
 801991c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8019920:	6822      	ldr	r2, [r4, #0]
 8019922:	3b00      	subs	r3, #0
 8019924:	bf18      	it	ne
 8019926:	2301      	movne	r3, #1
 8019928:	0692      	lsls	r2, r2, #26
 801992a:	d42b      	bmi.n	8019984 <_printf_common+0xb0>
 801992c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8019930:	4641      	mov	r1, r8
 8019932:	4638      	mov	r0, r7
 8019934:	47c8      	blx	r9
 8019936:	3001      	adds	r0, #1
 8019938:	d01e      	beq.n	8019978 <_printf_common+0xa4>
 801993a:	6823      	ldr	r3, [r4, #0]
 801993c:	6922      	ldr	r2, [r4, #16]
 801993e:	f003 0306 	and.w	r3, r3, #6
 8019942:	2b04      	cmp	r3, #4
 8019944:	bf02      	ittt	eq
 8019946:	68e5      	ldreq	r5, [r4, #12]
 8019948:	6833      	ldreq	r3, [r6, #0]
 801994a:	1aed      	subeq	r5, r5, r3
 801994c:	68a3      	ldr	r3, [r4, #8]
 801994e:	bf0c      	ite	eq
 8019950:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019954:	2500      	movne	r5, #0
 8019956:	4293      	cmp	r3, r2
 8019958:	bfc4      	itt	gt
 801995a:	1a9b      	subgt	r3, r3, r2
 801995c:	18ed      	addgt	r5, r5, r3
 801995e:	2600      	movs	r6, #0
 8019960:	341a      	adds	r4, #26
 8019962:	42b5      	cmp	r5, r6
 8019964:	d11a      	bne.n	801999c <_printf_common+0xc8>
 8019966:	2000      	movs	r0, #0
 8019968:	e008      	b.n	801997c <_printf_common+0xa8>
 801996a:	2301      	movs	r3, #1
 801996c:	4652      	mov	r2, sl
 801996e:	4641      	mov	r1, r8
 8019970:	4638      	mov	r0, r7
 8019972:	47c8      	blx	r9
 8019974:	3001      	adds	r0, #1
 8019976:	d103      	bne.n	8019980 <_printf_common+0xac>
 8019978:	f04f 30ff 	mov.w	r0, #4294967295
 801997c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019980:	3501      	adds	r5, #1
 8019982:	e7c6      	b.n	8019912 <_printf_common+0x3e>
 8019984:	18e1      	adds	r1, r4, r3
 8019986:	1c5a      	adds	r2, r3, #1
 8019988:	2030      	movs	r0, #48	@ 0x30
 801998a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801998e:	4422      	add	r2, r4
 8019990:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8019994:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8019998:	3302      	adds	r3, #2
 801999a:	e7c7      	b.n	801992c <_printf_common+0x58>
 801999c:	2301      	movs	r3, #1
 801999e:	4622      	mov	r2, r4
 80199a0:	4641      	mov	r1, r8
 80199a2:	4638      	mov	r0, r7
 80199a4:	47c8      	blx	r9
 80199a6:	3001      	adds	r0, #1
 80199a8:	d0e6      	beq.n	8019978 <_printf_common+0xa4>
 80199aa:	3601      	adds	r6, #1
 80199ac:	e7d9      	b.n	8019962 <_printf_common+0x8e>
	...

080199b0 <_printf_i>:
 80199b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80199b4:	7e0f      	ldrb	r7, [r1, #24]
 80199b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80199b8:	2f78      	cmp	r7, #120	@ 0x78
 80199ba:	4691      	mov	r9, r2
 80199bc:	4680      	mov	r8, r0
 80199be:	460c      	mov	r4, r1
 80199c0:	469a      	mov	sl, r3
 80199c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80199c6:	d807      	bhi.n	80199d8 <_printf_i+0x28>
 80199c8:	2f62      	cmp	r7, #98	@ 0x62
 80199ca:	d80a      	bhi.n	80199e2 <_printf_i+0x32>
 80199cc:	2f00      	cmp	r7, #0
 80199ce:	f000 80d2 	beq.w	8019b76 <_printf_i+0x1c6>
 80199d2:	2f58      	cmp	r7, #88	@ 0x58
 80199d4:	f000 80b9 	beq.w	8019b4a <_printf_i+0x19a>
 80199d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80199dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80199e0:	e03a      	b.n	8019a58 <_printf_i+0xa8>
 80199e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80199e6:	2b15      	cmp	r3, #21
 80199e8:	d8f6      	bhi.n	80199d8 <_printf_i+0x28>
 80199ea:	a101      	add	r1, pc, #4	@ (adr r1, 80199f0 <_printf_i+0x40>)
 80199ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80199f0:	08019a49 	.word	0x08019a49
 80199f4:	08019a5d 	.word	0x08019a5d
 80199f8:	080199d9 	.word	0x080199d9
 80199fc:	080199d9 	.word	0x080199d9
 8019a00:	080199d9 	.word	0x080199d9
 8019a04:	080199d9 	.word	0x080199d9
 8019a08:	08019a5d 	.word	0x08019a5d
 8019a0c:	080199d9 	.word	0x080199d9
 8019a10:	080199d9 	.word	0x080199d9
 8019a14:	080199d9 	.word	0x080199d9
 8019a18:	080199d9 	.word	0x080199d9
 8019a1c:	08019b5d 	.word	0x08019b5d
 8019a20:	08019a87 	.word	0x08019a87
 8019a24:	08019b17 	.word	0x08019b17
 8019a28:	080199d9 	.word	0x080199d9
 8019a2c:	080199d9 	.word	0x080199d9
 8019a30:	08019b7f 	.word	0x08019b7f
 8019a34:	080199d9 	.word	0x080199d9
 8019a38:	08019a87 	.word	0x08019a87
 8019a3c:	080199d9 	.word	0x080199d9
 8019a40:	080199d9 	.word	0x080199d9
 8019a44:	08019b1f 	.word	0x08019b1f
 8019a48:	6833      	ldr	r3, [r6, #0]
 8019a4a:	1d1a      	adds	r2, r3, #4
 8019a4c:	681b      	ldr	r3, [r3, #0]
 8019a4e:	6032      	str	r2, [r6, #0]
 8019a50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019a54:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8019a58:	2301      	movs	r3, #1
 8019a5a:	e09d      	b.n	8019b98 <_printf_i+0x1e8>
 8019a5c:	6833      	ldr	r3, [r6, #0]
 8019a5e:	6820      	ldr	r0, [r4, #0]
 8019a60:	1d19      	adds	r1, r3, #4
 8019a62:	6031      	str	r1, [r6, #0]
 8019a64:	0606      	lsls	r6, r0, #24
 8019a66:	d501      	bpl.n	8019a6c <_printf_i+0xbc>
 8019a68:	681d      	ldr	r5, [r3, #0]
 8019a6a:	e003      	b.n	8019a74 <_printf_i+0xc4>
 8019a6c:	0645      	lsls	r5, r0, #25
 8019a6e:	d5fb      	bpl.n	8019a68 <_printf_i+0xb8>
 8019a70:	f9b3 5000 	ldrsh.w	r5, [r3]
 8019a74:	2d00      	cmp	r5, #0
 8019a76:	da03      	bge.n	8019a80 <_printf_i+0xd0>
 8019a78:	232d      	movs	r3, #45	@ 0x2d
 8019a7a:	426d      	negs	r5, r5
 8019a7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019a80:	4859      	ldr	r0, [pc, #356]	@ (8019be8 <_printf_i+0x238>)
 8019a82:	230a      	movs	r3, #10
 8019a84:	e011      	b.n	8019aaa <_printf_i+0xfa>
 8019a86:	6821      	ldr	r1, [r4, #0]
 8019a88:	6833      	ldr	r3, [r6, #0]
 8019a8a:	0608      	lsls	r0, r1, #24
 8019a8c:	f853 5b04 	ldr.w	r5, [r3], #4
 8019a90:	d402      	bmi.n	8019a98 <_printf_i+0xe8>
 8019a92:	0649      	lsls	r1, r1, #25
 8019a94:	bf48      	it	mi
 8019a96:	b2ad      	uxthmi	r5, r5
 8019a98:	2f6f      	cmp	r7, #111	@ 0x6f
 8019a9a:	4853      	ldr	r0, [pc, #332]	@ (8019be8 <_printf_i+0x238>)
 8019a9c:	6033      	str	r3, [r6, #0]
 8019a9e:	bf14      	ite	ne
 8019aa0:	230a      	movne	r3, #10
 8019aa2:	2308      	moveq	r3, #8
 8019aa4:	2100      	movs	r1, #0
 8019aa6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8019aaa:	6866      	ldr	r6, [r4, #4]
 8019aac:	60a6      	str	r6, [r4, #8]
 8019aae:	2e00      	cmp	r6, #0
 8019ab0:	bfa2      	ittt	ge
 8019ab2:	6821      	ldrge	r1, [r4, #0]
 8019ab4:	f021 0104 	bicge.w	r1, r1, #4
 8019ab8:	6021      	strge	r1, [r4, #0]
 8019aba:	b90d      	cbnz	r5, 8019ac0 <_printf_i+0x110>
 8019abc:	2e00      	cmp	r6, #0
 8019abe:	d04b      	beq.n	8019b58 <_printf_i+0x1a8>
 8019ac0:	4616      	mov	r6, r2
 8019ac2:	fbb5 f1f3 	udiv	r1, r5, r3
 8019ac6:	fb03 5711 	mls	r7, r3, r1, r5
 8019aca:	5dc7      	ldrb	r7, [r0, r7]
 8019acc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8019ad0:	462f      	mov	r7, r5
 8019ad2:	42bb      	cmp	r3, r7
 8019ad4:	460d      	mov	r5, r1
 8019ad6:	d9f4      	bls.n	8019ac2 <_printf_i+0x112>
 8019ad8:	2b08      	cmp	r3, #8
 8019ada:	d10b      	bne.n	8019af4 <_printf_i+0x144>
 8019adc:	6823      	ldr	r3, [r4, #0]
 8019ade:	07df      	lsls	r7, r3, #31
 8019ae0:	d508      	bpl.n	8019af4 <_printf_i+0x144>
 8019ae2:	6923      	ldr	r3, [r4, #16]
 8019ae4:	6861      	ldr	r1, [r4, #4]
 8019ae6:	4299      	cmp	r1, r3
 8019ae8:	bfde      	ittt	le
 8019aea:	2330      	movle	r3, #48	@ 0x30
 8019aec:	f806 3c01 	strble.w	r3, [r6, #-1]
 8019af0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8019af4:	1b92      	subs	r2, r2, r6
 8019af6:	6122      	str	r2, [r4, #16]
 8019af8:	f8cd a000 	str.w	sl, [sp]
 8019afc:	464b      	mov	r3, r9
 8019afe:	aa03      	add	r2, sp, #12
 8019b00:	4621      	mov	r1, r4
 8019b02:	4640      	mov	r0, r8
 8019b04:	f7ff fee6 	bl	80198d4 <_printf_common>
 8019b08:	3001      	adds	r0, #1
 8019b0a:	d14a      	bne.n	8019ba2 <_printf_i+0x1f2>
 8019b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8019b10:	b004      	add	sp, #16
 8019b12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019b16:	6823      	ldr	r3, [r4, #0]
 8019b18:	f043 0320 	orr.w	r3, r3, #32
 8019b1c:	6023      	str	r3, [r4, #0]
 8019b1e:	4833      	ldr	r0, [pc, #204]	@ (8019bec <_printf_i+0x23c>)
 8019b20:	2778      	movs	r7, #120	@ 0x78
 8019b22:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8019b26:	6823      	ldr	r3, [r4, #0]
 8019b28:	6831      	ldr	r1, [r6, #0]
 8019b2a:	061f      	lsls	r7, r3, #24
 8019b2c:	f851 5b04 	ldr.w	r5, [r1], #4
 8019b30:	d402      	bmi.n	8019b38 <_printf_i+0x188>
 8019b32:	065f      	lsls	r7, r3, #25
 8019b34:	bf48      	it	mi
 8019b36:	b2ad      	uxthmi	r5, r5
 8019b38:	6031      	str	r1, [r6, #0]
 8019b3a:	07d9      	lsls	r1, r3, #31
 8019b3c:	bf44      	itt	mi
 8019b3e:	f043 0320 	orrmi.w	r3, r3, #32
 8019b42:	6023      	strmi	r3, [r4, #0]
 8019b44:	b11d      	cbz	r5, 8019b4e <_printf_i+0x19e>
 8019b46:	2310      	movs	r3, #16
 8019b48:	e7ac      	b.n	8019aa4 <_printf_i+0xf4>
 8019b4a:	4827      	ldr	r0, [pc, #156]	@ (8019be8 <_printf_i+0x238>)
 8019b4c:	e7e9      	b.n	8019b22 <_printf_i+0x172>
 8019b4e:	6823      	ldr	r3, [r4, #0]
 8019b50:	f023 0320 	bic.w	r3, r3, #32
 8019b54:	6023      	str	r3, [r4, #0]
 8019b56:	e7f6      	b.n	8019b46 <_printf_i+0x196>
 8019b58:	4616      	mov	r6, r2
 8019b5a:	e7bd      	b.n	8019ad8 <_printf_i+0x128>
 8019b5c:	6833      	ldr	r3, [r6, #0]
 8019b5e:	6825      	ldr	r5, [r4, #0]
 8019b60:	6961      	ldr	r1, [r4, #20]
 8019b62:	1d18      	adds	r0, r3, #4
 8019b64:	6030      	str	r0, [r6, #0]
 8019b66:	062e      	lsls	r6, r5, #24
 8019b68:	681b      	ldr	r3, [r3, #0]
 8019b6a:	d501      	bpl.n	8019b70 <_printf_i+0x1c0>
 8019b6c:	6019      	str	r1, [r3, #0]
 8019b6e:	e002      	b.n	8019b76 <_printf_i+0x1c6>
 8019b70:	0668      	lsls	r0, r5, #25
 8019b72:	d5fb      	bpl.n	8019b6c <_printf_i+0x1bc>
 8019b74:	8019      	strh	r1, [r3, #0]
 8019b76:	2300      	movs	r3, #0
 8019b78:	6123      	str	r3, [r4, #16]
 8019b7a:	4616      	mov	r6, r2
 8019b7c:	e7bc      	b.n	8019af8 <_printf_i+0x148>
 8019b7e:	6833      	ldr	r3, [r6, #0]
 8019b80:	1d1a      	adds	r2, r3, #4
 8019b82:	6032      	str	r2, [r6, #0]
 8019b84:	681e      	ldr	r6, [r3, #0]
 8019b86:	6862      	ldr	r2, [r4, #4]
 8019b88:	2100      	movs	r1, #0
 8019b8a:	4630      	mov	r0, r6
 8019b8c:	f7e6 fb48 	bl	8000220 <memchr>
 8019b90:	b108      	cbz	r0, 8019b96 <_printf_i+0x1e6>
 8019b92:	1b80      	subs	r0, r0, r6
 8019b94:	6060      	str	r0, [r4, #4]
 8019b96:	6863      	ldr	r3, [r4, #4]
 8019b98:	6123      	str	r3, [r4, #16]
 8019b9a:	2300      	movs	r3, #0
 8019b9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019ba0:	e7aa      	b.n	8019af8 <_printf_i+0x148>
 8019ba2:	6923      	ldr	r3, [r4, #16]
 8019ba4:	4632      	mov	r2, r6
 8019ba6:	4649      	mov	r1, r9
 8019ba8:	4640      	mov	r0, r8
 8019baa:	47d0      	blx	sl
 8019bac:	3001      	adds	r0, #1
 8019bae:	d0ad      	beq.n	8019b0c <_printf_i+0x15c>
 8019bb0:	6823      	ldr	r3, [r4, #0]
 8019bb2:	079b      	lsls	r3, r3, #30
 8019bb4:	d413      	bmi.n	8019bde <_printf_i+0x22e>
 8019bb6:	68e0      	ldr	r0, [r4, #12]
 8019bb8:	9b03      	ldr	r3, [sp, #12]
 8019bba:	4298      	cmp	r0, r3
 8019bbc:	bfb8      	it	lt
 8019bbe:	4618      	movlt	r0, r3
 8019bc0:	e7a6      	b.n	8019b10 <_printf_i+0x160>
 8019bc2:	2301      	movs	r3, #1
 8019bc4:	4632      	mov	r2, r6
 8019bc6:	4649      	mov	r1, r9
 8019bc8:	4640      	mov	r0, r8
 8019bca:	47d0      	blx	sl
 8019bcc:	3001      	adds	r0, #1
 8019bce:	d09d      	beq.n	8019b0c <_printf_i+0x15c>
 8019bd0:	3501      	adds	r5, #1
 8019bd2:	68e3      	ldr	r3, [r4, #12]
 8019bd4:	9903      	ldr	r1, [sp, #12]
 8019bd6:	1a5b      	subs	r3, r3, r1
 8019bd8:	42ab      	cmp	r3, r5
 8019bda:	dcf2      	bgt.n	8019bc2 <_printf_i+0x212>
 8019bdc:	e7eb      	b.n	8019bb6 <_printf_i+0x206>
 8019bde:	2500      	movs	r5, #0
 8019be0:	f104 0619 	add.w	r6, r4, #25
 8019be4:	e7f5      	b.n	8019bd2 <_printf_i+0x222>
 8019be6:	bf00      	nop
 8019be8:	080281e3 	.word	0x080281e3
 8019bec:	080281f4 	.word	0x080281f4

08019bf0 <__sflush_r>:
 8019bf0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8019bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019bf8:	0716      	lsls	r6, r2, #28
 8019bfa:	4605      	mov	r5, r0
 8019bfc:	460c      	mov	r4, r1
 8019bfe:	d454      	bmi.n	8019caa <__sflush_r+0xba>
 8019c00:	684b      	ldr	r3, [r1, #4]
 8019c02:	2b00      	cmp	r3, #0
 8019c04:	dc02      	bgt.n	8019c0c <__sflush_r+0x1c>
 8019c06:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8019c08:	2b00      	cmp	r3, #0
 8019c0a:	dd48      	ble.n	8019c9e <__sflush_r+0xae>
 8019c0c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8019c0e:	2e00      	cmp	r6, #0
 8019c10:	d045      	beq.n	8019c9e <__sflush_r+0xae>
 8019c12:	2300      	movs	r3, #0
 8019c14:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8019c18:	682f      	ldr	r7, [r5, #0]
 8019c1a:	6a21      	ldr	r1, [r4, #32]
 8019c1c:	602b      	str	r3, [r5, #0]
 8019c1e:	d030      	beq.n	8019c82 <__sflush_r+0x92>
 8019c20:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8019c22:	89a3      	ldrh	r3, [r4, #12]
 8019c24:	0759      	lsls	r1, r3, #29
 8019c26:	d505      	bpl.n	8019c34 <__sflush_r+0x44>
 8019c28:	6863      	ldr	r3, [r4, #4]
 8019c2a:	1ad2      	subs	r2, r2, r3
 8019c2c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8019c2e:	b10b      	cbz	r3, 8019c34 <__sflush_r+0x44>
 8019c30:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8019c32:	1ad2      	subs	r2, r2, r3
 8019c34:	2300      	movs	r3, #0
 8019c36:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8019c38:	6a21      	ldr	r1, [r4, #32]
 8019c3a:	4628      	mov	r0, r5
 8019c3c:	47b0      	blx	r6
 8019c3e:	1c43      	adds	r3, r0, #1
 8019c40:	89a3      	ldrh	r3, [r4, #12]
 8019c42:	d106      	bne.n	8019c52 <__sflush_r+0x62>
 8019c44:	6829      	ldr	r1, [r5, #0]
 8019c46:	291d      	cmp	r1, #29
 8019c48:	d82b      	bhi.n	8019ca2 <__sflush_r+0xb2>
 8019c4a:	4a2a      	ldr	r2, [pc, #168]	@ (8019cf4 <__sflush_r+0x104>)
 8019c4c:	410a      	asrs	r2, r1
 8019c4e:	07d6      	lsls	r6, r2, #31
 8019c50:	d427      	bmi.n	8019ca2 <__sflush_r+0xb2>
 8019c52:	2200      	movs	r2, #0
 8019c54:	6062      	str	r2, [r4, #4]
 8019c56:	04d9      	lsls	r1, r3, #19
 8019c58:	6922      	ldr	r2, [r4, #16]
 8019c5a:	6022      	str	r2, [r4, #0]
 8019c5c:	d504      	bpl.n	8019c68 <__sflush_r+0x78>
 8019c5e:	1c42      	adds	r2, r0, #1
 8019c60:	d101      	bne.n	8019c66 <__sflush_r+0x76>
 8019c62:	682b      	ldr	r3, [r5, #0]
 8019c64:	b903      	cbnz	r3, 8019c68 <__sflush_r+0x78>
 8019c66:	6560      	str	r0, [r4, #84]	@ 0x54
 8019c68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019c6a:	602f      	str	r7, [r5, #0]
 8019c6c:	b1b9      	cbz	r1, 8019c9e <__sflush_r+0xae>
 8019c6e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8019c72:	4299      	cmp	r1, r3
 8019c74:	d002      	beq.n	8019c7c <__sflush_r+0x8c>
 8019c76:	4628      	mov	r0, r5
 8019c78:	f7ff fa92 	bl	80191a0 <_free_r>
 8019c7c:	2300      	movs	r3, #0
 8019c7e:	6363      	str	r3, [r4, #52]	@ 0x34
 8019c80:	e00d      	b.n	8019c9e <__sflush_r+0xae>
 8019c82:	2301      	movs	r3, #1
 8019c84:	4628      	mov	r0, r5
 8019c86:	47b0      	blx	r6
 8019c88:	4602      	mov	r2, r0
 8019c8a:	1c50      	adds	r0, r2, #1
 8019c8c:	d1c9      	bne.n	8019c22 <__sflush_r+0x32>
 8019c8e:	682b      	ldr	r3, [r5, #0]
 8019c90:	2b00      	cmp	r3, #0
 8019c92:	d0c6      	beq.n	8019c22 <__sflush_r+0x32>
 8019c94:	2b1d      	cmp	r3, #29
 8019c96:	d001      	beq.n	8019c9c <__sflush_r+0xac>
 8019c98:	2b16      	cmp	r3, #22
 8019c9a:	d11e      	bne.n	8019cda <__sflush_r+0xea>
 8019c9c:	602f      	str	r7, [r5, #0]
 8019c9e:	2000      	movs	r0, #0
 8019ca0:	e022      	b.n	8019ce8 <__sflush_r+0xf8>
 8019ca2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019ca6:	b21b      	sxth	r3, r3
 8019ca8:	e01b      	b.n	8019ce2 <__sflush_r+0xf2>
 8019caa:	690f      	ldr	r7, [r1, #16]
 8019cac:	2f00      	cmp	r7, #0
 8019cae:	d0f6      	beq.n	8019c9e <__sflush_r+0xae>
 8019cb0:	0793      	lsls	r3, r2, #30
 8019cb2:	680e      	ldr	r6, [r1, #0]
 8019cb4:	bf08      	it	eq
 8019cb6:	694b      	ldreq	r3, [r1, #20]
 8019cb8:	600f      	str	r7, [r1, #0]
 8019cba:	bf18      	it	ne
 8019cbc:	2300      	movne	r3, #0
 8019cbe:	eba6 0807 	sub.w	r8, r6, r7
 8019cc2:	608b      	str	r3, [r1, #8]
 8019cc4:	f1b8 0f00 	cmp.w	r8, #0
 8019cc8:	dde9      	ble.n	8019c9e <__sflush_r+0xae>
 8019cca:	6a21      	ldr	r1, [r4, #32]
 8019ccc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8019cce:	4643      	mov	r3, r8
 8019cd0:	463a      	mov	r2, r7
 8019cd2:	4628      	mov	r0, r5
 8019cd4:	47b0      	blx	r6
 8019cd6:	2800      	cmp	r0, #0
 8019cd8:	dc08      	bgt.n	8019cec <__sflush_r+0xfc>
 8019cda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019cde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019ce2:	81a3      	strh	r3, [r4, #12]
 8019ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8019ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019cec:	4407      	add	r7, r0
 8019cee:	eba8 0800 	sub.w	r8, r8, r0
 8019cf2:	e7e7      	b.n	8019cc4 <__sflush_r+0xd4>
 8019cf4:	dfbffffe 	.word	0xdfbffffe

08019cf8 <_fflush_r>:
 8019cf8:	b538      	push	{r3, r4, r5, lr}
 8019cfa:	690b      	ldr	r3, [r1, #16]
 8019cfc:	4605      	mov	r5, r0
 8019cfe:	460c      	mov	r4, r1
 8019d00:	b913      	cbnz	r3, 8019d08 <_fflush_r+0x10>
 8019d02:	2500      	movs	r5, #0
 8019d04:	4628      	mov	r0, r5
 8019d06:	bd38      	pop	{r3, r4, r5, pc}
 8019d08:	b118      	cbz	r0, 8019d12 <_fflush_r+0x1a>
 8019d0a:	6a03      	ldr	r3, [r0, #32]
 8019d0c:	b90b      	cbnz	r3, 8019d12 <_fflush_r+0x1a>
 8019d0e:	f7fe ffe3 	bl	8018cd8 <__sinit>
 8019d12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019d16:	2b00      	cmp	r3, #0
 8019d18:	d0f3      	beq.n	8019d02 <_fflush_r+0xa>
 8019d1a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8019d1c:	07d0      	lsls	r0, r2, #31
 8019d1e:	d404      	bmi.n	8019d2a <_fflush_r+0x32>
 8019d20:	0599      	lsls	r1, r3, #22
 8019d22:	d402      	bmi.n	8019d2a <_fflush_r+0x32>
 8019d24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019d26:	f7ff fa0c 	bl	8019142 <__retarget_lock_acquire_recursive>
 8019d2a:	4628      	mov	r0, r5
 8019d2c:	4621      	mov	r1, r4
 8019d2e:	f7ff ff5f 	bl	8019bf0 <__sflush_r>
 8019d32:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8019d34:	07da      	lsls	r2, r3, #31
 8019d36:	4605      	mov	r5, r0
 8019d38:	d4e4      	bmi.n	8019d04 <_fflush_r+0xc>
 8019d3a:	89a3      	ldrh	r3, [r4, #12]
 8019d3c:	059b      	lsls	r3, r3, #22
 8019d3e:	d4e1      	bmi.n	8019d04 <_fflush_r+0xc>
 8019d40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019d42:	f7ff f9ff 	bl	8019144 <__retarget_lock_release_recursive>
 8019d46:	e7dd      	b.n	8019d04 <_fflush_r+0xc>

08019d48 <fiprintf>:
 8019d48:	b40e      	push	{r1, r2, r3}
 8019d4a:	b503      	push	{r0, r1, lr}
 8019d4c:	4601      	mov	r1, r0
 8019d4e:	ab03      	add	r3, sp, #12
 8019d50:	4805      	ldr	r0, [pc, #20]	@ (8019d68 <fiprintf+0x20>)
 8019d52:	f853 2b04 	ldr.w	r2, [r3], #4
 8019d56:	6800      	ldr	r0, [r0, #0]
 8019d58:	9301      	str	r3, [sp, #4]
 8019d5a:	f7ff fca3 	bl	80196a4 <_vfiprintf_r>
 8019d5e:	b002      	add	sp, #8
 8019d60:	f85d eb04 	ldr.w	lr, [sp], #4
 8019d64:	b003      	add	sp, #12
 8019d66:	4770      	bx	lr
 8019d68:	20000040 	.word	0x20000040

08019d6c <__swbuf_r>:
 8019d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d6e:	460e      	mov	r6, r1
 8019d70:	4614      	mov	r4, r2
 8019d72:	4605      	mov	r5, r0
 8019d74:	b118      	cbz	r0, 8019d7e <__swbuf_r+0x12>
 8019d76:	6a03      	ldr	r3, [r0, #32]
 8019d78:	b90b      	cbnz	r3, 8019d7e <__swbuf_r+0x12>
 8019d7a:	f7fe ffad 	bl	8018cd8 <__sinit>
 8019d7e:	69a3      	ldr	r3, [r4, #24]
 8019d80:	60a3      	str	r3, [r4, #8]
 8019d82:	89a3      	ldrh	r3, [r4, #12]
 8019d84:	071a      	lsls	r2, r3, #28
 8019d86:	d501      	bpl.n	8019d8c <__swbuf_r+0x20>
 8019d88:	6923      	ldr	r3, [r4, #16]
 8019d8a:	b943      	cbnz	r3, 8019d9e <__swbuf_r+0x32>
 8019d8c:	4621      	mov	r1, r4
 8019d8e:	4628      	mov	r0, r5
 8019d90:	f000 f82a 	bl	8019de8 <__swsetup_r>
 8019d94:	b118      	cbz	r0, 8019d9e <__swbuf_r+0x32>
 8019d96:	f04f 37ff 	mov.w	r7, #4294967295
 8019d9a:	4638      	mov	r0, r7
 8019d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019d9e:	6823      	ldr	r3, [r4, #0]
 8019da0:	6922      	ldr	r2, [r4, #16]
 8019da2:	1a98      	subs	r0, r3, r2
 8019da4:	6963      	ldr	r3, [r4, #20]
 8019da6:	b2f6      	uxtb	r6, r6
 8019da8:	4283      	cmp	r3, r0
 8019daa:	4637      	mov	r7, r6
 8019dac:	dc05      	bgt.n	8019dba <__swbuf_r+0x4e>
 8019dae:	4621      	mov	r1, r4
 8019db0:	4628      	mov	r0, r5
 8019db2:	f7ff ffa1 	bl	8019cf8 <_fflush_r>
 8019db6:	2800      	cmp	r0, #0
 8019db8:	d1ed      	bne.n	8019d96 <__swbuf_r+0x2a>
 8019dba:	68a3      	ldr	r3, [r4, #8]
 8019dbc:	3b01      	subs	r3, #1
 8019dbe:	60a3      	str	r3, [r4, #8]
 8019dc0:	6823      	ldr	r3, [r4, #0]
 8019dc2:	1c5a      	adds	r2, r3, #1
 8019dc4:	6022      	str	r2, [r4, #0]
 8019dc6:	701e      	strb	r6, [r3, #0]
 8019dc8:	6962      	ldr	r2, [r4, #20]
 8019dca:	1c43      	adds	r3, r0, #1
 8019dcc:	429a      	cmp	r2, r3
 8019dce:	d004      	beq.n	8019dda <__swbuf_r+0x6e>
 8019dd0:	89a3      	ldrh	r3, [r4, #12]
 8019dd2:	07db      	lsls	r3, r3, #31
 8019dd4:	d5e1      	bpl.n	8019d9a <__swbuf_r+0x2e>
 8019dd6:	2e0a      	cmp	r6, #10
 8019dd8:	d1df      	bne.n	8019d9a <__swbuf_r+0x2e>
 8019dda:	4621      	mov	r1, r4
 8019ddc:	4628      	mov	r0, r5
 8019dde:	f7ff ff8b 	bl	8019cf8 <_fflush_r>
 8019de2:	2800      	cmp	r0, #0
 8019de4:	d0d9      	beq.n	8019d9a <__swbuf_r+0x2e>
 8019de6:	e7d6      	b.n	8019d96 <__swbuf_r+0x2a>

08019de8 <__swsetup_r>:
 8019de8:	b538      	push	{r3, r4, r5, lr}
 8019dea:	4b29      	ldr	r3, [pc, #164]	@ (8019e90 <__swsetup_r+0xa8>)
 8019dec:	4605      	mov	r5, r0
 8019dee:	6818      	ldr	r0, [r3, #0]
 8019df0:	460c      	mov	r4, r1
 8019df2:	b118      	cbz	r0, 8019dfc <__swsetup_r+0x14>
 8019df4:	6a03      	ldr	r3, [r0, #32]
 8019df6:	b90b      	cbnz	r3, 8019dfc <__swsetup_r+0x14>
 8019df8:	f7fe ff6e 	bl	8018cd8 <__sinit>
 8019dfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019e00:	0719      	lsls	r1, r3, #28
 8019e02:	d422      	bmi.n	8019e4a <__swsetup_r+0x62>
 8019e04:	06da      	lsls	r2, r3, #27
 8019e06:	d407      	bmi.n	8019e18 <__swsetup_r+0x30>
 8019e08:	2209      	movs	r2, #9
 8019e0a:	602a      	str	r2, [r5, #0]
 8019e0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019e10:	81a3      	strh	r3, [r4, #12]
 8019e12:	f04f 30ff 	mov.w	r0, #4294967295
 8019e16:	e033      	b.n	8019e80 <__swsetup_r+0x98>
 8019e18:	0758      	lsls	r0, r3, #29
 8019e1a:	d512      	bpl.n	8019e42 <__swsetup_r+0x5a>
 8019e1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019e1e:	b141      	cbz	r1, 8019e32 <__swsetup_r+0x4a>
 8019e20:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8019e24:	4299      	cmp	r1, r3
 8019e26:	d002      	beq.n	8019e2e <__swsetup_r+0x46>
 8019e28:	4628      	mov	r0, r5
 8019e2a:	f7ff f9b9 	bl	80191a0 <_free_r>
 8019e2e:	2300      	movs	r3, #0
 8019e30:	6363      	str	r3, [r4, #52]	@ 0x34
 8019e32:	89a3      	ldrh	r3, [r4, #12]
 8019e34:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8019e38:	81a3      	strh	r3, [r4, #12]
 8019e3a:	2300      	movs	r3, #0
 8019e3c:	6063      	str	r3, [r4, #4]
 8019e3e:	6923      	ldr	r3, [r4, #16]
 8019e40:	6023      	str	r3, [r4, #0]
 8019e42:	89a3      	ldrh	r3, [r4, #12]
 8019e44:	f043 0308 	orr.w	r3, r3, #8
 8019e48:	81a3      	strh	r3, [r4, #12]
 8019e4a:	6923      	ldr	r3, [r4, #16]
 8019e4c:	b94b      	cbnz	r3, 8019e62 <__swsetup_r+0x7a>
 8019e4e:	89a3      	ldrh	r3, [r4, #12]
 8019e50:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8019e54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019e58:	d003      	beq.n	8019e62 <__swsetup_r+0x7a>
 8019e5a:	4621      	mov	r1, r4
 8019e5c:	4628      	mov	r0, r5
 8019e5e:	f000 f884 	bl	8019f6a <__smakebuf_r>
 8019e62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019e66:	f013 0201 	ands.w	r2, r3, #1
 8019e6a:	d00a      	beq.n	8019e82 <__swsetup_r+0x9a>
 8019e6c:	2200      	movs	r2, #0
 8019e6e:	60a2      	str	r2, [r4, #8]
 8019e70:	6962      	ldr	r2, [r4, #20]
 8019e72:	4252      	negs	r2, r2
 8019e74:	61a2      	str	r2, [r4, #24]
 8019e76:	6922      	ldr	r2, [r4, #16]
 8019e78:	b942      	cbnz	r2, 8019e8c <__swsetup_r+0xa4>
 8019e7a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8019e7e:	d1c5      	bne.n	8019e0c <__swsetup_r+0x24>
 8019e80:	bd38      	pop	{r3, r4, r5, pc}
 8019e82:	0799      	lsls	r1, r3, #30
 8019e84:	bf58      	it	pl
 8019e86:	6962      	ldrpl	r2, [r4, #20]
 8019e88:	60a2      	str	r2, [r4, #8]
 8019e8a:	e7f4      	b.n	8019e76 <__swsetup_r+0x8e>
 8019e8c:	2000      	movs	r0, #0
 8019e8e:	e7f7      	b.n	8019e80 <__swsetup_r+0x98>
 8019e90:	20000040 	.word	0x20000040

08019e94 <_sbrk_r>:
 8019e94:	b538      	push	{r3, r4, r5, lr}
 8019e96:	4d06      	ldr	r5, [pc, #24]	@ (8019eb0 <_sbrk_r+0x1c>)
 8019e98:	2300      	movs	r3, #0
 8019e9a:	4604      	mov	r4, r0
 8019e9c:	4608      	mov	r0, r1
 8019e9e:	602b      	str	r3, [r5, #0]
 8019ea0:	f7e6 ff44 	bl	8000d2c <_sbrk>
 8019ea4:	1c43      	adds	r3, r0, #1
 8019ea6:	d102      	bne.n	8019eae <_sbrk_r+0x1a>
 8019ea8:	682b      	ldr	r3, [r5, #0]
 8019eaa:	b103      	cbz	r3, 8019eae <_sbrk_r+0x1a>
 8019eac:	6023      	str	r3, [r4, #0]
 8019eae:	bd38      	pop	{r3, r4, r5, pc}
 8019eb0:	20011144 	.word	0x20011144

08019eb4 <abort>:
 8019eb4:	b508      	push	{r3, lr}
 8019eb6:	2006      	movs	r0, #6
 8019eb8:	f000 f8bc 	bl	801a034 <raise>
 8019ebc:	2001      	movs	r0, #1
 8019ebe:	f7e6 febd 	bl	8000c3c <_exit>

08019ec2 <_realloc_r>:
 8019ec2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019ec6:	4680      	mov	r8, r0
 8019ec8:	4615      	mov	r5, r2
 8019eca:	460c      	mov	r4, r1
 8019ecc:	b921      	cbnz	r1, 8019ed8 <_realloc_r+0x16>
 8019ece:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019ed2:	4611      	mov	r1, r2
 8019ed4:	f7ff b9d8 	b.w	8019288 <_malloc_r>
 8019ed8:	b92a      	cbnz	r2, 8019ee6 <_realloc_r+0x24>
 8019eda:	f7ff f961 	bl	80191a0 <_free_r>
 8019ede:	2400      	movs	r4, #0
 8019ee0:	4620      	mov	r0, r4
 8019ee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019ee6:	f000 f8e3 	bl	801a0b0 <_malloc_usable_size_r>
 8019eea:	4285      	cmp	r5, r0
 8019eec:	4606      	mov	r6, r0
 8019eee:	d802      	bhi.n	8019ef6 <_realloc_r+0x34>
 8019ef0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8019ef4:	d8f4      	bhi.n	8019ee0 <_realloc_r+0x1e>
 8019ef6:	4629      	mov	r1, r5
 8019ef8:	4640      	mov	r0, r8
 8019efa:	f7ff f9c5 	bl	8019288 <_malloc_r>
 8019efe:	4607      	mov	r7, r0
 8019f00:	2800      	cmp	r0, #0
 8019f02:	d0ec      	beq.n	8019ede <_realloc_r+0x1c>
 8019f04:	42b5      	cmp	r5, r6
 8019f06:	462a      	mov	r2, r5
 8019f08:	4621      	mov	r1, r4
 8019f0a:	bf28      	it	cs
 8019f0c:	4632      	movcs	r2, r6
 8019f0e:	f7ff f91a 	bl	8019146 <memcpy>
 8019f12:	4621      	mov	r1, r4
 8019f14:	4640      	mov	r0, r8
 8019f16:	f7ff f943 	bl	80191a0 <_free_r>
 8019f1a:	463c      	mov	r4, r7
 8019f1c:	e7e0      	b.n	8019ee0 <_realloc_r+0x1e>

08019f1e <__swhatbuf_r>:
 8019f1e:	b570      	push	{r4, r5, r6, lr}
 8019f20:	460c      	mov	r4, r1
 8019f22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019f26:	2900      	cmp	r1, #0
 8019f28:	b096      	sub	sp, #88	@ 0x58
 8019f2a:	4615      	mov	r5, r2
 8019f2c:	461e      	mov	r6, r3
 8019f2e:	da0d      	bge.n	8019f4c <__swhatbuf_r+0x2e>
 8019f30:	89a3      	ldrh	r3, [r4, #12]
 8019f32:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8019f36:	f04f 0100 	mov.w	r1, #0
 8019f3a:	bf14      	ite	ne
 8019f3c:	2340      	movne	r3, #64	@ 0x40
 8019f3e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8019f42:	2000      	movs	r0, #0
 8019f44:	6031      	str	r1, [r6, #0]
 8019f46:	602b      	str	r3, [r5, #0]
 8019f48:	b016      	add	sp, #88	@ 0x58
 8019f4a:	bd70      	pop	{r4, r5, r6, pc}
 8019f4c:	466a      	mov	r2, sp
 8019f4e:	f000 f879 	bl	801a044 <_fstat_r>
 8019f52:	2800      	cmp	r0, #0
 8019f54:	dbec      	blt.n	8019f30 <__swhatbuf_r+0x12>
 8019f56:	9901      	ldr	r1, [sp, #4]
 8019f58:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8019f5c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8019f60:	4259      	negs	r1, r3
 8019f62:	4159      	adcs	r1, r3
 8019f64:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8019f68:	e7eb      	b.n	8019f42 <__swhatbuf_r+0x24>

08019f6a <__smakebuf_r>:
 8019f6a:	898b      	ldrh	r3, [r1, #12]
 8019f6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019f6e:	079d      	lsls	r5, r3, #30
 8019f70:	4606      	mov	r6, r0
 8019f72:	460c      	mov	r4, r1
 8019f74:	d507      	bpl.n	8019f86 <__smakebuf_r+0x1c>
 8019f76:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8019f7a:	6023      	str	r3, [r4, #0]
 8019f7c:	6123      	str	r3, [r4, #16]
 8019f7e:	2301      	movs	r3, #1
 8019f80:	6163      	str	r3, [r4, #20]
 8019f82:	b003      	add	sp, #12
 8019f84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019f86:	ab01      	add	r3, sp, #4
 8019f88:	466a      	mov	r2, sp
 8019f8a:	f7ff ffc8 	bl	8019f1e <__swhatbuf_r>
 8019f8e:	9f00      	ldr	r7, [sp, #0]
 8019f90:	4605      	mov	r5, r0
 8019f92:	4639      	mov	r1, r7
 8019f94:	4630      	mov	r0, r6
 8019f96:	f7ff f977 	bl	8019288 <_malloc_r>
 8019f9a:	b948      	cbnz	r0, 8019fb0 <__smakebuf_r+0x46>
 8019f9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019fa0:	059a      	lsls	r2, r3, #22
 8019fa2:	d4ee      	bmi.n	8019f82 <__smakebuf_r+0x18>
 8019fa4:	f023 0303 	bic.w	r3, r3, #3
 8019fa8:	f043 0302 	orr.w	r3, r3, #2
 8019fac:	81a3      	strh	r3, [r4, #12]
 8019fae:	e7e2      	b.n	8019f76 <__smakebuf_r+0xc>
 8019fb0:	89a3      	ldrh	r3, [r4, #12]
 8019fb2:	6020      	str	r0, [r4, #0]
 8019fb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019fb8:	81a3      	strh	r3, [r4, #12]
 8019fba:	9b01      	ldr	r3, [sp, #4]
 8019fbc:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8019fc0:	b15b      	cbz	r3, 8019fda <__smakebuf_r+0x70>
 8019fc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019fc6:	4630      	mov	r0, r6
 8019fc8:	f000 f84e 	bl	801a068 <_isatty_r>
 8019fcc:	b128      	cbz	r0, 8019fda <__smakebuf_r+0x70>
 8019fce:	89a3      	ldrh	r3, [r4, #12]
 8019fd0:	f023 0303 	bic.w	r3, r3, #3
 8019fd4:	f043 0301 	orr.w	r3, r3, #1
 8019fd8:	81a3      	strh	r3, [r4, #12]
 8019fda:	89a3      	ldrh	r3, [r4, #12]
 8019fdc:	431d      	orrs	r5, r3
 8019fde:	81a5      	strh	r5, [r4, #12]
 8019fe0:	e7cf      	b.n	8019f82 <__smakebuf_r+0x18>

08019fe2 <_raise_r>:
 8019fe2:	291f      	cmp	r1, #31
 8019fe4:	b538      	push	{r3, r4, r5, lr}
 8019fe6:	4605      	mov	r5, r0
 8019fe8:	460c      	mov	r4, r1
 8019fea:	d904      	bls.n	8019ff6 <_raise_r+0x14>
 8019fec:	2316      	movs	r3, #22
 8019fee:	6003      	str	r3, [r0, #0]
 8019ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8019ff4:	bd38      	pop	{r3, r4, r5, pc}
 8019ff6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8019ff8:	b112      	cbz	r2, 801a000 <_raise_r+0x1e>
 8019ffa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019ffe:	b94b      	cbnz	r3, 801a014 <_raise_r+0x32>
 801a000:	4628      	mov	r0, r5
 801a002:	f000 f853 	bl	801a0ac <_getpid_r>
 801a006:	4622      	mov	r2, r4
 801a008:	4601      	mov	r1, r0
 801a00a:	4628      	mov	r0, r5
 801a00c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a010:	f000 b83a 	b.w	801a088 <_kill_r>
 801a014:	2b01      	cmp	r3, #1
 801a016:	d00a      	beq.n	801a02e <_raise_r+0x4c>
 801a018:	1c59      	adds	r1, r3, #1
 801a01a:	d103      	bne.n	801a024 <_raise_r+0x42>
 801a01c:	2316      	movs	r3, #22
 801a01e:	6003      	str	r3, [r0, #0]
 801a020:	2001      	movs	r0, #1
 801a022:	e7e7      	b.n	8019ff4 <_raise_r+0x12>
 801a024:	2100      	movs	r1, #0
 801a026:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801a02a:	4620      	mov	r0, r4
 801a02c:	4798      	blx	r3
 801a02e:	2000      	movs	r0, #0
 801a030:	e7e0      	b.n	8019ff4 <_raise_r+0x12>
	...

0801a034 <raise>:
 801a034:	4b02      	ldr	r3, [pc, #8]	@ (801a040 <raise+0xc>)
 801a036:	4601      	mov	r1, r0
 801a038:	6818      	ldr	r0, [r3, #0]
 801a03a:	f7ff bfd2 	b.w	8019fe2 <_raise_r>
 801a03e:	bf00      	nop
 801a040:	20000040 	.word	0x20000040

0801a044 <_fstat_r>:
 801a044:	b538      	push	{r3, r4, r5, lr}
 801a046:	4d07      	ldr	r5, [pc, #28]	@ (801a064 <_fstat_r+0x20>)
 801a048:	2300      	movs	r3, #0
 801a04a:	4604      	mov	r4, r0
 801a04c:	4608      	mov	r0, r1
 801a04e:	4611      	mov	r1, r2
 801a050:	602b      	str	r3, [r5, #0]
 801a052:	f7e6 fe43 	bl	8000cdc <_fstat>
 801a056:	1c43      	adds	r3, r0, #1
 801a058:	d102      	bne.n	801a060 <_fstat_r+0x1c>
 801a05a:	682b      	ldr	r3, [r5, #0]
 801a05c:	b103      	cbz	r3, 801a060 <_fstat_r+0x1c>
 801a05e:	6023      	str	r3, [r4, #0]
 801a060:	bd38      	pop	{r3, r4, r5, pc}
 801a062:	bf00      	nop
 801a064:	20011144 	.word	0x20011144

0801a068 <_isatty_r>:
 801a068:	b538      	push	{r3, r4, r5, lr}
 801a06a:	4d06      	ldr	r5, [pc, #24]	@ (801a084 <_isatty_r+0x1c>)
 801a06c:	2300      	movs	r3, #0
 801a06e:	4604      	mov	r4, r0
 801a070:	4608      	mov	r0, r1
 801a072:	602b      	str	r3, [r5, #0]
 801a074:	f7e6 fe42 	bl	8000cfc <_isatty>
 801a078:	1c43      	adds	r3, r0, #1
 801a07a:	d102      	bne.n	801a082 <_isatty_r+0x1a>
 801a07c:	682b      	ldr	r3, [r5, #0]
 801a07e:	b103      	cbz	r3, 801a082 <_isatty_r+0x1a>
 801a080:	6023      	str	r3, [r4, #0]
 801a082:	bd38      	pop	{r3, r4, r5, pc}
 801a084:	20011144 	.word	0x20011144

0801a088 <_kill_r>:
 801a088:	b538      	push	{r3, r4, r5, lr}
 801a08a:	4d07      	ldr	r5, [pc, #28]	@ (801a0a8 <_kill_r+0x20>)
 801a08c:	2300      	movs	r3, #0
 801a08e:	4604      	mov	r4, r0
 801a090:	4608      	mov	r0, r1
 801a092:	4611      	mov	r1, r2
 801a094:	602b      	str	r3, [r5, #0]
 801a096:	f7e6 fdbf 	bl	8000c18 <_kill>
 801a09a:	1c43      	adds	r3, r0, #1
 801a09c:	d102      	bne.n	801a0a4 <_kill_r+0x1c>
 801a09e:	682b      	ldr	r3, [r5, #0]
 801a0a0:	b103      	cbz	r3, 801a0a4 <_kill_r+0x1c>
 801a0a2:	6023      	str	r3, [r4, #0]
 801a0a4:	bd38      	pop	{r3, r4, r5, pc}
 801a0a6:	bf00      	nop
 801a0a8:	20011144 	.word	0x20011144

0801a0ac <_getpid_r>:
 801a0ac:	f7e6 bdac 	b.w	8000c08 <_getpid>

0801a0b0 <_malloc_usable_size_r>:
 801a0b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a0b4:	1f18      	subs	r0, r3, #4
 801a0b6:	2b00      	cmp	r3, #0
 801a0b8:	bfbc      	itt	lt
 801a0ba:	580b      	ldrlt	r3, [r1, r0]
 801a0bc:	18c0      	addlt	r0, r0, r3
 801a0be:	4770      	bx	lr

0801a0c0 <_init>:
 801a0c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a0c2:	bf00      	nop
 801a0c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a0c6:	bc08      	pop	{r3}
 801a0c8:	469e      	mov	lr, r3
 801a0ca:	4770      	bx	lr

0801a0cc <_fini>:
 801a0cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a0ce:	bf00      	nop
 801a0d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a0d2:	bc08      	pop	{r3}
 801a0d4:	469e      	mov	lr, r3
 801a0d6:	4770      	bx	lr
