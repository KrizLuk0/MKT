
CVIKA4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bd4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08003c94  08003c94  00004c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003da4  08003da4  00005010  2**0
                  CONTENTS
  4 .ARM          00000000  08003da4  08003da4  00005010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003da4  08003da4  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003da4  08003da4  00004da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003da8  08003da8  00004da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08003dac  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  20000010  08003dbc  00005010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  08003dbc  00005094  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004c4c  00000000  00000000  00005038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000149e  00000000  00000000  00009c84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004d0  00000000  00000000  0000b128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000385  00000000  00000000  0000b5f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000eb80  00000000  00000000  0000b97d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006e3a  00000000  00000000  0001a4fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00057c4d  00000000  00000000  00021337  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00078f84  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000111c  00000000  00000000  00078fc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  0007a0e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003c7c 	.word	0x08003c7c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08003c7c 	.word	0x08003c7c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <__aeabi_d2uiz>:
 80003f4:	b570      	push	{r4, r5, r6, lr}
 80003f6:	2200      	movs	r2, #0
 80003f8:	4b0c      	ldr	r3, [pc, #48]	@ (800042c <__aeabi_d2uiz+0x38>)
 80003fa:	0004      	movs	r4, r0
 80003fc:	000d      	movs	r5, r1
 80003fe:	f001 fa29 	bl	8001854 <__aeabi_dcmpge>
 8000402:	2800      	cmp	r0, #0
 8000404:	d104      	bne.n	8000410 <__aeabi_d2uiz+0x1c>
 8000406:	0020      	movs	r0, r4
 8000408:	0029      	movs	r1, r5
 800040a:	f001 f98f 	bl	800172c <__aeabi_d2iz>
 800040e:	bd70      	pop	{r4, r5, r6, pc}
 8000410:	4b06      	ldr	r3, [pc, #24]	@ (800042c <__aeabi_d2uiz+0x38>)
 8000412:	2200      	movs	r2, #0
 8000414:	0020      	movs	r0, r4
 8000416:	0029      	movs	r1, r5
 8000418:	f000 fdec 	bl	8000ff4 <__aeabi_dsub>
 800041c:	f001 f986 	bl	800172c <__aeabi_d2iz>
 8000420:	2380      	movs	r3, #128	@ 0x80
 8000422:	061b      	lsls	r3, r3, #24
 8000424:	469c      	mov	ip, r3
 8000426:	4460      	add	r0, ip
 8000428:	e7f1      	b.n	800040e <__aeabi_d2uiz+0x1a>
 800042a:	46c0      	nop			@ (mov r8, r8)
 800042c:	41e00000 	.word	0x41e00000

08000430 <__aeabi_ddiv>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	46de      	mov	lr, fp
 8000434:	4645      	mov	r5, r8
 8000436:	4657      	mov	r7, sl
 8000438:	464e      	mov	r6, r9
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	b087      	sub	sp, #28
 800043e:	9200      	str	r2, [sp, #0]
 8000440:	9301      	str	r3, [sp, #4]
 8000442:	030b      	lsls	r3, r1, #12
 8000444:	0b1b      	lsrs	r3, r3, #12
 8000446:	469b      	mov	fp, r3
 8000448:	0fca      	lsrs	r2, r1, #31
 800044a:	004b      	lsls	r3, r1, #1
 800044c:	0004      	movs	r4, r0
 800044e:	4680      	mov	r8, r0
 8000450:	0d5b      	lsrs	r3, r3, #21
 8000452:	9202      	str	r2, [sp, #8]
 8000454:	d100      	bne.n	8000458 <__aeabi_ddiv+0x28>
 8000456:	e16a      	b.n	800072e <__aeabi_ddiv+0x2fe>
 8000458:	4ad4      	ldr	r2, [pc, #848]	@ (80007ac <__aeabi_ddiv+0x37c>)
 800045a:	4293      	cmp	r3, r2
 800045c:	d100      	bne.n	8000460 <__aeabi_ddiv+0x30>
 800045e:	e18c      	b.n	800077a <__aeabi_ddiv+0x34a>
 8000460:	4659      	mov	r1, fp
 8000462:	0f42      	lsrs	r2, r0, #29
 8000464:	00c9      	lsls	r1, r1, #3
 8000466:	430a      	orrs	r2, r1
 8000468:	2180      	movs	r1, #128	@ 0x80
 800046a:	0409      	lsls	r1, r1, #16
 800046c:	4311      	orrs	r1, r2
 800046e:	00c2      	lsls	r2, r0, #3
 8000470:	4690      	mov	r8, r2
 8000472:	4acf      	ldr	r2, [pc, #828]	@ (80007b0 <__aeabi_ddiv+0x380>)
 8000474:	4689      	mov	r9, r1
 8000476:	4692      	mov	sl, r2
 8000478:	449a      	add	sl, r3
 800047a:	2300      	movs	r3, #0
 800047c:	2400      	movs	r4, #0
 800047e:	9303      	str	r3, [sp, #12]
 8000480:	9e00      	ldr	r6, [sp, #0]
 8000482:	9f01      	ldr	r7, [sp, #4]
 8000484:	033b      	lsls	r3, r7, #12
 8000486:	0b1b      	lsrs	r3, r3, #12
 8000488:	469b      	mov	fp, r3
 800048a:	007b      	lsls	r3, r7, #1
 800048c:	0030      	movs	r0, r6
 800048e:	0d5b      	lsrs	r3, r3, #21
 8000490:	0ffd      	lsrs	r5, r7, #31
 8000492:	2b00      	cmp	r3, #0
 8000494:	d100      	bne.n	8000498 <__aeabi_ddiv+0x68>
 8000496:	e128      	b.n	80006ea <__aeabi_ddiv+0x2ba>
 8000498:	4ac4      	ldr	r2, [pc, #784]	@ (80007ac <__aeabi_ddiv+0x37c>)
 800049a:	4293      	cmp	r3, r2
 800049c:	d100      	bne.n	80004a0 <__aeabi_ddiv+0x70>
 800049e:	e177      	b.n	8000790 <__aeabi_ddiv+0x360>
 80004a0:	4659      	mov	r1, fp
 80004a2:	0f72      	lsrs	r2, r6, #29
 80004a4:	00c9      	lsls	r1, r1, #3
 80004a6:	430a      	orrs	r2, r1
 80004a8:	2180      	movs	r1, #128	@ 0x80
 80004aa:	0409      	lsls	r1, r1, #16
 80004ac:	4311      	orrs	r1, r2
 80004ae:	468b      	mov	fp, r1
 80004b0:	49bf      	ldr	r1, [pc, #764]	@ (80007b0 <__aeabi_ddiv+0x380>)
 80004b2:	00f2      	lsls	r2, r6, #3
 80004b4:	468c      	mov	ip, r1
 80004b6:	4651      	mov	r1, sl
 80004b8:	4463      	add	r3, ip
 80004ba:	1acb      	subs	r3, r1, r3
 80004bc:	469a      	mov	sl, r3
 80004be:	2300      	movs	r3, #0
 80004c0:	9e02      	ldr	r6, [sp, #8]
 80004c2:	406e      	eors	r6, r5
 80004c4:	2c0f      	cmp	r4, #15
 80004c6:	d827      	bhi.n	8000518 <__aeabi_ddiv+0xe8>
 80004c8:	49ba      	ldr	r1, [pc, #744]	@ (80007b4 <__aeabi_ddiv+0x384>)
 80004ca:	00a4      	lsls	r4, r4, #2
 80004cc:	5909      	ldr	r1, [r1, r4]
 80004ce:	468f      	mov	pc, r1
 80004d0:	46cb      	mov	fp, r9
 80004d2:	4642      	mov	r2, r8
 80004d4:	9e02      	ldr	r6, [sp, #8]
 80004d6:	9b03      	ldr	r3, [sp, #12]
 80004d8:	2b02      	cmp	r3, #2
 80004da:	d016      	beq.n	800050a <__aeabi_ddiv+0xda>
 80004dc:	2b03      	cmp	r3, #3
 80004de:	d100      	bne.n	80004e2 <__aeabi_ddiv+0xb2>
 80004e0:	e2a6      	b.n	8000a30 <__aeabi_ddiv+0x600>
 80004e2:	2b01      	cmp	r3, #1
 80004e4:	d000      	beq.n	80004e8 <__aeabi_ddiv+0xb8>
 80004e6:	e0df      	b.n	80006a8 <__aeabi_ddiv+0x278>
 80004e8:	2200      	movs	r2, #0
 80004ea:	2300      	movs	r3, #0
 80004ec:	2400      	movs	r4, #0
 80004ee:	4690      	mov	r8, r2
 80004f0:	051b      	lsls	r3, r3, #20
 80004f2:	4323      	orrs	r3, r4
 80004f4:	07f6      	lsls	r6, r6, #31
 80004f6:	4333      	orrs	r3, r6
 80004f8:	4640      	mov	r0, r8
 80004fa:	0019      	movs	r1, r3
 80004fc:	b007      	add	sp, #28
 80004fe:	bcf0      	pop	{r4, r5, r6, r7}
 8000500:	46bb      	mov	fp, r7
 8000502:	46b2      	mov	sl, r6
 8000504:	46a9      	mov	r9, r5
 8000506:	46a0      	mov	r8, r4
 8000508:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800050a:	2200      	movs	r2, #0
 800050c:	2400      	movs	r4, #0
 800050e:	4690      	mov	r8, r2
 8000510:	4ba6      	ldr	r3, [pc, #664]	@ (80007ac <__aeabi_ddiv+0x37c>)
 8000512:	e7ed      	b.n	80004f0 <__aeabi_ddiv+0xc0>
 8000514:	002e      	movs	r6, r5
 8000516:	e7df      	b.n	80004d8 <__aeabi_ddiv+0xa8>
 8000518:	45cb      	cmp	fp, r9
 800051a:	d200      	bcs.n	800051e <__aeabi_ddiv+0xee>
 800051c:	e1d4      	b.n	80008c8 <__aeabi_ddiv+0x498>
 800051e:	d100      	bne.n	8000522 <__aeabi_ddiv+0xf2>
 8000520:	e1cf      	b.n	80008c2 <__aeabi_ddiv+0x492>
 8000522:	2301      	movs	r3, #1
 8000524:	425b      	negs	r3, r3
 8000526:	469c      	mov	ip, r3
 8000528:	4644      	mov	r4, r8
 800052a:	4648      	mov	r0, r9
 800052c:	2700      	movs	r7, #0
 800052e:	44e2      	add	sl, ip
 8000530:	465b      	mov	r3, fp
 8000532:	0e15      	lsrs	r5, r2, #24
 8000534:	021b      	lsls	r3, r3, #8
 8000536:	431d      	orrs	r5, r3
 8000538:	0c19      	lsrs	r1, r3, #16
 800053a:	042b      	lsls	r3, r5, #16
 800053c:	0212      	lsls	r2, r2, #8
 800053e:	9500      	str	r5, [sp, #0]
 8000540:	0c1d      	lsrs	r5, r3, #16
 8000542:	4691      	mov	r9, r2
 8000544:	9102      	str	r1, [sp, #8]
 8000546:	9503      	str	r5, [sp, #12]
 8000548:	f7ff fe64 	bl	8000214 <__aeabi_uidivmod>
 800054c:	0002      	movs	r2, r0
 800054e:	436a      	muls	r2, r5
 8000550:	040b      	lsls	r3, r1, #16
 8000552:	0c21      	lsrs	r1, r4, #16
 8000554:	4680      	mov	r8, r0
 8000556:	4319      	orrs	r1, r3
 8000558:	428a      	cmp	r2, r1
 800055a:	d909      	bls.n	8000570 <__aeabi_ddiv+0x140>
 800055c:	9d00      	ldr	r5, [sp, #0]
 800055e:	2301      	movs	r3, #1
 8000560:	46ac      	mov	ip, r5
 8000562:	425b      	negs	r3, r3
 8000564:	4461      	add	r1, ip
 8000566:	469c      	mov	ip, r3
 8000568:	44e0      	add	r8, ip
 800056a:	428d      	cmp	r5, r1
 800056c:	d800      	bhi.n	8000570 <__aeabi_ddiv+0x140>
 800056e:	e1fb      	b.n	8000968 <__aeabi_ddiv+0x538>
 8000570:	1a88      	subs	r0, r1, r2
 8000572:	9902      	ldr	r1, [sp, #8]
 8000574:	f7ff fe4e 	bl	8000214 <__aeabi_uidivmod>
 8000578:	9a03      	ldr	r2, [sp, #12]
 800057a:	0424      	lsls	r4, r4, #16
 800057c:	4342      	muls	r2, r0
 800057e:	0409      	lsls	r1, r1, #16
 8000580:	0c24      	lsrs	r4, r4, #16
 8000582:	0003      	movs	r3, r0
 8000584:	430c      	orrs	r4, r1
 8000586:	42a2      	cmp	r2, r4
 8000588:	d906      	bls.n	8000598 <__aeabi_ddiv+0x168>
 800058a:	9900      	ldr	r1, [sp, #0]
 800058c:	3b01      	subs	r3, #1
 800058e:	468c      	mov	ip, r1
 8000590:	4464      	add	r4, ip
 8000592:	42a1      	cmp	r1, r4
 8000594:	d800      	bhi.n	8000598 <__aeabi_ddiv+0x168>
 8000596:	e1e1      	b.n	800095c <__aeabi_ddiv+0x52c>
 8000598:	1aa0      	subs	r0, r4, r2
 800059a:	4642      	mov	r2, r8
 800059c:	0412      	lsls	r2, r2, #16
 800059e:	431a      	orrs	r2, r3
 80005a0:	4693      	mov	fp, r2
 80005a2:	464b      	mov	r3, r9
 80005a4:	4659      	mov	r1, fp
 80005a6:	0c1b      	lsrs	r3, r3, #16
 80005a8:	001d      	movs	r5, r3
 80005aa:	9304      	str	r3, [sp, #16]
 80005ac:	040b      	lsls	r3, r1, #16
 80005ae:	4649      	mov	r1, r9
 80005b0:	0409      	lsls	r1, r1, #16
 80005b2:	0c09      	lsrs	r1, r1, #16
 80005b4:	000c      	movs	r4, r1
 80005b6:	0c1b      	lsrs	r3, r3, #16
 80005b8:	435c      	muls	r4, r3
 80005ba:	0c12      	lsrs	r2, r2, #16
 80005bc:	436b      	muls	r3, r5
 80005be:	4688      	mov	r8, r1
 80005c0:	4351      	muls	r1, r2
 80005c2:	436a      	muls	r2, r5
 80005c4:	0c25      	lsrs	r5, r4, #16
 80005c6:	46ac      	mov	ip, r5
 80005c8:	185b      	adds	r3, r3, r1
 80005ca:	4463      	add	r3, ip
 80005cc:	4299      	cmp	r1, r3
 80005ce:	d903      	bls.n	80005d8 <__aeabi_ddiv+0x1a8>
 80005d0:	2180      	movs	r1, #128	@ 0x80
 80005d2:	0249      	lsls	r1, r1, #9
 80005d4:	468c      	mov	ip, r1
 80005d6:	4462      	add	r2, ip
 80005d8:	0c19      	lsrs	r1, r3, #16
 80005da:	0424      	lsls	r4, r4, #16
 80005dc:	041b      	lsls	r3, r3, #16
 80005de:	0c24      	lsrs	r4, r4, #16
 80005e0:	188a      	adds	r2, r1, r2
 80005e2:	191c      	adds	r4, r3, r4
 80005e4:	4290      	cmp	r0, r2
 80005e6:	d302      	bcc.n	80005ee <__aeabi_ddiv+0x1be>
 80005e8:	d116      	bne.n	8000618 <__aeabi_ddiv+0x1e8>
 80005ea:	42a7      	cmp	r7, r4
 80005ec:	d214      	bcs.n	8000618 <__aeabi_ddiv+0x1e8>
 80005ee:	465b      	mov	r3, fp
 80005f0:	9d00      	ldr	r5, [sp, #0]
 80005f2:	3b01      	subs	r3, #1
 80005f4:	444f      	add	r7, r9
 80005f6:	9305      	str	r3, [sp, #20]
 80005f8:	454f      	cmp	r7, r9
 80005fa:	419b      	sbcs	r3, r3
 80005fc:	46ac      	mov	ip, r5
 80005fe:	425b      	negs	r3, r3
 8000600:	4463      	add	r3, ip
 8000602:	18c0      	adds	r0, r0, r3
 8000604:	4285      	cmp	r5, r0
 8000606:	d300      	bcc.n	800060a <__aeabi_ddiv+0x1da>
 8000608:	e1a1      	b.n	800094e <__aeabi_ddiv+0x51e>
 800060a:	4282      	cmp	r2, r0
 800060c:	d900      	bls.n	8000610 <__aeabi_ddiv+0x1e0>
 800060e:	e1f6      	b.n	80009fe <__aeabi_ddiv+0x5ce>
 8000610:	d100      	bne.n	8000614 <__aeabi_ddiv+0x1e4>
 8000612:	e1f1      	b.n	80009f8 <__aeabi_ddiv+0x5c8>
 8000614:	9b05      	ldr	r3, [sp, #20]
 8000616:	469b      	mov	fp, r3
 8000618:	1b3c      	subs	r4, r7, r4
 800061a:	42a7      	cmp	r7, r4
 800061c:	41bf      	sbcs	r7, r7
 800061e:	9d00      	ldr	r5, [sp, #0]
 8000620:	1a80      	subs	r0, r0, r2
 8000622:	427f      	negs	r7, r7
 8000624:	1bc0      	subs	r0, r0, r7
 8000626:	4285      	cmp	r5, r0
 8000628:	d100      	bne.n	800062c <__aeabi_ddiv+0x1fc>
 800062a:	e1d0      	b.n	80009ce <__aeabi_ddiv+0x59e>
 800062c:	9902      	ldr	r1, [sp, #8]
 800062e:	f7ff fdf1 	bl	8000214 <__aeabi_uidivmod>
 8000632:	9a03      	ldr	r2, [sp, #12]
 8000634:	040b      	lsls	r3, r1, #16
 8000636:	4342      	muls	r2, r0
 8000638:	0c21      	lsrs	r1, r4, #16
 800063a:	0007      	movs	r7, r0
 800063c:	4319      	orrs	r1, r3
 800063e:	428a      	cmp	r2, r1
 8000640:	d900      	bls.n	8000644 <__aeabi_ddiv+0x214>
 8000642:	e178      	b.n	8000936 <__aeabi_ddiv+0x506>
 8000644:	1a88      	subs	r0, r1, r2
 8000646:	9902      	ldr	r1, [sp, #8]
 8000648:	f7ff fde4 	bl	8000214 <__aeabi_uidivmod>
 800064c:	9a03      	ldr	r2, [sp, #12]
 800064e:	0424      	lsls	r4, r4, #16
 8000650:	4342      	muls	r2, r0
 8000652:	0409      	lsls	r1, r1, #16
 8000654:	0c24      	lsrs	r4, r4, #16
 8000656:	0003      	movs	r3, r0
 8000658:	430c      	orrs	r4, r1
 800065a:	42a2      	cmp	r2, r4
 800065c:	d900      	bls.n	8000660 <__aeabi_ddiv+0x230>
 800065e:	e15d      	b.n	800091c <__aeabi_ddiv+0x4ec>
 8000660:	4641      	mov	r1, r8
 8000662:	1aa4      	subs	r4, r4, r2
 8000664:	043a      	lsls	r2, r7, #16
 8000666:	431a      	orrs	r2, r3
 8000668:	9d04      	ldr	r5, [sp, #16]
 800066a:	0413      	lsls	r3, r2, #16
 800066c:	0c1b      	lsrs	r3, r3, #16
 800066e:	4359      	muls	r1, r3
 8000670:	4647      	mov	r7, r8
 8000672:	436b      	muls	r3, r5
 8000674:	469c      	mov	ip, r3
 8000676:	0c10      	lsrs	r0, r2, #16
 8000678:	4347      	muls	r7, r0
 800067a:	0c0b      	lsrs	r3, r1, #16
 800067c:	44bc      	add	ip, r7
 800067e:	4463      	add	r3, ip
 8000680:	4368      	muls	r0, r5
 8000682:	429f      	cmp	r7, r3
 8000684:	d903      	bls.n	800068e <__aeabi_ddiv+0x25e>
 8000686:	2580      	movs	r5, #128	@ 0x80
 8000688:	026d      	lsls	r5, r5, #9
 800068a:	46ac      	mov	ip, r5
 800068c:	4460      	add	r0, ip
 800068e:	0c1f      	lsrs	r7, r3, #16
 8000690:	0409      	lsls	r1, r1, #16
 8000692:	041b      	lsls	r3, r3, #16
 8000694:	0c09      	lsrs	r1, r1, #16
 8000696:	183f      	adds	r7, r7, r0
 8000698:	185b      	adds	r3, r3, r1
 800069a:	42bc      	cmp	r4, r7
 800069c:	d200      	bcs.n	80006a0 <__aeabi_ddiv+0x270>
 800069e:	e102      	b.n	80008a6 <__aeabi_ddiv+0x476>
 80006a0:	d100      	bne.n	80006a4 <__aeabi_ddiv+0x274>
 80006a2:	e0fd      	b.n	80008a0 <__aeabi_ddiv+0x470>
 80006a4:	2301      	movs	r3, #1
 80006a6:	431a      	orrs	r2, r3
 80006a8:	4b43      	ldr	r3, [pc, #268]	@ (80007b8 <__aeabi_ddiv+0x388>)
 80006aa:	4453      	add	r3, sl
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	dc00      	bgt.n	80006b2 <__aeabi_ddiv+0x282>
 80006b0:	e0ae      	b.n	8000810 <__aeabi_ddiv+0x3e0>
 80006b2:	0751      	lsls	r1, r2, #29
 80006b4:	d000      	beq.n	80006b8 <__aeabi_ddiv+0x288>
 80006b6:	e198      	b.n	80009ea <__aeabi_ddiv+0x5ba>
 80006b8:	4659      	mov	r1, fp
 80006ba:	01c9      	lsls	r1, r1, #7
 80006bc:	d506      	bpl.n	80006cc <__aeabi_ddiv+0x29c>
 80006be:	4659      	mov	r1, fp
 80006c0:	4b3e      	ldr	r3, [pc, #248]	@ (80007bc <__aeabi_ddiv+0x38c>)
 80006c2:	4019      	ands	r1, r3
 80006c4:	2380      	movs	r3, #128	@ 0x80
 80006c6:	468b      	mov	fp, r1
 80006c8:	00db      	lsls	r3, r3, #3
 80006ca:	4453      	add	r3, sl
 80006cc:	493c      	ldr	r1, [pc, #240]	@ (80007c0 <__aeabi_ddiv+0x390>)
 80006ce:	428b      	cmp	r3, r1
 80006d0:	dd00      	ble.n	80006d4 <__aeabi_ddiv+0x2a4>
 80006d2:	e71a      	b.n	800050a <__aeabi_ddiv+0xda>
 80006d4:	4659      	mov	r1, fp
 80006d6:	08d2      	lsrs	r2, r2, #3
 80006d8:	0749      	lsls	r1, r1, #29
 80006da:	4311      	orrs	r1, r2
 80006dc:	465a      	mov	r2, fp
 80006de:	055b      	lsls	r3, r3, #21
 80006e0:	0254      	lsls	r4, r2, #9
 80006e2:	4688      	mov	r8, r1
 80006e4:	0b24      	lsrs	r4, r4, #12
 80006e6:	0d5b      	lsrs	r3, r3, #21
 80006e8:	e702      	b.n	80004f0 <__aeabi_ddiv+0xc0>
 80006ea:	465a      	mov	r2, fp
 80006ec:	9b00      	ldr	r3, [sp, #0]
 80006ee:	431a      	orrs	r2, r3
 80006f0:	d100      	bne.n	80006f4 <__aeabi_ddiv+0x2c4>
 80006f2:	e07e      	b.n	80007f2 <__aeabi_ddiv+0x3c2>
 80006f4:	465b      	mov	r3, fp
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d100      	bne.n	80006fc <__aeabi_ddiv+0x2cc>
 80006fa:	e100      	b.n	80008fe <__aeabi_ddiv+0x4ce>
 80006fc:	4658      	mov	r0, fp
 80006fe:	f001 f8b3 	bl	8001868 <__clzsi2>
 8000702:	0002      	movs	r2, r0
 8000704:	0003      	movs	r3, r0
 8000706:	3a0b      	subs	r2, #11
 8000708:	271d      	movs	r7, #29
 800070a:	9e00      	ldr	r6, [sp, #0]
 800070c:	1aba      	subs	r2, r7, r2
 800070e:	0019      	movs	r1, r3
 8000710:	4658      	mov	r0, fp
 8000712:	40d6      	lsrs	r6, r2
 8000714:	3908      	subs	r1, #8
 8000716:	4088      	lsls	r0, r1
 8000718:	0032      	movs	r2, r6
 800071a:	4302      	orrs	r2, r0
 800071c:	4693      	mov	fp, r2
 800071e:	9a00      	ldr	r2, [sp, #0]
 8000720:	408a      	lsls	r2, r1
 8000722:	4928      	ldr	r1, [pc, #160]	@ (80007c4 <__aeabi_ddiv+0x394>)
 8000724:	4453      	add	r3, sl
 8000726:	468a      	mov	sl, r1
 8000728:	449a      	add	sl, r3
 800072a:	2300      	movs	r3, #0
 800072c:	e6c8      	b.n	80004c0 <__aeabi_ddiv+0x90>
 800072e:	465b      	mov	r3, fp
 8000730:	4303      	orrs	r3, r0
 8000732:	4699      	mov	r9, r3
 8000734:	d056      	beq.n	80007e4 <__aeabi_ddiv+0x3b4>
 8000736:	465b      	mov	r3, fp
 8000738:	2b00      	cmp	r3, #0
 800073a:	d100      	bne.n	800073e <__aeabi_ddiv+0x30e>
 800073c:	e0cd      	b.n	80008da <__aeabi_ddiv+0x4aa>
 800073e:	4658      	mov	r0, fp
 8000740:	f001 f892 	bl	8001868 <__clzsi2>
 8000744:	230b      	movs	r3, #11
 8000746:	425b      	negs	r3, r3
 8000748:	469c      	mov	ip, r3
 800074a:	0002      	movs	r2, r0
 800074c:	4484      	add	ip, r0
 800074e:	4666      	mov	r6, ip
 8000750:	231d      	movs	r3, #29
 8000752:	1b9b      	subs	r3, r3, r6
 8000754:	0026      	movs	r6, r4
 8000756:	0011      	movs	r1, r2
 8000758:	4658      	mov	r0, fp
 800075a:	40de      	lsrs	r6, r3
 800075c:	3908      	subs	r1, #8
 800075e:	4088      	lsls	r0, r1
 8000760:	0033      	movs	r3, r6
 8000762:	4303      	orrs	r3, r0
 8000764:	4699      	mov	r9, r3
 8000766:	0023      	movs	r3, r4
 8000768:	408b      	lsls	r3, r1
 800076a:	4698      	mov	r8, r3
 800076c:	4b16      	ldr	r3, [pc, #88]	@ (80007c8 <__aeabi_ddiv+0x398>)
 800076e:	2400      	movs	r4, #0
 8000770:	1a9b      	subs	r3, r3, r2
 8000772:	469a      	mov	sl, r3
 8000774:	2300      	movs	r3, #0
 8000776:	9303      	str	r3, [sp, #12]
 8000778:	e682      	b.n	8000480 <__aeabi_ddiv+0x50>
 800077a:	465a      	mov	r2, fp
 800077c:	4302      	orrs	r2, r0
 800077e:	4691      	mov	r9, r2
 8000780:	d12a      	bne.n	80007d8 <__aeabi_ddiv+0x3a8>
 8000782:	2200      	movs	r2, #0
 8000784:	469a      	mov	sl, r3
 8000786:	2302      	movs	r3, #2
 8000788:	4690      	mov	r8, r2
 800078a:	2408      	movs	r4, #8
 800078c:	9303      	str	r3, [sp, #12]
 800078e:	e677      	b.n	8000480 <__aeabi_ddiv+0x50>
 8000790:	465a      	mov	r2, fp
 8000792:	9b00      	ldr	r3, [sp, #0]
 8000794:	431a      	orrs	r2, r3
 8000796:	4b0d      	ldr	r3, [pc, #52]	@ (80007cc <__aeabi_ddiv+0x39c>)
 8000798:	469c      	mov	ip, r3
 800079a:	44e2      	add	sl, ip
 800079c:	2a00      	cmp	r2, #0
 800079e:	d117      	bne.n	80007d0 <__aeabi_ddiv+0x3a0>
 80007a0:	2302      	movs	r3, #2
 80007a2:	431c      	orrs	r4, r3
 80007a4:	2300      	movs	r3, #0
 80007a6:	469b      	mov	fp, r3
 80007a8:	3302      	adds	r3, #2
 80007aa:	e689      	b.n	80004c0 <__aeabi_ddiv+0x90>
 80007ac:	000007ff 	.word	0x000007ff
 80007b0:	fffffc01 	.word	0xfffffc01
 80007b4:	08003c94 	.word	0x08003c94
 80007b8:	000003ff 	.word	0x000003ff
 80007bc:	feffffff 	.word	0xfeffffff
 80007c0:	000007fe 	.word	0x000007fe
 80007c4:	000003f3 	.word	0x000003f3
 80007c8:	fffffc0d 	.word	0xfffffc0d
 80007cc:	fffff801 	.word	0xfffff801
 80007d0:	2303      	movs	r3, #3
 80007d2:	0032      	movs	r2, r6
 80007d4:	431c      	orrs	r4, r3
 80007d6:	e673      	b.n	80004c0 <__aeabi_ddiv+0x90>
 80007d8:	469a      	mov	sl, r3
 80007da:	2303      	movs	r3, #3
 80007dc:	46d9      	mov	r9, fp
 80007de:	240c      	movs	r4, #12
 80007e0:	9303      	str	r3, [sp, #12]
 80007e2:	e64d      	b.n	8000480 <__aeabi_ddiv+0x50>
 80007e4:	2300      	movs	r3, #0
 80007e6:	4698      	mov	r8, r3
 80007e8:	469a      	mov	sl, r3
 80007ea:	3301      	adds	r3, #1
 80007ec:	2404      	movs	r4, #4
 80007ee:	9303      	str	r3, [sp, #12]
 80007f0:	e646      	b.n	8000480 <__aeabi_ddiv+0x50>
 80007f2:	2301      	movs	r3, #1
 80007f4:	431c      	orrs	r4, r3
 80007f6:	2300      	movs	r3, #0
 80007f8:	469b      	mov	fp, r3
 80007fa:	3301      	adds	r3, #1
 80007fc:	e660      	b.n	80004c0 <__aeabi_ddiv+0x90>
 80007fe:	2300      	movs	r3, #0
 8000800:	2480      	movs	r4, #128	@ 0x80
 8000802:	4698      	mov	r8, r3
 8000804:	2600      	movs	r6, #0
 8000806:	4b92      	ldr	r3, [pc, #584]	@ (8000a50 <__aeabi_ddiv+0x620>)
 8000808:	0324      	lsls	r4, r4, #12
 800080a:	e671      	b.n	80004f0 <__aeabi_ddiv+0xc0>
 800080c:	2201      	movs	r2, #1
 800080e:	4252      	negs	r2, r2
 8000810:	2101      	movs	r1, #1
 8000812:	1ac9      	subs	r1, r1, r3
 8000814:	2938      	cmp	r1, #56	@ 0x38
 8000816:	dd00      	ble.n	800081a <__aeabi_ddiv+0x3ea>
 8000818:	e666      	b.n	80004e8 <__aeabi_ddiv+0xb8>
 800081a:	291f      	cmp	r1, #31
 800081c:	dc00      	bgt.n	8000820 <__aeabi_ddiv+0x3f0>
 800081e:	e0ab      	b.n	8000978 <__aeabi_ddiv+0x548>
 8000820:	201f      	movs	r0, #31
 8000822:	4240      	negs	r0, r0
 8000824:	1ac3      	subs	r3, r0, r3
 8000826:	4658      	mov	r0, fp
 8000828:	40d8      	lsrs	r0, r3
 800082a:	0003      	movs	r3, r0
 800082c:	2920      	cmp	r1, #32
 800082e:	d004      	beq.n	800083a <__aeabi_ddiv+0x40a>
 8000830:	4658      	mov	r0, fp
 8000832:	4988      	ldr	r1, [pc, #544]	@ (8000a54 <__aeabi_ddiv+0x624>)
 8000834:	4451      	add	r1, sl
 8000836:	4088      	lsls	r0, r1
 8000838:	4302      	orrs	r2, r0
 800083a:	1e51      	subs	r1, r2, #1
 800083c:	418a      	sbcs	r2, r1
 800083e:	431a      	orrs	r2, r3
 8000840:	2307      	movs	r3, #7
 8000842:	0019      	movs	r1, r3
 8000844:	2400      	movs	r4, #0
 8000846:	4011      	ands	r1, r2
 8000848:	4213      	tst	r3, r2
 800084a:	d00c      	beq.n	8000866 <__aeabi_ddiv+0x436>
 800084c:	230f      	movs	r3, #15
 800084e:	4013      	ands	r3, r2
 8000850:	2b04      	cmp	r3, #4
 8000852:	d100      	bne.n	8000856 <__aeabi_ddiv+0x426>
 8000854:	e0f9      	b.n	8000a4a <__aeabi_ddiv+0x61a>
 8000856:	1d11      	adds	r1, r2, #4
 8000858:	4291      	cmp	r1, r2
 800085a:	419b      	sbcs	r3, r3
 800085c:	000a      	movs	r2, r1
 800085e:	425b      	negs	r3, r3
 8000860:	0759      	lsls	r1, r3, #29
 8000862:	025b      	lsls	r3, r3, #9
 8000864:	0b1c      	lsrs	r4, r3, #12
 8000866:	08d2      	lsrs	r2, r2, #3
 8000868:	430a      	orrs	r2, r1
 800086a:	4690      	mov	r8, r2
 800086c:	2300      	movs	r3, #0
 800086e:	e63f      	b.n	80004f0 <__aeabi_ddiv+0xc0>
 8000870:	2480      	movs	r4, #128	@ 0x80
 8000872:	464b      	mov	r3, r9
 8000874:	0324      	lsls	r4, r4, #12
 8000876:	4223      	tst	r3, r4
 8000878:	d009      	beq.n	800088e <__aeabi_ddiv+0x45e>
 800087a:	465b      	mov	r3, fp
 800087c:	4223      	tst	r3, r4
 800087e:	d106      	bne.n	800088e <__aeabi_ddiv+0x45e>
 8000880:	431c      	orrs	r4, r3
 8000882:	0324      	lsls	r4, r4, #12
 8000884:	002e      	movs	r6, r5
 8000886:	4690      	mov	r8, r2
 8000888:	4b71      	ldr	r3, [pc, #452]	@ (8000a50 <__aeabi_ddiv+0x620>)
 800088a:	0b24      	lsrs	r4, r4, #12
 800088c:	e630      	b.n	80004f0 <__aeabi_ddiv+0xc0>
 800088e:	2480      	movs	r4, #128	@ 0x80
 8000890:	464b      	mov	r3, r9
 8000892:	0324      	lsls	r4, r4, #12
 8000894:	431c      	orrs	r4, r3
 8000896:	0324      	lsls	r4, r4, #12
 8000898:	9e02      	ldr	r6, [sp, #8]
 800089a:	4b6d      	ldr	r3, [pc, #436]	@ (8000a50 <__aeabi_ddiv+0x620>)
 800089c:	0b24      	lsrs	r4, r4, #12
 800089e:	e627      	b.n	80004f0 <__aeabi_ddiv+0xc0>
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d100      	bne.n	80008a6 <__aeabi_ddiv+0x476>
 80008a4:	e700      	b.n	80006a8 <__aeabi_ddiv+0x278>
 80008a6:	9800      	ldr	r0, [sp, #0]
 80008a8:	1e51      	subs	r1, r2, #1
 80008aa:	4684      	mov	ip, r0
 80008ac:	4464      	add	r4, ip
 80008ae:	4284      	cmp	r4, r0
 80008b0:	d200      	bcs.n	80008b4 <__aeabi_ddiv+0x484>
 80008b2:	e084      	b.n	80009be <__aeabi_ddiv+0x58e>
 80008b4:	42bc      	cmp	r4, r7
 80008b6:	d200      	bcs.n	80008ba <__aeabi_ddiv+0x48a>
 80008b8:	e0ae      	b.n	8000a18 <__aeabi_ddiv+0x5e8>
 80008ba:	d100      	bne.n	80008be <__aeabi_ddiv+0x48e>
 80008bc:	e0c1      	b.n	8000a42 <__aeabi_ddiv+0x612>
 80008be:	000a      	movs	r2, r1
 80008c0:	e6f0      	b.n	80006a4 <__aeabi_ddiv+0x274>
 80008c2:	4542      	cmp	r2, r8
 80008c4:	d900      	bls.n	80008c8 <__aeabi_ddiv+0x498>
 80008c6:	e62c      	b.n	8000522 <__aeabi_ddiv+0xf2>
 80008c8:	464b      	mov	r3, r9
 80008ca:	07dc      	lsls	r4, r3, #31
 80008cc:	0858      	lsrs	r0, r3, #1
 80008ce:	4643      	mov	r3, r8
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	431c      	orrs	r4, r3
 80008d4:	4643      	mov	r3, r8
 80008d6:	07df      	lsls	r7, r3, #31
 80008d8:	e62a      	b.n	8000530 <__aeabi_ddiv+0x100>
 80008da:	f000 ffc5 	bl	8001868 <__clzsi2>
 80008de:	2315      	movs	r3, #21
 80008e0:	469c      	mov	ip, r3
 80008e2:	4484      	add	ip, r0
 80008e4:	0002      	movs	r2, r0
 80008e6:	4663      	mov	r3, ip
 80008e8:	3220      	adds	r2, #32
 80008ea:	2b1c      	cmp	r3, #28
 80008ec:	dc00      	bgt.n	80008f0 <__aeabi_ddiv+0x4c0>
 80008ee:	e72e      	b.n	800074e <__aeabi_ddiv+0x31e>
 80008f0:	0023      	movs	r3, r4
 80008f2:	3808      	subs	r0, #8
 80008f4:	4083      	lsls	r3, r0
 80008f6:	4699      	mov	r9, r3
 80008f8:	2300      	movs	r3, #0
 80008fa:	4698      	mov	r8, r3
 80008fc:	e736      	b.n	800076c <__aeabi_ddiv+0x33c>
 80008fe:	f000 ffb3 	bl	8001868 <__clzsi2>
 8000902:	0002      	movs	r2, r0
 8000904:	0003      	movs	r3, r0
 8000906:	3215      	adds	r2, #21
 8000908:	3320      	adds	r3, #32
 800090a:	2a1c      	cmp	r2, #28
 800090c:	dc00      	bgt.n	8000910 <__aeabi_ddiv+0x4e0>
 800090e:	e6fb      	b.n	8000708 <__aeabi_ddiv+0x2d8>
 8000910:	9900      	ldr	r1, [sp, #0]
 8000912:	3808      	subs	r0, #8
 8000914:	4081      	lsls	r1, r0
 8000916:	2200      	movs	r2, #0
 8000918:	468b      	mov	fp, r1
 800091a:	e702      	b.n	8000722 <__aeabi_ddiv+0x2f2>
 800091c:	9900      	ldr	r1, [sp, #0]
 800091e:	3b01      	subs	r3, #1
 8000920:	468c      	mov	ip, r1
 8000922:	4464      	add	r4, ip
 8000924:	42a1      	cmp	r1, r4
 8000926:	d900      	bls.n	800092a <__aeabi_ddiv+0x4fa>
 8000928:	e69a      	b.n	8000660 <__aeabi_ddiv+0x230>
 800092a:	42a2      	cmp	r2, r4
 800092c:	d800      	bhi.n	8000930 <__aeabi_ddiv+0x500>
 800092e:	e697      	b.n	8000660 <__aeabi_ddiv+0x230>
 8000930:	1e83      	subs	r3, r0, #2
 8000932:	4464      	add	r4, ip
 8000934:	e694      	b.n	8000660 <__aeabi_ddiv+0x230>
 8000936:	46ac      	mov	ip, r5
 8000938:	4461      	add	r1, ip
 800093a:	3f01      	subs	r7, #1
 800093c:	428d      	cmp	r5, r1
 800093e:	d900      	bls.n	8000942 <__aeabi_ddiv+0x512>
 8000940:	e680      	b.n	8000644 <__aeabi_ddiv+0x214>
 8000942:	428a      	cmp	r2, r1
 8000944:	d800      	bhi.n	8000948 <__aeabi_ddiv+0x518>
 8000946:	e67d      	b.n	8000644 <__aeabi_ddiv+0x214>
 8000948:	1e87      	subs	r7, r0, #2
 800094a:	4461      	add	r1, ip
 800094c:	e67a      	b.n	8000644 <__aeabi_ddiv+0x214>
 800094e:	4285      	cmp	r5, r0
 8000950:	d000      	beq.n	8000954 <__aeabi_ddiv+0x524>
 8000952:	e65f      	b.n	8000614 <__aeabi_ddiv+0x1e4>
 8000954:	45b9      	cmp	r9, r7
 8000956:	d900      	bls.n	800095a <__aeabi_ddiv+0x52a>
 8000958:	e65c      	b.n	8000614 <__aeabi_ddiv+0x1e4>
 800095a:	e656      	b.n	800060a <__aeabi_ddiv+0x1da>
 800095c:	42a2      	cmp	r2, r4
 800095e:	d800      	bhi.n	8000962 <__aeabi_ddiv+0x532>
 8000960:	e61a      	b.n	8000598 <__aeabi_ddiv+0x168>
 8000962:	1e83      	subs	r3, r0, #2
 8000964:	4464      	add	r4, ip
 8000966:	e617      	b.n	8000598 <__aeabi_ddiv+0x168>
 8000968:	428a      	cmp	r2, r1
 800096a:	d800      	bhi.n	800096e <__aeabi_ddiv+0x53e>
 800096c:	e600      	b.n	8000570 <__aeabi_ddiv+0x140>
 800096e:	46ac      	mov	ip, r5
 8000970:	1e83      	subs	r3, r0, #2
 8000972:	4698      	mov	r8, r3
 8000974:	4461      	add	r1, ip
 8000976:	e5fb      	b.n	8000570 <__aeabi_ddiv+0x140>
 8000978:	4837      	ldr	r0, [pc, #220]	@ (8000a58 <__aeabi_ddiv+0x628>)
 800097a:	0014      	movs	r4, r2
 800097c:	4450      	add	r0, sl
 800097e:	4082      	lsls	r2, r0
 8000980:	465b      	mov	r3, fp
 8000982:	0017      	movs	r7, r2
 8000984:	4083      	lsls	r3, r0
 8000986:	40cc      	lsrs	r4, r1
 8000988:	1e7a      	subs	r2, r7, #1
 800098a:	4197      	sbcs	r7, r2
 800098c:	4323      	orrs	r3, r4
 800098e:	433b      	orrs	r3, r7
 8000990:	001a      	movs	r2, r3
 8000992:	465b      	mov	r3, fp
 8000994:	40cb      	lsrs	r3, r1
 8000996:	0751      	lsls	r1, r2, #29
 8000998:	d009      	beq.n	80009ae <__aeabi_ddiv+0x57e>
 800099a:	210f      	movs	r1, #15
 800099c:	4011      	ands	r1, r2
 800099e:	2904      	cmp	r1, #4
 80009a0:	d005      	beq.n	80009ae <__aeabi_ddiv+0x57e>
 80009a2:	1d11      	adds	r1, r2, #4
 80009a4:	4291      	cmp	r1, r2
 80009a6:	4192      	sbcs	r2, r2
 80009a8:	4252      	negs	r2, r2
 80009aa:	189b      	adds	r3, r3, r2
 80009ac:	000a      	movs	r2, r1
 80009ae:	0219      	lsls	r1, r3, #8
 80009b0:	d400      	bmi.n	80009b4 <__aeabi_ddiv+0x584>
 80009b2:	e755      	b.n	8000860 <__aeabi_ddiv+0x430>
 80009b4:	2200      	movs	r2, #0
 80009b6:	2301      	movs	r3, #1
 80009b8:	2400      	movs	r4, #0
 80009ba:	4690      	mov	r8, r2
 80009bc:	e598      	b.n	80004f0 <__aeabi_ddiv+0xc0>
 80009be:	000a      	movs	r2, r1
 80009c0:	42bc      	cmp	r4, r7
 80009c2:	d000      	beq.n	80009c6 <__aeabi_ddiv+0x596>
 80009c4:	e66e      	b.n	80006a4 <__aeabi_ddiv+0x274>
 80009c6:	454b      	cmp	r3, r9
 80009c8:	d000      	beq.n	80009cc <__aeabi_ddiv+0x59c>
 80009ca:	e66b      	b.n	80006a4 <__aeabi_ddiv+0x274>
 80009cc:	e66c      	b.n	80006a8 <__aeabi_ddiv+0x278>
 80009ce:	4b23      	ldr	r3, [pc, #140]	@ (8000a5c <__aeabi_ddiv+0x62c>)
 80009d0:	4a23      	ldr	r2, [pc, #140]	@ (8000a60 <__aeabi_ddiv+0x630>)
 80009d2:	4453      	add	r3, sl
 80009d4:	4592      	cmp	sl, r2
 80009d6:	da00      	bge.n	80009da <__aeabi_ddiv+0x5aa>
 80009d8:	e718      	b.n	800080c <__aeabi_ddiv+0x3dc>
 80009da:	2101      	movs	r1, #1
 80009dc:	4249      	negs	r1, r1
 80009de:	1d0a      	adds	r2, r1, #4
 80009e0:	428a      	cmp	r2, r1
 80009e2:	4189      	sbcs	r1, r1
 80009e4:	4249      	negs	r1, r1
 80009e6:	448b      	add	fp, r1
 80009e8:	e666      	b.n	80006b8 <__aeabi_ddiv+0x288>
 80009ea:	210f      	movs	r1, #15
 80009ec:	4011      	ands	r1, r2
 80009ee:	2904      	cmp	r1, #4
 80009f0:	d100      	bne.n	80009f4 <__aeabi_ddiv+0x5c4>
 80009f2:	e661      	b.n	80006b8 <__aeabi_ddiv+0x288>
 80009f4:	0011      	movs	r1, r2
 80009f6:	e7f2      	b.n	80009de <__aeabi_ddiv+0x5ae>
 80009f8:	42bc      	cmp	r4, r7
 80009fa:	d800      	bhi.n	80009fe <__aeabi_ddiv+0x5ce>
 80009fc:	e60a      	b.n	8000614 <__aeabi_ddiv+0x1e4>
 80009fe:	2302      	movs	r3, #2
 8000a00:	425b      	negs	r3, r3
 8000a02:	469c      	mov	ip, r3
 8000a04:	9900      	ldr	r1, [sp, #0]
 8000a06:	444f      	add	r7, r9
 8000a08:	454f      	cmp	r7, r9
 8000a0a:	419b      	sbcs	r3, r3
 8000a0c:	44e3      	add	fp, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	425b      	negs	r3, r3
 8000a12:	4463      	add	r3, ip
 8000a14:	18c0      	adds	r0, r0, r3
 8000a16:	e5ff      	b.n	8000618 <__aeabi_ddiv+0x1e8>
 8000a18:	4649      	mov	r1, r9
 8000a1a:	9d00      	ldr	r5, [sp, #0]
 8000a1c:	0048      	lsls	r0, r1, #1
 8000a1e:	4548      	cmp	r0, r9
 8000a20:	4189      	sbcs	r1, r1
 8000a22:	46ac      	mov	ip, r5
 8000a24:	4249      	negs	r1, r1
 8000a26:	4461      	add	r1, ip
 8000a28:	4681      	mov	r9, r0
 8000a2a:	3a02      	subs	r2, #2
 8000a2c:	1864      	adds	r4, r4, r1
 8000a2e:	e7c7      	b.n	80009c0 <__aeabi_ddiv+0x590>
 8000a30:	2480      	movs	r4, #128	@ 0x80
 8000a32:	465b      	mov	r3, fp
 8000a34:	0324      	lsls	r4, r4, #12
 8000a36:	431c      	orrs	r4, r3
 8000a38:	0324      	lsls	r4, r4, #12
 8000a3a:	4690      	mov	r8, r2
 8000a3c:	4b04      	ldr	r3, [pc, #16]	@ (8000a50 <__aeabi_ddiv+0x620>)
 8000a3e:	0b24      	lsrs	r4, r4, #12
 8000a40:	e556      	b.n	80004f0 <__aeabi_ddiv+0xc0>
 8000a42:	4599      	cmp	r9, r3
 8000a44:	d3e8      	bcc.n	8000a18 <__aeabi_ddiv+0x5e8>
 8000a46:	000a      	movs	r2, r1
 8000a48:	e7bd      	b.n	80009c6 <__aeabi_ddiv+0x596>
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	e708      	b.n	8000860 <__aeabi_ddiv+0x430>
 8000a4e:	46c0      	nop			@ (mov r8, r8)
 8000a50:	000007ff 	.word	0x000007ff
 8000a54:	0000043e 	.word	0x0000043e
 8000a58:	0000041e 	.word	0x0000041e
 8000a5c:	000003ff 	.word	0x000003ff
 8000a60:	fffffc02 	.word	0xfffffc02

08000a64 <__aeabi_dmul>:
 8000a64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a66:	4657      	mov	r7, sl
 8000a68:	46de      	mov	lr, fp
 8000a6a:	464e      	mov	r6, r9
 8000a6c:	4645      	mov	r5, r8
 8000a6e:	b5e0      	push	{r5, r6, r7, lr}
 8000a70:	001f      	movs	r7, r3
 8000a72:	030b      	lsls	r3, r1, #12
 8000a74:	0b1b      	lsrs	r3, r3, #12
 8000a76:	0016      	movs	r6, r2
 8000a78:	469a      	mov	sl, r3
 8000a7a:	0fca      	lsrs	r2, r1, #31
 8000a7c:	004b      	lsls	r3, r1, #1
 8000a7e:	0004      	movs	r4, r0
 8000a80:	4693      	mov	fp, r2
 8000a82:	b087      	sub	sp, #28
 8000a84:	0d5b      	lsrs	r3, r3, #21
 8000a86:	d100      	bne.n	8000a8a <__aeabi_dmul+0x26>
 8000a88:	e0d5      	b.n	8000c36 <__aeabi_dmul+0x1d2>
 8000a8a:	4abb      	ldr	r2, [pc, #748]	@ (8000d78 <__aeabi_dmul+0x314>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d100      	bne.n	8000a92 <__aeabi_dmul+0x2e>
 8000a90:	e0f8      	b.n	8000c84 <__aeabi_dmul+0x220>
 8000a92:	4651      	mov	r1, sl
 8000a94:	0f42      	lsrs	r2, r0, #29
 8000a96:	00c9      	lsls	r1, r1, #3
 8000a98:	430a      	orrs	r2, r1
 8000a9a:	2180      	movs	r1, #128	@ 0x80
 8000a9c:	0409      	lsls	r1, r1, #16
 8000a9e:	4311      	orrs	r1, r2
 8000aa0:	00c2      	lsls	r2, r0, #3
 8000aa2:	4691      	mov	r9, r2
 8000aa4:	4ab5      	ldr	r2, [pc, #724]	@ (8000d7c <__aeabi_dmul+0x318>)
 8000aa6:	468a      	mov	sl, r1
 8000aa8:	189d      	adds	r5, r3, r2
 8000aaa:	2300      	movs	r3, #0
 8000aac:	4698      	mov	r8, r3
 8000aae:	9302      	str	r3, [sp, #8]
 8000ab0:	033c      	lsls	r4, r7, #12
 8000ab2:	007b      	lsls	r3, r7, #1
 8000ab4:	0ffa      	lsrs	r2, r7, #31
 8000ab6:	0030      	movs	r0, r6
 8000ab8:	0b24      	lsrs	r4, r4, #12
 8000aba:	0d5b      	lsrs	r3, r3, #21
 8000abc:	9200      	str	r2, [sp, #0]
 8000abe:	d100      	bne.n	8000ac2 <__aeabi_dmul+0x5e>
 8000ac0:	e096      	b.n	8000bf0 <__aeabi_dmul+0x18c>
 8000ac2:	4aad      	ldr	r2, [pc, #692]	@ (8000d78 <__aeabi_dmul+0x314>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d031      	beq.n	8000b2c <__aeabi_dmul+0xc8>
 8000ac8:	0f72      	lsrs	r2, r6, #29
 8000aca:	00e4      	lsls	r4, r4, #3
 8000acc:	4322      	orrs	r2, r4
 8000ace:	2480      	movs	r4, #128	@ 0x80
 8000ad0:	0424      	lsls	r4, r4, #16
 8000ad2:	4314      	orrs	r4, r2
 8000ad4:	4aa9      	ldr	r2, [pc, #676]	@ (8000d7c <__aeabi_dmul+0x318>)
 8000ad6:	00f0      	lsls	r0, r6, #3
 8000ad8:	4694      	mov	ip, r2
 8000ada:	4463      	add	r3, ip
 8000adc:	195b      	adds	r3, r3, r5
 8000ade:	1c5a      	adds	r2, r3, #1
 8000ae0:	9201      	str	r2, [sp, #4]
 8000ae2:	4642      	mov	r2, r8
 8000ae4:	2600      	movs	r6, #0
 8000ae6:	2a0a      	cmp	r2, #10
 8000ae8:	dc42      	bgt.n	8000b70 <__aeabi_dmul+0x10c>
 8000aea:	465a      	mov	r2, fp
 8000aec:	9900      	ldr	r1, [sp, #0]
 8000aee:	404a      	eors	r2, r1
 8000af0:	4693      	mov	fp, r2
 8000af2:	4642      	mov	r2, r8
 8000af4:	2a02      	cmp	r2, #2
 8000af6:	dc32      	bgt.n	8000b5e <__aeabi_dmul+0xfa>
 8000af8:	3a01      	subs	r2, #1
 8000afa:	2a01      	cmp	r2, #1
 8000afc:	d900      	bls.n	8000b00 <__aeabi_dmul+0x9c>
 8000afe:	e149      	b.n	8000d94 <__aeabi_dmul+0x330>
 8000b00:	2e02      	cmp	r6, #2
 8000b02:	d100      	bne.n	8000b06 <__aeabi_dmul+0xa2>
 8000b04:	e0ca      	b.n	8000c9c <__aeabi_dmul+0x238>
 8000b06:	2e01      	cmp	r6, #1
 8000b08:	d13d      	bne.n	8000b86 <__aeabi_dmul+0x122>
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	2400      	movs	r4, #0
 8000b0e:	2200      	movs	r2, #0
 8000b10:	0010      	movs	r0, r2
 8000b12:	465a      	mov	r2, fp
 8000b14:	051b      	lsls	r3, r3, #20
 8000b16:	4323      	orrs	r3, r4
 8000b18:	07d2      	lsls	r2, r2, #31
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	0019      	movs	r1, r3
 8000b1e:	b007      	add	sp, #28
 8000b20:	bcf0      	pop	{r4, r5, r6, r7}
 8000b22:	46bb      	mov	fp, r7
 8000b24:	46b2      	mov	sl, r6
 8000b26:	46a9      	mov	r9, r5
 8000b28:	46a0      	mov	r8, r4
 8000b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b2c:	4b92      	ldr	r3, [pc, #584]	@ (8000d78 <__aeabi_dmul+0x314>)
 8000b2e:	4326      	orrs	r6, r4
 8000b30:	18eb      	adds	r3, r5, r3
 8000b32:	2e00      	cmp	r6, #0
 8000b34:	d100      	bne.n	8000b38 <__aeabi_dmul+0xd4>
 8000b36:	e0bb      	b.n	8000cb0 <__aeabi_dmul+0x24c>
 8000b38:	2203      	movs	r2, #3
 8000b3a:	4641      	mov	r1, r8
 8000b3c:	4311      	orrs	r1, r2
 8000b3e:	465a      	mov	r2, fp
 8000b40:	4688      	mov	r8, r1
 8000b42:	9900      	ldr	r1, [sp, #0]
 8000b44:	404a      	eors	r2, r1
 8000b46:	2180      	movs	r1, #128	@ 0x80
 8000b48:	0109      	lsls	r1, r1, #4
 8000b4a:	468c      	mov	ip, r1
 8000b4c:	0029      	movs	r1, r5
 8000b4e:	4461      	add	r1, ip
 8000b50:	9101      	str	r1, [sp, #4]
 8000b52:	4641      	mov	r1, r8
 8000b54:	290a      	cmp	r1, #10
 8000b56:	dd00      	ble.n	8000b5a <__aeabi_dmul+0xf6>
 8000b58:	e233      	b.n	8000fc2 <__aeabi_dmul+0x55e>
 8000b5a:	4693      	mov	fp, r2
 8000b5c:	2603      	movs	r6, #3
 8000b5e:	4642      	mov	r2, r8
 8000b60:	2701      	movs	r7, #1
 8000b62:	4097      	lsls	r7, r2
 8000b64:	21a6      	movs	r1, #166	@ 0xa6
 8000b66:	003a      	movs	r2, r7
 8000b68:	00c9      	lsls	r1, r1, #3
 8000b6a:	400a      	ands	r2, r1
 8000b6c:	420f      	tst	r7, r1
 8000b6e:	d031      	beq.n	8000bd4 <__aeabi_dmul+0x170>
 8000b70:	9e02      	ldr	r6, [sp, #8]
 8000b72:	2e02      	cmp	r6, #2
 8000b74:	d100      	bne.n	8000b78 <__aeabi_dmul+0x114>
 8000b76:	e235      	b.n	8000fe4 <__aeabi_dmul+0x580>
 8000b78:	2e03      	cmp	r6, #3
 8000b7a:	d100      	bne.n	8000b7e <__aeabi_dmul+0x11a>
 8000b7c:	e1d2      	b.n	8000f24 <__aeabi_dmul+0x4c0>
 8000b7e:	4654      	mov	r4, sl
 8000b80:	4648      	mov	r0, r9
 8000b82:	2e01      	cmp	r6, #1
 8000b84:	d0c1      	beq.n	8000b0a <__aeabi_dmul+0xa6>
 8000b86:	9a01      	ldr	r2, [sp, #4]
 8000b88:	4b7d      	ldr	r3, [pc, #500]	@ (8000d80 <__aeabi_dmul+0x31c>)
 8000b8a:	4694      	mov	ip, r2
 8000b8c:	4463      	add	r3, ip
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	dc00      	bgt.n	8000b94 <__aeabi_dmul+0x130>
 8000b92:	e0c0      	b.n	8000d16 <__aeabi_dmul+0x2b2>
 8000b94:	0742      	lsls	r2, r0, #29
 8000b96:	d009      	beq.n	8000bac <__aeabi_dmul+0x148>
 8000b98:	220f      	movs	r2, #15
 8000b9a:	4002      	ands	r2, r0
 8000b9c:	2a04      	cmp	r2, #4
 8000b9e:	d005      	beq.n	8000bac <__aeabi_dmul+0x148>
 8000ba0:	1d02      	adds	r2, r0, #4
 8000ba2:	4282      	cmp	r2, r0
 8000ba4:	4180      	sbcs	r0, r0
 8000ba6:	4240      	negs	r0, r0
 8000ba8:	1824      	adds	r4, r4, r0
 8000baa:	0010      	movs	r0, r2
 8000bac:	01e2      	lsls	r2, r4, #7
 8000bae:	d506      	bpl.n	8000bbe <__aeabi_dmul+0x15a>
 8000bb0:	4b74      	ldr	r3, [pc, #464]	@ (8000d84 <__aeabi_dmul+0x320>)
 8000bb2:	9a01      	ldr	r2, [sp, #4]
 8000bb4:	401c      	ands	r4, r3
 8000bb6:	2380      	movs	r3, #128	@ 0x80
 8000bb8:	4694      	mov	ip, r2
 8000bba:	00db      	lsls	r3, r3, #3
 8000bbc:	4463      	add	r3, ip
 8000bbe:	4a72      	ldr	r2, [pc, #456]	@ (8000d88 <__aeabi_dmul+0x324>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	dc6b      	bgt.n	8000c9c <__aeabi_dmul+0x238>
 8000bc4:	0762      	lsls	r2, r4, #29
 8000bc6:	08c0      	lsrs	r0, r0, #3
 8000bc8:	0264      	lsls	r4, r4, #9
 8000bca:	055b      	lsls	r3, r3, #21
 8000bcc:	4302      	orrs	r2, r0
 8000bce:	0b24      	lsrs	r4, r4, #12
 8000bd0:	0d5b      	lsrs	r3, r3, #21
 8000bd2:	e79d      	b.n	8000b10 <__aeabi_dmul+0xac>
 8000bd4:	2190      	movs	r1, #144	@ 0x90
 8000bd6:	0089      	lsls	r1, r1, #2
 8000bd8:	420f      	tst	r7, r1
 8000bda:	d163      	bne.n	8000ca4 <__aeabi_dmul+0x240>
 8000bdc:	2288      	movs	r2, #136	@ 0x88
 8000bde:	423a      	tst	r2, r7
 8000be0:	d100      	bne.n	8000be4 <__aeabi_dmul+0x180>
 8000be2:	e0d7      	b.n	8000d94 <__aeabi_dmul+0x330>
 8000be4:	9b00      	ldr	r3, [sp, #0]
 8000be6:	46a2      	mov	sl, r4
 8000be8:	469b      	mov	fp, r3
 8000bea:	4681      	mov	r9, r0
 8000bec:	9602      	str	r6, [sp, #8]
 8000bee:	e7bf      	b.n	8000b70 <__aeabi_dmul+0x10c>
 8000bf0:	0023      	movs	r3, r4
 8000bf2:	4333      	orrs	r3, r6
 8000bf4:	d100      	bne.n	8000bf8 <__aeabi_dmul+0x194>
 8000bf6:	e07f      	b.n	8000cf8 <__aeabi_dmul+0x294>
 8000bf8:	2c00      	cmp	r4, #0
 8000bfa:	d100      	bne.n	8000bfe <__aeabi_dmul+0x19a>
 8000bfc:	e1ad      	b.n	8000f5a <__aeabi_dmul+0x4f6>
 8000bfe:	0020      	movs	r0, r4
 8000c00:	f000 fe32 	bl	8001868 <__clzsi2>
 8000c04:	0002      	movs	r2, r0
 8000c06:	0003      	movs	r3, r0
 8000c08:	3a0b      	subs	r2, #11
 8000c0a:	201d      	movs	r0, #29
 8000c0c:	0019      	movs	r1, r3
 8000c0e:	1a82      	subs	r2, r0, r2
 8000c10:	0030      	movs	r0, r6
 8000c12:	3908      	subs	r1, #8
 8000c14:	40d0      	lsrs	r0, r2
 8000c16:	408c      	lsls	r4, r1
 8000c18:	4304      	orrs	r4, r0
 8000c1a:	0030      	movs	r0, r6
 8000c1c:	4088      	lsls	r0, r1
 8000c1e:	4a5b      	ldr	r2, [pc, #364]	@ (8000d8c <__aeabi_dmul+0x328>)
 8000c20:	1aeb      	subs	r3, r5, r3
 8000c22:	4694      	mov	ip, r2
 8000c24:	4463      	add	r3, ip
 8000c26:	1c5a      	adds	r2, r3, #1
 8000c28:	9201      	str	r2, [sp, #4]
 8000c2a:	4642      	mov	r2, r8
 8000c2c:	2600      	movs	r6, #0
 8000c2e:	2a0a      	cmp	r2, #10
 8000c30:	dc00      	bgt.n	8000c34 <__aeabi_dmul+0x1d0>
 8000c32:	e75a      	b.n	8000aea <__aeabi_dmul+0x86>
 8000c34:	e79c      	b.n	8000b70 <__aeabi_dmul+0x10c>
 8000c36:	4653      	mov	r3, sl
 8000c38:	4303      	orrs	r3, r0
 8000c3a:	4699      	mov	r9, r3
 8000c3c:	d054      	beq.n	8000ce8 <__aeabi_dmul+0x284>
 8000c3e:	4653      	mov	r3, sl
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d100      	bne.n	8000c46 <__aeabi_dmul+0x1e2>
 8000c44:	e177      	b.n	8000f36 <__aeabi_dmul+0x4d2>
 8000c46:	4650      	mov	r0, sl
 8000c48:	f000 fe0e 	bl	8001868 <__clzsi2>
 8000c4c:	230b      	movs	r3, #11
 8000c4e:	425b      	negs	r3, r3
 8000c50:	469c      	mov	ip, r3
 8000c52:	0002      	movs	r2, r0
 8000c54:	4484      	add	ip, r0
 8000c56:	0011      	movs	r1, r2
 8000c58:	4650      	mov	r0, sl
 8000c5a:	3908      	subs	r1, #8
 8000c5c:	4088      	lsls	r0, r1
 8000c5e:	231d      	movs	r3, #29
 8000c60:	4680      	mov	r8, r0
 8000c62:	4660      	mov	r0, ip
 8000c64:	1a1b      	subs	r3, r3, r0
 8000c66:	0020      	movs	r0, r4
 8000c68:	40d8      	lsrs	r0, r3
 8000c6a:	0003      	movs	r3, r0
 8000c6c:	4640      	mov	r0, r8
 8000c6e:	4303      	orrs	r3, r0
 8000c70:	469a      	mov	sl, r3
 8000c72:	0023      	movs	r3, r4
 8000c74:	408b      	lsls	r3, r1
 8000c76:	4699      	mov	r9, r3
 8000c78:	2300      	movs	r3, #0
 8000c7a:	4d44      	ldr	r5, [pc, #272]	@ (8000d8c <__aeabi_dmul+0x328>)
 8000c7c:	4698      	mov	r8, r3
 8000c7e:	1aad      	subs	r5, r5, r2
 8000c80:	9302      	str	r3, [sp, #8]
 8000c82:	e715      	b.n	8000ab0 <__aeabi_dmul+0x4c>
 8000c84:	4652      	mov	r2, sl
 8000c86:	4302      	orrs	r2, r0
 8000c88:	4691      	mov	r9, r2
 8000c8a:	d126      	bne.n	8000cda <__aeabi_dmul+0x276>
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	001d      	movs	r5, r3
 8000c90:	2302      	movs	r3, #2
 8000c92:	4692      	mov	sl, r2
 8000c94:	3208      	adds	r2, #8
 8000c96:	4690      	mov	r8, r2
 8000c98:	9302      	str	r3, [sp, #8]
 8000c9a:	e709      	b.n	8000ab0 <__aeabi_dmul+0x4c>
 8000c9c:	2400      	movs	r4, #0
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	4b35      	ldr	r3, [pc, #212]	@ (8000d78 <__aeabi_dmul+0x314>)
 8000ca2:	e735      	b.n	8000b10 <__aeabi_dmul+0xac>
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	2480      	movs	r4, #128	@ 0x80
 8000ca8:	469b      	mov	fp, r3
 8000caa:	0324      	lsls	r4, r4, #12
 8000cac:	4b32      	ldr	r3, [pc, #200]	@ (8000d78 <__aeabi_dmul+0x314>)
 8000cae:	e72f      	b.n	8000b10 <__aeabi_dmul+0xac>
 8000cb0:	2202      	movs	r2, #2
 8000cb2:	4641      	mov	r1, r8
 8000cb4:	4311      	orrs	r1, r2
 8000cb6:	2280      	movs	r2, #128	@ 0x80
 8000cb8:	0112      	lsls	r2, r2, #4
 8000cba:	4694      	mov	ip, r2
 8000cbc:	002a      	movs	r2, r5
 8000cbe:	4462      	add	r2, ip
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	9201      	str	r2, [sp, #4]
 8000cc4:	290a      	cmp	r1, #10
 8000cc6:	dd00      	ble.n	8000cca <__aeabi_dmul+0x266>
 8000cc8:	e752      	b.n	8000b70 <__aeabi_dmul+0x10c>
 8000cca:	465a      	mov	r2, fp
 8000ccc:	2000      	movs	r0, #0
 8000cce:	9900      	ldr	r1, [sp, #0]
 8000cd0:	0004      	movs	r4, r0
 8000cd2:	404a      	eors	r2, r1
 8000cd4:	4693      	mov	fp, r2
 8000cd6:	2602      	movs	r6, #2
 8000cd8:	e70b      	b.n	8000af2 <__aeabi_dmul+0x8e>
 8000cda:	220c      	movs	r2, #12
 8000cdc:	001d      	movs	r5, r3
 8000cde:	2303      	movs	r3, #3
 8000ce0:	4681      	mov	r9, r0
 8000ce2:	4690      	mov	r8, r2
 8000ce4:	9302      	str	r3, [sp, #8]
 8000ce6:	e6e3      	b.n	8000ab0 <__aeabi_dmul+0x4c>
 8000ce8:	2300      	movs	r3, #0
 8000cea:	469a      	mov	sl, r3
 8000cec:	3304      	adds	r3, #4
 8000cee:	4698      	mov	r8, r3
 8000cf0:	3b03      	subs	r3, #3
 8000cf2:	2500      	movs	r5, #0
 8000cf4:	9302      	str	r3, [sp, #8]
 8000cf6:	e6db      	b.n	8000ab0 <__aeabi_dmul+0x4c>
 8000cf8:	4642      	mov	r2, r8
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	431a      	orrs	r2, r3
 8000cfe:	002b      	movs	r3, r5
 8000d00:	4690      	mov	r8, r2
 8000d02:	1c5a      	adds	r2, r3, #1
 8000d04:	9201      	str	r2, [sp, #4]
 8000d06:	4642      	mov	r2, r8
 8000d08:	2400      	movs	r4, #0
 8000d0a:	2000      	movs	r0, #0
 8000d0c:	2601      	movs	r6, #1
 8000d0e:	2a0a      	cmp	r2, #10
 8000d10:	dc00      	bgt.n	8000d14 <__aeabi_dmul+0x2b0>
 8000d12:	e6ea      	b.n	8000aea <__aeabi_dmul+0x86>
 8000d14:	e72c      	b.n	8000b70 <__aeabi_dmul+0x10c>
 8000d16:	2201      	movs	r2, #1
 8000d18:	1ad2      	subs	r2, r2, r3
 8000d1a:	2a38      	cmp	r2, #56	@ 0x38
 8000d1c:	dd00      	ble.n	8000d20 <__aeabi_dmul+0x2bc>
 8000d1e:	e6f4      	b.n	8000b0a <__aeabi_dmul+0xa6>
 8000d20:	2a1f      	cmp	r2, #31
 8000d22:	dc00      	bgt.n	8000d26 <__aeabi_dmul+0x2c2>
 8000d24:	e12a      	b.n	8000f7c <__aeabi_dmul+0x518>
 8000d26:	211f      	movs	r1, #31
 8000d28:	4249      	negs	r1, r1
 8000d2a:	1acb      	subs	r3, r1, r3
 8000d2c:	0021      	movs	r1, r4
 8000d2e:	40d9      	lsrs	r1, r3
 8000d30:	000b      	movs	r3, r1
 8000d32:	2a20      	cmp	r2, #32
 8000d34:	d005      	beq.n	8000d42 <__aeabi_dmul+0x2de>
 8000d36:	4a16      	ldr	r2, [pc, #88]	@ (8000d90 <__aeabi_dmul+0x32c>)
 8000d38:	9d01      	ldr	r5, [sp, #4]
 8000d3a:	4694      	mov	ip, r2
 8000d3c:	4465      	add	r5, ip
 8000d3e:	40ac      	lsls	r4, r5
 8000d40:	4320      	orrs	r0, r4
 8000d42:	1e42      	subs	r2, r0, #1
 8000d44:	4190      	sbcs	r0, r2
 8000d46:	4318      	orrs	r0, r3
 8000d48:	2307      	movs	r3, #7
 8000d4a:	0019      	movs	r1, r3
 8000d4c:	2400      	movs	r4, #0
 8000d4e:	4001      	ands	r1, r0
 8000d50:	4203      	tst	r3, r0
 8000d52:	d00c      	beq.n	8000d6e <__aeabi_dmul+0x30a>
 8000d54:	230f      	movs	r3, #15
 8000d56:	4003      	ands	r3, r0
 8000d58:	2b04      	cmp	r3, #4
 8000d5a:	d100      	bne.n	8000d5e <__aeabi_dmul+0x2fa>
 8000d5c:	e140      	b.n	8000fe0 <__aeabi_dmul+0x57c>
 8000d5e:	1d03      	adds	r3, r0, #4
 8000d60:	4283      	cmp	r3, r0
 8000d62:	41a4      	sbcs	r4, r4
 8000d64:	0018      	movs	r0, r3
 8000d66:	4264      	negs	r4, r4
 8000d68:	0761      	lsls	r1, r4, #29
 8000d6a:	0264      	lsls	r4, r4, #9
 8000d6c:	0b24      	lsrs	r4, r4, #12
 8000d6e:	08c2      	lsrs	r2, r0, #3
 8000d70:	2300      	movs	r3, #0
 8000d72:	430a      	orrs	r2, r1
 8000d74:	e6cc      	b.n	8000b10 <__aeabi_dmul+0xac>
 8000d76:	46c0      	nop			@ (mov r8, r8)
 8000d78:	000007ff 	.word	0x000007ff
 8000d7c:	fffffc01 	.word	0xfffffc01
 8000d80:	000003ff 	.word	0x000003ff
 8000d84:	feffffff 	.word	0xfeffffff
 8000d88:	000007fe 	.word	0x000007fe
 8000d8c:	fffffc0d 	.word	0xfffffc0d
 8000d90:	0000043e 	.word	0x0000043e
 8000d94:	4649      	mov	r1, r9
 8000d96:	464a      	mov	r2, r9
 8000d98:	0409      	lsls	r1, r1, #16
 8000d9a:	0c09      	lsrs	r1, r1, #16
 8000d9c:	000d      	movs	r5, r1
 8000d9e:	0c16      	lsrs	r6, r2, #16
 8000da0:	0c02      	lsrs	r2, r0, #16
 8000da2:	0400      	lsls	r0, r0, #16
 8000da4:	0c00      	lsrs	r0, r0, #16
 8000da6:	4345      	muls	r5, r0
 8000da8:	46ac      	mov	ip, r5
 8000daa:	0005      	movs	r5, r0
 8000dac:	4375      	muls	r5, r6
 8000dae:	46a8      	mov	r8, r5
 8000db0:	0015      	movs	r5, r2
 8000db2:	000f      	movs	r7, r1
 8000db4:	4375      	muls	r5, r6
 8000db6:	9200      	str	r2, [sp, #0]
 8000db8:	9502      	str	r5, [sp, #8]
 8000dba:	002a      	movs	r2, r5
 8000dbc:	9d00      	ldr	r5, [sp, #0]
 8000dbe:	436f      	muls	r7, r5
 8000dc0:	4665      	mov	r5, ip
 8000dc2:	0c2d      	lsrs	r5, r5, #16
 8000dc4:	46a9      	mov	r9, r5
 8000dc6:	4447      	add	r7, r8
 8000dc8:	444f      	add	r7, r9
 8000dca:	45b8      	cmp	r8, r7
 8000dcc:	d905      	bls.n	8000dda <__aeabi_dmul+0x376>
 8000dce:	0015      	movs	r5, r2
 8000dd0:	2280      	movs	r2, #128	@ 0x80
 8000dd2:	0252      	lsls	r2, r2, #9
 8000dd4:	4690      	mov	r8, r2
 8000dd6:	4445      	add	r5, r8
 8000dd8:	9502      	str	r5, [sp, #8]
 8000dda:	0c3d      	lsrs	r5, r7, #16
 8000ddc:	9503      	str	r5, [sp, #12]
 8000dde:	4665      	mov	r5, ip
 8000de0:	042d      	lsls	r5, r5, #16
 8000de2:	043f      	lsls	r7, r7, #16
 8000de4:	0c2d      	lsrs	r5, r5, #16
 8000de6:	46ac      	mov	ip, r5
 8000de8:	003d      	movs	r5, r7
 8000dea:	4465      	add	r5, ip
 8000dec:	9504      	str	r5, [sp, #16]
 8000dee:	0c25      	lsrs	r5, r4, #16
 8000df0:	0424      	lsls	r4, r4, #16
 8000df2:	0c24      	lsrs	r4, r4, #16
 8000df4:	46ac      	mov	ip, r5
 8000df6:	0025      	movs	r5, r4
 8000df8:	4375      	muls	r5, r6
 8000dfa:	46a8      	mov	r8, r5
 8000dfc:	4665      	mov	r5, ip
 8000dfe:	000f      	movs	r7, r1
 8000e00:	4369      	muls	r1, r5
 8000e02:	4441      	add	r1, r8
 8000e04:	4689      	mov	r9, r1
 8000e06:	4367      	muls	r7, r4
 8000e08:	0c39      	lsrs	r1, r7, #16
 8000e0a:	4449      	add	r1, r9
 8000e0c:	436e      	muls	r6, r5
 8000e0e:	4588      	cmp	r8, r1
 8000e10:	d903      	bls.n	8000e1a <__aeabi_dmul+0x3b6>
 8000e12:	2280      	movs	r2, #128	@ 0x80
 8000e14:	0252      	lsls	r2, r2, #9
 8000e16:	4690      	mov	r8, r2
 8000e18:	4446      	add	r6, r8
 8000e1a:	0c0d      	lsrs	r5, r1, #16
 8000e1c:	46a8      	mov	r8, r5
 8000e1e:	0035      	movs	r5, r6
 8000e20:	4445      	add	r5, r8
 8000e22:	9505      	str	r5, [sp, #20]
 8000e24:	9d03      	ldr	r5, [sp, #12]
 8000e26:	043f      	lsls	r7, r7, #16
 8000e28:	46a8      	mov	r8, r5
 8000e2a:	0c3f      	lsrs	r7, r7, #16
 8000e2c:	0409      	lsls	r1, r1, #16
 8000e2e:	19c9      	adds	r1, r1, r7
 8000e30:	4488      	add	r8, r1
 8000e32:	4645      	mov	r5, r8
 8000e34:	9503      	str	r5, [sp, #12]
 8000e36:	4655      	mov	r5, sl
 8000e38:	042e      	lsls	r6, r5, #16
 8000e3a:	0c36      	lsrs	r6, r6, #16
 8000e3c:	0c2f      	lsrs	r7, r5, #16
 8000e3e:	0035      	movs	r5, r6
 8000e40:	4345      	muls	r5, r0
 8000e42:	4378      	muls	r0, r7
 8000e44:	4681      	mov	r9, r0
 8000e46:	0038      	movs	r0, r7
 8000e48:	46a8      	mov	r8, r5
 8000e4a:	0c2d      	lsrs	r5, r5, #16
 8000e4c:	46aa      	mov	sl, r5
 8000e4e:	9a00      	ldr	r2, [sp, #0]
 8000e50:	4350      	muls	r0, r2
 8000e52:	4372      	muls	r2, r6
 8000e54:	444a      	add	r2, r9
 8000e56:	4452      	add	r2, sl
 8000e58:	4591      	cmp	r9, r2
 8000e5a:	d903      	bls.n	8000e64 <__aeabi_dmul+0x400>
 8000e5c:	2580      	movs	r5, #128	@ 0x80
 8000e5e:	026d      	lsls	r5, r5, #9
 8000e60:	46a9      	mov	r9, r5
 8000e62:	4448      	add	r0, r9
 8000e64:	0c15      	lsrs	r5, r2, #16
 8000e66:	46a9      	mov	r9, r5
 8000e68:	4645      	mov	r5, r8
 8000e6a:	042d      	lsls	r5, r5, #16
 8000e6c:	0c2d      	lsrs	r5, r5, #16
 8000e6e:	46a8      	mov	r8, r5
 8000e70:	4665      	mov	r5, ip
 8000e72:	437d      	muls	r5, r7
 8000e74:	0412      	lsls	r2, r2, #16
 8000e76:	4448      	add	r0, r9
 8000e78:	4490      	add	r8, r2
 8000e7a:	46a9      	mov	r9, r5
 8000e7c:	0032      	movs	r2, r6
 8000e7e:	4665      	mov	r5, ip
 8000e80:	4362      	muls	r2, r4
 8000e82:	436e      	muls	r6, r5
 8000e84:	437c      	muls	r4, r7
 8000e86:	0c17      	lsrs	r7, r2, #16
 8000e88:	1936      	adds	r6, r6, r4
 8000e8a:	19bf      	adds	r7, r7, r6
 8000e8c:	42bc      	cmp	r4, r7
 8000e8e:	d903      	bls.n	8000e98 <__aeabi_dmul+0x434>
 8000e90:	2480      	movs	r4, #128	@ 0x80
 8000e92:	0264      	lsls	r4, r4, #9
 8000e94:	46a4      	mov	ip, r4
 8000e96:	44e1      	add	r9, ip
 8000e98:	9c02      	ldr	r4, [sp, #8]
 8000e9a:	9e03      	ldr	r6, [sp, #12]
 8000e9c:	46a4      	mov	ip, r4
 8000e9e:	9d05      	ldr	r5, [sp, #20]
 8000ea0:	4466      	add	r6, ip
 8000ea2:	428e      	cmp	r6, r1
 8000ea4:	4189      	sbcs	r1, r1
 8000ea6:	46ac      	mov	ip, r5
 8000ea8:	0412      	lsls	r2, r2, #16
 8000eaa:	043c      	lsls	r4, r7, #16
 8000eac:	0c12      	lsrs	r2, r2, #16
 8000eae:	18a2      	adds	r2, r4, r2
 8000eb0:	4462      	add	r2, ip
 8000eb2:	4249      	negs	r1, r1
 8000eb4:	1854      	adds	r4, r2, r1
 8000eb6:	4446      	add	r6, r8
 8000eb8:	46a4      	mov	ip, r4
 8000eba:	4546      	cmp	r6, r8
 8000ebc:	41a4      	sbcs	r4, r4
 8000ebe:	4682      	mov	sl, r0
 8000ec0:	4264      	negs	r4, r4
 8000ec2:	46a0      	mov	r8, r4
 8000ec4:	42aa      	cmp	r2, r5
 8000ec6:	4192      	sbcs	r2, r2
 8000ec8:	458c      	cmp	ip, r1
 8000eca:	4189      	sbcs	r1, r1
 8000ecc:	44e2      	add	sl, ip
 8000ece:	44d0      	add	r8, sl
 8000ed0:	4249      	negs	r1, r1
 8000ed2:	4252      	negs	r2, r2
 8000ed4:	430a      	orrs	r2, r1
 8000ed6:	45a0      	cmp	r8, r4
 8000ed8:	41a4      	sbcs	r4, r4
 8000eda:	4582      	cmp	sl, r0
 8000edc:	4189      	sbcs	r1, r1
 8000ede:	4264      	negs	r4, r4
 8000ee0:	4249      	negs	r1, r1
 8000ee2:	430c      	orrs	r4, r1
 8000ee4:	4641      	mov	r1, r8
 8000ee6:	0c3f      	lsrs	r7, r7, #16
 8000ee8:	19d2      	adds	r2, r2, r7
 8000eea:	1912      	adds	r2, r2, r4
 8000eec:	0dcc      	lsrs	r4, r1, #23
 8000eee:	9904      	ldr	r1, [sp, #16]
 8000ef0:	0270      	lsls	r0, r6, #9
 8000ef2:	4308      	orrs	r0, r1
 8000ef4:	1e41      	subs	r1, r0, #1
 8000ef6:	4188      	sbcs	r0, r1
 8000ef8:	4641      	mov	r1, r8
 8000efa:	444a      	add	r2, r9
 8000efc:	0df6      	lsrs	r6, r6, #23
 8000efe:	0252      	lsls	r2, r2, #9
 8000f00:	4330      	orrs	r0, r6
 8000f02:	0249      	lsls	r1, r1, #9
 8000f04:	4314      	orrs	r4, r2
 8000f06:	4308      	orrs	r0, r1
 8000f08:	01d2      	lsls	r2, r2, #7
 8000f0a:	d535      	bpl.n	8000f78 <__aeabi_dmul+0x514>
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	0843      	lsrs	r3, r0, #1
 8000f10:	4002      	ands	r2, r0
 8000f12:	4313      	orrs	r3, r2
 8000f14:	07e0      	lsls	r0, r4, #31
 8000f16:	4318      	orrs	r0, r3
 8000f18:	0864      	lsrs	r4, r4, #1
 8000f1a:	e634      	b.n	8000b86 <__aeabi_dmul+0x122>
 8000f1c:	9b00      	ldr	r3, [sp, #0]
 8000f1e:	46a2      	mov	sl, r4
 8000f20:	469b      	mov	fp, r3
 8000f22:	4681      	mov	r9, r0
 8000f24:	2480      	movs	r4, #128	@ 0x80
 8000f26:	4653      	mov	r3, sl
 8000f28:	0324      	lsls	r4, r4, #12
 8000f2a:	431c      	orrs	r4, r3
 8000f2c:	0324      	lsls	r4, r4, #12
 8000f2e:	464a      	mov	r2, r9
 8000f30:	4b2e      	ldr	r3, [pc, #184]	@ (8000fec <__aeabi_dmul+0x588>)
 8000f32:	0b24      	lsrs	r4, r4, #12
 8000f34:	e5ec      	b.n	8000b10 <__aeabi_dmul+0xac>
 8000f36:	f000 fc97 	bl	8001868 <__clzsi2>
 8000f3a:	2315      	movs	r3, #21
 8000f3c:	469c      	mov	ip, r3
 8000f3e:	4484      	add	ip, r0
 8000f40:	0002      	movs	r2, r0
 8000f42:	4663      	mov	r3, ip
 8000f44:	3220      	adds	r2, #32
 8000f46:	2b1c      	cmp	r3, #28
 8000f48:	dc00      	bgt.n	8000f4c <__aeabi_dmul+0x4e8>
 8000f4a:	e684      	b.n	8000c56 <__aeabi_dmul+0x1f2>
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	4699      	mov	r9, r3
 8000f50:	0023      	movs	r3, r4
 8000f52:	3808      	subs	r0, #8
 8000f54:	4083      	lsls	r3, r0
 8000f56:	469a      	mov	sl, r3
 8000f58:	e68e      	b.n	8000c78 <__aeabi_dmul+0x214>
 8000f5a:	f000 fc85 	bl	8001868 <__clzsi2>
 8000f5e:	0002      	movs	r2, r0
 8000f60:	0003      	movs	r3, r0
 8000f62:	3215      	adds	r2, #21
 8000f64:	3320      	adds	r3, #32
 8000f66:	2a1c      	cmp	r2, #28
 8000f68:	dc00      	bgt.n	8000f6c <__aeabi_dmul+0x508>
 8000f6a:	e64e      	b.n	8000c0a <__aeabi_dmul+0x1a6>
 8000f6c:	0002      	movs	r2, r0
 8000f6e:	0034      	movs	r4, r6
 8000f70:	3a08      	subs	r2, #8
 8000f72:	2000      	movs	r0, #0
 8000f74:	4094      	lsls	r4, r2
 8000f76:	e652      	b.n	8000c1e <__aeabi_dmul+0x1ba>
 8000f78:	9301      	str	r3, [sp, #4]
 8000f7a:	e604      	b.n	8000b86 <__aeabi_dmul+0x122>
 8000f7c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ff0 <__aeabi_dmul+0x58c>)
 8000f7e:	0021      	movs	r1, r4
 8000f80:	469c      	mov	ip, r3
 8000f82:	0003      	movs	r3, r0
 8000f84:	9d01      	ldr	r5, [sp, #4]
 8000f86:	40d3      	lsrs	r3, r2
 8000f88:	4465      	add	r5, ip
 8000f8a:	40a9      	lsls	r1, r5
 8000f8c:	4319      	orrs	r1, r3
 8000f8e:	0003      	movs	r3, r0
 8000f90:	40ab      	lsls	r3, r5
 8000f92:	1e58      	subs	r0, r3, #1
 8000f94:	4183      	sbcs	r3, r0
 8000f96:	4319      	orrs	r1, r3
 8000f98:	0008      	movs	r0, r1
 8000f9a:	40d4      	lsrs	r4, r2
 8000f9c:	074b      	lsls	r3, r1, #29
 8000f9e:	d009      	beq.n	8000fb4 <__aeabi_dmul+0x550>
 8000fa0:	230f      	movs	r3, #15
 8000fa2:	400b      	ands	r3, r1
 8000fa4:	2b04      	cmp	r3, #4
 8000fa6:	d005      	beq.n	8000fb4 <__aeabi_dmul+0x550>
 8000fa8:	1d0b      	adds	r3, r1, #4
 8000faa:	428b      	cmp	r3, r1
 8000fac:	4180      	sbcs	r0, r0
 8000fae:	4240      	negs	r0, r0
 8000fb0:	1824      	adds	r4, r4, r0
 8000fb2:	0018      	movs	r0, r3
 8000fb4:	0223      	lsls	r3, r4, #8
 8000fb6:	d400      	bmi.n	8000fba <__aeabi_dmul+0x556>
 8000fb8:	e6d6      	b.n	8000d68 <__aeabi_dmul+0x304>
 8000fba:	2301      	movs	r3, #1
 8000fbc:	2400      	movs	r4, #0
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	e5a6      	b.n	8000b10 <__aeabi_dmul+0xac>
 8000fc2:	290f      	cmp	r1, #15
 8000fc4:	d1aa      	bne.n	8000f1c <__aeabi_dmul+0x4b8>
 8000fc6:	2380      	movs	r3, #128	@ 0x80
 8000fc8:	4652      	mov	r2, sl
 8000fca:	031b      	lsls	r3, r3, #12
 8000fcc:	421a      	tst	r2, r3
 8000fce:	d0a9      	beq.n	8000f24 <__aeabi_dmul+0x4c0>
 8000fd0:	421c      	tst	r4, r3
 8000fd2:	d1a7      	bne.n	8000f24 <__aeabi_dmul+0x4c0>
 8000fd4:	431c      	orrs	r4, r3
 8000fd6:	9b00      	ldr	r3, [sp, #0]
 8000fd8:	0002      	movs	r2, r0
 8000fda:	469b      	mov	fp, r3
 8000fdc:	4b03      	ldr	r3, [pc, #12]	@ (8000fec <__aeabi_dmul+0x588>)
 8000fde:	e597      	b.n	8000b10 <__aeabi_dmul+0xac>
 8000fe0:	2400      	movs	r4, #0
 8000fe2:	e6c1      	b.n	8000d68 <__aeabi_dmul+0x304>
 8000fe4:	2400      	movs	r4, #0
 8000fe6:	4b01      	ldr	r3, [pc, #4]	@ (8000fec <__aeabi_dmul+0x588>)
 8000fe8:	0022      	movs	r2, r4
 8000fea:	e591      	b.n	8000b10 <__aeabi_dmul+0xac>
 8000fec:	000007ff 	.word	0x000007ff
 8000ff0:	0000041e 	.word	0x0000041e

08000ff4 <__aeabi_dsub>:
 8000ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ff6:	464e      	mov	r6, r9
 8000ff8:	4645      	mov	r5, r8
 8000ffa:	46de      	mov	lr, fp
 8000ffc:	4657      	mov	r7, sl
 8000ffe:	b5e0      	push	{r5, r6, r7, lr}
 8001000:	b085      	sub	sp, #20
 8001002:	9000      	str	r0, [sp, #0]
 8001004:	9101      	str	r1, [sp, #4]
 8001006:	030c      	lsls	r4, r1, #12
 8001008:	004f      	lsls	r7, r1, #1
 800100a:	0fce      	lsrs	r6, r1, #31
 800100c:	0a61      	lsrs	r1, r4, #9
 800100e:	9c00      	ldr	r4, [sp, #0]
 8001010:	46b0      	mov	r8, r6
 8001012:	0f64      	lsrs	r4, r4, #29
 8001014:	430c      	orrs	r4, r1
 8001016:	9900      	ldr	r1, [sp, #0]
 8001018:	0d7f      	lsrs	r7, r7, #21
 800101a:	00c8      	lsls	r0, r1, #3
 800101c:	0011      	movs	r1, r2
 800101e:	001a      	movs	r2, r3
 8001020:	031b      	lsls	r3, r3, #12
 8001022:	469c      	mov	ip, r3
 8001024:	9100      	str	r1, [sp, #0]
 8001026:	9201      	str	r2, [sp, #4]
 8001028:	0051      	lsls	r1, r2, #1
 800102a:	0d4b      	lsrs	r3, r1, #21
 800102c:	4699      	mov	r9, r3
 800102e:	9b01      	ldr	r3, [sp, #4]
 8001030:	9d00      	ldr	r5, [sp, #0]
 8001032:	0fd9      	lsrs	r1, r3, #31
 8001034:	4663      	mov	r3, ip
 8001036:	0f6a      	lsrs	r2, r5, #29
 8001038:	0a5b      	lsrs	r3, r3, #9
 800103a:	4313      	orrs	r3, r2
 800103c:	00ea      	lsls	r2, r5, #3
 800103e:	4694      	mov	ip, r2
 8001040:	4693      	mov	fp, r2
 8001042:	4ac1      	ldr	r2, [pc, #772]	@ (8001348 <__aeabi_dsub+0x354>)
 8001044:	9003      	str	r0, [sp, #12]
 8001046:	9302      	str	r3, [sp, #8]
 8001048:	4591      	cmp	r9, r2
 800104a:	d100      	bne.n	800104e <__aeabi_dsub+0x5a>
 800104c:	e0cd      	b.n	80011ea <__aeabi_dsub+0x1f6>
 800104e:	2501      	movs	r5, #1
 8001050:	4069      	eors	r1, r5
 8001052:	464d      	mov	r5, r9
 8001054:	1b7d      	subs	r5, r7, r5
 8001056:	46aa      	mov	sl, r5
 8001058:	428e      	cmp	r6, r1
 800105a:	d100      	bne.n	800105e <__aeabi_dsub+0x6a>
 800105c:	e080      	b.n	8001160 <__aeabi_dsub+0x16c>
 800105e:	2d00      	cmp	r5, #0
 8001060:	dc00      	bgt.n	8001064 <__aeabi_dsub+0x70>
 8001062:	e335      	b.n	80016d0 <__aeabi_dsub+0x6dc>
 8001064:	4649      	mov	r1, r9
 8001066:	2900      	cmp	r1, #0
 8001068:	d100      	bne.n	800106c <__aeabi_dsub+0x78>
 800106a:	e0df      	b.n	800122c <__aeabi_dsub+0x238>
 800106c:	4297      	cmp	r7, r2
 800106e:	d100      	bne.n	8001072 <__aeabi_dsub+0x7e>
 8001070:	e194      	b.n	800139c <__aeabi_dsub+0x3a8>
 8001072:	4652      	mov	r2, sl
 8001074:	2501      	movs	r5, #1
 8001076:	2a38      	cmp	r2, #56	@ 0x38
 8001078:	dc19      	bgt.n	80010ae <__aeabi_dsub+0xba>
 800107a:	2280      	movs	r2, #128	@ 0x80
 800107c:	9b02      	ldr	r3, [sp, #8]
 800107e:	0412      	lsls	r2, r2, #16
 8001080:	4313      	orrs	r3, r2
 8001082:	9302      	str	r3, [sp, #8]
 8001084:	4652      	mov	r2, sl
 8001086:	2a1f      	cmp	r2, #31
 8001088:	dd00      	ble.n	800108c <__aeabi_dsub+0x98>
 800108a:	e1e3      	b.n	8001454 <__aeabi_dsub+0x460>
 800108c:	4653      	mov	r3, sl
 800108e:	2220      	movs	r2, #32
 8001090:	4661      	mov	r1, ip
 8001092:	9d02      	ldr	r5, [sp, #8]
 8001094:	1ad2      	subs	r2, r2, r3
 8001096:	4095      	lsls	r5, r2
 8001098:	40d9      	lsrs	r1, r3
 800109a:	430d      	orrs	r5, r1
 800109c:	4661      	mov	r1, ip
 800109e:	4091      	lsls	r1, r2
 80010a0:	000a      	movs	r2, r1
 80010a2:	1e51      	subs	r1, r2, #1
 80010a4:	418a      	sbcs	r2, r1
 80010a6:	4315      	orrs	r5, r2
 80010a8:	9a02      	ldr	r2, [sp, #8]
 80010aa:	40da      	lsrs	r2, r3
 80010ac:	1aa4      	subs	r4, r4, r2
 80010ae:	1b45      	subs	r5, r0, r5
 80010b0:	42a8      	cmp	r0, r5
 80010b2:	4180      	sbcs	r0, r0
 80010b4:	4240      	negs	r0, r0
 80010b6:	1a24      	subs	r4, r4, r0
 80010b8:	0223      	lsls	r3, r4, #8
 80010ba:	d400      	bmi.n	80010be <__aeabi_dsub+0xca>
 80010bc:	e13d      	b.n	800133a <__aeabi_dsub+0x346>
 80010be:	0264      	lsls	r4, r4, #9
 80010c0:	0a64      	lsrs	r4, r4, #9
 80010c2:	2c00      	cmp	r4, #0
 80010c4:	d100      	bne.n	80010c8 <__aeabi_dsub+0xd4>
 80010c6:	e147      	b.n	8001358 <__aeabi_dsub+0x364>
 80010c8:	0020      	movs	r0, r4
 80010ca:	f000 fbcd 	bl	8001868 <__clzsi2>
 80010ce:	0003      	movs	r3, r0
 80010d0:	3b08      	subs	r3, #8
 80010d2:	2120      	movs	r1, #32
 80010d4:	0028      	movs	r0, r5
 80010d6:	1aca      	subs	r2, r1, r3
 80010d8:	40d0      	lsrs	r0, r2
 80010da:	409c      	lsls	r4, r3
 80010dc:	0002      	movs	r2, r0
 80010de:	409d      	lsls	r5, r3
 80010e0:	4322      	orrs	r2, r4
 80010e2:	429f      	cmp	r7, r3
 80010e4:	dd00      	ble.n	80010e8 <__aeabi_dsub+0xf4>
 80010e6:	e177      	b.n	80013d8 <__aeabi_dsub+0x3e4>
 80010e8:	1bd8      	subs	r0, r3, r7
 80010ea:	3001      	adds	r0, #1
 80010ec:	1a09      	subs	r1, r1, r0
 80010ee:	002c      	movs	r4, r5
 80010f0:	408d      	lsls	r5, r1
 80010f2:	40c4      	lsrs	r4, r0
 80010f4:	1e6b      	subs	r3, r5, #1
 80010f6:	419d      	sbcs	r5, r3
 80010f8:	0013      	movs	r3, r2
 80010fa:	40c2      	lsrs	r2, r0
 80010fc:	408b      	lsls	r3, r1
 80010fe:	4325      	orrs	r5, r4
 8001100:	2700      	movs	r7, #0
 8001102:	0014      	movs	r4, r2
 8001104:	431d      	orrs	r5, r3
 8001106:	076b      	lsls	r3, r5, #29
 8001108:	d009      	beq.n	800111e <__aeabi_dsub+0x12a>
 800110a:	230f      	movs	r3, #15
 800110c:	402b      	ands	r3, r5
 800110e:	2b04      	cmp	r3, #4
 8001110:	d005      	beq.n	800111e <__aeabi_dsub+0x12a>
 8001112:	1d2b      	adds	r3, r5, #4
 8001114:	42ab      	cmp	r3, r5
 8001116:	41ad      	sbcs	r5, r5
 8001118:	426d      	negs	r5, r5
 800111a:	1964      	adds	r4, r4, r5
 800111c:	001d      	movs	r5, r3
 800111e:	0223      	lsls	r3, r4, #8
 8001120:	d400      	bmi.n	8001124 <__aeabi_dsub+0x130>
 8001122:	e140      	b.n	80013a6 <__aeabi_dsub+0x3b2>
 8001124:	4a88      	ldr	r2, [pc, #544]	@ (8001348 <__aeabi_dsub+0x354>)
 8001126:	3701      	adds	r7, #1
 8001128:	4297      	cmp	r7, r2
 800112a:	d100      	bne.n	800112e <__aeabi_dsub+0x13a>
 800112c:	e101      	b.n	8001332 <__aeabi_dsub+0x33e>
 800112e:	2601      	movs	r6, #1
 8001130:	4643      	mov	r3, r8
 8001132:	4986      	ldr	r1, [pc, #536]	@ (800134c <__aeabi_dsub+0x358>)
 8001134:	08ed      	lsrs	r5, r5, #3
 8001136:	4021      	ands	r1, r4
 8001138:	074a      	lsls	r2, r1, #29
 800113a:	432a      	orrs	r2, r5
 800113c:	057c      	lsls	r4, r7, #21
 800113e:	024d      	lsls	r5, r1, #9
 8001140:	0b2d      	lsrs	r5, r5, #12
 8001142:	0d64      	lsrs	r4, r4, #21
 8001144:	401e      	ands	r6, r3
 8001146:	0524      	lsls	r4, r4, #20
 8001148:	432c      	orrs	r4, r5
 800114a:	07f6      	lsls	r6, r6, #31
 800114c:	4334      	orrs	r4, r6
 800114e:	0010      	movs	r0, r2
 8001150:	0021      	movs	r1, r4
 8001152:	b005      	add	sp, #20
 8001154:	bcf0      	pop	{r4, r5, r6, r7}
 8001156:	46bb      	mov	fp, r7
 8001158:	46b2      	mov	sl, r6
 800115a:	46a9      	mov	r9, r5
 800115c:	46a0      	mov	r8, r4
 800115e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001160:	2d00      	cmp	r5, #0
 8001162:	dc00      	bgt.n	8001166 <__aeabi_dsub+0x172>
 8001164:	e2d0      	b.n	8001708 <__aeabi_dsub+0x714>
 8001166:	4649      	mov	r1, r9
 8001168:	2900      	cmp	r1, #0
 800116a:	d000      	beq.n	800116e <__aeabi_dsub+0x17a>
 800116c:	e0d4      	b.n	8001318 <__aeabi_dsub+0x324>
 800116e:	4661      	mov	r1, ip
 8001170:	9b02      	ldr	r3, [sp, #8]
 8001172:	4319      	orrs	r1, r3
 8001174:	d100      	bne.n	8001178 <__aeabi_dsub+0x184>
 8001176:	e12b      	b.n	80013d0 <__aeabi_dsub+0x3dc>
 8001178:	1e69      	subs	r1, r5, #1
 800117a:	2d01      	cmp	r5, #1
 800117c:	d100      	bne.n	8001180 <__aeabi_dsub+0x18c>
 800117e:	e1d9      	b.n	8001534 <__aeabi_dsub+0x540>
 8001180:	4295      	cmp	r5, r2
 8001182:	d100      	bne.n	8001186 <__aeabi_dsub+0x192>
 8001184:	e10a      	b.n	800139c <__aeabi_dsub+0x3a8>
 8001186:	2501      	movs	r5, #1
 8001188:	2938      	cmp	r1, #56	@ 0x38
 800118a:	dc17      	bgt.n	80011bc <__aeabi_dsub+0x1c8>
 800118c:	468a      	mov	sl, r1
 800118e:	4653      	mov	r3, sl
 8001190:	2b1f      	cmp	r3, #31
 8001192:	dd00      	ble.n	8001196 <__aeabi_dsub+0x1a2>
 8001194:	e1e7      	b.n	8001566 <__aeabi_dsub+0x572>
 8001196:	2220      	movs	r2, #32
 8001198:	1ad2      	subs	r2, r2, r3
 800119a:	9b02      	ldr	r3, [sp, #8]
 800119c:	4661      	mov	r1, ip
 800119e:	4093      	lsls	r3, r2
 80011a0:	001d      	movs	r5, r3
 80011a2:	4653      	mov	r3, sl
 80011a4:	40d9      	lsrs	r1, r3
 80011a6:	4663      	mov	r3, ip
 80011a8:	4093      	lsls	r3, r2
 80011aa:	001a      	movs	r2, r3
 80011ac:	430d      	orrs	r5, r1
 80011ae:	1e51      	subs	r1, r2, #1
 80011b0:	418a      	sbcs	r2, r1
 80011b2:	4653      	mov	r3, sl
 80011b4:	4315      	orrs	r5, r2
 80011b6:	9a02      	ldr	r2, [sp, #8]
 80011b8:	40da      	lsrs	r2, r3
 80011ba:	18a4      	adds	r4, r4, r2
 80011bc:	182d      	adds	r5, r5, r0
 80011be:	4285      	cmp	r5, r0
 80011c0:	4180      	sbcs	r0, r0
 80011c2:	4240      	negs	r0, r0
 80011c4:	1824      	adds	r4, r4, r0
 80011c6:	0223      	lsls	r3, r4, #8
 80011c8:	d400      	bmi.n	80011cc <__aeabi_dsub+0x1d8>
 80011ca:	e0b6      	b.n	800133a <__aeabi_dsub+0x346>
 80011cc:	4b5e      	ldr	r3, [pc, #376]	@ (8001348 <__aeabi_dsub+0x354>)
 80011ce:	3701      	adds	r7, #1
 80011d0:	429f      	cmp	r7, r3
 80011d2:	d100      	bne.n	80011d6 <__aeabi_dsub+0x1e2>
 80011d4:	e0ad      	b.n	8001332 <__aeabi_dsub+0x33e>
 80011d6:	2101      	movs	r1, #1
 80011d8:	4b5c      	ldr	r3, [pc, #368]	@ (800134c <__aeabi_dsub+0x358>)
 80011da:	086a      	lsrs	r2, r5, #1
 80011dc:	401c      	ands	r4, r3
 80011de:	4029      	ands	r1, r5
 80011e0:	430a      	orrs	r2, r1
 80011e2:	07e5      	lsls	r5, r4, #31
 80011e4:	4315      	orrs	r5, r2
 80011e6:	0864      	lsrs	r4, r4, #1
 80011e8:	e78d      	b.n	8001106 <__aeabi_dsub+0x112>
 80011ea:	4a59      	ldr	r2, [pc, #356]	@ (8001350 <__aeabi_dsub+0x35c>)
 80011ec:	9b02      	ldr	r3, [sp, #8]
 80011ee:	4692      	mov	sl, r2
 80011f0:	4662      	mov	r2, ip
 80011f2:	44ba      	add	sl, r7
 80011f4:	431a      	orrs	r2, r3
 80011f6:	d02c      	beq.n	8001252 <__aeabi_dsub+0x25e>
 80011f8:	428e      	cmp	r6, r1
 80011fa:	d02e      	beq.n	800125a <__aeabi_dsub+0x266>
 80011fc:	4652      	mov	r2, sl
 80011fe:	2a00      	cmp	r2, #0
 8001200:	d060      	beq.n	80012c4 <__aeabi_dsub+0x2d0>
 8001202:	2f00      	cmp	r7, #0
 8001204:	d100      	bne.n	8001208 <__aeabi_dsub+0x214>
 8001206:	e0db      	b.n	80013c0 <__aeabi_dsub+0x3cc>
 8001208:	4663      	mov	r3, ip
 800120a:	000e      	movs	r6, r1
 800120c:	9c02      	ldr	r4, [sp, #8]
 800120e:	08d8      	lsrs	r0, r3, #3
 8001210:	0762      	lsls	r2, r4, #29
 8001212:	4302      	orrs	r2, r0
 8001214:	08e4      	lsrs	r4, r4, #3
 8001216:	0013      	movs	r3, r2
 8001218:	4323      	orrs	r3, r4
 800121a:	d100      	bne.n	800121e <__aeabi_dsub+0x22a>
 800121c:	e254      	b.n	80016c8 <__aeabi_dsub+0x6d4>
 800121e:	2580      	movs	r5, #128	@ 0x80
 8001220:	032d      	lsls	r5, r5, #12
 8001222:	4325      	orrs	r5, r4
 8001224:	032d      	lsls	r5, r5, #12
 8001226:	4c48      	ldr	r4, [pc, #288]	@ (8001348 <__aeabi_dsub+0x354>)
 8001228:	0b2d      	lsrs	r5, r5, #12
 800122a:	e78c      	b.n	8001146 <__aeabi_dsub+0x152>
 800122c:	4661      	mov	r1, ip
 800122e:	9b02      	ldr	r3, [sp, #8]
 8001230:	4319      	orrs	r1, r3
 8001232:	d100      	bne.n	8001236 <__aeabi_dsub+0x242>
 8001234:	e0cc      	b.n	80013d0 <__aeabi_dsub+0x3dc>
 8001236:	0029      	movs	r1, r5
 8001238:	3901      	subs	r1, #1
 800123a:	2d01      	cmp	r5, #1
 800123c:	d100      	bne.n	8001240 <__aeabi_dsub+0x24c>
 800123e:	e188      	b.n	8001552 <__aeabi_dsub+0x55e>
 8001240:	4295      	cmp	r5, r2
 8001242:	d100      	bne.n	8001246 <__aeabi_dsub+0x252>
 8001244:	e0aa      	b.n	800139c <__aeabi_dsub+0x3a8>
 8001246:	2501      	movs	r5, #1
 8001248:	2938      	cmp	r1, #56	@ 0x38
 800124a:	dd00      	ble.n	800124e <__aeabi_dsub+0x25a>
 800124c:	e72f      	b.n	80010ae <__aeabi_dsub+0xba>
 800124e:	468a      	mov	sl, r1
 8001250:	e718      	b.n	8001084 <__aeabi_dsub+0x90>
 8001252:	2201      	movs	r2, #1
 8001254:	4051      	eors	r1, r2
 8001256:	428e      	cmp	r6, r1
 8001258:	d1d0      	bne.n	80011fc <__aeabi_dsub+0x208>
 800125a:	4653      	mov	r3, sl
 800125c:	2b00      	cmp	r3, #0
 800125e:	d100      	bne.n	8001262 <__aeabi_dsub+0x26e>
 8001260:	e0be      	b.n	80013e0 <__aeabi_dsub+0x3ec>
 8001262:	2f00      	cmp	r7, #0
 8001264:	d000      	beq.n	8001268 <__aeabi_dsub+0x274>
 8001266:	e138      	b.n	80014da <__aeabi_dsub+0x4e6>
 8001268:	46ca      	mov	sl, r9
 800126a:	0022      	movs	r2, r4
 800126c:	4302      	orrs	r2, r0
 800126e:	d100      	bne.n	8001272 <__aeabi_dsub+0x27e>
 8001270:	e1e2      	b.n	8001638 <__aeabi_dsub+0x644>
 8001272:	4653      	mov	r3, sl
 8001274:	1e59      	subs	r1, r3, #1
 8001276:	2b01      	cmp	r3, #1
 8001278:	d100      	bne.n	800127c <__aeabi_dsub+0x288>
 800127a:	e20d      	b.n	8001698 <__aeabi_dsub+0x6a4>
 800127c:	4a32      	ldr	r2, [pc, #200]	@ (8001348 <__aeabi_dsub+0x354>)
 800127e:	4592      	cmp	sl, r2
 8001280:	d100      	bne.n	8001284 <__aeabi_dsub+0x290>
 8001282:	e1d2      	b.n	800162a <__aeabi_dsub+0x636>
 8001284:	2701      	movs	r7, #1
 8001286:	2938      	cmp	r1, #56	@ 0x38
 8001288:	dc13      	bgt.n	80012b2 <__aeabi_dsub+0x2be>
 800128a:	291f      	cmp	r1, #31
 800128c:	dd00      	ble.n	8001290 <__aeabi_dsub+0x29c>
 800128e:	e1ee      	b.n	800166e <__aeabi_dsub+0x67a>
 8001290:	2220      	movs	r2, #32
 8001292:	9b02      	ldr	r3, [sp, #8]
 8001294:	1a52      	subs	r2, r2, r1
 8001296:	0025      	movs	r5, r4
 8001298:	0007      	movs	r7, r0
 800129a:	469a      	mov	sl, r3
 800129c:	40cc      	lsrs	r4, r1
 800129e:	4090      	lsls	r0, r2
 80012a0:	4095      	lsls	r5, r2
 80012a2:	40cf      	lsrs	r7, r1
 80012a4:	44a2      	add	sl, r4
 80012a6:	1e42      	subs	r2, r0, #1
 80012a8:	4190      	sbcs	r0, r2
 80012aa:	4653      	mov	r3, sl
 80012ac:	432f      	orrs	r7, r5
 80012ae:	4307      	orrs	r7, r0
 80012b0:	9302      	str	r3, [sp, #8]
 80012b2:	003d      	movs	r5, r7
 80012b4:	4465      	add	r5, ip
 80012b6:	4565      	cmp	r5, ip
 80012b8:	4192      	sbcs	r2, r2
 80012ba:	9b02      	ldr	r3, [sp, #8]
 80012bc:	4252      	negs	r2, r2
 80012be:	464f      	mov	r7, r9
 80012c0:	18d4      	adds	r4, r2, r3
 80012c2:	e780      	b.n	80011c6 <__aeabi_dsub+0x1d2>
 80012c4:	4a23      	ldr	r2, [pc, #140]	@ (8001354 <__aeabi_dsub+0x360>)
 80012c6:	1c7d      	adds	r5, r7, #1
 80012c8:	4215      	tst	r5, r2
 80012ca:	d000      	beq.n	80012ce <__aeabi_dsub+0x2da>
 80012cc:	e0aa      	b.n	8001424 <__aeabi_dsub+0x430>
 80012ce:	4662      	mov	r2, ip
 80012d0:	0025      	movs	r5, r4
 80012d2:	9b02      	ldr	r3, [sp, #8]
 80012d4:	4305      	orrs	r5, r0
 80012d6:	431a      	orrs	r2, r3
 80012d8:	2f00      	cmp	r7, #0
 80012da:	d000      	beq.n	80012de <__aeabi_dsub+0x2ea>
 80012dc:	e0f5      	b.n	80014ca <__aeabi_dsub+0x4d6>
 80012de:	2d00      	cmp	r5, #0
 80012e0:	d100      	bne.n	80012e4 <__aeabi_dsub+0x2f0>
 80012e2:	e16b      	b.n	80015bc <__aeabi_dsub+0x5c8>
 80012e4:	2a00      	cmp	r2, #0
 80012e6:	d100      	bne.n	80012ea <__aeabi_dsub+0x2f6>
 80012e8:	e152      	b.n	8001590 <__aeabi_dsub+0x59c>
 80012ea:	4663      	mov	r3, ip
 80012ec:	1ac5      	subs	r5, r0, r3
 80012ee:	9b02      	ldr	r3, [sp, #8]
 80012f0:	1ae2      	subs	r2, r4, r3
 80012f2:	42a8      	cmp	r0, r5
 80012f4:	419b      	sbcs	r3, r3
 80012f6:	425b      	negs	r3, r3
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	021a      	lsls	r2, r3, #8
 80012fc:	d400      	bmi.n	8001300 <__aeabi_dsub+0x30c>
 80012fe:	e1d5      	b.n	80016ac <__aeabi_dsub+0x6b8>
 8001300:	4663      	mov	r3, ip
 8001302:	1a1d      	subs	r5, r3, r0
 8001304:	45ac      	cmp	ip, r5
 8001306:	4192      	sbcs	r2, r2
 8001308:	2601      	movs	r6, #1
 800130a:	9b02      	ldr	r3, [sp, #8]
 800130c:	4252      	negs	r2, r2
 800130e:	1b1c      	subs	r4, r3, r4
 8001310:	4688      	mov	r8, r1
 8001312:	1aa4      	subs	r4, r4, r2
 8001314:	400e      	ands	r6, r1
 8001316:	e6f6      	b.n	8001106 <__aeabi_dsub+0x112>
 8001318:	4297      	cmp	r7, r2
 800131a:	d03f      	beq.n	800139c <__aeabi_dsub+0x3a8>
 800131c:	4652      	mov	r2, sl
 800131e:	2501      	movs	r5, #1
 8001320:	2a38      	cmp	r2, #56	@ 0x38
 8001322:	dd00      	ble.n	8001326 <__aeabi_dsub+0x332>
 8001324:	e74a      	b.n	80011bc <__aeabi_dsub+0x1c8>
 8001326:	2280      	movs	r2, #128	@ 0x80
 8001328:	9b02      	ldr	r3, [sp, #8]
 800132a:	0412      	lsls	r2, r2, #16
 800132c:	4313      	orrs	r3, r2
 800132e:	9302      	str	r3, [sp, #8]
 8001330:	e72d      	b.n	800118e <__aeabi_dsub+0x19a>
 8001332:	003c      	movs	r4, r7
 8001334:	2500      	movs	r5, #0
 8001336:	2200      	movs	r2, #0
 8001338:	e705      	b.n	8001146 <__aeabi_dsub+0x152>
 800133a:	2307      	movs	r3, #7
 800133c:	402b      	ands	r3, r5
 800133e:	2b00      	cmp	r3, #0
 8001340:	d000      	beq.n	8001344 <__aeabi_dsub+0x350>
 8001342:	e6e2      	b.n	800110a <__aeabi_dsub+0x116>
 8001344:	e06b      	b.n	800141e <__aeabi_dsub+0x42a>
 8001346:	46c0      	nop			@ (mov r8, r8)
 8001348:	000007ff 	.word	0x000007ff
 800134c:	ff7fffff 	.word	0xff7fffff
 8001350:	fffff801 	.word	0xfffff801
 8001354:	000007fe 	.word	0x000007fe
 8001358:	0028      	movs	r0, r5
 800135a:	f000 fa85 	bl	8001868 <__clzsi2>
 800135e:	0003      	movs	r3, r0
 8001360:	3318      	adds	r3, #24
 8001362:	2b1f      	cmp	r3, #31
 8001364:	dc00      	bgt.n	8001368 <__aeabi_dsub+0x374>
 8001366:	e6b4      	b.n	80010d2 <__aeabi_dsub+0xde>
 8001368:	002a      	movs	r2, r5
 800136a:	3808      	subs	r0, #8
 800136c:	4082      	lsls	r2, r0
 800136e:	429f      	cmp	r7, r3
 8001370:	dd00      	ble.n	8001374 <__aeabi_dsub+0x380>
 8001372:	e0b9      	b.n	80014e8 <__aeabi_dsub+0x4f4>
 8001374:	1bdb      	subs	r3, r3, r7
 8001376:	1c58      	adds	r0, r3, #1
 8001378:	281f      	cmp	r0, #31
 800137a:	dc00      	bgt.n	800137e <__aeabi_dsub+0x38a>
 800137c:	e1a0      	b.n	80016c0 <__aeabi_dsub+0x6cc>
 800137e:	0015      	movs	r5, r2
 8001380:	3b1f      	subs	r3, #31
 8001382:	40dd      	lsrs	r5, r3
 8001384:	2820      	cmp	r0, #32
 8001386:	d005      	beq.n	8001394 <__aeabi_dsub+0x3a0>
 8001388:	2340      	movs	r3, #64	@ 0x40
 800138a:	1a1b      	subs	r3, r3, r0
 800138c:	409a      	lsls	r2, r3
 800138e:	1e53      	subs	r3, r2, #1
 8001390:	419a      	sbcs	r2, r3
 8001392:	4315      	orrs	r5, r2
 8001394:	2307      	movs	r3, #7
 8001396:	2700      	movs	r7, #0
 8001398:	402b      	ands	r3, r5
 800139a:	e7d0      	b.n	800133e <__aeabi_dsub+0x34a>
 800139c:	08c0      	lsrs	r0, r0, #3
 800139e:	0762      	lsls	r2, r4, #29
 80013a0:	4302      	orrs	r2, r0
 80013a2:	08e4      	lsrs	r4, r4, #3
 80013a4:	e737      	b.n	8001216 <__aeabi_dsub+0x222>
 80013a6:	08ea      	lsrs	r2, r5, #3
 80013a8:	0763      	lsls	r3, r4, #29
 80013aa:	431a      	orrs	r2, r3
 80013ac:	4bd3      	ldr	r3, [pc, #844]	@ (80016fc <__aeabi_dsub+0x708>)
 80013ae:	08e4      	lsrs	r4, r4, #3
 80013b0:	429f      	cmp	r7, r3
 80013b2:	d100      	bne.n	80013b6 <__aeabi_dsub+0x3c2>
 80013b4:	e72f      	b.n	8001216 <__aeabi_dsub+0x222>
 80013b6:	0324      	lsls	r4, r4, #12
 80013b8:	0b25      	lsrs	r5, r4, #12
 80013ba:	057c      	lsls	r4, r7, #21
 80013bc:	0d64      	lsrs	r4, r4, #21
 80013be:	e6c2      	b.n	8001146 <__aeabi_dsub+0x152>
 80013c0:	46ca      	mov	sl, r9
 80013c2:	0022      	movs	r2, r4
 80013c4:	4302      	orrs	r2, r0
 80013c6:	d158      	bne.n	800147a <__aeabi_dsub+0x486>
 80013c8:	4663      	mov	r3, ip
 80013ca:	000e      	movs	r6, r1
 80013cc:	9c02      	ldr	r4, [sp, #8]
 80013ce:	9303      	str	r3, [sp, #12]
 80013d0:	9b03      	ldr	r3, [sp, #12]
 80013d2:	4657      	mov	r7, sl
 80013d4:	08da      	lsrs	r2, r3, #3
 80013d6:	e7e7      	b.n	80013a8 <__aeabi_dsub+0x3b4>
 80013d8:	4cc9      	ldr	r4, [pc, #804]	@ (8001700 <__aeabi_dsub+0x70c>)
 80013da:	1aff      	subs	r7, r7, r3
 80013dc:	4014      	ands	r4, r2
 80013de:	e692      	b.n	8001106 <__aeabi_dsub+0x112>
 80013e0:	4dc8      	ldr	r5, [pc, #800]	@ (8001704 <__aeabi_dsub+0x710>)
 80013e2:	1c7a      	adds	r2, r7, #1
 80013e4:	422a      	tst	r2, r5
 80013e6:	d000      	beq.n	80013ea <__aeabi_dsub+0x3f6>
 80013e8:	e084      	b.n	80014f4 <__aeabi_dsub+0x500>
 80013ea:	0022      	movs	r2, r4
 80013ec:	4302      	orrs	r2, r0
 80013ee:	2f00      	cmp	r7, #0
 80013f0:	d000      	beq.n	80013f4 <__aeabi_dsub+0x400>
 80013f2:	e0ef      	b.n	80015d4 <__aeabi_dsub+0x5e0>
 80013f4:	2a00      	cmp	r2, #0
 80013f6:	d100      	bne.n	80013fa <__aeabi_dsub+0x406>
 80013f8:	e0e5      	b.n	80015c6 <__aeabi_dsub+0x5d2>
 80013fa:	4662      	mov	r2, ip
 80013fc:	9902      	ldr	r1, [sp, #8]
 80013fe:	430a      	orrs	r2, r1
 8001400:	d100      	bne.n	8001404 <__aeabi_dsub+0x410>
 8001402:	e0c5      	b.n	8001590 <__aeabi_dsub+0x59c>
 8001404:	4663      	mov	r3, ip
 8001406:	18c5      	adds	r5, r0, r3
 8001408:	468c      	mov	ip, r1
 800140a:	4285      	cmp	r5, r0
 800140c:	4180      	sbcs	r0, r0
 800140e:	4464      	add	r4, ip
 8001410:	4240      	negs	r0, r0
 8001412:	1824      	adds	r4, r4, r0
 8001414:	0223      	lsls	r3, r4, #8
 8001416:	d502      	bpl.n	800141e <__aeabi_dsub+0x42a>
 8001418:	4bb9      	ldr	r3, [pc, #740]	@ (8001700 <__aeabi_dsub+0x70c>)
 800141a:	3701      	adds	r7, #1
 800141c:	401c      	ands	r4, r3
 800141e:	46ba      	mov	sl, r7
 8001420:	9503      	str	r5, [sp, #12]
 8001422:	e7d5      	b.n	80013d0 <__aeabi_dsub+0x3dc>
 8001424:	4662      	mov	r2, ip
 8001426:	1a85      	subs	r5, r0, r2
 8001428:	42a8      	cmp	r0, r5
 800142a:	4192      	sbcs	r2, r2
 800142c:	4252      	negs	r2, r2
 800142e:	4691      	mov	r9, r2
 8001430:	9b02      	ldr	r3, [sp, #8]
 8001432:	1ae3      	subs	r3, r4, r3
 8001434:	001a      	movs	r2, r3
 8001436:	464b      	mov	r3, r9
 8001438:	1ad2      	subs	r2, r2, r3
 800143a:	0013      	movs	r3, r2
 800143c:	4691      	mov	r9, r2
 800143e:	021a      	lsls	r2, r3, #8
 8001440:	d46c      	bmi.n	800151c <__aeabi_dsub+0x528>
 8001442:	464a      	mov	r2, r9
 8001444:	464c      	mov	r4, r9
 8001446:	432a      	orrs	r2, r5
 8001448:	d000      	beq.n	800144c <__aeabi_dsub+0x458>
 800144a:	e63a      	b.n	80010c2 <__aeabi_dsub+0xce>
 800144c:	2600      	movs	r6, #0
 800144e:	2400      	movs	r4, #0
 8001450:	2500      	movs	r5, #0
 8001452:	e678      	b.n	8001146 <__aeabi_dsub+0x152>
 8001454:	9902      	ldr	r1, [sp, #8]
 8001456:	4653      	mov	r3, sl
 8001458:	000d      	movs	r5, r1
 800145a:	3a20      	subs	r2, #32
 800145c:	40d5      	lsrs	r5, r2
 800145e:	2b20      	cmp	r3, #32
 8001460:	d006      	beq.n	8001470 <__aeabi_dsub+0x47c>
 8001462:	2240      	movs	r2, #64	@ 0x40
 8001464:	1ad2      	subs	r2, r2, r3
 8001466:	000b      	movs	r3, r1
 8001468:	4093      	lsls	r3, r2
 800146a:	4662      	mov	r2, ip
 800146c:	431a      	orrs	r2, r3
 800146e:	4693      	mov	fp, r2
 8001470:	465b      	mov	r3, fp
 8001472:	1e5a      	subs	r2, r3, #1
 8001474:	4193      	sbcs	r3, r2
 8001476:	431d      	orrs	r5, r3
 8001478:	e619      	b.n	80010ae <__aeabi_dsub+0xba>
 800147a:	4653      	mov	r3, sl
 800147c:	1e5a      	subs	r2, r3, #1
 800147e:	2b01      	cmp	r3, #1
 8001480:	d100      	bne.n	8001484 <__aeabi_dsub+0x490>
 8001482:	e0c6      	b.n	8001612 <__aeabi_dsub+0x61e>
 8001484:	4e9d      	ldr	r6, [pc, #628]	@ (80016fc <__aeabi_dsub+0x708>)
 8001486:	45b2      	cmp	sl, r6
 8001488:	d100      	bne.n	800148c <__aeabi_dsub+0x498>
 800148a:	e6bd      	b.n	8001208 <__aeabi_dsub+0x214>
 800148c:	4688      	mov	r8, r1
 800148e:	000e      	movs	r6, r1
 8001490:	2501      	movs	r5, #1
 8001492:	2a38      	cmp	r2, #56	@ 0x38
 8001494:	dc10      	bgt.n	80014b8 <__aeabi_dsub+0x4c4>
 8001496:	2a1f      	cmp	r2, #31
 8001498:	dc7f      	bgt.n	800159a <__aeabi_dsub+0x5a6>
 800149a:	2120      	movs	r1, #32
 800149c:	0025      	movs	r5, r4
 800149e:	1a89      	subs	r1, r1, r2
 80014a0:	0007      	movs	r7, r0
 80014a2:	4088      	lsls	r0, r1
 80014a4:	408d      	lsls	r5, r1
 80014a6:	40d7      	lsrs	r7, r2
 80014a8:	40d4      	lsrs	r4, r2
 80014aa:	1e41      	subs	r1, r0, #1
 80014ac:	4188      	sbcs	r0, r1
 80014ae:	9b02      	ldr	r3, [sp, #8]
 80014b0:	433d      	orrs	r5, r7
 80014b2:	1b1b      	subs	r3, r3, r4
 80014b4:	4305      	orrs	r5, r0
 80014b6:	9302      	str	r3, [sp, #8]
 80014b8:	4662      	mov	r2, ip
 80014ba:	1b55      	subs	r5, r2, r5
 80014bc:	45ac      	cmp	ip, r5
 80014be:	4192      	sbcs	r2, r2
 80014c0:	9b02      	ldr	r3, [sp, #8]
 80014c2:	4252      	negs	r2, r2
 80014c4:	464f      	mov	r7, r9
 80014c6:	1a9c      	subs	r4, r3, r2
 80014c8:	e5f6      	b.n	80010b8 <__aeabi_dsub+0xc4>
 80014ca:	2d00      	cmp	r5, #0
 80014cc:	d000      	beq.n	80014d0 <__aeabi_dsub+0x4dc>
 80014ce:	e0b7      	b.n	8001640 <__aeabi_dsub+0x64c>
 80014d0:	2a00      	cmp	r2, #0
 80014d2:	d100      	bne.n	80014d6 <__aeabi_dsub+0x4e2>
 80014d4:	e0f0      	b.n	80016b8 <__aeabi_dsub+0x6c4>
 80014d6:	2601      	movs	r6, #1
 80014d8:	400e      	ands	r6, r1
 80014da:	4663      	mov	r3, ip
 80014dc:	9802      	ldr	r0, [sp, #8]
 80014de:	08d9      	lsrs	r1, r3, #3
 80014e0:	0742      	lsls	r2, r0, #29
 80014e2:	430a      	orrs	r2, r1
 80014e4:	08c4      	lsrs	r4, r0, #3
 80014e6:	e696      	b.n	8001216 <__aeabi_dsub+0x222>
 80014e8:	4c85      	ldr	r4, [pc, #532]	@ (8001700 <__aeabi_dsub+0x70c>)
 80014ea:	1aff      	subs	r7, r7, r3
 80014ec:	4014      	ands	r4, r2
 80014ee:	0762      	lsls	r2, r4, #29
 80014f0:	08e4      	lsrs	r4, r4, #3
 80014f2:	e760      	b.n	80013b6 <__aeabi_dsub+0x3c2>
 80014f4:	4981      	ldr	r1, [pc, #516]	@ (80016fc <__aeabi_dsub+0x708>)
 80014f6:	428a      	cmp	r2, r1
 80014f8:	d100      	bne.n	80014fc <__aeabi_dsub+0x508>
 80014fa:	e0c9      	b.n	8001690 <__aeabi_dsub+0x69c>
 80014fc:	4663      	mov	r3, ip
 80014fe:	18c1      	adds	r1, r0, r3
 8001500:	4281      	cmp	r1, r0
 8001502:	4180      	sbcs	r0, r0
 8001504:	9b02      	ldr	r3, [sp, #8]
 8001506:	4240      	negs	r0, r0
 8001508:	18e3      	adds	r3, r4, r3
 800150a:	181b      	adds	r3, r3, r0
 800150c:	07dd      	lsls	r5, r3, #31
 800150e:	085c      	lsrs	r4, r3, #1
 8001510:	2307      	movs	r3, #7
 8001512:	0849      	lsrs	r1, r1, #1
 8001514:	430d      	orrs	r5, r1
 8001516:	0017      	movs	r7, r2
 8001518:	402b      	ands	r3, r5
 800151a:	e710      	b.n	800133e <__aeabi_dsub+0x34a>
 800151c:	4663      	mov	r3, ip
 800151e:	1a1d      	subs	r5, r3, r0
 8001520:	45ac      	cmp	ip, r5
 8001522:	4192      	sbcs	r2, r2
 8001524:	2601      	movs	r6, #1
 8001526:	9b02      	ldr	r3, [sp, #8]
 8001528:	4252      	negs	r2, r2
 800152a:	1b1c      	subs	r4, r3, r4
 800152c:	4688      	mov	r8, r1
 800152e:	1aa4      	subs	r4, r4, r2
 8001530:	400e      	ands	r6, r1
 8001532:	e5c6      	b.n	80010c2 <__aeabi_dsub+0xce>
 8001534:	4663      	mov	r3, ip
 8001536:	18c5      	adds	r5, r0, r3
 8001538:	9b02      	ldr	r3, [sp, #8]
 800153a:	4285      	cmp	r5, r0
 800153c:	4180      	sbcs	r0, r0
 800153e:	469c      	mov	ip, r3
 8001540:	4240      	negs	r0, r0
 8001542:	4464      	add	r4, ip
 8001544:	1824      	adds	r4, r4, r0
 8001546:	2701      	movs	r7, #1
 8001548:	0223      	lsls	r3, r4, #8
 800154a:	d400      	bmi.n	800154e <__aeabi_dsub+0x55a>
 800154c:	e6f5      	b.n	800133a <__aeabi_dsub+0x346>
 800154e:	2702      	movs	r7, #2
 8001550:	e641      	b.n	80011d6 <__aeabi_dsub+0x1e2>
 8001552:	4663      	mov	r3, ip
 8001554:	1ac5      	subs	r5, r0, r3
 8001556:	42a8      	cmp	r0, r5
 8001558:	4180      	sbcs	r0, r0
 800155a:	9b02      	ldr	r3, [sp, #8]
 800155c:	4240      	negs	r0, r0
 800155e:	1ae4      	subs	r4, r4, r3
 8001560:	2701      	movs	r7, #1
 8001562:	1a24      	subs	r4, r4, r0
 8001564:	e5a8      	b.n	80010b8 <__aeabi_dsub+0xc4>
 8001566:	9d02      	ldr	r5, [sp, #8]
 8001568:	4652      	mov	r2, sl
 800156a:	002b      	movs	r3, r5
 800156c:	3a20      	subs	r2, #32
 800156e:	40d3      	lsrs	r3, r2
 8001570:	0019      	movs	r1, r3
 8001572:	4653      	mov	r3, sl
 8001574:	2b20      	cmp	r3, #32
 8001576:	d006      	beq.n	8001586 <__aeabi_dsub+0x592>
 8001578:	2240      	movs	r2, #64	@ 0x40
 800157a:	1ad2      	subs	r2, r2, r3
 800157c:	002b      	movs	r3, r5
 800157e:	4093      	lsls	r3, r2
 8001580:	4662      	mov	r2, ip
 8001582:	431a      	orrs	r2, r3
 8001584:	4693      	mov	fp, r2
 8001586:	465d      	mov	r5, fp
 8001588:	1e6b      	subs	r3, r5, #1
 800158a:	419d      	sbcs	r5, r3
 800158c:	430d      	orrs	r5, r1
 800158e:	e615      	b.n	80011bc <__aeabi_dsub+0x1c8>
 8001590:	0762      	lsls	r2, r4, #29
 8001592:	08c0      	lsrs	r0, r0, #3
 8001594:	4302      	orrs	r2, r0
 8001596:	08e4      	lsrs	r4, r4, #3
 8001598:	e70d      	b.n	80013b6 <__aeabi_dsub+0x3c2>
 800159a:	0011      	movs	r1, r2
 800159c:	0027      	movs	r7, r4
 800159e:	3920      	subs	r1, #32
 80015a0:	40cf      	lsrs	r7, r1
 80015a2:	2a20      	cmp	r2, #32
 80015a4:	d005      	beq.n	80015b2 <__aeabi_dsub+0x5be>
 80015a6:	2140      	movs	r1, #64	@ 0x40
 80015a8:	1a8a      	subs	r2, r1, r2
 80015aa:	4094      	lsls	r4, r2
 80015ac:	0025      	movs	r5, r4
 80015ae:	4305      	orrs	r5, r0
 80015b0:	9503      	str	r5, [sp, #12]
 80015b2:	9d03      	ldr	r5, [sp, #12]
 80015b4:	1e6a      	subs	r2, r5, #1
 80015b6:	4195      	sbcs	r5, r2
 80015b8:	433d      	orrs	r5, r7
 80015ba:	e77d      	b.n	80014b8 <__aeabi_dsub+0x4c4>
 80015bc:	2a00      	cmp	r2, #0
 80015be:	d100      	bne.n	80015c2 <__aeabi_dsub+0x5ce>
 80015c0:	e744      	b.n	800144c <__aeabi_dsub+0x458>
 80015c2:	2601      	movs	r6, #1
 80015c4:	400e      	ands	r6, r1
 80015c6:	4663      	mov	r3, ip
 80015c8:	08d9      	lsrs	r1, r3, #3
 80015ca:	9b02      	ldr	r3, [sp, #8]
 80015cc:	075a      	lsls	r2, r3, #29
 80015ce:	430a      	orrs	r2, r1
 80015d0:	08dc      	lsrs	r4, r3, #3
 80015d2:	e6f0      	b.n	80013b6 <__aeabi_dsub+0x3c2>
 80015d4:	2a00      	cmp	r2, #0
 80015d6:	d028      	beq.n	800162a <__aeabi_dsub+0x636>
 80015d8:	4662      	mov	r2, ip
 80015da:	9f02      	ldr	r7, [sp, #8]
 80015dc:	08c0      	lsrs	r0, r0, #3
 80015de:	433a      	orrs	r2, r7
 80015e0:	d100      	bne.n	80015e4 <__aeabi_dsub+0x5f0>
 80015e2:	e6dc      	b.n	800139e <__aeabi_dsub+0x3aa>
 80015e4:	0762      	lsls	r2, r4, #29
 80015e6:	4310      	orrs	r0, r2
 80015e8:	2280      	movs	r2, #128	@ 0x80
 80015ea:	08e4      	lsrs	r4, r4, #3
 80015ec:	0312      	lsls	r2, r2, #12
 80015ee:	4214      	tst	r4, r2
 80015f0:	d009      	beq.n	8001606 <__aeabi_dsub+0x612>
 80015f2:	08fd      	lsrs	r5, r7, #3
 80015f4:	4215      	tst	r5, r2
 80015f6:	d106      	bne.n	8001606 <__aeabi_dsub+0x612>
 80015f8:	4663      	mov	r3, ip
 80015fa:	2601      	movs	r6, #1
 80015fc:	002c      	movs	r4, r5
 80015fe:	08d8      	lsrs	r0, r3, #3
 8001600:	077b      	lsls	r3, r7, #29
 8001602:	4318      	orrs	r0, r3
 8001604:	400e      	ands	r6, r1
 8001606:	0f42      	lsrs	r2, r0, #29
 8001608:	00c0      	lsls	r0, r0, #3
 800160a:	08c0      	lsrs	r0, r0, #3
 800160c:	0752      	lsls	r2, r2, #29
 800160e:	4302      	orrs	r2, r0
 8001610:	e601      	b.n	8001216 <__aeabi_dsub+0x222>
 8001612:	4663      	mov	r3, ip
 8001614:	1a1d      	subs	r5, r3, r0
 8001616:	45ac      	cmp	ip, r5
 8001618:	4192      	sbcs	r2, r2
 800161a:	9b02      	ldr	r3, [sp, #8]
 800161c:	4252      	negs	r2, r2
 800161e:	1b1c      	subs	r4, r3, r4
 8001620:	000e      	movs	r6, r1
 8001622:	4688      	mov	r8, r1
 8001624:	2701      	movs	r7, #1
 8001626:	1aa4      	subs	r4, r4, r2
 8001628:	e546      	b.n	80010b8 <__aeabi_dsub+0xc4>
 800162a:	4663      	mov	r3, ip
 800162c:	08d9      	lsrs	r1, r3, #3
 800162e:	9b02      	ldr	r3, [sp, #8]
 8001630:	075a      	lsls	r2, r3, #29
 8001632:	430a      	orrs	r2, r1
 8001634:	08dc      	lsrs	r4, r3, #3
 8001636:	e5ee      	b.n	8001216 <__aeabi_dsub+0x222>
 8001638:	4663      	mov	r3, ip
 800163a:	9c02      	ldr	r4, [sp, #8]
 800163c:	9303      	str	r3, [sp, #12]
 800163e:	e6c7      	b.n	80013d0 <__aeabi_dsub+0x3dc>
 8001640:	08c0      	lsrs	r0, r0, #3
 8001642:	2a00      	cmp	r2, #0
 8001644:	d100      	bne.n	8001648 <__aeabi_dsub+0x654>
 8001646:	e6aa      	b.n	800139e <__aeabi_dsub+0x3aa>
 8001648:	0762      	lsls	r2, r4, #29
 800164a:	4310      	orrs	r0, r2
 800164c:	2280      	movs	r2, #128	@ 0x80
 800164e:	08e4      	lsrs	r4, r4, #3
 8001650:	0312      	lsls	r2, r2, #12
 8001652:	4214      	tst	r4, r2
 8001654:	d0d7      	beq.n	8001606 <__aeabi_dsub+0x612>
 8001656:	9f02      	ldr	r7, [sp, #8]
 8001658:	08fd      	lsrs	r5, r7, #3
 800165a:	4215      	tst	r5, r2
 800165c:	d1d3      	bne.n	8001606 <__aeabi_dsub+0x612>
 800165e:	4663      	mov	r3, ip
 8001660:	2601      	movs	r6, #1
 8001662:	08d8      	lsrs	r0, r3, #3
 8001664:	077b      	lsls	r3, r7, #29
 8001666:	002c      	movs	r4, r5
 8001668:	4318      	orrs	r0, r3
 800166a:	400e      	ands	r6, r1
 800166c:	e7cb      	b.n	8001606 <__aeabi_dsub+0x612>
 800166e:	000a      	movs	r2, r1
 8001670:	0027      	movs	r7, r4
 8001672:	3a20      	subs	r2, #32
 8001674:	40d7      	lsrs	r7, r2
 8001676:	2920      	cmp	r1, #32
 8001678:	d005      	beq.n	8001686 <__aeabi_dsub+0x692>
 800167a:	2240      	movs	r2, #64	@ 0x40
 800167c:	1a52      	subs	r2, r2, r1
 800167e:	4094      	lsls	r4, r2
 8001680:	0025      	movs	r5, r4
 8001682:	4305      	orrs	r5, r0
 8001684:	9503      	str	r5, [sp, #12]
 8001686:	9d03      	ldr	r5, [sp, #12]
 8001688:	1e6a      	subs	r2, r5, #1
 800168a:	4195      	sbcs	r5, r2
 800168c:	432f      	orrs	r7, r5
 800168e:	e610      	b.n	80012b2 <__aeabi_dsub+0x2be>
 8001690:	0014      	movs	r4, r2
 8001692:	2500      	movs	r5, #0
 8001694:	2200      	movs	r2, #0
 8001696:	e556      	b.n	8001146 <__aeabi_dsub+0x152>
 8001698:	9b02      	ldr	r3, [sp, #8]
 800169a:	4460      	add	r0, ip
 800169c:	4699      	mov	r9, r3
 800169e:	4560      	cmp	r0, ip
 80016a0:	4192      	sbcs	r2, r2
 80016a2:	444c      	add	r4, r9
 80016a4:	4252      	negs	r2, r2
 80016a6:	0005      	movs	r5, r0
 80016a8:	18a4      	adds	r4, r4, r2
 80016aa:	e74c      	b.n	8001546 <__aeabi_dsub+0x552>
 80016ac:	001a      	movs	r2, r3
 80016ae:	001c      	movs	r4, r3
 80016b0:	432a      	orrs	r2, r5
 80016b2:	d000      	beq.n	80016b6 <__aeabi_dsub+0x6c2>
 80016b4:	e6b3      	b.n	800141e <__aeabi_dsub+0x42a>
 80016b6:	e6c9      	b.n	800144c <__aeabi_dsub+0x458>
 80016b8:	2480      	movs	r4, #128	@ 0x80
 80016ba:	2600      	movs	r6, #0
 80016bc:	0324      	lsls	r4, r4, #12
 80016be:	e5ae      	b.n	800121e <__aeabi_dsub+0x22a>
 80016c0:	2120      	movs	r1, #32
 80016c2:	2500      	movs	r5, #0
 80016c4:	1a09      	subs	r1, r1, r0
 80016c6:	e517      	b.n	80010f8 <__aeabi_dsub+0x104>
 80016c8:	2200      	movs	r2, #0
 80016ca:	2500      	movs	r5, #0
 80016cc:	4c0b      	ldr	r4, [pc, #44]	@ (80016fc <__aeabi_dsub+0x708>)
 80016ce:	e53a      	b.n	8001146 <__aeabi_dsub+0x152>
 80016d0:	2d00      	cmp	r5, #0
 80016d2:	d100      	bne.n	80016d6 <__aeabi_dsub+0x6e2>
 80016d4:	e5f6      	b.n	80012c4 <__aeabi_dsub+0x2d0>
 80016d6:	464b      	mov	r3, r9
 80016d8:	1bda      	subs	r2, r3, r7
 80016da:	4692      	mov	sl, r2
 80016dc:	2f00      	cmp	r7, #0
 80016de:	d100      	bne.n	80016e2 <__aeabi_dsub+0x6ee>
 80016e0:	e66f      	b.n	80013c2 <__aeabi_dsub+0x3ce>
 80016e2:	2a38      	cmp	r2, #56	@ 0x38
 80016e4:	dc05      	bgt.n	80016f2 <__aeabi_dsub+0x6fe>
 80016e6:	2680      	movs	r6, #128	@ 0x80
 80016e8:	0436      	lsls	r6, r6, #16
 80016ea:	4334      	orrs	r4, r6
 80016ec:	4688      	mov	r8, r1
 80016ee:	000e      	movs	r6, r1
 80016f0:	e6d1      	b.n	8001496 <__aeabi_dsub+0x4a2>
 80016f2:	4688      	mov	r8, r1
 80016f4:	000e      	movs	r6, r1
 80016f6:	2501      	movs	r5, #1
 80016f8:	e6de      	b.n	80014b8 <__aeabi_dsub+0x4c4>
 80016fa:	46c0      	nop			@ (mov r8, r8)
 80016fc:	000007ff 	.word	0x000007ff
 8001700:	ff7fffff 	.word	0xff7fffff
 8001704:	000007fe 	.word	0x000007fe
 8001708:	2d00      	cmp	r5, #0
 800170a:	d100      	bne.n	800170e <__aeabi_dsub+0x71a>
 800170c:	e668      	b.n	80013e0 <__aeabi_dsub+0x3ec>
 800170e:	464b      	mov	r3, r9
 8001710:	1bd9      	subs	r1, r3, r7
 8001712:	2f00      	cmp	r7, #0
 8001714:	d101      	bne.n	800171a <__aeabi_dsub+0x726>
 8001716:	468a      	mov	sl, r1
 8001718:	e5a7      	b.n	800126a <__aeabi_dsub+0x276>
 800171a:	2701      	movs	r7, #1
 800171c:	2938      	cmp	r1, #56	@ 0x38
 800171e:	dd00      	ble.n	8001722 <__aeabi_dsub+0x72e>
 8001720:	e5c7      	b.n	80012b2 <__aeabi_dsub+0x2be>
 8001722:	2280      	movs	r2, #128	@ 0x80
 8001724:	0412      	lsls	r2, r2, #16
 8001726:	4314      	orrs	r4, r2
 8001728:	e5af      	b.n	800128a <__aeabi_dsub+0x296>
 800172a:	46c0      	nop			@ (mov r8, r8)

0800172c <__aeabi_d2iz>:
 800172c:	000b      	movs	r3, r1
 800172e:	0002      	movs	r2, r0
 8001730:	b570      	push	{r4, r5, r6, lr}
 8001732:	4d16      	ldr	r5, [pc, #88]	@ (800178c <__aeabi_d2iz+0x60>)
 8001734:	030c      	lsls	r4, r1, #12
 8001736:	b082      	sub	sp, #8
 8001738:	0049      	lsls	r1, r1, #1
 800173a:	2000      	movs	r0, #0
 800173c:	9200      	str	r2, [sp, #0]
 800173e:	9301      	str	r3, [sp, #4]
 8001740:	0b24      	lsrs	r4, r4, #12
 8001742:	0d49      	lsrs	r1, r1, #21
 8001744:	0fde      	lsrs	r6, r3, #31
 8001746:	42a9      	cmp	r1, r5
 8001748:	dd04      	ble.n	8001754 <__aeabi_d2iz+0x28>
 800174a:	4811      	ldr	r0, [pc, #68]	@ (8001790 <__aeabi_d2iz+0x64>)
 800174c:	4281      	cmp	r1, r0
 800174e:	dd03      	ble.n	8001758 <__aeabi_d2iz+0x2c>
 8001750:	4b10      	ldr	r3, [pc, #64]	@ (8001794 <__aeabi_d2iz+0x68>)
 8001752:	18f0      	adds	r0, r6, r3
 8001754:	b002      	add	sp, #8
 8001756:	bd70      	pop	{r4, r5, r6, pc}
 8001758:	2080      	movs	r0, #128	@ 0x80
 800175a:	0340      	lsls	r0, r0, #13
 800175c:	4320      	orrs	r0, r4
 800175e:	4c0e      	ldr	r4, [pc, #56]	@ (8001798 <__aeabi_d2iz+0x6c>)
 8001760:	1a64      	subs	r4, r4, r1
 8001762:	2c1f      	cmp	r4, #31
 8001764:	dd08      	ble.n	8001778 <__aeabi_d2iz+0x4c>
 8001766:	4b0d      	ldr	r3, [pc, #52]	@ (800179c <__aeabi_d2iz+0x70>)
 8001768:	1a5b      	subs	r3, r3, r1
 800176a:	40d8      	lsrs	r0, r3
 800176c:	0003      	movs	r3, r0
 800176e:	4258      	negs	r0, r3
 8001770:	2e00      	cmp	r6, #0
 8001772:	d1ef      	bne.n	8001754 <__aeabi_d2iz+0x28>
 8001774:	0018      	movs	r0, r3
 8001776:	e7ed      	b.n	8001754 <__aeabi_d2iz+0x28>
 8001778:	4b09      	ldr	r3, [pc, #36]	@ (80017a0 <__aeabi_d2iz+0x74>)
 800177a:	9a00      	ldr	r2, [sp, #0]
 800177c:	469c      	mov	ip, r3
 800177e:	0003      	movs	r3, r0
 8001780:	4461      	add	r1, ip
 8001782:	408b      	lsls	r3, r1
 8001784:	40e2      	lsrs	r2, r4
 8001786:	4313      	orrs	r3, r2
 8001788:	e7f1      	b.n	800176e <__aeabi_d2iz+0x42>
 800178a:	46c0      	nop			@ (mov r8, r8)
 800178c:	000003fe 	.word	0x000003fe
 8001790:	0000041d 	.word	0x0000041d
 8001794:	7fffffff 	.word	0x7fffffff
 8001798:	00000433 	.word	0x00000433
 800179c:	00000413 	.word	0x00000413
 80017a0:	fffffbed 	.word	0xfffffbed

080017a4 <__aeabi_ui2d>:
 80017a4:	b510      	push	{r4, lr}
 80017a6:	1e04      	subs	r4, r0, #0
 80017a8:	d010      	beq.n	80017cc <__aeabi_ui2d+0x28>
 80017aa:	f000 f85d 	bl	8001868 <__clzsi2>
 80017ae:	4b0e      	ldr	r3, [pc, #56]	@ (80017e8 <__aeabi_ui2d+0x44>)
 80017b0:	1a1b      	subs	r3, r3, r0
 80017b2:	055b      	lsls	r3, r3, #21
 80017b4:	0d5b      	lsrs	r3, r3, #21
 80017b6:	280a      	cmp	r0, #10
 80017b8:	dc0f      	bgt.n	80017da <__aeabi_ui2d+0x36>
 80017ba:	220b      	movs	r2, #11
 80017bc:	0021      	movs	r1, r4
 80017be:	1a12      	subs	r2, r2, r0
 80017c0:	40d1      	lsrs	r1, r2
 80017c2:	3015      	adds	r0, #21
 80017c4:	030a      	lsls	r2, r1, #12
 80017c6:	4084      	lsls	r4, r0
 80017c8:	0b12      	lsrs	r2, r2, #12
 80017ca:	e001      	b.n	80017d0 <__aeabi_ui2d+0x2c>
 80017cc:	2300      	movs	r3, #0
 80017ce:	2200      	movs	r2, #0
 80017d0:	051b      	lsls	r3, r3, #20
 80017d2:	4313      	orrs	r3, r2
 80017d4:	0020      	movs	r0, r4
 80017d6:	0019      	movs	r1, r3
 80017d8:	bd10      	pop	{r4, pc}
 80017da:	0022      	movs	r2, r4
 80017dc:	380b      	subs	r0, #11
 80017de:	4082      	lsls	r2, r0
 80017e0:	0312      	lsls	r2, r2, #12
 80017e2:	2400      	movs	r4, #0
 80017e4:	0b12      	lsrs	r2, r2, #12
 80017e6:	e7f3      	b.n	80017d0 <__aeabi_ui2d+0x2c>
 80017e8:	0000041e 	.word	0x0000041e

080017ec <__aeabi_cdrcmple>:
 80017ec:	4684      	mov	ip, r0
 80017ee:	0010      	movs	r0, r2
 80017f0:	4662      	mov	r2, ip
 80017f2:	468c      	mov	ip, r1
 80017f4:	0019      	movs	r1, r3
 80017f6:	4663      	mov	r3, ip
 80017f8:	e000      	b.n	80017fc <__aeabi_cdcmpeq>
 80017fa:	46c0      	nop			@ (mov r8, r8)

080017fc <__aeabi_cdcmpeq>:
 80017fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80017fe:	f000 f909 	bl	8001a14 <__ledf2>
 8001802:	2800      	cmp	r0, #0
 8001804:	d401      	bmi.n	800180a <__aeabi_cdcmpeq+0xe>
 8001806:	2100      	movs	r1, #0
 8001808:	42c8      	cmn	r0, r1
 800180a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800180c <__aeabi_dcmpeq>:
 800180c:	b510      	push	{r4, lr}
 800180e:	f000 f849 	bl	80018a4 <__eqdf2>
 8001812:	4240      	negs	r0, r0
 8001814:	3001      	adds	r0, #1
 8001816:	bd10      	pop	{r4, pc}

08001818 <__aeabi_dcmplt>:
 8001818:	b510      	push	{r4, lr}
 800181a:	f000 f8fb 	bl	8001a14 <__ledf2>
 800181e:	2800      	cmp	r0, #0
 8001820:	db01      	blt.n	8001826 <__aeabi_dcmplt+0xe>
 8001822:	2000      	movs	r0, #0
 8001824:	bd10      	pop	{r4, pc}
 8001826:	2001      	movs	r0, #1
 8001828:	bd10      	pop	{r4, pc}
 800182a:	46c0      	nop			@ (mov r8, r8)

0800182c <__aeabi_dcmple>:
 800182c:	b510      	push	{r4, lr}
 800182e:	f000 f8f1 	bl	8001a14 <__ledf2>
 8001832:	2800      	cmp	r0, #0
 8001834:	dd01      	ble.n	800183a <__aeabi_dcmple+0xe>
 8001836:	2000      	movs	r0, #0
 8001838:	bd10      	pop	{r4, pc}
 800183a:	2001      	movs	r0, #1
 800183c:	bd10      	pop	{r4, pc}
 800183e:	46c0      	nop			@ (mov r8, r8)

08001840 <__aeabi_dcmpgt>:
 8001840:	b510      	push	{r4, lr}
 8001842:	f000 f873 	bl	800192c <__gedf2>
 8001846:	2800      	cmp	r0, #0
 8001848:	dc01      	bgt.n	800184e <__aeabi_dcmpgt+0xe>
 800184a:	2000      	movs	r0, #0
 800184c:	bd10      	pop	{r4, pc}
 800184e:	2001      	movs	r0, #1
 8001850:	bd10      	pop	{r4, pc}
 8001852:	46c0      	nop			@ (mov r8, r8)

08001854 <__aeabi_dcmpge>:
 8001854:	b510      	push	{r4, lr}
 8001856:	f000 f869 	bl	800192c <__gedf2>
 800185a:	2800      	cmp	r0, #0
 800185c:	da01      	bge.n	8001862 <__aeabi_dcmpge+0xe>
 800185e:	2000      	movs	r0, #0
 8001860:	bd10      	pop	{r4, pc}
 8001862:	2001      	movs	r0, #1
 8001864:	bd10      	pop	{r4, pc}
 8001866:	46c0      	nop			@ (mov r8, r8)

08001868 <__clzsi2>:
 8001868:	211c      	movs	r1, #28
 800186a:	2301      	movs	r3, #1
 800186c:	041b      	lsls	r3, r3, #16
 800186e:	4298      	cmp	r0, r3
 8001870:	d301      	bcc.n	8001876 <__clzsi2+0xe>
 8001872:	0c00      	lsrs	r0, r0, #16
 8001874:	3910      	subs	r1, #16
 8001876:	0a1b      	lsrs	r3, r3, #8
 8001878:	4298      	cmp	r0, r3
 800187a:	d301      	bcc.n	8001880 <__clzsi2+0x18>
 800187c:	0a00      	lsrs	r0, r0, #8
 800187e:	3908      	subs	r1, #8
 8001880:	091b      	lsrs	r3, r3, #4
 8001882:	4298      	cmp	r0, r3
 8001884:	d301      	bcc.n	800188a <__clzsi2+0x22>
 8001886:	0900      	lsrs	r0, r0, #4
 8001888:	3904      	subs	r1, #4
 800188a:	a202      	add	r2, pc, #8	@ (adr r2, 8001894 <__clzsi2+0x2c>)
 800188c:	5c10      	ldrb	r0, [r2, r0]
 800188e:	1840      	adds	r0, r0, r1
 8001890:	4770      	bx	lr
 8001892:	46c0      	nop			@ (mov r8, r8)
 8001894:	02020304 	.word	0x02020304
 8001898:	01010101 	.word	0x01010101
	...

080018a4 <__eqdf2>:
 80018a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018a6:	4657      	mov	r7, sl
 80018a8:	46de      	mov	lr, fp
 80018aa:	464e      	mov	r6, r9
 80018ac:	4645      	mov	r5, r8
 80018ae:	b5e0      	push	{r5, r6, r7, lr}
 80018b0:	000d      	movs	r5, r1
 80018b2:	0004      	movs	r4, r0
 80018b4:	0fe8      	lsrs	r0, r5, #31
 80018b6:	4683      	mov	fp, r0
 80018b8:	0309      	lsls	r1, r1, #12
 80018ba:	0fd8      	lsrs	r0, r3, #31
 80018bc:	0b09      	lsrs	r1, r1, #12
 80018be:	4682      	mov	sl, r0
 80018c0:	4819      	ldr	r0, [pc, #100]	@ (8001928 <__eqdf2+0x84>)
 80018c2:	468c      	mov	ip, r1
 80018c4:	031f      	lsls	r7, r3, #12
 80018c6:	0069      	lsls	r1, r5, #1
 80018c8:	005e      	lsls	r6, r3, #1
 80018ca:	0d49      	lsrs	r1, r1, #21
 80018cc:	0b3f      	lsrs	r7, r7, #12
 80018ce:	0d76      	lsrs	r6, r6, #21
 80018d0:	4281      	cmp	r1, r0
 80018d2:	d018      	beq.n	8001906 <__eqdf2+0x62>
 80018d4:	4286      	cmp	r6, r0
 80018d6:	d00f      	beq.n	80018f8 <__eqdf2+0x54>
 80018d8:	2001      	movs	r0, #1
 80018da:	42b1      	cmp	r1, r6
 80018dc:	d10d      	bne.n	80018fa <__eqdf2+0x56>
 80018de:	45bc      	cmp	ip, r7
 80018e0:	d10b      	bne.n	80018fa <__eqdf2+0x56>
 80018e2:	4294      	cmp	r4, r2
 80018e4:	d109      	bne.n	80018fa <__eqdf2+0x56>
 80018e6:	45d3      	cmp	fp, sl
 80018e8:	d01c      	beq.n	8001924 <__eqdf2+0x80>
 80018ea:	2900      	cmp	r1, #0
 80018ec:	d105      	bne.n	80018fa <__eqdf2+0x56>
 80018ee:	4660      	mov	r0, ip
 80018f0:	4320      	orrs	r0, r4
 80018f2:	1e43      	subs	r3, r0, #1
 80018f4:	4198      	sbcs	r0, r3
 80018f6:	e000      	b.n	80018fa <__eqdf2+0x56>
 80018f8:	2001      	movs	r0, #1
 80018fa:	bcf0      	pop	{r4, r5, r6, r7}
 80018fc:	46bb      	mov	fp, r7
 80018fe:	46b2      	mov	sl, r6
 8001900:	46a9      	mov	r9, r5
 8001902:	46a0      	mov	r8, r4
 8001904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001906:	2001      	movs	r0, #1
 8001908:	428e      	cmp	r6, r1
 800190a:	d1f6      	bne.n	80018fa <__eqdf2+0x56>
 800190c:	4661      	mov	r1, ip
 800190e:	4339      	orrs	r1, r7
 8001910:	000f      	movs	r7, r1
 8001912:	4317      	orrs	r7, r2
 8001914:	4327      	orrs	r7, r4
 8001916:	d1f0      	bne.n	80018fa <__eqdf2+0x56>
 8001918:	465b      	mov	r3, fp
 800191a:	4652      	mov	r2, sl
 800191c:	1a98      	subs	r0, r3, r2
 800191e:	1e43      	subs	r3, r0, #1
 8001920:	4198      	sbcs	r0, r3
 8001922:	e7ea      	b.n	80018fa <__eqdf2+0x56>
 8001924:	2000      	movs	r0, #0
 8001926:	e7e8      	b.n	80018fa <__eqdf2+0x56>
 8001928:	000007ff 	.word	0x000007ff

0800192c <__gedf2>:
 800192c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800192e:	4657      	mov	r7, sl
 8001930:	464e      	mov	r6, r9
 8001932:	4645      	mov	r5, r8
 8001934:	46de      	mov	lr, fp
 8001936:	b5e0      	push	{r5, r6, r7, lr}
 8001938:	000d      	movs	r5, r1
 800193a:	030f      	lsls	r7, r1, #12
 800193c:	0b39      	lsrs	r1, r7, #12
 800193e:	b083      	sub	sp, #12
 8001940:	0004      	movs	r4, r0
 8001942:	4680      	mov	r8, r0
 8001944:	9101      	str	r1, [sp, #4]
 8001946:	0058      	lsls	r0, r3, #1
 8001948:	0fe9      	lsrs	r1, r5, #31
 800194a:	4f31      	ldr	r7, [pc, #196]	@ (8001a10 <__gedf2+0xe4>)
 800194c:	0d40      	lsrs	r0, r0, #21
 800194e:	468c      	mov	ip, r1
 8001950:	006e      	lsls	r6, r5, #1
 8001952:	0319      	lsls	r1, r3, #12
 8001954:	4682      	mov	sl, r0
 8001956:	4691      	mov	r9, r2
 8001958:	0d76      	lsrs	r6, r6, #21
 800195a:	0b09      	lsrs	r1, r1, #12
 800195c:	0fd8      	lsrs	r0, r3, #31
 800195e:	42be      	cmp	r6, r7
 8001960:	d01f      	beq.n	80019a2 <__gedf2+0x76>
 8001962:	45ba      	cmp	sl, r7
 8001964:	d00f      	beq.n	8001986 <__gedf2+0x5a>
 8001966:	2e00      	cmp	r6, #0
 8001968:	d12f      	bne.n	80019ca <__gedf2+0x9e>
 800196a:	4655      	mov	r5, sl
 800196c:	9e01      	ldr	r6, [sp, #4]
 800196e:	4334      	orrs	r4, r6
 8001970:	2d00      	cmp	r5, #0
 8001972:	d127      	bne.n	80019c4 <__gedf2+0x98>
 8001974:	430a      	orrs	r2, r1
 8001976:	d03a      	beq.n	80019ee <__gedf2+0xc2>
 8001978:	2c00      	cmp	r4, #0
 800197a:	d145      	bne.n	8001a08 <__gedf2+0xdc>
 800197c:	2800      	cmp	r0, #0
 800197e:	d11a      	bne.n	80019b6 <__gedf2+0x8a>
 8001980:	2001      	movs	r0, #1
 8001982:	4240      	negs	r0, r0
 8001984:	e017      	b.n	80019b6 <__gedf2+0x8a>
 8001986:	4311      	orrs	r1, r2
 8001988:	d13b      	bne.n	8001a02 <__gedf2+0xd6>
 800198a:	2e00      	cmp	r6, #0
 800198c:	d102      	bne.n	8001994 <__gedf2+0x68>
 800198e:	9f01      	ldr	r7, [sp, #4]
 8001990:	4327      	orrs	r7, r4
 8001992:	d0f3      	beq.n	800197c <__gedf2+0x50>
 8001994:	4584      	cmp	ip, r0
 8001996:	d109      	bne.n	80019ac <__gedf2+0x80>
 8001998:	4663      	mov	r3, ip
 800199a:	2b00      	cmp	r3, #0
 800199c:	d0f0      	beq.n	8001980 <__gedf2+0x54>
 800199e:	4660      	mov	r0, ip
 80019a0:	e009      	b.n	80019b6 <__gedf2+0x8a>
 80019a2:	9f01      	ldr	r7, [sp, #4]
 80019a4:	4327      	orrs	r7, r4
 80019a6:	d12c      	bne.n	8001a02 <__gedf2+0xd6>
 80019a8:	45b2      	cmp	sl, r6
 80019aa:	d024      	beq.n	80019f6 <__gedf2+0xca>
 80019ac:	4663      	mov	r3, ip
 80019ae:	2002      	movs	r0, #2
 80019b0:	3b01      	subs	r3, #1
 80019b2:	4018      	ands	r0, r3
 80019b4:	3801      	subs	r0, #1
 80019b6:	b003      	add	sp, #12
 80019b8:	bcf0      	pop	{r4, r5, r6, r7}
 80019ba:	46bb      	mov	fp, r7
 80019bc:	46b2      	mov	sl, r6
 80019be:	46a9      	mov	r9, r5
 80019c0:	46a0      	mov	r8, r4
 80019c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019c4:	2c00      	cmp	r4, #0
 80019c6:	d0d9      	beq.n	800197c <__gedf2+0x50>
 80019c8:	e7e4      	b.n	8001994 <__gedf2+0x68>
 80019ca:	4654      	mov	r4, sl
 80019cc:	2c00      	cmp	r4, #0
 80019ce:	d0ed      	beq.n	80019ac <__gedf2+0x80>
 80019d0:	4584      	cmp	ip, r0
 80019d2:	d1eb      	bne.n	80019ac <__gedf2+0x80>
 80019d4:	4556      	cmp	r6, sl
 80019d6:	dce9      	bgt.n	80019ac <__gedf2+0x80>
 80019d8:	dbde      	blt.n	8001998 <__gedf2+0x6c>
 80019da:	9b01      	ldr	r3, [sp, #4]
 80019dc:	428b      	cmp	r3, r1
 80019de:	d8e5      	bhi.n	80019ac <__gedf2+0x80>
 80019e0:	d1da      	bne.n	8001998 <__gedf2+0x6c>
 80019e2:	45c8      	cmp	r8, r9
 80019e4:	d8e2      	bhi.n	80019ac <__gedf2+0x80>
 80019e6:	2000      	movs	r0, #0
 80019e8:	45c8      	cmp	r8, r9
 80019ea:	d2e4      	bcs.n	80019b6 <__gedf2+0x8a>
 80019ec:	e7d4      	b.n	8001998 <__gedf2+0x6c>
 80019ee:	2000      	movs	r0, #0
 80019f0:	2c00      	cmp	r4, #0
 80019f2:	d0e0      	beq.n	80019b6 <__gedf2+0x8a>
 80019f4:	e7da      	b.n	80019ac <__gedf2+0x80>
 80019f6:	4311      	orrs	r1, r2
 80019f8:	d103      	bne.n	8001a02 <__gedf2+0xd6>
 80019fa:	4584      	cmp	ip, r0
 80019fc:	d1d6      	bne.n	80019ac <__gedf2+0x80>
 80019fe:	2000      	movs	r0, #0
 8001a00:	e7d9      	b.n	80019b6 <__gedf2+0x8a>
 8001a02:	2002      	movs	r0, #2
 8001a04:	4240      	negs	r0, r0
 8001a06:	e7d6      	b.n	80019b6 <__gedf2+0x8a>
 8001a08:	4584      	cmp	ip, r0
 8001a0a:	d0e6      	beq.n	80019da <__gedf2+0xae>
 8001a0c:	e7ce      	b.n	80019ac <__gedf2+0x80>
 8001a0e:	46c0      	nop			@ (mov r8, r8)
 8001a10:	000007ff 	.word	0x000007ff

08001a14 <__ledf2>:
 8001a14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a16:	4657      	mov	r7, sl
 8001a18:	464e      	mov	r6, r9
 8001a1a:	4645      	mov	r5, r8
 8001a1c:	46de      	mov	lr, fp
 8001a1e:	b5e0      	push	{r5, r6, r7, lr}
 8001a20:	000d      	movs	r5, r1
 8001a22:	030f      	lsls	r7, r1, #12
 8001a24:	0004      	movs	r4, r0
 8001a26:	4680      	mov	r8, r0
 8001a28:	0fe8      	lsrs	r0, r5, #31
 8001a2a:	0b39      	lsrs	r1, r7, #12
 8001a2c:	4684      	mov	ip, r0
 8001a2e:	b083      	sub	sp, #12
 8001a30:	0058      	lsls	r0, r3, #1
 8001a32:	4f30      	ldr	r7, [pc, #192]	@ (8001af4 <__ledf2+0xe0>)
 8001a34:	0d40      	lsrs	r0, r0, #21
 8001a36:	9101      	str	r1, [sp, #4]
 8001a38:	031e      	lsls	r6, r3, #12
 8001a3a:	0069      	lsls	r1, r5, #1
 8001a3c:	4682      	mov	sl, r0
 8001a3e:	4691      	mov	r9, r2
 8001a40:	0d49      	lsrs	r1, r1, #21
 8001a42:	0b36      	lsrs	r6, r6, #12
 8001a44:	0fd8      	lsrs	r0, r3, #31
 8001a46:	42b9      	cmp	r1, r7
 8001a48:	d020      	beq.n	8001a8c <__ledf2+0x78>
 8001a4a:	45ba      	cmp	sl, r7
 8001a4c:	d00f      	beq.n	8001a6e <__ledf2+0x5a>
 8001a4e:	2900      	cmp	r1, #0
 8001a50:	d12b      	bne.n	8001aaa <__ledf2+0x96>
 8001a52:	9901      	ldr	r1, [sp, #4]
 8001a54:	430c      	orrs	r4, r1
 8001a56:	4651      	mov	r1, sl
 8001a58:	2900      	cmp	r1, #0
 8001a5a:	d137      	bne.n	8001acc <__ledf2+0xb8>
 8001a5c:	4332      	orrs	r2, r6
 8001a5e:	d038      	beq.n	8001ad2 <__ledf2+0xbe>
 8001a60:	2c00      	cmp	r4, #0
 8001a62:	d144      	bne.n	8001aee <__ledf2+0xda>
 8001a64:	2800      	cmp	r0, #0
 8001a66:	d119      	bne.n	8001a9c <__ledf2+0x88>
 8001a68:	2001      	movs	r0, #1
 8001a6a:	4240      	negs	r0, r0
 8001a6c:	e016      	b.n	8001a9c <__ledf2+0x88>
 8001a6e:	4316      	orrs	r6, r2
 8001a70:	d113      	bne.n	8001a9a <__ledf2+0x86>
 8001a72:	2900      	cmp	r1, #0
 8001a74:	d102      	bne.n	8001a7c <__ledf2+0x68>
 8001a76:	9f01      	ldr	r7, [sp, #4]
 8001a78:	4327      	orrs	r7, r4
 8001a7a:	d0f3      	beq.n	8001a64 <__ledf2+0x50>
 8001a7c:	4584      	cmp	ip, r0
 8001a7e:	d020      	beq.n	8001ac2 <__ledf2+0xae>
 8001a80:	4663      	mov	r3, ip
 8001a82:	2002      	movs	r0, #2
 8001a84:	3b01      	subs	r3, #1
 8001a86:	4018      	ands	r0, r3
 8001a88:	3801      	subs	r0, #1
 8001a8a:	e007      	b.n	8001a9c <__ledf2+0x88>
 8001a8c:	9f01      	ldr	r7, [sp, #4]
 8001a8e:	4327      	orrs	r7, r4
 8001a90:	d103      	bne.n	8001a9a <__ledf2+0x86>
 8001a92:	458a      	cmp	sl, r1
 8001a94:	d1f4      	bne.n	8001a80 <__ledf2+0x6c>
 8001a96:	4316      	orrs	r6, r2
 8001a98:	d01f      	beq.n	8001ada <__ledf2+0xc6>
 8001a9a:	2002      	movs	r0, #2
 8001a9c:	b003      	add	sp, #12
 8001a9e:	bcf0      	pop	{r4, r5, r6, r7}
 8001aa0:	46bb      	mov	fp, r7
 8001aa2:	46b2      	mov	sl, r6
 8001aa4:	46a9      	mov	r9, r5
 8001aa6:	46a0      	mov	r8, r4
 8001aa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001aaa:	4654      	mov	r4, sl
 8001aac:	2c00      	cmp	r4, #0
 8001aae:	d0e7      	beq.n	8001a80 <__ledf2+0x6c>
 8001ab0:	4584      	cmp	ip, r0
 8001ab2:	d1e5      	bne.n	8001a80 <__ledf2+0x6c>
 8001ab4:	4551      	cmp	r1, sl
 8001ab6:	dce3      	bgt.n	8001a80 <__ledf2+0x6c>
 8001ab8:	db03      	blt.n	8001ac2 <__ledf2+0xae>
 8001aba:	9b01      	ldr	r3, [sp, #4]
 8001abc:	42b3      	cmp	r3, r6
 8001abe:	d8df      	bhi.n	8001a80 <__ledf2+0x6c>
 8001ac0:	d00f      	beq.n	8001ae2 <__ledf2+0xce>
 8001ac2:	4663      	mov	r3, ip
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d0cf      	beq.n	8001a68 <__ledf2+0x54>
 8001ac8:	4660      	mov	r0, ip
 8001aca:	e7e7      	b.n	8001a9c <__ledf2+0x88>
 8001acc:	2c00      	cmp	r4, #0
 8001ace:	d0c9      	beq.n	8001a64 <__ledf2+0x50>
 8001ad0:	e7d4      	b.n	8001a7c <__ledf2+0x68>
 8001ad2:	2000      	movs	r0, #0
 8001ad4:	2c00      	cmp	r4, #0
 8001ad6:	d0e1      	beq.n	8001a9c <__ledf2+0x88>
 8001ad8:	e7d2      	b.n	8001a80 <__ledf2+0x6c>
 8001ada:	4584      	cmp	ip, r0
 8001adc:	d1d0      	bne.n	8001a80 <__ledf2+0x6c>
 8001ade:	2000      	movs	r0, #0
 8001ae0:	e7dc      	b.n	8001a9c <__ledf2+0x88>
 8001ae2:	45c8      	cmp	r8, r9
 8001ae4:	d8cc      	bhi.n	8001a80 <__ledf2+0x6c>
 8001ae6:	2000      	movs	r0, #0
 8001ae8:	45c8      	cmp	r8, r9
 8001aea:	d2d7      	bcs.n	8001a9c <__ledf2+0x88>
 8001aec:	e7e9      	b.n	8001ac2 <__ledf2+0xae>
 8001aee:	4584      	cmp	ip, r0
 8001af0:	d0e3      	beq.n	8001aba <__ledf2+0xa6>
 8001af2:	e7c5      	b.n	8001a80 <__ledf2+0x6c>
 8001af4:	000007ff 	.word	0x000007ff

08001af8 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
	if (channel ==0){
 8001b00:	4b1c      	ldr	r3, [pc, #112]	@ (8001b74 <HAL_ADC_ConvCpltCallback+0x7c>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d116      	bne.n	8001b36 <HAL_ADC_ConvCpltCallback+0x3e>
		raw_pot = avg_pot >> ADC_Q;
 8001b08:	4b1b      	ldr	r3, [pc, #108]	@ (8001b78 <HAL_ADC_ConvCpltCallback+0x80>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	0b1a      	lsrs	r2, r3, #12
 8001b0e:	4b1b      	ldr	r3, [pc, #108]	@ (8001b7c <HAL_ADC_ConvCpltCallback+0x84>)
 8001b10:	601a      	str	r2, [r3, #0]
		avg_pot -= raw_pot;
 8001b12:	4b1a      	ldr	r3, [pc, #104]	@ (8001b7c <HAL_ADC_ConvCpltCallback+0x84>)
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	4b18      	ldr	r3, [pc, #96]	@ (8001b78 <HAL_ADC_ConvCpltCallback+0x80>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	1a9a      	subs	r2, r3, r2
 8001b1c:	4b16      	ldr	r3, [pc, #88]	@ (8001b78 <HAL_ADC_ConvCpltCallback+0x80>)
 8001b1e:	601a      	str	r2, [r3, #0]
		avg_pot += HAL_ADC_GetValue(hadc);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	0018      	movs	r0, r3
 8001b24:	f000 fed6 	bl	80028d4 <HAL_ADC_GetValue>
 8001b28:	0002      	movs	r2, r0
 8001b2a:	4b13      	ldr	r3, [pc, #76]	@ (8001b78 <HAL_ADC_ConvCpltCallback+0x80>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	18d2      	adds	r2, r2, r3
 8001b30:	4b11      	ldr	r3, [pc, #68]	@ (8001b78 <HAL_ADC_ConvCpltCallback+0x80>)
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	e009      	b.n	8001b4a <HAL_ADC_ConvCpltCallback+0x52>

	}

	else if(channel = 1){
 8001b36:	4b0f      	ldr	r3, [pc, #60]	@ (8001b74 <HAL_ADC_ConvCpltCallback+0x7c>)
 8001b38:	2201      	movs	r2, #1
 8001b3a:	601a      	str	r2, [r3, #0]
		raw_temp = HAL_ADC_GetValue(hadc);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	0018      	movs	r0, r3
 8001b40:	f000 fec8 	bl	80028d4 <HAL_ADC_GetValue>
 8001b44:	0002      	movs	r2, r0
 8001b46:	4b0e      	ldr	r3, [pc, #56]	@ (8001b80 <HAL_ADC_ConvCpltCallback+0x88>)
 8001b48:	601a      	str	r2, [r3, #0]
		raw_volt = HAL_ADC_GetValue(hadc);

	}


	if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS)) channel = 0;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2208      	movs	r2, #8
 8001b52:	4013      	ands	r3, r2
 8001b54:	2b08      	cmp	r3, #8
 8001b56:	d103      	bne.n	8001b60 <HAL_ADC_ConvCpltCallback+0x68>
 8001b58:	4b06      	ldr	r3, [pc, #24]	@ (8001b74 <HAL_ADC_ConvCpltCallback+0x7c>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	601a      	str	r2, [r3, #0]
	else channel++;

}
 8001b5e:	e004      	b.n	8001b6a <HAL_ADC_ConvCpltCallback+0x72>
	else channel++;
 8001b60:	4b04      	ldr	r3, [pc, #16]	@ (8001b74 <HAL_ADC_ConvCpltCallback+0x7c>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	1c5a      	adds	r2, r3, #1
 8001b66:	4b03      	ldr	r3, [pc, #12]	@ (8001b74 <HAL_ADC_ConvCpltCallback+0x7c>)
 8001b68:	601a      	str	r2, [r3, #0]
}
 8001b6a:	46c0      	nop			@ (mov r8, r8)
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	b002      	add	sp, #8
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	46c0      	nop			@ (mov r8, r8)
 8001b74:	20000074 	.word	0x20000074
 8001b78:	20000070 	.word	0x20000070
 8001b7c:	2000006c 	.word	0x2000006c
 8001b80:	20000078 	.word	0x20000078

08001b84 <button1>:

static void button1(){
 8001b84:	b590      	push	{r4, r7, lr}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0

	static uint32_t button_tick;

	int32_t temperature = (raw_temp - (int32_t)(*TEMP30_CAL_ADDR));
 8001b8a:	4b39      	ldr	r3, [pc, #228]	@ (8001c70 <button1+0xec>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a39      	ldr	r2, [pc, #228]	@ (8001c74 <button1+0xf0>)
 8001b90:	8812      	ldrh	r2, [r2, #0]
 8001b92:	1a9b      	subs	r3, r3, r2
 8001b94:	607b      	str	r3, [r7, #4]
	temperature = temperature * (int32_t)(110 - 30);
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	0013      	movs	r3, r2
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	189b      	adds	r3, r3, r2
 8001b9e:	011b      	lsls	r3, r3, #4
 8001ba0:	607b      	str	r3, [r7, #4]
	temperature = temperature / (int32_t)(*TEMP110_CAL_ADDR - *TEMP30_CAL_ADDR);
 8001ba2:	4b35      	ldr	r3, [pc, #212]	@ (8001c78 <button1+0xf4>)
 8001ba4:	881b      	ldrh	r3, [r3, #0]
 8001ba6:	001a      	movs	r2, r3
 8001ba8:	4b32      	ldr	r3, [pc, #200]	@ (8001c74 <button1+0xf0>)
 8001baa:	881b      	ldrh	r3, [r3, #0]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	0019      	movs	r1, r3
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f7fe fb33 	bl	800021c <__divsi3>
 8001bb6:	0003      	movs	r3, r0
 8001bb8:	607b      	str	r3, [r7, #4]
	temperature = temperature + 30;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	331e      	adds	r3, #30
 8001bbe:	607b      	str	r3, [r7, #4]

	if(Tick > button_tick + TIME){
 8001bc0:	4b2e      	ldr	r3, [pc, #184]	@ (8001c7c <button1+0xf8>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	3364      	adds	r3, #100	@ 0x64
 8001bc6:	001a      	movs	r2, r3
 8001bc8:	4b2d      	ldr	r3, [pc, #180]	@ (8001c80 <button1+0xfc>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d21c      	bcs.n	8001c0a <button1+0x86>
		button_tick=Tick;
 8001bd0:	4b2b      	ldr	r3, [pc, #172]	@ (8001c80 <button1+0xfc>)
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	4b29      	ldr	r3, [pc, #164]	@ (8001c7c <button1+0xf8>)
 8001bd6:	601a      	str	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(S1_GPIO_Port, S1_Pin)==1) {
 8001bd8:	4b2a      	ldr	r3, [pc, #168]	@ (8001c84 <button1+0x100>)
 8001bda:	2102      	movs	r1, #2
 8001bdc:	0018      	movs	r0, r3
 8001bde:	f001 fba9 	bl	8003334 <HAL_GPIO_ReadPin>
 8001be2:	0003      	movs	r3, r0
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d110      	bne.n	8001c0a <button1+0x86>
			off_time = Tick + TIME;
 8001be8:	4b25      	ldr	r3, [pc, #148]	@ (8001c80 <button1+0xfc>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	3364      	adds	r3, #100	@ 0x64
 8001bee:	001a      	movs	r2, r3
 8001bf0:	4b25      	ldr	r3, [pc, #148]	@ (8001c88 <button1+0x104>)
 8001bf2:	601a      	str	r2, [r3, #0]
			sct_value(temperature,0);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	0018      	movs	r0, r3
 8001bfc:	f000 fb0e 	bl	800221c <sct_value>
			HAL_Delay(1000);
 8001c00:	23fa      	movs	r3, #250	@ 0xfa
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	0018      	movs	r0, r3
 8001c06:	f000 fc8f 	bl	8002528 <HAL_Delay>
		}

	}
	if (Tick > off_time) {
 8001c0a:	4b1d      	ldr	r3, [pc, #116]	@ (8001c80 <button1+0xfc>)
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	4b1e      	ldr	r3, [pc, #120]	@ (8001c88 <button1+0x104>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d927      	bls.n	8001c66 <button1+0xe2>
		sct_value(raw_pot * 500.9/4095,raw_pot*9/4095);
 8001c16:	4b1d      	ldr	r3, [pc, #116]	@ (8001c8c <button1+0x108>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	0018      	movs	r0, r3
 8001c1c:	f7ff fdc2 	bl	80017a4 <__aeabi_ui2d>
 8001c20:	4a1b      	ldr	r2, [pc, #108]	@ (8001c90 <button1+0x10c>)
 8001c22:	4b1c      	ldr	r3, [pc, #112]	@ (8001c94 <button1+0x110>)
 8001c24:	f7fe ff1e 	bl	8000a64 <__aeabi_dmul>
 8001c28:	0002      	movs	r2, r0
 8001c2a:	000b      	movs	r3, r1
 8001c2c:	0010      	movs	r0, r2
 8001c2e:	0019      	movs	r1, r3
 8001c30:	2200      	movs	r2, #0
 8001c32:	4b19      	ldr	r3, [pc, #100]	@ (8001c98 <button1+0x114>)
 8001c34:	f7fe fbfc 	bl	8000430 <__aeabi_ddiv>
 8001c38:	0002      	movs	r2, r0
 8001c3a:	000b      	movs	r3, r1
 8001c3c:	0010      	movs	r0, r2
 8001c3e:	0019      	movs	r1, r3
 8001c40:	f7fe fbd8 	bl	80003f4 <__aeabi_d2uiz>
 8001c44:	0003      	movs	r3, r0
 8001c46:	b29c      	uxth	r4, r3
 8001c48:	4b10      	ldr	r3, [pc, #64]	@ (8001c8c <button1+0x108>)
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	0013      	movs	r3, r2
 8001c4e:	00db      	lsls	r3, r3, #3
 8001c50:	189b      	adds	r3, r3, r2
 8001c52:	4912      	ldr	r1, [pc, #72]	@ (8001c9c <button1+0x118>)
 8001c54:	0018      	movs	r0, r3
 8001c56:	f7fe fa57 	bl	8000108 <__udivsi3>
 8001c5a:	0003      	movs	r3, r0
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	0019      	movs	r1, r3
 8001c60:	0020      	movs	r0, r4
 8001c62:	f000 fadb 	bl	800221c <sct_value>

	}
}
 8001c66:	46c0      	nop			@ (mov r8, r8)
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	b003      	add	sp, #12
 8001c6c:	bd90      	pop	{r4, r7, pc}
 8001c6e:	46c0      	nop			@ (mov r8, r8)
 8001c70:	20000078 	.word	0x20000078
 8001c74:	1ffff7b8 	.word	0x1ffff7b8
 8001c78:	1ffff7c2 	.word	0x1ffff7c2
 8001c7c:	20000088 	.word	0x20000088
 8001c80:	20000080 	.word	0x20000080
 8001c84:	48000800 	.word	0x48000800
 8001c88:	20000084 	.word	0x20000084
 8001c8c:	2000006c 	.word	0x2000006c
 8001c90:	66666666 	.word	0x66666666
 8001c94:	407f4e66 	.word	0x407f4e66
 8001c98:	40affe00 	.word	0x40affe00
 8001c9c:	00000fff 	.word	0x00000fff

08001ca0 <button2>:


static void button2(){
 8001ca0:	b590      	push	{r4, r7, lr}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0

	static uint32_t button_tick;

	uint32_t voltage = 330 * (*VREFINT_CAL_ADDR) / raw_volt;
 8001ca6:	4b34      	ldr	r3, [pc, #208]	@ (8001d78 <button2+0xd8>)
 8001ca8:	881b      	ldrh	r3, [r3, #0]
 8001caa:	001a      	movs	r2, r3
 8001cac:	0013      	movs	r3, r2
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	189b      	adds	r3, r3, r2
 8001cb2:	015a      	lsls	r2, r3, #5
 8001cb4:	189b      	adds	r3, r3, r2
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	001a      	movs	r2, r3
 8001cba:	4b30      	ldr	r3, [pc, #192]	@ (8001d7c <button2+0xdc>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	0019      	movs	r1, r3
 8001cc0:	0010      	movs	r0, r2
 8001cc2:	f7fe fa21 	bl	8000108 <__udivsi3>
 8001cc6:	0003      	movs	r3, r0
 8001cc8:	607b      	str	r3, [r7, #4]

	if(Tick > button_tick + TIME){
 8001cca:	4b2d      	ldr	r3, [pc, #180]	@ (8001d80 <button2+0xe0>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	3364      	adds	r3, #100	@ 0x64
 8001cd0:	001a      	movs	r2, r3
 8001cd2:	4b2c      	ldr	r3, [pc, #176]	@ (8001d84 <button2+0xe4>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d21c      	bcs.n	8001d14 <button2+0x74>
		button_tick=Tick;
 8001cda:	4b2a      	ldr	r3, [pc, #168]	@ (8001d84 <button2+0xe4>)
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	4b28      	ldr	r3, [pc, #160]	@ (8001d80 <button2+0xe0>)
 8001ce0:	601a      	str	r2, [r3, #0]

		if (HAL_GPIO_ReadPin(S2_GPIO_Port, S2_Pin)==1) {
 8001ce2:	4b29      	ldr	r3, [pc, #164]	@ (8001d88 <button2+0xe8>)
 8001ce4:	2101      	movs	r1, #1
 8001ce6:	0018      	movs	r0, r3
 8001ce8:	f001 fb24 	bl	8003334 <HAL_GPIO_ReadPin>
 8001cec:	0003      	movs	r3, r0
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d110      	bne.n	8001d14 <button2+0x74>
			off_time = Tick + TIME;
 8001cf2:	4b24      	ldr	r3, [pc, #144]	@ (8001d84 <button2+0xe4>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	3364      	adds	r3, #100	@ 0x64
 8001cf8:	001a      	movs	r2, r3
 8001cfa:	4b24      	ldr	r3, [pc, #144]	@ (8001d8c <button2+0xec>)
 8001cfc:	601a      	str	r2, [r3, #0]
			sct_value(voltage,0);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	2100      	movs	r1, #0
 8001d04:	0018      	movs	r0, r3
 8001d06:	f000 fa89 	bl	800221c <sct_value>
			HAL_Delay(1000);
 8001d0a:	23fa      	movs	r3, #250	@ 0xfa
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	0018      	movs	r0, r3
 8001d10:	f000 fc0a 	bl	8002528 <HAL_Delay>
		}

	}
	if (Tick > off_time) {
 8001d14:	4b1b      	ldr	r3, [pc, #108]	@ (8001d84 <button2+0xe4>)
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	4b1c      	ldr	r3, [pc, #112]	@ (8001d8c <button2+0xec>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d927      	bls.n	8001d70 <button2+0xd0>
		sct_value(raw_pot * 500.9/4095,raw_pot*9/4095);
 8001d20:	4b1b      	ldr	r3, [pc, #108]	@ (8001d90 <button2+0xf0>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	0018      	movs	r0, r3
 8001d26:	f7ff fd3d 	bl	80017a4 <__aeabi_ui2d>
 8001d2a:	4a1a      	ldr	r2, [pc, #104]	@ (8001d94 <button2+0xf4>)
 8001d2c:	4b1a      	ldr	r3, [pc, #104]	@ (8001d98 <button2+0xf8>)
 8001d2e:	f7fe fe99 	bl	8000a64 <__aeabi_dmul>
 8001d32:	0002      	movs	r2, r0
 8001d34:	000b      	movs	r3, r1
 8001d36:	0010      	movs	r0, r2
 8001d38:	0019      	movs	r1, r3
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	4b17      	ldr	r3, [pc, #92]	@ (8001d9c <button2+0xfc>)
 8001d3e:	f7fe fb77 	bl	8000430 <__aeabi_ddiv>
 8001d42:	0002      	movs	r2, r0
 8001d44:	000b      	movs	r3, r1
 8001d46:	0010      	movs	r0, r2
 8001d48:	0019      	movs	r1, r3
 8001d4a:	f7fe fb53 	bl	80003f4 <__aeabi_d2uiz>
 8001d4e:	0003      	movs	r3, r0
 8001d50:	b29c      	uxth	r4, r3
 8001d52:	4b0f      	ldr	r3, [pc, #60]	@ (8001d90 <button2+0xf0>)
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	0013      	movs	r3, r2
 8001d58:	00db      	lsls	r3, r3, #3
 8001d5a:	189b      	adds	r3, r3, r2
 8001d5c:	4910      	ldr	r1, [pc, #64]	@ (8001da0 <button2+0x100>)
 8001d5e:	0018      	movs	r0, r3
 8001d60:	f7fe f9d2 	bl	8000108 <__udivsi3>
 8001d64:	0003      	movs	r3, r0
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	0019      	movs	r1, r3
 8001d6a:	0020      	movs	r0, r4
 8001d6c:	f000 fa56 	bl	800221c <sct_value>

	}
}
 8001d70:	46c0      	nop			@ (mov r8, r8)
 8001d72:	46bd      	mov	sp, r7
 8001d74:	b003      	add	sp, #12
 8001d76:	bd90      	pop	{r4, r7, pc}
 8001d78:	1ffff7ba 	.word	0x1ffff7ba
 8001d7c:	2000007c 	.word	0x2000007c
 8001d80:	2000008c 	.word	0x2000008c
 8001d84:	20000080 	.word	0x20000080
 8001d88:	48000800 	.word	0x48000800
 8001d8c:	20000084 	.word	0x20000084
 8001d90:	2000006c 	.word	0x2000006c
 8001d94:	66666666 	.word	0x66666666
 8001d98:	407f4e66 	.word	0x407f4e66
 8001d9c:	40affe00 	.word	0x40affe00
 8001da0:	00000fff 	.word	0x00000fff

08001da4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001da4:	b5b0      	push	{r4, r5, r7, lr}
 8001da6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001da8:	f000 fb5a 	bl	8002460 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001dac:	f000 f864 	bl	8001e78 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001db0:	f000 f926 	bl	8002000 <MX_GPIO_Init>
	MX_ADC_Init();
 8001db4:	f000 f8b0 	bl	8001f18 <MX_ADC_Init>
	/* USER CODE BEGIN 2 */
	sct_init();
 8001db8:	f000 f9e0 	bl	800217c <sct_init>
	HAL_ADCEx_Calibration_Start(&hadc);
 8001dbc:	4b26      	ldr	r3, [pc, #152]	@ (8001e58 <main+0xb4>)
 8001dbe:	0018      	movs	r0, r3
 8001dc0:	f000 ffc2 	bl	8002d48 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_IT(&hadc);
 8001dc4:	4b24      	ldr	r3, [pc, #144]	@ (8001e58 <main+0xb4>)
 8001dc6:	0018      	movs	r0, r3
 8001dc8:	f000 fd12 	bl	80027f0 <HAL_ADC_Start_IT>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{

		switch(state) {
 8001dcc:	4b23      	ldr	r3, [pc, #140]	@ (8001e5c <main+0xb8>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2b03      	cmp	r3, #3
 8001dd2:	d039      	beq.n	8001e48 <main+0xa4>
 8001dd4:	d8fa      	bhi.n	8001dcc <main+0x28>
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d002      	beq.n	8001de0 <main+0x3c>
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d02d      	beq.n	8001e3a <main+0x96>
 8001dde:	e7f5      	b.n	8001dcc <main+0x28>
			case 1:
				sct_value(raw_pot * 500.9/4095,raw_pot*9/4095);
 8001de0:	4b1f      	ldr	r3, [pc, #124]	@ (8001e60 <main+0xbc>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	0018      	movs	r0, r3
 8001de6:	f7ff fcdd 	bl	80017a4 <__aeabi_ui2d>
 8001dea:	4a1e      	ldr	r2, [pc, #120]	@ (8001e64 <main+0xc0>)
 8001dec:	4b1e      	ldr	r3, [pc, #120]	@ (8001e68 <main+0xc4>)
 8001dee:	f7fe fe39 	bl	8000a64 <__aeabi_dmul>
 8001df2:	0002      	movs	r2, r0
 8001df4:	000b      	movs	r3, r1
 8001df6:	0010      	movs	r0, r2
 8001df8:	0019      	movs	r1, r3
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	4b1b      	ldr	r3, [pc, #108]	@ (8001e6c <main+0xc8>)
 8001dfe:	f7fe fb17 	bl	8000430 <__aeabi_ddiv>
 8001e02:	0002      	movs	r2, r0
 8001e04:	000b      	movs	r3, r1
 8001e06:	0010      	movs	r0, r2
 8001e08:	0019      	movs	r1, r3
 8001e0a:	f7fe faf3 	bl	80003f4 <__aeabi_d2uiz>
 8001e0e:	0003      	movs	r3, r0
 8001e10:	b29c      	uxth	r4, r3
 8001e12:	4b13      	ldr	r3, [pc, #76]	@ (8001e60 <main+0xbc>)
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	0013      	movs	r3, r2
 8001e18:	00db      	lsls	r3, r3, #3
 8001e1a:	189b      	adds	r3, r3, r2
 8001e1c:	4914      	ldr	r1, [pc, #80]	@ (8001e70 <main+0xcc>)
 8001e1e:	0018      	movs	r0, r3
 8001e20:	f7fe f972 	bl	8000108 <__udivsi3>
 8001e24:	0003      	movs	r3, r0
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	0019      	movs	r1, r3
 8001e2a:	0020      	movs	r0, r4
 8001e2c:	f000 f9f6 	bl	800221c <sct_value>
				HAL_Delay(10000);
 8001e30:	4b10      	ldr	r3, [pc, #64]	@ (8001e74 <main+0xd0>)
 8001e32:	0018      	movs	r0, r3
 8001e34:	f000 fb78 	bl	8002528 <HAL_Delay>
			break;
 8001e38:	e00d      	b.n	8001e56 <main+0xb2>

			case 2:

				button1();
 8001e3a:	f7ff fea3 	bl	8001b84 <button1>
				HAL_Delay(10000);
 8001e3e:	4b0d      	ldr	r3, [pc, #52]	@ (8001e74 <main+0xd0>)
 8001e40:	0018      	movs	r0, r3
 8001e42:	f000 fb71 	bl	8002528 <HAL_Delay>
					break;
 8001e46:	e006      	b.n	8001e56 <main+0xb2>

			case 3:
				button2();
 8001e48:	f7ff ff2a 	bl	8001ca0 <button2>
				HAL_Delay(10000);
 8001e4c:	4b09      	ldr	r3, [pc, #36]	@ (8001e74 <main+0xd0>)
 8001e4e:	0018      	movs	r0, r3
 8001e50:	f000 fb6a 	bl	8002528 <HAL_Delay>
			break;
 8001e54:	46c0      	nop			@ (mov r8, r8)
		switch(state) {
 8001e56:	e7b9      	b.n	8001dcc <main+0x28>
 8001e58:	2000002c 	.word	0x2000002c
 8001e5c:	20000000 	.word	0x20000000
 8001e60:	2000006c 	.word	0x2000006c
 8001e64:	66666666 	.word	0x66666666
 8001e68:	407f4e66 	.word	0x407f4e66
 8001e6c:	40affe00 	.word	0x40affe00
 8001e70:	00000fff 	.word	0x00000fff
 8001e74:	00002710 	.word	0x00002710

08001e78 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001e78:	b590      	push	{r4, r7, lr}
 8001e7a:	b091      	sub	sp, #68	@ 0x44
 8001e7c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e7e:	2410      	movs	r4, #16
 8001e80:	193b      	adds	r3, r7, r4
 8001e82:	0018      	movs	r0, r3
 8001e84:	2330      	movs	r3, #48	@ 0x30
 8001e86:	001a      	movs	r2, r3
 8001e88:	2100      	movs	r1, #0
 8001e8a:	f001 fecb 	bl	8003c24 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e8e:	003b      	movs	r3, r7
 8001e90:	0018      	movs	r0, r3
 8001e92:	2310      	movs	r3, #16
 8001e94:	001a      	movs	r2, r3
 8001e96:	2100      	movs	r1, #0
 8001e98:	f001 fec4 	bl	8003c24 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8001e9c:	0021      	movs	r1, r4
 8001e9e:	187b      	adds	r3, r7, r1
 8001ea0:	2212      	movs	r2, #18
 8001ea2:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ea4:	187b      	adds	r3, r7, r1
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8001eaa:	187b      	adds	r3, r7, r1
 8001eac:	2201      	movs	r2, #1
 8001eae:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001eb0:	187b      	adds	r3, r7, r1
 8001eb2:	2210      	movs	r2, #16
 8001eb4:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8001eb6:	187b      	adds	r3, r7, r1
 8001eb8:	2210      	movs	r2, #16
 8001eba:	619a      	str	r2, [r3, #24]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ebc:	187b      	adds	r3, r7, r1
 8001ebe:	2202      	movs	r2, #2
 8001ec0:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ec2:	187b      	adds	r3, r7, r1
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	625a      	str	r2, [r3, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001ec8:	187b      	adds	r3, r7, r1
 8001eca:	22a0      	movs	r2, #160	@ 0xa0
 8001ecc:	0392      	lsls	r2, r2, #14
 8001ece:	629a      	str	r2, [r3, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001ed0:	187b      	adds	r3, r7, r1
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ed6:	187b      	adds	r3, r7, r1
 8001ed8:	0018      	movs	r0, r3
 8001eda:	f001 fa65 	bl	80033a8 <HAL_RCC_OscConfig>
 8001ede:	1e03      	subs	r3, r0, #0
 8001ee0:	d001      	beq.n	8001ee6 <SystemClock_Config+0x6e>
	{
		Error_Handler();
 8001ee2:	f000 f945 	bl	8002170 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ee6:	003b      	movs	r3, r7
 8001ee8:	2207      	movs	r2, #7
 8001eea:	601a      	str	r2, [r3, #0]
			|RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001eec:	003b      	movs	r3, r7
 8001eee:	2202      	movs	r2, #2
 8001ef0:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ef2:	003b      	movs	r3, r7
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ef8:	003b      	movs	r3, r7
 8001efa:	2200      	movs	r2, #0
 8001efc:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001efe:	003b      	movs	r3, r7
 8001f00:	2101      	movs	r1, #1
 8001f02:	0018      	movs	r0, r3
 8001f04:	f001 fd6a 	bl	80039dc <HAL_RCC_ClockConfig>
 8001f08:	1e03      	subs	r3, r0, #0
 8001f0a:	d001      	beq.n	8001f10 <SystemClock_Config+0x98>
	{
		Error_Handler();
 8001f0c:	f000 f930 	bl	8002170 <Error_Handler>
	}
}
 8001f10:	46c0      	nop			@ (mov r8, r8)
 8001f12:	46bd      	mov	sp, r7
 8001f14:	b011      	add	sp, #68	@ 0x44
 8001f16:	bd90      	pop	{r4, r7, pc}

08001f18 <MX_ADC_Init>:
 * @brief ADC Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC_Init 0 */

	/* USER CODE END ADC_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8001f1e:	1d3b      	adds	r3, r7, #4
 8001f20:	0018      	movs	r0, r3
 8001f22:	230c      	movs	r3, #12
 8001f24:	001a      	movs	r2, r3
 8001f26:	2100      	movs	r1, #0
 8001f28:	f001 fe7c 	bl	8003c24 <memset>

	/* USER CODE END ADC_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc.Instance = ADC1;
 8001f2c:	4b32      	ldr	r3, [pc, #200]	@ (8001ff8 <MX_ADC_Init+0xe0>)
 8001f2e:	4a33      	ldr	r2, [pc, #204]	@ (8001ffc <MX_ADC_Init+0xe4>)
 8001f30:	601a      	str	r2, [r3, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001f32:	4b31      	ldr	r3, [pc, #196]	@ (8001ff8 <MX_ADC_Init+0xe0>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	605a      	str	r2, [r3, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001f38:	4b2f      	ldr	r3, [pc, #188]	@ (8001ff8 <MX_ADC_Init+0xe0>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	609a      	str	r2, [r3, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f3e:	4b2e      	ldr	r3, [pc, #184]	@ (8001ff8 <MX_ADC_Init+0xe0>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	60da      	str	r2, [r3, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001f44:	4b2c      	ldr	r3, [pc, #176]	@ (8001ff8 <MX_ADC_Init+0xe0>)
 8001f46:	2201      	movs	r2, #1
 8001f48:	611a      	str	r2, [r3, #16]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f4a:	4b2b      	ldr	r3, [pc, #172]	@ (8001ff8 <MX_ADC_Init+0xe0>)
 8001f4c:	2204      	movs	r2, #4
 8001f4e:	615a      	str	r2, [r3, #20]
	hadc.Init.LowPowerAutoWait = DISABLE;
 8001f50:	4b29      	ldr	r3, [pc, #164]	@ (8001ff8 <MX_ADC_Init+0xe0>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	761a      	strb	r2, [r3, #24]
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001f56:	4b28      	ldr	r3, [pc, #160]	@ (8001ff8 <MX_ADC_Init+0xe0>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	765a      	strb	r2, [r3, #25]
	hadc.Init.ContinuousConvMode = ENABLE;
 8001f5c:	4b26      	ldr	r3, [pc, #152]	@ (8001ff8 <MX_ADC_Init+0xe0>)
 8001f5e:	2201      	movs	r2, #1
 8001f60:	769a      	strb	r2, [r3, #26]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 8001f62:	4b25      	ldr	r3, [pc, #148]	@ (8001ff8 <MX_ADC_Init+0xe0>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	76da      	strb	r2, [r3, #27]
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f68:	4b23      	ldr	r3, [pc, #140]	@ (8001ff8 <MX_ADC_Init+0xe0>)
 8001f6a:	22c2      	movs	r2, #194	@ 0xc2
 8001f6c:	32ff      	adds	r2, #255	@ 0xff
 8001f6e:	61da      	str	r2, [r3, #28]
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f70:	4b21      	ldr	r3, [pc, #132]	@ (8001ff8 <MX_ADC_Init+0xe0>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	621a      	str	r2, [r3, #32]
	hadc.Init.DMAContinuousRequests = DISABLE;
 8001f76:	4b20      	ldr	r3, [pc, #128]	@ (8001ff8 <MX_ADC_Init+0xe0>)
 8001f78:	2224      	movs	r2, #36	@ 0x24
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	5499      	strb	r1, [r3, r2]
	hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001f7e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ff8 <MX_ADC_Init+0xe0>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001f84:	4b1c      	ldr	r3, [pc, #112]	@ (8001ff8 <MX_ADC_Init+0xe0>)
 8001f86:	0018      	movs	r0, r3
 8001f88:	f000 faf2 	bl	8002570 <HAL_ADC_Init>
 8001f8c:	1e03      	subs	r3, r0, #0
 8001f8e:	d001      	beq.n	8001f94 <MX_ADC_Init+0x7c>
	{
		Error_Handler();
 8001f90:	f000 f8ee 	bl	8002170 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8001f94:	1d3b      	adds	r3, r7, #4
 8001f96:	2200      	movs	r2, #0
 8001f98:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001f9a:	1d3b      	adds	r3, r7, #4
 8001f9c:	2280      	movs	r2, #128	@ 0x80
 8001f9e:	0152      	lsls	r2, r2, #5
 8001fa0:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001fa2:	1d3b      	adds	r3, r7, #4
 8001fa4:	2207      	movs	r2, #7
 8001fa6:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001fa8:	1d3a      	adds	r2, r7, #4
 8001faa:	4b13      	ldr	r3, [pc, #76]	@ (8001ff8 <MX_ADC_Init+0xe0>)
 8001fac:	0011      	movs	r1, r2
 8001fae:	0018      	movs	r0, r3
 8001fb0:	f000 fd50 	bl	8002a54 <HAL_ADC_ConfigChannel>
 8001fb4:	1e03      	subs	r3, r0, #0
 8001fb6:	d001      	beq.n	8001fbc <MX_ADC_Init+0xa4>
	{
		Error_Handler();
 8001fb8:	f000 f8da 	bl	8002170 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001fbc:	1d3b      	adds	r3, r7, #4
 8001fbe:	2210      	movs	r2, #16
 8001fc0:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001fc2:	1d3a      	adds	r2, r7, #4
 8001fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ff8 <MX_ADC_Init+0xe0>)
 8001fc6:	0011      	movs	r1, r2
 8001fc8:	0018      	movs	r0, r3
 8001fca:	f000 fd43 	bl	8002a54 <HAL_ADC_ConfigChannel>
 8001fce:	1e03      	subs	r3, r0, #0
 8001fd0:	d001      	beq.n	8001fd6 <MX_ADC_Init+0xbe>
	{
		Error_Handler();
 8001fd2:	f000 f8cd 	bl	8002170 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001fd6:	1d3b      	adds	r3, r7, #4
 8001fd8:	2211      	movs	r2, #17
 8001fda:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001fdc:	1d3a      	adds	r2, r7, #4
 8001fde:	4b06      	ldr	r3, [pc, #24]	@ (8001ff8 <MX_ADC_Init+0xe0>)
 8001fe0:	0011      	movs	r1, r2
 8001fe2:	0018      	movs	r0, r3
 8001fe4:	f000 fd36 	bl	8002a54 <HAL_ADC_ConfigChannel>
 8001fe8:	1e03      	subs	r3, r0, #0
 8001fea:	d001      	beq.n	8001ff0 <MX_ADC_Init+0xd8>
	{
		Error_Handler();
 8001fec:	f000 f8c0 	bl	8002170 <Error_Handler>
	}
	/* USER CODE BEGIN ADC_Init 2 */

	/* USER CODE END ADC_Init 2 */

}
 8001ff0:	46c0      	nop			@ (mov r8, r8)
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	b004      	add	sp, #16
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	2000002c 	.word	0x2000002c
 8001ffc:	40012400 	.word	0x40012400

08002000 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8002000:	b590      	push	{r4, r7, lr}
 8002002:	b08b      	sub	sp, #44	@ 0x2c
 8002004:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002006:	2414      	movs	r4, #20
 8002008:	193b      	adds	r3, r7, r4
 800200a:	0018      	movs	r0, r3
 800200c:	2314      	movs	r3, #20
 800200e:	001a      	movs	r2, r3
 8002010:	2100      	movs	r1, #0
 8002012:	f001 fe07 	bl	8003c24 <memset>
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002016:	4b53      	ldr	r3, [pc, #332]	@ (8002164 <MX_GPIO_Init+0x164>)
 8002018:	695a      	ldr	r2, [r3, #20]
 800201a:	4b52      	ldr	r3, [pc, #328]	@ (8002164 <MX_GPIO_Init+0x164>)
 800201c:	2180      	movs	r1, #128	@ 0x80
 800201e:	0309      	lsls	r1, r1, #12
 8002020:	430a      	orrs	r2, r1
 8002022:	615a      	str	r2, [r3, #20]
 8002024:	4b4f      	ldr	r3, [pc, #316]	@ (8002164 <MX_GPIO_Init+0x164>)
 8002026:	695a      	ldr	r2, [r3, #20]
 8002028:	2380      	movs	r3, #128	@ 0x80
 800202a:	031b      	lsls	r3, r3, #12
 800202c:	4013      	ands	r3, r2
 800202e:	613b      	str	r3, [r7, #16]
 8002030:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8002032:	4b4c      	ldr	r3, [pc, #304]	@ (8002164 <MX_GPIO_Init+0x164>)
 8002034:	695a      	ldr	r2, [r3, #20]
 8002036:	4b4b      	ldr	r3, [pc, #300]	@ (8002164 <MX_GPIO_Init+0x164>)
 8002038:	2180      	movs	r1, #128	@ 0x80
 800203a:	03c9      	lsls	r1, r1, #15
 800203c:	430a      	orrs	r2, r1
 800203e:	615a      	str	r2, [r3, #20]
 8002040:	4b48      	ldr	r3, [pc, #288]	@ (8002164 <MX_GPIO_Init+0x164>)
 8002042:	695a      	ldr	r2, [r3, #20]
 8002044:	2380      	movs	r3, #128	@ 0x80
 8002046:	03db      	lsls	r3, r3, #15
 8002048:	4013      	ands	r3, r2
 800204a:	60fb      	str	r3, [r7, #12]
 800204c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800204e:	4b45      	ldr	r3, [pc, #276]	@ (8002164 <MX_GPIO_Init+0x164>)
 8002050:	695a      	ldr	r2, [r3, #20]
 8002052:	4b44      	ldr	r3, [pc, #272]	@ (8002164 <MX_GPIO_Init+0x164>)
 8002054:	2180      	movs	r1, #128	@ 0x80
 8002056:	0289      	lsls	r1, r1, #10
 8002058:	430a      	orrs	r2, r1
 800205a:	615a      	str	r2, [r3, #20]
 800205c:	4b41      	ldr	r3, [pc, #260]	@ (8002164 <MX_GPIO_Init+0x164>)
 800205e:	695a      	ldr	r2, [r3, #20]
 8002060:	2380      	movs	r3, #128	@ 0x80
 8002062:	029b      	lsls	r3, r3, #10
 8002064:	4013      	ands	r3, r2
 8002066:	60bb      	str	r3, [r7, #8]
 8002068:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800206a:	4b3e      	ldr	r3, [pc, #248]	@ (8002164 <MX_GPIO_Init+0x164>)
 800206c:	695a      	ldr	r2, [r3, #20]
 800206e:	4b3d      	ldr	r3, [pc, #244]	@ (8002164 <MX_GPIO_Init+0x164>)
 8002070:	2180      	movs	r1, #128	@ 0x80
 8002072:	02c9      	lsls	r1, r1, #11
 8002074:	430a      	orrs	r2, r1
 8002076:	615a      	str	r2, [r3, #20]
 8002078:	4b3a      	ldr	r3, [pc, #232]	@ (8002164 <MX_GPIO_Init+0x164>)
 800207a:	695a      	ldr	r2, [r3, #20]
 800207c:	2380      	movs	r3, #128	@ 0x80
 800207e:	02db      	lsls	r3, r3, #11
 8002080:	4013      	ands	r3, r2
 8002082:	607b      	str	r3, [r7, #4]
 8002084:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002086:	2390      	movs	r3, #144	@ 0x90
 8002088:	05db      	lsls	r3, r3, #23
 800208a:	2200      	movs	r2, #0
 800208c:	2120      	movs	r1, #32
 800208e:	0018      	movs	r0, r3
 8002090:	f001 f96d 	bl	800336e <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, SCT_NOE_Pin|SCT_CLK_Pin|SCT_SDI_Pin|SCT_NLA_Pin, GPIO_PIN_RESET);
 8002094:	2387      	movs	r3, #135	@ 0x87
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	4833      	ldr	r0, [pc, #204]	@ (8002168 <MX_GPIO_Init+0x168>)
 800209a:	2200      	movs	r2, #0
 800209c:	0019      	movs	r1, r3
 800209e:	f001 f966 	bl	800336e <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80020a2:	193b      	adds	r3, r7, r4
 80020a4:	2280      	movs	r2, #128	@ 0x80
 80020a6:	0192      	lsls	r2, r2, #6
 80020a8:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80020aa:	193b      	adds	r3, r7, r4
 80020ac:	2284      	movs	r2, #132	@ 0x84
 80020ae:	0392      	lsls	r2, r2, #14
 80020b0:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b2:	193b      	adds	r3, r7, r4
 80020b4:	2200      	movs	r2, #0
 80020b6:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80020b8:	193b      	adds	r3, r7, r4
 80020ba:	4a2c      	ldr	r2, [pc, #176]	@ (800216c <MX_GPIO_Init+0x16c>)
 80020bc:	0019      	movs	r1, r3
 80020be:	0010      	movs	r0, r2
 80020c0:	f000 ffc8 	bl	8003054 <HAL_GPIO_Init>

	/*Configure GPIO pins : S2_Pin S1_Pin */
	GPIO_InitStruct.Pin = S2_Pin|S1_Pin;
 80020c4:	193b      	adds	r3, r7, r4
 80020c6:	2203      	movs	r2, #3
 80020c8:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020ca:	193b      	adds	r3, r7, r4
 80020cc:	2200      	movs	r2, #0
 80020ce:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020d0:	193b      	adds	r3, r7, r4
 80020d2:	2201      	movs	r2, #1
 80020d4:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020d6:	193b      	adds	r3, r7, r4
 80020d8:	4a24      	ldr	r2, [pc, #144]	@ (800216c <MX_GPIO_Init+0x16c>)
 80020da:	0019      	movs	r1, r3
 80020dc:	0010      	movs	r0, r2
 80020de:	f000 ffb9 	bl	8003054 <HAL_GPIO_Init>

	/*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
	GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80020e2:	193b      	adds	r3, r7, r4
 80020e4:	220c      	movs	r2, #12
 80020e6:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e8:	193b      	adds	r3, r7, r4
 80020ea:	2202      	movs	r2, #2
 80020ec:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ee:	193b      	adds	r3, r7, r4
 80020f0:	2200      	movs	r2, #0
 80020f2:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f4:	193b      	adds	r3, r7, r4
 80020f6:	2200      	movs	r2, #0
 80020f8:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80020fa:	193b      	adds	r3, r7, r4
 80020fc:	2201      	movs	r2, #1
 80020fe:	611a      	str	r2, [r3, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002100:	193a      	adds	r2, r7, r4
 8002102:	2390      	movs	r3, #144	@ 0x90
 8002104:	05db      	lsls	r3, r3, #23
 8002106:	0011      	movs	r1, r2
 8002108:	0018      	movs	r0, r3
 800210a:	f000 ffa3 	bl	8003054 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 800210e:	193b      	adds	r3, r7, r4
 8002110:	2220      	movs	r2, #32
 8002112:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002114:	193b      	adds	r3, r7, r4
 8002116:	2201      	movs	r2, #1
 8002118:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211a:	193b      	adds	r3, r7, r4
 800211c:	2200      	movs	r2, #0
 800211e:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002120:	193b      	adds	r3, r7, r4
 8002122:	2200      	movs	r2, #0
 8002124:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002126:	193a      	adds	r2, r7, r4
 8002128:	2390      	movs	r3, #144	@ 0x90
 800212a:	05db      	lsls	r3, r3, #23
 800212c:	0011      	movs	r1, r2
 800212e:	0018      	movs	r0, r3
 8002130:	f000 ff90 	bl	8003054 <HAL_GPIO_Init>

	/*Configure GPIO pins : SCT_NOE_Pin SCT_CLK_Pin SCT_SDI_Pin SCT_NLA_Pin */
	GPIO_InitStruct.Pin = SCT_NOE_Pin|SCT_CLK_Pin|SCT_SDI_Pin|SCT_NLA_Pin;
 8002134:	0021      	movs	r1, r4
 8002136:	187b      	adds	r3, r7, r1
 8002138:	2287      	movs	r2, #135	@ 0x87
 800213a:	00d2      	lsls	r2, r2, #3
 800213c:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800213e:	187b      	adds	r3, r7, r1
 8002140:	2201      	movs	r2, #1
 8002142:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002144:	187b      	adds	r3, r7, r1
 8002146:	2200      	movs	r2, #0
 8002148:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800214a:	187b      	adds	r3, r7, r1
 800214c:	2200      	movs	r2, #0
 800214e:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002150:	187b      	adds	r3, r7, r1
 8002152:	4a05      	ldr	r2, [pc, #20]	@ (8002168 <MX_GPIO_Init+0x168>)
 8002154:	0019      	movs	r1, r3
 8002156:	0010      	movs	r0, r2
 8002158:	f000 ff7c 	bl	8003054 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800215c:	46c0      	nop			@ (mov r8, r8)
 800215e:	46bd      	mov	sp, r7
 8002160:	b00b      	add	sp, #44	@ 0x2c
 8002162:	bd90      	pop	{r4, r7, pc}
 8002164:	40021000 	.word	0x40021000
 8002168:	48000400 	.word	0x48000400
 800216c:	48000800 	.word	0x48000800

08002170 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002174:	b672      	cpsid	i
}
 8002176:	46c0      	nop			@ (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002178:	46c0      	nop			@ (mov r8, r8)
 800217a:	e7fd      	b.n	8002178 <Error_Handler+0x8>

0800217c <sct_init>:
 *      Author: xkrizl01
 */

#include "sct.h"

void sct_init(void) {
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0

	sct_led(0);
 8002180:	2000      	movs	r0, #0
 8002182:	f000 f803 	bl	800218c <sct_led>
}
 8002186:	46c0      	nop			@ (mov r8, r8)
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <sct_led>:


void sct_led(uint32_t value) {
 800218c:	b590      	push	{r4, r7, lr}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]

	for (uint8_t i=0; i<32; i++) {
 8002194:	230f      	movs	r3, #15
 8002196:	18fb      	adds	r3, r7, r3
 8002198:	2200      	movs	r2, #0
 800219a:	701a      	strb	r2, [r3, #0]
 800219c:	e01f      	b.n	80021de <sct_led+0x52>

		HAL_GPIO_WritePin(SCT_SDI_GPIO_Port, SCT_SDI_Pin, (value>>i)%2);
 800219e:	240f      	movs	r4, #15
 80021a0:	193b      	adds	r3, r7, r4
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	40da      	lsrs	r2, r3
 80021a8:	0013      	movs	r3, r2
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	2201      	movs	r2, #1
 80021ae:	4013      	ands	r3, r2
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	4819      	ldr	r0, [pc, #100]	@ (8002218 <sct_led+0x8c>)
 80021b4:	001a      	movs	r2, r3
 80021b6:	2110      	movs	r1, #16
 80021b8:	f001 f8d9 	bl	800336e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SCT_CLK_GPIO_Port, SCT_CLK_Pin, 1);
 80021bc:	4b16      	ldr	r3, [pc, #88]	@ (8002218 <sct_led+0x8c>)
 80021be:	2201      	movs	r2, #1
 80021c0:	2108      	movs	r1, #8
 80021c2:	0018      	movs	r0, r3
 80021c4:	f001 f8d3 	bl	800336e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SCT_CLK_GPIO_Port, SCT_CLK_Pin, 0);
 80021c8:	4b13      	ldr	r3, [pc, #76]	@ (8002218 <sct_led+0x8c>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	2108      	movs	r1, #8
 80021ce:	0018      	movs	r0, r3
 80021d0:	f001 f8cd 	bl	800336e <HAL_GPIO_WritePin>
	for (uint8_t i=0; i<32; i++) {
 80021d4:	193b      	adds	r3, r7, r4
 80021d6:	781a      	ldrb	r2, [r3, #0]
 80021d8:	193b      	adds	r3, r7, r4
 80021da:	3201      	adds	r2, #1
 80021dc:	701a      	strb	r2, [r3, #0]
 80021de:	230f      	movs	r3, #15
 80021e0:	18fb      	adds	r3, r7, r3
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	2b1f      	cmp	r3, #31
 80021e6:	d9da      	bls.n	800219e <sct_led+0x12>
	}

	HAL_GPIO_WritePin(SCT_NLA_GPIO_Port, SCT_NLA_Pin, 1);
 80021e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002218 <sct_led+0x8c>)
 80021ea:	2201      	movs	r2, #1
 80021ec:	2120      	movs	r1, #32
 80021ee:	0018      	movs	r0, r3
 80021f0:	f001 f8bd 	bl	800336e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SCT_NLA_GPIO_Port, SCT_NLA_Pin, 0);
 80021f4:	4b08      	ldr	r3, [pc, #32]	@ (8002218 <sct_led+0x8c>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	2120      	movs	r1, #32
 80021fa:	0018      	movs	r0, r3
 80021fc:	f001 f8b7 	bl	800336e <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(SCT_NOE_GPIO_Port, SCT_NOE_Pin, 0);
 8002200:	2380      	movs	r3, #128	@ 0x80
 8002202:	00db      	lsls	r3, r3, #3
 8002204:	4804      	ldr	r0, [pc, #16]	@ (8002218 <sct_led+0x8c>)
 8002206:	2200      	movs	r2, #0
 8002208:	0019      	movs	r1, r3
 800220a:	f001 f8b0 	bl	800336e <HAL_GPIO_WritePin>
}
 800220e:	46c0      	nop			@ (mov r8, r8)
 8002210:	46bd      	mov	sp, r7
 8002212:	b005      	add	sp, #20
 8002214:	bd90      	pop	{r4, r7, pc}
 8002216:	46c0      	nop			@ (mov r8, r8)
 8002218:	48000400 	.word	0x48000400

0800221c <sct_value>:


		},
};

void sct_value(uint16_t value, uint8_t led){
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	0002      	movs	r2, r0
 8002224:	1dbb      	adds	r3, r7, #6
 8002226:	801a      	strh	r2, [r3, #0]
 8002228:	1d7b      	adds	r3, r7, #5
 800222a:	1c0a      	adds	r2, r1, #0
 800222c:	701a      	strb	r2, [r3, #0]
	uint32_t reg=0;
 800222e:	2300      	movs	r3, #0
 8002230:	60fb      	str	r3, [r7, #12]
	reg |= reg_values[0][value / 100 % 10];
 8002232:	1dbb      	adds	r3, r7, #6
 8002234:	881b      	ldrh	r3, [r3, #0]
 8002236:	2164      	movs	r1, #100	@ 0x64
 8002238:	0018      	movs	r0, r3
 800223a:	f7fd ff65 	bl	8000108 <__udivsi3>
 800223e:	0003      	movs	r3, r0
 8002240:	b29b      	uxth	r3, r3
 8002242:	210a      	movs	r1, #10
 8002244:	0018      	movs	r0, r3
 8002246:	f7fd ffe5 	bl	8000214 <__aeabi_uidivmod>
 800224a:	000b      	movs	r3, r1
 800224c:	b29b      	uxth	r3, r3
 800224e:	001a      	movs	r2, r3
 8002250:	4b1e      	ldr	r3, [pc, #120]	@ (80022cc <sct_value+0xb0>)
 8002252:	0092      	lsls	r2, r2, #2
 8002254:	58d3      	ldr	r3, [r2, r3]
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	4313      	orrs	r3, r2
 800225a:	60fb      	str	r3, [r7, #12]
	reg |= reg_values[1][value / 10 % 10];
 800225c:	1dbb      	adds	r3, r7, #6
 800225e:	881b      	ldrh	r3, [r3, #0]
 8002260:	210a      	movs	r1, #10
 8002262:	0018      	movs	r0, r3
 8002264:	f7fd ff50 	bl	8000108 <__udivsi3>
 8002268:	0003      	movs	r3, r0
 800226a:	b29b      	uxth	r3, r3
 800226c:	210a      	movs	r1, #10
 800226e:	0018      	movs	r0, r3
 8002270:	f7fd ffd0 	bl	8000214 <__aeabi_uidivmod>
 8002274:	000b      	movs	r3, r1
 8002276:	b29b      	uxth	r3, r3
 8002278:	001a      	movs	r2, r3
 800227a:	4b14      	ldr	r3, [pc, #80]	@ (80022cc <sct_value+0xb0>)
 800227c:	320a      	adds	r2, #10
 800227e:	0092      	lsls	r2, r2, #2
 8002280:	58d3      	ldr	r3, [r2, r3]
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	4313      	orrs	r3, r2
 8002286:	60fb      	str	r3, [r7, #12]
	reg |= reg_values[2][value  % 10];
 8002288:	1dbb      	adds	r3, r7, #6
 800228a:	881b      	ldrh	r3, [r3, #0]
 800228c:	210a      	movs	r1, #10
 800228e:	0018      	movs	r0, r3
 8002290:	f7fd ffc0 	bl	8000214 <__aeabi_uidivmod>
 8002294:	000b      	movs	r3, r1
 8002296:	b29b      	uxth	r3, r3
 8002298:	001a      	movs	r2, r3
 800229a:	4b0c      	ldr	r3, [pc, #48]	@ (80022cc <sct_value+0xb0>)
 800229c:	3214      	adds	r2, #20
 800229e:	0092      	lsls	r2, r2, #2
 80022a0:	58d3      	ldr	r3, [r2, r3]
 80022a2:	68fa      	ldr	r2, [r7, #12]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	60fb      	str	r3, [r7, #12]
	reg |= reg_values[3][led];
 80022a8:	1d7b      	adds	r3, r7, #5
 80022aa:	781a      	ldrb	r2, [r3, #0]
 80022ac:	4b07      	ldr	r3, [pc, #28]	@ (80022cc <sct_value+0xb0>)
 80022ae:	321e      	adds	r2, #30
 80022b0:	0092      	lsls	r2, r2, #2
 80022b2:	58d3      	ldr	r3, [r2, r3]
 80022b4:	68fa      	ldr	r2, [r7, #12]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	60fb      	str	r3, [r7, #12]
	sct_led(reg);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	0018      	movs	r0, r3
 80022be:	f7ff ff65 	bl	800218c <sct_led>



}
 80022c2:	46c0      	nop			@ (mov r8, r8)
 80022c4:	46bd      	mov	sp, r7
 80022c6:	b004      	add	sp, #16
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	46c0      	nop			@ (mov r8, r8)
 80022cc:	08003cd4 	.word	0x08003cd4

080022d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022d6:	4b0f      	ldr	r3, [pc, #60]	@ (8002314 <HAL_MspInit+0x44>)
 80022d8:	699a      	ldr	r2, [r3, #24]
 80022da:	4b0e      	ldr	r3, [pc, #56]	@ (8002314 <HAL_MspInit+0x44>)
 80022dc:	2101      	movs	r1, #1
 80022de:	430a      	orrs	r2, r1
 80022e0:	619a      	str	r2, [r3, #24]
 80022e2:	4b0c      	ldr	r3, [pc, #48]	@ (8002314 <HAL_MspInit+0x44>)
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	2201      	movs	r2, #1
 80022e8:	4013      	ands	r3, r2
 80022ea:	607b      	str	r3, [r7, #4]
 80022ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022ee:	4b09      	ldr	r3, [pc, #36]	@ (8002314 <HAL_MspInit+0x44>)
 80022f0:	69da      	ldr	r2, [r3, #28]
 80022f2:	4b08      	ldr	r3, [pc, #32]	@ (8002314 <HAL_MspInit+0x44>)
 80022f4:	2180      	movs	r1, #128	@ 0x80
 80022f6:	0549      	lsls	r1, r1, #21
 80022f8:	430a      	orrs	r2, r1
 80022fa:	61da      	str	r2, [r3, #28]
 80022fc:	4b05      	ldr	r3, [pc, #20]	@ (8002314 <HAL_MspInit+0x44>)
 80022fe:	69da      	ldr	r2, [r3, #28]
 8002300:	2380      	movs	r3, #128	@ 0x80
 8002302:	055b      	lsls	r3, r3, #21
 8002304:	4013      	ands	r3, r2
 8002306:	603b      	str	r3, [r7, #0]
 8002308:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800230a:	46c0      	nop			@ (mov r8, r8)
 800230c:	46bd      	mov	sp, r7
 800230e:	b002      	add	sp, #8
 8002310:	bd80      	pop	{r7, pc}
 8002312:	46c0      	nop			@ (mov r8, r8)
 8002314:	40021000 	.word	0x40021000

08002318 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002318:	b590      	push	{r4, r7, lr}
 800231a:	b08b      	sub	sp, #44	@ 0x2c
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002320:	2414      	movs	r4, #20
 8002322:	193b      	adds	r3, r7, r4
 8002324:	0018      	movs	r0, r3
 8002326:	2314      	movs	r3, #20
 8002328:	001a      	movs	r2, r3
 800232a:	2100      	movs	r1, #0
 800232c:	f001 fc7a 	bl	8003c24 <memset>
  if(hadc->Instance==ADC1)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a1d      	ldr	r2, [pc, #116]	@ (80023ac <HAL_ADC_MspInit+0x94>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d133      	bne.n	80023a2 <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800233a:	4b1d      	ldr	r3, [pc, #116]	@ (80023b0 <HAL_ADC_MspInit+0x98>)
 800233c:	699a      	ldr	r2, [r3, #24]
 800233e:	4b1c      	ldr	r3, [pc, #112]	@ (80023b0 <HAL_ADC_MspInit+0x98>)
 8002340:	2180      	movs	r1, #128	@ 0x80
 8002342:	0089      	lsls	r1, r1, #2
 8002344:	430a      	orrs	r2, r1
 8002346:	619a      	str	r2, [r3, #24]
 8002348:	4b19      	ldr	r3, [pc, #100]	@ (80023b0 <HAL_ADC_MspInit+0x98>)
 800234a:	699a      	ldr	r2, [r3, #24]
 800234c:	2380      	movs	r3, #128	@ 0x80
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	4013      	ands	r3, r2
 8002352:	613b      	str	r3, [r7, #16]
 8002354:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002356:	4b16      	ldr	r3, [pc, #88]	@ (80023b0 <HAL_ADC_MspInit+0x98>)
 8002358:	695a      	ldr	r2, [r3, #20]
 800235a:	4b15      	ldr	r3, [pc, #84]	@ (80023b0 <HAL_ADC_MspInit+0x98>)
 800235c:	2180      	movs	r1, #128	@ 0x80
 800235e:	0289      	lsls	r1, r1, #10
 8002360:	430a      	orrs	r2, r1
 8002362:	615a      	str	r2, [r3, #20]
 8002364:	4b12      	ldr	r3, [pc, #72]	@ (80023b0 <HAL_ADC_MspInit+0x98>)
 8002366:	695a      	ldr	r2, [r3, #20]
 8002368:	2380      	movs	r3, #128	@ 0x80
 800236a:	029b      	lsls	r3, r3, #10
 800236c:	4013      	ands	r3, r2
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002372:	193b      	adds	r3, r7, r4
 8002374:	2201      	movs	r2, #1
 8002376:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002378:	193b      	adds	r3, r7, r4
 800237a:	2203      	movs	r2, #3
 800237c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237e:	193b      	adds	r3, r7, r4
 8002380:	2200      	movs	r2, #0
 8002382:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002384:	193a      	adds	r2, r7, r4
 8002386:	2390      	movs	r3, #144	@ 0x90
 8002388:	05db      	lsls	r3, r3, #23
 800238a:	0011      	movs	r1, r2
 800238c:	0018      	movs	r0, r3
 800238e:	f000 fe61 	bl	8003054 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8002392:	2200      	movs	r2, #0
 8002394:	2100      	movs	r1, #0
 8002396:	200c      	movs	r0, #12
 8002398:	f000 fe2a 	bl	8002ff0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 800239c:	200c      	movs	r0, #12
 800239e:	f000 fe3c 	bl	800301a <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80023a2:	46c0      	nop			@ (mov r8, r8)
 80023a4:	46bd      	mov	sp, r7
 80023a6:	b00b      	add	sp, #44	@ 0x2c
 80023a8:	bd90      	pop	{r4, r7, pc}
 80023aa:	46c0      	nop			@ (mov r8, r8)
 80023ac:	40012400 	.word	0x40012400
 80023b0:	40021000 	.word	0x40021000

080023b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023b8:	46c0      	nop			@ (mov r8, r8)
 80023ba:	e7fd      	b.n	80023b8 <NMI_Handler+0x4>

080023bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023c0:	46c0      	nop			@ (mov r8, r8)
 80023c2:	e7fd      	b.n	80023c0 <HardFault_Handler+0x4>

080023c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80023c8:	46c0      	nop			@ (mov r8, r8)
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023d2:	46c0      	nop			@ (mov r8, r8)
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023dc:	f000 f888 	bl	80024f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023e0:	46c0      	nop			@ (mov r8, r8)
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
	...

080023e8 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC global interrupt.
  */
void ADC1_IRQHandler(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 80023ec:	4b03      	ldr	r3, [pc, #12]	@ (80023fc <ADC1_IRQHandler+0x14>)
 80023ee:	0018      	movs	r0, r3
 80023f0:	f000 fa7c 	bl	80028ec <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80023f4:	46c0      	nop			@ (mov r8, r8)
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	46c0      	nop			@ (mov r8, r8)
 80023fc:	2000002c 	.word	0x2000002c

08002400 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002404:	46c0      	nop			@ (mov r8, r8)
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
	...

0800240c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800240c:	480d      	ldr	r0, [pc, #52]	@ (8002444 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800240e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002410:	f7ff fff6 	bl	8002400 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002414:	480c      	ldr	r0, [pc, #48]	@ (8002448 <LoopForever+0x6>)
  ldr r1, =_edata
 8002416:	490d      	ldr	r1, [pc, #52]	@ (800244c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002418:	4a0d      	ldr	r2, [pc, #52]	@ (8002450 <LoopForever+0xe>)
  movs r3, #0
 800241a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800241c:	e002      	b.n	8002424 <LoopCopyDataInit>

0800241e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800241e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002420:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002422:	3304      	adds	r3, #4

08002424 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002424:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002426:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002428:	d3f9      	bcc.n	800241e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800242a:	4a0a      	ldr	r2, [pc, #40]	@ (8002454 <LoopForever+0x12>)
  ldr r4, =_ebss
 800242c:	4c0a      	ldr	r4, [pc, #40]	@ (8002458 <LoopForever+0x16>)
  movs r3, #0
 800242e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002430:	e001      	b.n	8002436 <LoopFillZerobss>

08002432 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002432:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002434:	3204      	adds	r2, #4

08002436 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002436:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002438:	d3fb      	bcc.n	8002432 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800243a:	f001 fbfb 	bl	8003c34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800243e:	f7ff fcb1 	bl	8001da4 <main>

08002442 <LoopForever>:

LoopForever:
    b LoopForever
 8002442:	e7fe      	b.n	8002442 <LoopForever>
  ldr   r0, =_estack
 8002444:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002448:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800244c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002450:	08003dac 	.word	0x08003dac
  ldr r2, =_sbss
 8002454:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002458:	20000094 	.word	0x20000094

0800245c <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800245c:	e7fe      	b.n	800245c <DMA1_Channel1_IRQHandler>
	...

08002460 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002464:	4b07      	ldr	r3, [pc, #28]	@ (8002484 <HAL_Init+0x24>)
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	4b06      	ldr	r3, [pc, #24]	@ (8002484 <HAL_Init+0x24>)
 800246a:	2110      	movs	r1, #16
 800246c:	430a      	orrs	r2, r1
 800246e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002470:	2000      	movs	r0, #0
 8002472:	f000 f809 	bl	8002488 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002476:	f7ff ff2b 	bl	80022d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800247a:	2300      	movs	r3, #0
}
 800247c:	0018      	movs	r0, r3
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	46c0      	nop			@ (mov r8, r8)
 8002484:	40022000 	.word	0x40022000

08002488 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002488:	b590      	push	{r4, r7, lr}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002490:	4b14      	ldr	r3, [pc, #80]	@ (80024e4 <HAL_InitTick+0x5c>)
 8002492:	681c      	ldr	r4, [r3, #0]
 8002494:	4b14      	ldr	r3, [pc, #80]	@ (80024e8 <HAL_InitTick+0x60>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	0019      	movs	r1, r3
 800249a:	23fa      	movs	r3, #250	@ 0xfa
 800249c:	0098      	lsls	r0, r3, #2
 800249e:	f7fd fe33 	bl	8000108 <__udivsi3>
 80024a2:	0003      	movs	r3, r0
 80024a4:	0019      	movs	r1, r3
 80024a6:	0020      	movs	r0, r4
 80024a8:	f7fd fe2e 	bl	8000108 <__udivsi3>
 80024ac:	0003      	movs	r3, r0
 80024ae:	0018      	movs	r0, r3
 80024b0:	f000 fdc3 	bl	800303a <HAL_SYSTICK_Config>
 80024b4:	1e03      	subs	r3, r0, #0
 80024b6:	d001      	beq.n	80024bc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e00f      	b.n	80024dc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2b03      	cmp	r3, #3
 80024c0:	d80b      	bhi.n	80024da <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024c2:	6879      	ldr	r1, [r7, #4]
 80024c4:	2301      	movs	r3, #1
 80024c6:	425b      	negs	r3, r3
 80024c8:	2200      	movs	r2, #0
 80024ca:	0018      	movs	r0, r3
 80024cc:	f000 fd90 	bl	8002ff0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024d0:	4b06      	ldr	r3, [pc, #24]	@ (80024ec <HAL_InitTick+0x64>)
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80024d6:	2300      	movs	r3, #0
 80024d8:	e000      	b.n	80024dc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
}
 80024dc:	0018      	movs	r0, r3
 80024de:	46bd      	mov	sp, r7
 80024e0:	b003      	add	sp, #12
 80024e2:	bd90      	pop	{r4, r7, pc}
 80024e4:	20000004 	.word	0x20000004
 80024e8:	2000000c 	.word	0x2000000c
 80024ec:	20000008 	.word	0x20000008

080024f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024f4:	4b05      	ldr	r3, [pc, #20]	@ (800250c <HAL_IncTick+0x1c>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	001a      	movs	r2, r3
 80024fa:	4b05      	ldr	r3, [pc, #20]	@ (8002510 <HAL_IncTick+0x20>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	18d2      	adds	r2, r2, r3
 8002500:	4b03      	ldr	r3, [pc, #12]	@ (8002510 <HAL_IncTick+0x20>)
 8002502:	601a      	str	r2, [r3, #0]
}
 8002504:	46c0      	nop			@ (mov r8, r8)
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	46c0      	nop			@ (mov r8, r8)
 800250c:	2000000c 	.word	0x2000000c
 8002510:	20000090 	.word	0x20000090

08002514 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  return uwTick;
 8002518:	4b02      	ldr	r3, [pc, #8]	@ (8002524 <HAL_GetTick+0x10>)
 800251a:	681b      	ldr	r3, [r3, #0]
}
 800251c:	0018      	movs	r0, r3
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	46c0      	nop			@ (mov r8, r8)
 8002524:	20000090 	.word	0x20000090

08002528 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002530:	f7ff fff0 	bl	8002514 <HAL_GetTick>
 8002534:	0003      	movs	r3, r0
 8002536:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	3301      	adds	r3, #1
 8002540:	d005      	beq.n	800254e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002542:	4b0a      	ldr	r3, [pc, #40]	@ (800256c <HAL_Delay+0x44>)
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	001a      	movs	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	189b      	adds	r3, r3, r2
 800254c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800254e:	46c0      	nop			@ (mov r8, r8)
 8002550:	f7ff ffe0 	bl	8002514 <HAL_GetTick>
 8002554:	0002      	movs	r2, r0
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	429a      	cmp	r2, r3
 800255e:	d8f7      	bhi.n	8002550 <HAL_Delay+0x28>
  {
  }
}
 8002560:	46c0      	nop			@ (mov r8, r8)
 8002562:	46c0      	nop			@ (mov r8, r8)
 8002564:	46bd      	mov	sp, r7
 8002566:	b004      	add	sp, #16
 8002568:	bd80      	pop	{r7, pc}
 800256a:	46c0      	nop			@ (mov r8, r8)
 800256c:	2000000c 	.word	0x2000000c

08002570 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002578:	230f      	movs	r3, #15
 800257a:	18fb      	adds	r3, r7, r3
 800257c:	2200      	movs	r2, #0
 800257e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8002580:	2300      	movs	r3, #0
 8002582:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e125      	b.n	80027da <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002592:	2b00      	cmp	r3, #0
 8002594:	d10a      	bne.n	80025ac <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2234      	movs	r2, #52	@ 0x34
 80025a0:	2100      	movs	r1, #0
 80025a2:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	0018      	movs	r0, r3
 80025a8:	f7ff feb6 	bl	8002318 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025b0:	2210      	movs	r2, #16
 80025b2:	4013      	ands	r3, r2
 80025b4:	d000      	beq.n	80025b8 <HAL_ADC_Init+0x48>
 80025b6:	e103      	b.n	80027c0 <HAL_ADC_Init+0x250>
 80025b8:	230f      	movs	r3, #15
 80025ba:	18fb      	adds	r3, r7, r3
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d000      	beq.n	80025c4 <HAL_ADC_Init+0x54>
 80025c2:	e0fd      	b.n	80027c0 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	2204      	movs	r2, #4
 80025cc:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80025ce:	d000      	beq.n	80025d2 <HAL_ADC_Init+0x62>
 80025d0:	e0f6      	b.n	80027c0 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025d6:	4a83      	ldr	r2, [pc, #524]	@ (80027e4 <HAL_ADC_Init+0x274>)
 80025d8:	4013      	ands	r3, r2
 80025da:	2202      	movs	r2, #2
 80025dc:	431a      	orrs	r2, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	2203      	movs	r2, #3
 80025ea:	4013      	ands	r3, r2
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d112      	bne.n	8002616 <HAL_ADC_Init+0xa6>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2201      	movs	r2, #1
 80025f8:	4013      	ands	r3, r2
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d009      	beq.n	8002612 <HAL_ADC_Init+0xa2>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68da      	ldr	r2, [r3, #12]
 8002604:	2380      	movs	r3, #128	@ 0x80
 8002606:	021b      	lsls	r3, r3, #8
 8002608:	401a      	ands	r2, r3
 800260a:	2380      	movs	r3, #128	@ 0x80
 800260c:	021b      	lsls	r3, r3, #8
 800260e:	429a      	cmp	r2, r3
 8002610:	d101      	bne.n	8002616 <HAL_ADC_Init+0xa6>
 8002612:	2301      	movs	r3, #1
 8002614:	e000      	b.n	8002618 <HAL_ADC_Init+0xa8>
 8002616:	2300      	movs	r3, #0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d116      	bne.n	800264a <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	2218      	movs	r2, #24
 8002624:	4393      	bics	r3, r2
 8002626:	0019      	movs	r1, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689a      	ldr	r2, [r3, #8]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	430a      	orrs	r2, r1
 8002632:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	0899      	lsrs	r1, r3, #2
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685a      	ldr	r2, [r3, #4]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	430a      	orrs	r2, r1
 8002648:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68da      	ldr	r2, [r3, #12]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4964      	ldr	r1, [pc, #400]	@ (80027e8 <HAL_ADC_Init+0x278>)
 8002656:	400a      	ands	r2, r1
 8002658:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	7e1b      	ldrb	r3, [r3, #24]
 800265e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	7e5b      	ldrb	r3, [r3, #25]
 8002664:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002666:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	7e9b      	ldrb	r3, [r3, #26]
 800266c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800266e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002674:	2b01      	cmp	r3, #1
 8002676:	d002      	beq.n	800267e <HAL_ADC_Init+0x10e>
 8002678:	2380      	movs	r3, #128	@ 0x80
 800267a:	015b      	lsls	r3, r3, #5
 800267c:	e000      	b.n	8002680 <HAL_ADC_Init+0x110>
 800267e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002680:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002686:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	2b02      	cmp	r3, #2
 800268e:	d101      	bne.n	8002694 <HAL_ADC_Init+0x124>
 8002690:	2304      	movs	r3, #4
 8002692:	e000      	b.n	8002696 <HAL_ADC_Init+0x126>
 8002694:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8002696:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2124      	movs	r1, #36	@ 0x24
 800269c:	5c5b      	ldrb	r3, [r3, r1]
 800269e:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80026a0:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80026a2:	68ba      	ldr	r2, [r7, #8]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	7edb      	ldrb	r3, [r3, #27]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d115      	bne.n	80026dc <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	7e9b      	ldrb	r3, [r3, #26]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d105      	bne.n	80026c4 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	2280      	movs	r2, #128	@ 0x80
 80026bc:	0252      	lsls	r2, r2, #9
 80026be:	4313      	orrs	r3, r2
 80026c0:	60bb      	str	r3, [r7, #8]
 80026c2:	e00b      	b.n	80026dc <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026c8:	2220      	movs	r2, #32
 80026ca:	431a      	orrs	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026d4:	2201      	movs	r2, #1
 80026d6:	431a      	orrs	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	69da      	ldr	r2, [r3, #28]
 80026e0:	23c2      	movs	r3, #194	@ 0xc2
 80026e2:	33ff      	adds	r3, #255	@ 0xff
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d007      	beq.n	80026f8 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80026f0:	4313      	orrs	r3, r2
 80026f2:	68ba      	ldr	r2, [r7, #8]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68d9      	ldr	r1, [r3, #12]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	68ba      	ldr	r2, [r7, #8]
 8002704:	430a      	orrs	r2, r1
 8002706:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800270c:	2380      	movs	r3, #128	@ 0x80
 800270e:	055b      	lsls	r3, r3, #21
 8002710:	429a      	cmp	r2, r3
 8002712:	d01b      	beq.n	800274c <HAL_ADC_Init+0x1dc>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002718:	2b01      	cmp	r3, #1
 800271a:	d017      	beq.n	800274c <HAL_ADC_Init+0x1dc>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002720:	2b02      	cmp	r3, #2
 8002722:	d013      	beq.n	800274c <HAL_ADC_Init+0x1dc>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002728:	2b03      	cmp	r3, #3
 800272a:	d00f      	beq.n	800274c <HAL_ADC_Init+0x1dc>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002730:	2b04      	cmp	r3, #4
 8002732:	d00b      	beq.n	800274c <HAL_ADC_Init+0x1dc>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002738:	2b05      	cmp	r3, #5
 800273a:	d007      	beq.n	800274c <HAL_ADC_Init+0x1dc>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002740:	2b06      	cmp	r3, #6
 8002742:	d003      	beq.n	800274c <HAL_ADC_Init+0x1dc>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002748:	2b07      	cmp	r3, #7
 800274a:	d112      	bne.n	8002772 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	695a      	ldr	r2, [r3, #20]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2107      	movs	r1, #7
 8002758:	438a      	bics	r2, r1
 800275a:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	6959      	ldr	r1, [r3, #20]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002766:	2207      	movs	r2, #7
 8002768:	401a      	ands	r2, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	430a      	orrs	r2, r1
 8002770:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	4a1c      	ldr	r2, [pc, #112]	@ (80027ec <HAL_ADC_Init+0x27c>)
 800277a:	4013      	ands	r3, r2
 800277c:	68ba      	ldr	r2, [r7, #8]
 800277e:	429a      	cmp	r2, r3
 8002780:	d10b      	bne.n	800279a <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800278c:	2203      	movs	r2, #3
 800278e:	4393      	bics	r3, r2
 8002790:	2201      	movs	r2, #1
 8002792:	431a      	orrs	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002798:	e01c      	b.n	80027d4 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800279e:	2212      	movs	r2, #18
 80027a0:	4393      	bics	r3, r2
 80027a2:	2210      	movs	r2, #16
 80027a4:	431a      	orrs	r2, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027ae:	2201      	movs	r2, #1
 80027b0:	431a      	orrs	r2, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80027b6:	230f      	movs	r3, #15
 80027b8:	18fb      	adds	r3, r7, r3
 80027ba:	2201      	movs	r2, #1
 80027bc:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80027be:	e009      	b.n	80027d4 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027c4:	2210      	movs	r2, #16
 80027c6:	431a      	orrs	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 80027cc:	230f      	movs	r3, #15
 80027ce:	18fb      	adds	r3, r7, r3
 80027d0:	2201      	movs	r2, #1
 80027d2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80027d4:	230f      	movs	r3, #15
 80027d6:	18fb      	adds	r3, r7, r3
 80027d8:	781b      	ldrb	r3, [r3, #0]
}
 80027da:	0018      	movs	r0, r3
 80027dc:	46bd      	mov	sp, r7
 80027de:	b004      	add	sp, #16
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	46c0      	nop			@ (mov r8, r8)
 80027e4:	fffffefd 	.word	0xfffffefd
 80027e8:	fffe0219 	.word	0xfffe0219
 80027ec:	833fffe7 	.word	0x833fffe7

080027f0 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80027f0:	b590      	push	{r4, r7, lr}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027f8:	230f      	movs	r3, #15
 80027fa:	18fb      	adds	r3, r7, r3
 80027fc:	2200      	movs	r2, #0
 80027fe:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	2204      	movs	r2, #4
 8002808:	4013      	ands	r3, r2
 800280a:	d156      	bne.n	80028ba <HAL_ADC_Start_IT+0xca>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2234      	movs	r2, #52	@ 0x34
 8002810:	5c9b      	ldrb	r3, [r3, r2]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d101      	bne.n	800281a <HAL_ADC_Start_IT+0x2a>
 8002816:	2302      	movs	r3, #2
 8002818:	e056      	b.n	80028c8 <HAL_ADC_Start_IT+0xd8>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2234      	movs	r2, #52	@ 0x34
 800281e:	2101      	movs	r1, #1
 8002820:	5499      	strb	r1, [r3, r2]
     
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	7e5b      	ldrb	r3, [r3, #25]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d007      	beq.n	800283a <HAL_ADC_Start_IT+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800282a:	230f      	movs	r3, #15
 800282c:	18fc      	adds	r4, r7, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	0018      	movs	r0, r3
 8002832:	f000 fa05 	bl	8002c40 <ADC_Enable>
 8002836:	0003      	movs	r3, r0
 8002838:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800283a:	230f      	movs	r3, #15
 800283c:	18fb      	adds	r3, r7, r3
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d13e      	bne.n	80028c2 <HAL_ADC_Start_IT+0xd2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002848:	4a21      	ldr	r2, [pc, #132]	@ (80028d0 <HAL_ADC_Start_IT+0xe0>)
 800284a:	4013      	ands	r3, r2
 800284c:	2280      	movs	r2, #128	@ 0x80
 800284e:	0052      	lsls	r2, r2, #1
 8002850:	431a      	orrs	r2, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2234      	movs	r2, #52	@ 0x34
 8002860:	2100      	movs	r1, #0
 8002862:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	221c      	movs	r2, #28
 800286a:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	695b      	ldr	r3, [r3, #20]
 8002870:	2b08      	cmp	r3, #8
 8002872:	d110      	bne.n	8002896 <HAL_ADC_Start_IT+0xa6>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	685a      	ldr	r2, [r3, #4]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2104      	movs	r1, #4
 8002880:	438a      	bics	r2, r1
 8002882:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	685a      	ldr	r2, [r3, #4]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2118      	movs	r1, #24
 8002890:	430a      	orrs	r2, r1
 8002892:	605a      	str	r2, [r3, #4]
          break;
 8002894:	e008      	b.n	80028a8 <HAL_ADC_Start_IT+0xb8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	685a      	ldr	r2, [r3, #4]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	211c      	movs	r1, #28
 80028a2:	430a      	orrs	r2, r1
 80028a4:	605a      	str	r2, [r3, #4]
          break;
 80028a6:	46c0      	nop			@ (mov r8, r8)
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	689a      	ldr	r2, [r3, #8]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2104      	movs	r1, #4
 80028b4:	430a      	orrs	r2, r1
 80028b6:	609a      	str	r2, [r3, #8]
 80028b8:	e003      	b.n	80028c2 <HAL_ADC_Start_IT+0xd2>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80028ba:	230f      	movs	r3, #15
 80028bc:	18fb      	adds	r3, r7, r3
 80028be:	2202      	movs	r2, #2
 80028c0:	701a      	strb	r2, [r3, #0]
  }    
    
  /* Return function status */
  return tmp_hal_status;
 80028c2:	230f      	movs	r3, #15
 80028c4:	18fb      	adds	r3, r7, r3
 80028c6:	781b      	ldrb	r3, [r3, #0]
}
 80028c8:	0018      	movs	r0, r3
 80028ca:	46bd      	mov	sp, r7
 80028cc:	b005      	add	sp, #20
 80028ce:	bd90      	pop	{r4, r7, pc}
 80028d0:	fffff0fe 	.word	0xfffff0fe

080028d4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80028e2:	0018      	movs	r0, r3
 80028e4:	46bd      	mov	sp, r7
 80028e6:	b002      	add	sp, #8
 80028e8:	bd80      	pop	{r7, pc}
	...

080028ec <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_ier = hadc->Instance->IER;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2204      	movs	r2, #4
 8002908:	4013      	ands	r3, r2
 800290a:	d003      	beq.n	8002914 <HAL_ADC_IRQHandler+0x28>
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	2204      	movs	r2, #4
 8002910:	4013      	ands	r3, r2
 8002912:	d107      	bne.n	8002924 <HAL_ADC_IRQHandler+0x38>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2208      	movs	r2, #8
 8002918:	4013      	ands	r3, r2
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800291a:	d049      	beq.n	80029b0 <HAL_ADC_IRQHandler+0xc4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	2208      	movs	r2, #8
 8002920:	4013      	ands	r3, r2
 8002922:	d045      	beq.n	80029b0 <HAL_ADC_IRQHandler+0xc4>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002928:	2210      	movs	r2, #16
 800292a:	4013      	ands	r3, r2
 800292c:	d106      	bne.n	800293c <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002932:	2280      	movs	r2, #128	@ 0x80
 8002934:	0092      	lsls	r2, r2, #2
 8002936:	431a      	orrs	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	68da      	ldr	r2, [r3, #12]
 8002942:	23c0      	movs	r3, #192	@ 0xc0
 8002944:	011b      	lsls	r3, r3, #4
 8002946:	4013      	ands	r3, r2
 8002948:	d12a      	bne.n	80029a0 <HAL_ADC_IRQHandler+0xb4>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800294e:	2b00      	cmp	r3, #0
 8002950:	d126      	bne.n	80029a0 <HAL_ADC_IRQHandler+0xb4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2208      	movs	r2, #8
 8002956:	4013      	ands	r3, r2
 8002958:	d022      	beq.n	80029a0 <HAL_ADC_IRQHandler+0xb4>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	2204      	movs	r2, #4
 8002962:	4013      	ands	r3, r2
 8002964:	d110      	bne.n	8002988 <HAL_ADC_IRQHandler+0x9c>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	685a      	ldr	r2, [r3, #4]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	210c      	movs	r1, #12
 8002972:	438a      	bics	r2, r1
 8002974:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800297a:	4a2d      	ldr	r2, [pc, #180]	@ (8002a30 <HAL_ADC_IRQHandler+0x144>)
 800297c:	4013      	ands	r3, r2
 800297e:	2201      	movs	r2, #1
 8002980:	431a      	orrs	r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	639a      	str	r2, [r3, #56]	@ 0x38
 8002986:	e00b      	b.n	80029a0 <HAL_ADC_IRQHandler+0xb4>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800298c:	2220      	movs	r2, #32
 800298e:	431a      	orrs	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	639a      	str	r2, [r3, #56]	@ 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002998:	2201      	movs	r2, #1
 800299a:	431a      	orrs	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	63da      	str	r2, [r3, #60]	@ 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	0018      	movs	r0, r3
 80029a4:	f7ff f8a8 	bl	8001af8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	220c      	movs	r2, #12
 80029ae:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(((tmp_isr & ADC_FLAG_AWD) == ADC_FLAG_AWD) && ((tmp_ier & ADC_IT_AWD) == ADC_IT_AWD))
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2280      	movs	r2, #128	@ 0x80
 80029b4:	4013      	ands	r3, r2
 80029b6:	d012      	beq.n	80029de <HAL_ADC_IRQHandler+0xf2>
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	2280      	movs	r2, #128	@ 0x80
 80029bc:	4013      	ands	r3, r2
 80029be:	d00e      	beq.n	80029de <HAL_ADC_IRQHandler+0xf2>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029c4:	2280      	movs	r2, #128	@ 0x80
 80029c6:	0252      	lsls	r2, r2, #9
 80029c8:	431a      	orrs	r2, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	639a      	str	r2, [r3, #56]	@ 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	0018      	movs	r0, r3
 80029d2:	f000 f82f 	bl	8002a34 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2280      	movs	r2, #128	@ 0x80
 80029dc:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2210      	movs	r2, #16
 80029e2:	4013      	ands	r3, r2
 80029e4:	d020      	beq.n	8002a28 <HAL_ADC_IRQHandler+0x13c>
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	2210      	movs	r2, #16
 80029ea:	4013      	ands	r3, r2
 80029ec:	d01c      	beq.n	8002a28 <HAL_ADC_IRQHandler+0x13c>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d006      	beq.n	8002a04 <HAL_ADC_IRQHandler+0x118>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	2201      	movs	r2, #1
 80029fe:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d10d      	bne.n	8002a20 <HAL_ADC_IRQHandler+0x134>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a08:	2202      	movs	r2, #2
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2210      	movs	r2, #16
 8002a16:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	0018      	movs	r0, r3
 8002a1c:	f000 f812 	bl	8002a44 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2210      	movs	r2, #16
 8002a26:	601a      	str	r2, [r3, #0]
  }

}
 8002a28:	46c0      	nop			@ (mov r8, r8)
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	b004      	add	sp, #16
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	fffffefe 	.word	0xfffffefe

08002a34 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8002a3c:	46c0      	nop			@ (mov r8, r8)
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	b002      	add	sp, #8
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002a4c:	46c0      	nop			@ (mov r8, r8)
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	b002      	add	sp, #8
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a5e:	230f      	movs	r3, #15
 8002a60:	18fb      	adds	r3, r7, r3
 8002a62:	2200      	movs	r2, #0
 8002a64:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8002a66:	2300      	movs	r3, #0
 8002a68:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a6e:	2380      	movs	r3, #128	@ 0x80
 8002a70:	055b      	lsls	r3, r3, #21
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d011      	beq.n	8002a9a <HAL_ADC_ConfigChannel+0x46>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d00d      	beq.n	8002a9a <HAL_ADC_ConfigChannel+0x46>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d009      	beq.n	8002a9a <HAL_ADC_ConfigChannel+0x46>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a8a:	2b03      	cmp	r3, #3
 8002a8c:	d005      	beq.n	8002a9a <HAL_ADC_ConfigChannel+0x46>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a92:	2b04      	cmp	r3, #4
 8002a94:	d001      	beq.n	8002a9a <HAL_ADC_ConfigChannel+0x46>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2234      	movs	r2, #52	@ 0x34
 8002a9e:	5c9b      	ldrb	r3, [r3, r2]
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d101      	bne.n	8002aa8 <HAL_ADC_ConfigChannel+0x54>
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	e0bb      	b.n	8002c20 <HAL_ADC_ConfigChannel+0x1cc>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2234      	movs	r2, #52	@ 0x34
 8002aac:	2101      	movs	r1, #1
 8002aae:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	2204      	movs	r2, #4
 8002ab8:	4013      	ands	r3, r2
 8002aba:	d000      	beq.n	8002abe <HAL_ADC_ConfigChannel+0x6a>
 8002abc:	e09f      	b.n	8002bfe <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	4a59      	ldr	r2, [pc, #356]	@ (8002c28 <HAL_ADC_ConfigChannel+0x1d4>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d100      	bne.n	8002aca <HAL_ADC_ConfigChannel+0x76>
 8002ac8:	e077      	b.n	8002bba <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	409a      	lsls	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	430a      	orrs	r2, r1
 8002ade:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ae4:	2380      	movs	r3, #128	@ 0x80
 8002ae6:	055b      	lsls	r3, r3, #21
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d037      	beq.n	8002b5c <HAL_ADC_ConfigChannel+0x108>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d033      	beq.n	8002b5c <HAL_ADC_ConfigChannel+0x108>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d02f      	beq.n	8002b5c <HAL_ADC_ConfigChannel+0x108>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b00:	2b03      	cmp	r3, #3
 8002b02:	d02b      	beq.n	8002b5c <HAL_ADC_ConfigChannel+0x108>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b08:	2b04      	cmp	r3, #4
 8002b0a:	d027      	beq.n	8002b5c <HAL_ADC_ConfigChannel+0x108>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b10:	2b05      	cmp	r3, #5
 8002b12:	d023      	beq.n	8002b5c <HAL_ADC_ConfigChannel+0x108>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b18:	2b06      	cmp	r3, #6
 8002b1a:	d01f      	beq.n	8002b5c <HAL_ADC_ConfigChannel+0x108>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b20:	2b07      	cmp	r3, #7
 8002b22:	d01b      	beq.n	8002b5c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	689a      	ldr	r2, [r3, #8]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	2107      	movs	r1, #7
 8002b30:	400b      	ands	r3, r1
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d012      	beq.n	8002b5c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	695a      	ldr	r2, [r3, #20]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2107      	movs	r1, #7
 8002b42:	438a      	bics	r2, r1
 8002b44:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	6959      	ldr	r1, [r3, #20]
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	2207      	movs	r2, #7
 8002b52:	401a      	ands	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2b10      	cmp	r3, #16
 8002b62:	d003      	beq.n	8002b6c <HAL_ADC_ConfigChannel+0x118>
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2b11      	cmp	r3, #17
 8002b6a:	d152      	bne.n	8002c12 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002b6c:	4b2f      	ldr	r3, [pc, #188]	@ (8002c2c <HAL_ADC_ConfigChannel+0x1d8>)
 8002b6e:	6819      	ldr	r1, [r3, #0]
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2b10      	cmp	r3, #16
 8002b76:	d102      	bne.n	8002b7e <HAL_ADC_ConfigChannel+0x12a>
 8002b78:	2380      	movs	r3, #128	@ 0x80
 8002b7a:	041b      	lsls	r3, r3, #16
 8002b7c:	e001      	b.n	8002b82 <HAL_ADC_ConfigChannel+0x12e>
 8002b7e:	2380      	movs	r3, #128	@ 0x80
 8002b80:	03db      	lsls	r3, r3, #15
 8002b82:	4a2a      	ldr	r2, [pc, #168]	@ (8002c2c <HAL_ADC_ConfigChannel+0x1d8>)
 8002b84:	430b      	orrs	r3, r1
 8002b86:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2b10      	cmp	r3, #16
 8002b8e:	d140      	bne.n	8002c12 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b90:	4b27      	ldr	r3, [pc, #156]	@ (8002c30 <HAL_ADC_ConfigChannel+0x1dc>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4927      	ldr	r1, [pc, #156]	@ (8002c34 <HAL_ADC_ConfigChannel+0x1e0>)
 8002b96:	0018      	movs	r0, r3
 8002b98:	f7fd fab6 	bl	8000108 <__udivsi3>
 8002b9c:	0003      	movs	r3, r0
 8002b9e:	001a      	movs	r2, r3
 8002ba0:	0013      	movs	r3, r2
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	189b      	adds	r3, r3, r2
 8002ba6:	005b      	lsls	r3, r3, #1
 8002ba8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002baa:	e002      	b.n	8002bb2 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	3b01      	subs	r3, #1
 8002bb0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d1f9      	bne.n	8002bac <HAL_ADC_ConfigChannel+0x158>
 8002bb8:	e02b      	b.n	8002c12 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2101      	movs	r1, #1
 8002bc6:	4099      	lsls	r1, r3
 8002bc8:	000b      	movs	r3, r1
 8002bca:	43d9      	mvns	r1, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	400a      	ands	r2, r1
 8002bd2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2b10      	cmp	r3, #16
 8002bda:	d003      	beq.n	8002be4 <HAL_ADC_ConfigChannel+0x190>
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2b11      	cmp	r3, #17
 8002be2:	d116      	bne.n	8002c12 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002be4:	4b11      	ldr	r3, [pc, #68]	@ (8002c2c <HAL_ADC_ConfigChannel+0x1d8>)
 8002be6:	6819      	ldr	r1, [r3, #0]
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2b10      	cmp	r3, #16
 8002bee:	d101      	bne.n	8002bf4 <HAL_ADC_ConfigChannel+0x1a0>
 8002bf0:	4a11      	ldr	r2, [pc, #68]	@ (8002c38 <HAL_ADC_ConfigChannel+0x1e4>)
 8002bf2:	e000      	b.n	8002bf6 <HAL_ADC_ConfigChannel+0x1a2>
 8002bf4:	4a11      	ldr	r2, [pc, #68]	@ (8002c3c <HAL_ADC_ConfigChannel+0x1e8>)
 8002bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8002c2c <HAL_ADC_ConfigChannel+0x1d8>)
 8002bf8:	400a      	ands	r2, r1
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	e009      	b.n	8002c12 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c02:	2220      	movs	r2, #32
 8002c04:	431a      	orrs	r2, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8002c0a:	230f      	movs	r3, #15
 8002c0c:	18fb      	adds	r3, r7, r3
 8002c0e:	2201      	movs	r2, #1
 8002c10:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2234      	movs	r2, #52	@ 0x34
 8002c16:	2100      	movs	r1, #0
 8002c18:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002c1a:	230f      	movs	r3, #15
 8002c1c:	18fb      	adds	r3, r7, r3
 8002c1e:	781b      	ldrb	r3, [r3, #0]
}
 8002c20:	0018      	movs	r0, r3
 8002c22:	46bd      	mov	sp, r7
 8002c24:	b004      	add	sp, #16
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	00001001 	.word	0x00001001
 8002c2c:	40012708 	.word	0x40012708
 8002c30:	20000004 	.word	0x20000004
 8002c34:	000f4240 	.word	0x000f4240
 8002c38:	ff7fffff 	.word	0xff7fffff
 8002c3c:	ffbfffff 	.word	0xffbfffff

08002c40 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	2203      	movs	r2, #3
 8002c58:	4013      	ands	r3, r2
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d112      	bne.n	8002c84 <ADC_Enable+0x44>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2201      	movs	r2, #1
 8002c66:	4013      	ands	r3, r2
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d009      	beq.n	8002c80 <ADC_Enable+0x40>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	68da      	ldr	r2, [r3, #12]
 8002c72:	2380      	movs	r3, #128	@ 0x80
 8002c74:	021b      	lsls	r3, r3, #8
 8002c76:	401a      	ands	r2, r3
 8002c78:	2380      	movs	r3, #128	@ 0x80
 8002c7a:	021b      	lsls	r3, r3, #8
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d101      	bne.n	8002c84 <ADC_Enable+0x44>
 8002c80:	2301      	movs	r3, #1
 8002c82:	e000      	b.n	8002c86 <ADC_Enable+0x46>
 8002c84:	2300      	movs	r3, #0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d152      	bne.n	8002d30 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	4a2a      	ldr	r2, [pc, #168]	@ (8002d3c <ADC_Enable+0xfc>)
 8002c92:	4013      	ands	r3, r2
 8002c94:	d00d      	beq.n	8002cb2 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c9a:	2210      	movs	r2, #16
 8002c9c:	431a      	orrs	r2, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	639a      	str	r2, [r3, #56]	@ 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	431a      	orrs	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e03f      	b.n	8002d32 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	689a      	ldr	r2, [r3, #8]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2101      	movs	r1, #1
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002cc2:	4b1f      	ldr	r3, [pc, #124]	@ (8002d40 <ADC_Enable+0x100>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	491f      	ldr	r1, [pc, #124]	@ (8002d44 <ADC_Enable+0x104>)
 8002cc8:	0018      	movs	r0, r3
 8002cca:	f7fd fa1d 	bl	8000108 <__udivsi3>
 8002cce:	0003      	movs	r3, r0
 8002cd0:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002cd2:	e002      	b.n	8002cda <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d1f9      	bne.n	8002cd4 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002ce0:	f7ff fc18 	bl	8002514 <HAL_GetTick>
 8002ce4:	0003      	movs	r3, r0
 8002ce6:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002ce8:	e01b      	b.n	8002d22 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002cea:	f7ff fc13 	bl	8002514 <HAL_GetTick>
 8002cee:	0002      	movs	r2, r0
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d914      	bls.n	8002d22 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	4013      	ands	r3, r2
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d00d      	beq.n	8002d22 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d0a:	2210      	movs	r2, #16
 8002d0c:	431a      	orrs	r2, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d16:	2201      	movs	r2, #1
 8002d18:	431a      	orrs	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e007      	b.n	8002d32 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d1dc      	bne.n	8002cea <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	0018      	movs	r0, r3
 8002d34:	46bd      	mov	sp, r7
 8002d36:	b004      	add	sp, #16
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	46c0      	nop			@ (mov r8, r8)
 8002d3c:	80000017 	.word	0x80000017
 8002d40:	20000004 	.word	0x20000004
 8002d44:	000f4240 	.word	0x000f4240

08002d48 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b086      	sub	sp, #24
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d50:	2317      	movs	r3, #23
 8002d52:	18fb      	adds	r3, r7, r3
 8002d54:	2200      	movs	r2, #0
 8002d56:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2234      	movs	r2, #52	@ 0x34
 8002d64:	5c9b      	ldrb	r3, [r3, r2]
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d101      	bne.n	8002d6e <HAL_ADCEx_Calibration_Start+0x26>
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	e08d      	b.n	8002e8a <HAL_ADCEx_Calibration_Start+0x142>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2234      	movs	r2, #52	@ 0x34
 8002d72:	2101      	movs	r1, #1
 8002d74:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	2203      	movs	r2, #3
 8002d7e:	4013      	ands	r3, r2
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d112      	bne.n	8002daa <HAL_ADCEx_Calibration_Start+0x62>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d009      	beq.n	8002da6 <HAL_ADCEx_Calibration_Start+0x5e>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68da      	ldr	r2, [r3, #12]
 8002d98:	2380      	movs	r3, #128	@ 0x80
 8002d9a:	021b      	lsls	r3, r3, #8
 8002d9c:	401a      	ands	r2, r3
 8002d9e:	2380      	movs	r3, #128	@ 0x80
 8002da0:	021b      	lsls	r3, r3, #8
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d101      	bne.n	8002daa <HAL_ADCEx_Calibration_Start+0x62>
 8002da6:	2301      	movs	r3, #1
 8002da8:	e000      	b.n	8002dac <HAL_ADCEx_Calibration_Start+0x64>
 8002daa:	2300      	movs	r3, #0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d15b      	bne.n	8002e68 <HAL_ADCEx_Calibration_Start+0x120>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002db4:	4a37      	ldr	r2, [pc, #220]	@ (8002e94 <HAL_ADCEx_Calibration_Start+0x14c>)
 8002db6:	4013      	ands	r3, r2
 8002db8:	2202      	movs	r2, #2
 8002dba:	431a      	orrs	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Note: Specificity of this STM32 series: Calibration factor is           */
    /*       available in data register and also transferred by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	2203      	movs	r2, #3
 8002dc8:	4013      	ands	r3, r2
 8002dca:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68da      	ldr	r2, [r3, #12]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2103      	movs	r1, #3
 8002dd8:	438a      	bics	r2, r1
 8002dda:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	689a      	ldr	r2, [r3, #8]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2180      	movs	r1, #128	@ 0x80
 8002de8:	0609      	lsls	r1, r1, #24
 8002dea:	430a      	orrs	r2, r1
 8002dec:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8002dee:	f7ff fb91 	bl	8002514 <HAL_GetTick>
 8002df2:	0003      	movs	r3, r0
 8002df4:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002df6:	e01d      	b.n	8002e34 <HAL_ADCEx_Calibration_Start+0xec>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002df8:	f7ff fb8c 	bl	8002514 <HAL_GetTick>
 8002dfc:	0002      	movs	r2, r0
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d916      	bls.n	8002e34 <HAL_ADCEx_Calibration_Start+0xec>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	0fdb      	lsrs	r3, r3, #31
 8002e0e:	07da      	lsls	r2, r3, #31
 8002e10:	2380      	movs	r3, #128	@ 0x80
 8002e12:	061b      	lsls	r3, r3, #24
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d10d      	bne.n	8002e34 <HAL_ADCEx_Calibration_Start+0xec>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e1c:	2212      	movs	r2, #18
 8002e1e:	4393      	bics	r3, r2
 8002e20:	2210      	movs	r2, #16
 8002e22:	431a      	orrs	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	639a      	str	r2, [r3, #56]	@ 0x38
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2234      	movs	r2, #52	@ 0x34
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e02a      	b.n	8002e8a <HAL_ADCEx_Calibration_Start+0x142>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	0fdb      	lsrs	r3, r3, #31
 8002e3c:	07da      	lsls	r2, r3, #31
 8002e3e:	2380      	movs	r3, #128	@ 0x80
 8002e40:	061b      	lsls	r3, r3, #24
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d0d8      	beq.n	8002df8 <HAL_ADCEx_Calibration_Start+0xb0>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68d9      	ldr	r1, [r3, #12]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	430a      	orrs	r2, r1
 8002e54:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e5a:	2203      	movs	r2, #3
 8002e5c:	4393      	bics	r3, r2
 8002e5e:	2201      	movs	r2, #1
 8002e60:	431a      	orrs	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	639a      	str	r2, [r3, #56]	@ 0x38
 8002e66:	e009      	b.n	8002e7c <HAL_ADCEx_Calibration_Start+0x134>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e6c:	2220      	movs	r2, #32
 8002e6e:	431a      	orrs	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8002e74:	2317      	movs	r3, #23
 8002e76:	18fb      	adds	r3, r7, r3
 8002e78:	2201      	movs	r2, #1
 8002e7a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2234      	movs	r2, #52	@ 0x34
 8002e80:	2100      	movs	r1, #0
 8002e82:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002e84:	2317      	movs	r3, #23
 8002e86:	18fb      	adds	r3, r7, r3
 8002e88:	781b      	ldrb	r3, [r3, #0]
}
 8002e8a:	0018      	movs	r0, r3
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	b006      	add	sp, #24
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	46c0      	nop			@ (mov r8, r8)
 8002e94:	fffffefd 	.word	0xfffffefd

08002e98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	0002      	movs	r2, r0
 8002ea0:	1dfb      	adds	r3, r7, #7
 8002ea2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002ea4:	1dfb      	adds	r3, r7, #7
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	2b7f      	cmp	r3, #127	@ 0x7f
 8002eaa:	d809      	bhi.n	8002ec0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002eac:	1dfb      	adds	r3, r7, #7
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	001a      	movs	r2, r3
 8002eb2:	231f      	movs	r3, #31
 8002eb4:	401a      	ands	r2, r3
 8002eb6:	4b04      	ldr	r3, [pc, #16]	@ (8002ec8 <__NVIC_EnableIRQ+0x30>)
 8002eb8:	2101      	movs	r1, #1
 8002eba:	4091      	lsls	r1, r2
 8002ebc:	000a      	movs	r2, r1
 8002ebe:	601a      	str	r2, [r3, #0]
  }
}
 8002ec0:	46c0      	nop			@ (mov r8, r8)
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	b002      	add	sp, #8
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	e000e100 	.word	0xe000e100

08002ecc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ecc:	b590      	push	{r4, r7, lr}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	0002      	movs	r2, r0
 8002ed4:	6039      	str	r1, [r7, #0]
 8002ed6:	1dfb      	adds	r3, r7, #7
 8002ed8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002eda:	1dfb      	adds	r3, r7, #7
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	2b7f      	cmp	r3, #127	@ 0x7f
 8002ee0:	d828      	bhi.n	8002f34 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ee2:	4a2f      	ldr	r2, [pc, #188]	@ (8002fa0 <__NVIC_SetPriority+0xd4>)
 8002ee4:	1dfb      	adds	r3, r7, #7
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	b25b      	sxtb	r3, r3
 8002eea:	089b      	lsrs	r3, r3, #2
 8002eec:	33c0      	adds	r3, #192	@ 0xc0
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	589b      	ldr	r3, [r3, r2]
 8002ef2:	1dfa      	adds	r2, r7, #7
 8002ef4:	7812      	ldrb	r2, [r2, #0]
 8002ef6:	0011      	movs	r1, r2
 8002ef8:	2203      	movs	r2, #3
 8002efa:	400a      	ands	r2, r1
 8002efc:	00d2      	lsls	r2, r2, #3
 8002efe:	21ff      	movs	r1, #255	@ 0xff
 8002f00:	4091      	lsls	r1, r2
 8002f02:	000a      	movs	r2, r1
 8002f04:	43d2      	mvns	r2, r2
 8002f06:	401a      	ands	r2, r3
 8002f08:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	019b      	lsls	r3, r3, #6
 8002f0e:	22ff      	movs	r2, #255	@ 0xff
 8002f10:	401a      	ands	r2, r3
 8002f12:	1dfb      	adds	r3, r7, #7
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	0018      	movs	r0, r3
 8002f18:	2303      	movs	r3, #3
 8002f1a:	4003      	ands	r3, r0
 8002f1c:	00db      	lsls	r3, r3, #3
 8002f1e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f20:	481f      	ldr	r0, [pc, #124]	@ (8002fa0 <__NVIC_SetPriority+0xd4>)
 8002f22:	1dfb      	adds	r3, r7, #7
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	b25b      	sxtb	r3, r3
 8002f28:	089b      	lsrs	r3, r3, #2
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	33c0      	adds	r3, #192	@ 0xc0
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002f32:	e031      	b.n	8002f98 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f34:	4a1b      	ldr	r2, [pc, #108]	@ (8002fa4 <__NVIC_SetPriority+0xd8>)
 8002f36:	1dfb      	adds	r3, r7, #7
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	0019      	movs	r1, r3
 8002f3c:	230f      	movs	r3, #15
 8002f3e:	400b      	ands	r3, r1
 8002f40:	3b08      	subs	r3, #8
 8002f42:	089b      	lsrs	r3, r3, #2
 8002f44:	3306      	adds	r3, #6
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	18d3      	adds	r3, r2, r3
 8002f4a:	3304      	adds	r3, #4
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	1dfa      	adds	r2, r7, #7
 8002f50:	7812      	ldrb	r2, [r2, #0]
 8002f52:	0011      	movs	r1, r2
 8002f54:	2203      	movs	r2, #3
 8002f56:	400a      	ands	r2, r1
 8002f58:	00d2      	lsls	r2, r2, #3
 8002f5a:	21ff      	movs	r1, #255	@ 0xff
 8002f5c:	4091      	lsls	r1, r2
 8002f5e:	000a      	movs	r2, r1
 8002f60:	43d2      	mvns	r2, r2
 8002f62:	401a      	ands	r2, r3
 8002f64:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	019b      	lsls	r3, r3, #6
 8002f6a:	22ff      	movs	r2, #255	@ 0xff
 8002f6c:	401a      	ands	r2, r3
 8002f6e:	1dfb      	adds	r3, r7, #7
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	0018      	movs	r0, r3
 8002f74:	2303      	movs	r3, #3
 8002f76:	4003      	ands	r3, r0
 8002f78:	00db      	lsls	r3, r3, #3
 8002f7a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f7c:	4809      	ldr	r0, [pc, #36]	@ (8002fa4 <__NVIC_SetPriority+0xd8>)
 8002f7e:	1dfb      	adds	r3, r7, #7
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	001c      	movs	r4, r3
 8002f84:	230f      	movs	r3, #15
 8002f86:	4023      	ands	r3, r4
 8002f88:	3b08      	subs	r3, #8
 8002f8a:	089b      	lsrs	r3, r3, #2
 8002f8c:	430a      	orrs	r2, r1
 8002f8e:	3306      	adds	r3, #6
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	18c3      	adds	r3, r0, r3
 8002f94:	3304      	adds	r3, #4
 8002f96:	601a      	str	r2, [r3, #0]
}
 8002f98:	46c0      	nop			@ (mov r8, r8)
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	b003      	add	sp, #12
 8002f9e:	bd90      	pop	{r4, r7, pc}
 8002fa0:	e000e100 	.word	0xe000e100
 8002fa4:	e000ed00 	.word	0xe000ed00

08002fa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	1e5a      	subs	r2, r3, #1
 8002fb4:	2380      	movs	r3, #128	@ 0x80
 8002fb6:	045b      	lsls	r3, r3, #17
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d301      	bcc.n	8002fc0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e010      	b.n	8002fe2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fc0:	4b0a      	ldr	r3, [pc, #40]	@ (8002fec <SysTick_Config+0x44>)
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	3a01      	subs	r2, #1
 8002fc6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fc8:	2301      	movs	r3, #1
 8002fca:	425b      	negs	r3, r3
 8002fcc:	2103      	movs	r1, #3
 8002fce:	0018      	movs	r0, r3
 8002fd0:	f7ff ff7c 	bl	8002ecc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fd4:	4b05      	ldr	r3, [pc, #20]	@ (8002fec <SysTick_Config+0x44>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fda:	4b04      	ldr	r3, [pc, #16]	@ (8002fec <SysTick_Config+0x44>)
 8002fdc:	2207      	movs	r2, #7
 8002fde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	0018      	movs	r0, r3
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	b002      	add	sp, #8
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	46c0      	nop			@ (mov r8, r8)
 8002fec:	e000e010 	.word	0xe000e010

08002ff0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60b9      	str	r1, [r7, #8]
 8002ff8:	607a      	str	r2, [r7, #4]
 8002ffa:	210f      	movs	r1, #15
 8002ffc:	187b      	adds	r3, r7, r1
 8002ffe:	1c02      	adds	r2, r0, #0
 8003000:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003002:	68ba      	ldr	r2, [r7, #8]
 8003004:	187b      	adds	r3, r7, r1
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	b25b      	sxtb	r3, r3
 800300a:	0011      	movs	r1, r2
 800300c:	0018      	movs	r0, r3
 800300e:	f7ff ff5d 	bl	8002ecc <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8003012:	46c0      	nop			@ (mov r8, r8)
 8003014:	46bd      	mov	sp, r7
 8003016:	b004      	add	sp, #16
 8003018:	bd80      	pop	{r7, pc}

0800301a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800301a:	b580      	push	{r7, lr}
 800301c:	b082      	sub	sp, #8
 800301e:	af00      	add	r7, sp, #0
 8003020:	0002      	movs	r2, r0
 8003022:	1dfb      	adds	r3, r7, #7
 8003024:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003026:	1dfb      	adds	r3, r7, #7
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	b25b      	sxtb	r3, r3
 800302c:	0018      	movs	r0, r3
 800302e:	f7ff ff33 	bl	8002e98 <__NVIC_EnableIRQ>
}
 8003032:	46c0      	nop			@ (mov r8, r8)
 8003034:	46bd      	mov	sp, r7
 8003036:	b002      	add	sp, #8
 8003038:	bd80      	pop	{r7, pc}

0800303a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800303a:	b580      	push	{r7, lr}
 800303c:	b082      	sub	sp, #8
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	0018      	movs	r0, r3
 8003046:	f7ff ffaf 	bl	8002fa8 <SysTick_Config>
 800304a:	0003      	movs	r3, r0
}
 800304c:	0018      	movs	r0, r3
 800304e:	46bd      	mov	sp, r7
 8003050:	b002      	add	sp, #8
 8003052:	bd80      	pop	{r7, pc}

08003054 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b086      	sub	sp, #24
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800305e:	2300      	movs	r3, #0
 8003060:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003062:	e14f      	b.n	8003304 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2101      	movs	r1, #1
 800306a:	697a      	ldr	r2, [r7, #20]
 800306c:	4091      	lsls	r1, r2
 800306e:	000a      	movs	r2, r1
 8003070:	4013      	ands	r3, r2
 8003072:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d100      	bne.n	800307c <HAL_GPIO_Init+0x28>
 800307a:	e140      	b.n	80032fe <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	2203      	movs	r2, #3
 8003082:	4013      	ands	r3, r2
 8003084:	2b01      	cmp	r3, #1
 8003086:	d005      	beq.n	8003094 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	2203      	movs	r2, #3
 800308e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003090:	2b02      	cmp	r3, #2
 8003092:	d130      	bne.n	80030f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	2203      	movs	r2, #3
 80030a0:	409a      	lsls	r2, r3
 80030a2:	0013      	movs	r3, r2
 80030a4:	43da      	mvns	r2, r3
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	4013      	ands	r3, r2
 80030aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	68da      	ldr	r2, [r3, #12]
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	005b      	lsls	r3, r3, #1
 80030b4:	409a      	lsls	r2, r3
 80030b6:	0013      	movs	r3, r2
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030ca:	2201      	movs	r2, #1
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	409a      	lsls	r2, r3
 80030d0:	0013      	movs	r3, r2
 80030d2:	43da      	mvns	r2, r3
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	4013      	ands	r3, r2
 80030d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	091b      	lsrs	r3, r3, #4
 80030e0:	2201      	movs	r2, #1
 80030e2:	401a      	ands	r2, r3
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	409a      	lsls	r2, r3
 80030e8:	0013      	movs	r3, r2
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	2203      	movs	r2, #3
 80030fc:	4013      	ands	r3, r2
 80030fe:	2b03      	cmp	r3, #3
 8003100:	d017      	beq.n	8003132 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	005b      	lsls	r3, r3, #1
 800310c:	2203      	movs	r2, #3
 800310e:	409a      	lsls	r2, r3
 8003110:	0013      	movs	r3, r2
 8003112:	43da      	mvns	r2, r3
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	4013      	ands	r3, r2
 8003118:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	689a      	ldr	r2, [r3, #8]
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	005b      	lsls	r3, r3, #1
 8003122:	409a      	lsls	r2, r3
 8003124:	0013      	movs	r3, r2
 8003126:	693a      	ldr	r2, [r7, #16]
 8003128:	4313      	orrs	r3, r2
 800312a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	693a      	ldr	r2, [r7, #16]
 8003130:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	2203      	movs	r2, #3
 8003138:	4013      	ands	r3, r2
 800313a:	2b02      	cmp	r3, #2
 800313c:	d123      	bne.n	8003186 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	08da      	lsrs	r2, r3, #3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	3208      	adds	r2, #8
 8003146:	0092      	lsls	r2, r2, #2
 8003148:	58d3      	ldr	r3, [r2, r3]
 800314a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	2207      	movs	r2, #7
 8003150:	4013      	ands	r3, r2
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	220f      	movs	r2, #15
 8003156:	409a      	lsls	r2, r3
 8003158:	0013      	movs	r3, r2
 800315a:	43da      	mvns	r2, r3
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	4013      	ands	r3, r2
 8003160:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	691a      	ldr	r2, [r3, #16]
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	2107      	movs	r1, #7
 800316a:	400b      	ands	r3, r1
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	409a      	lsls	r2, r3
 8003170:	0013      	movs	r3, r2
 8003172:	693a      	ldr	r2, [r7, #16]
 8003174:	4313      	orrs	r3, r2
 8003176:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	08da      	lsrs	r2, r3, #3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	3208      	adds	r2, #8
 8003180:	0092      	lsls	r2, r2, #2
 8003182:	6939      	ldr	r1, [r7, #16]
 8003184:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	2203      	movs	r2, #3
 8003192:	409a      	lsls	r2, r3
 8003194:	0013      	movs	r3, r2
 8003196:	43da      	mvns	r2, r3
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	4013      	ands	r3, r2
 800319c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	2203      	movs	r2, #3
 80031a4:	401a      	ands	r2, r3
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	005b      	lsls	r3, r3, #1
 80031aa:	409a      	lsls	r2, r3
 80031ac:	0013      	movs	r3, r2
 80031ae:	693a      	ldr	r2, [r7, #16]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	685a      	ldr	r2, [r3, #4]
 80031be:	23c0      	movs	r3, #192	@ 0xc0
 80031c0:	029b      	lsls	r3, r3, #10
 80031c2:	4013      	ands	r3, r2
 80031c4:	d100      	bne.n	80031c8 <HAL_GPIO_Init+0x174>
 80031c6:	e09a      	b.n	80032fe <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031c8:	4b54      	ldr	r3, [pc, #336]	@ (800331c <HAL_GPIO_Init+0x2c8>)
 80031ca:	699a      	ldr	r2, [r3, #24]
 80031cc:	4b53      	ldr	r3, [pc, #332]	@ (800331c <HAL_GPIO_Init+0x2c8>)
 80031ce:	2101      	movs	r1, #1
 80031d0:	430a      	orrs	r2, r1
 80031d2:	619a      	str	r2, [r3, #24]
 80031d4:	4b51      	ldr	r3, [pc, #324]	@ (800331c <HAL_GPIO_Init+0x2c8>)
 80031d6:	699b      	ldr	r3, [r3, #24]
 80031d8:	2201      	movs	r2, #1
 80031da:	4013      	ands	r3, r2
 80031dc:	60bb      	str	r3, [r7, #8]
 80031de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80031e0:	4a4f      	ldr	r2, [pc, #316]	@ (8003320 <HAL_GPIO_Init+0x2cc>)
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	089b      	lsrs	r3, r3, #2
 80031e6:	3302      	adds	r3, #2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	589b      	ldr	r3, [r3, r2]
 80031ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	2203      	movs	r2, #3
 80031f2:	4013      	ands	r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	220f      	movs	r2, #15
 80031f8:	409a      	lsls	r2, r3
 80031fa:	0013      	movs	r3, r2
 80031fc:	43da      	mvns	r2, r3
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	4013      	ands	r3, r2
 8003202:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	2390      	movs	r3, #144	@ 0x90
 8003208:	05db      	lsls	r3, r3, #23
 800320a:	429a      	cmp	r2, r3
 800320c:	d013      	beq.n	8003236 <HAL_GPIO_Init+0x1e2>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a44      	ldr	r2, [pc, #272]	@ (8003324 <HAL_GPIO_Init+0x2d0>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d00d      	beq.n	8003232 <HAL_GPIO_Init+0x1de>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a43      	ldr	r2, [pc, #268]	@ (8003328 <HAL_GPIO_Init+0x2d4>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d007      	beq.n	800322e <HAL_GPIO_Init+0x1da>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a42      	ldr	r2, [pc, #264]	@ (800332c <HAL_GPIO_Init+0x2d8>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d101      	bne.n	800322a <HAL_GPIO_Init+0x1d6>
 8003226:	2303      	movs	r3, #3
 8003228:	e006      	b.n	8003238 <HAL_GPIO_Init+0x1e4>
 800322a:	2305      	movs	r3, #5
 800322c:	e004      	b.n	8003238 <HAL_GPIO_Init+0x1e4>
 800322e:	2302      	movs	r3, #2
 8003230:	e002      	b.n	8003238 <HAL_GPIO_Init+0x1e4>
 8003232:	2301      	movs	r3, #1
 8003234:	e000      	b.n	8003238 <HAL_GPIO_Init+0x1e4>
 8003236:	2300      	movs	r3, #0
 8003238:	697a      	ldr	r2, [r7, #20]
 800323a:	2103      	movs	r1, #3
 800323c:	400a      	ands	r2, r1
 800323e:	0092      	lsls	r2, r2, #2
 8003240:	4093      	lsls	r3, r2
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	4313      	orrs	r3, r2
 8003246:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003248:	4935      	ldr	r1, [pc, #212]	@ (8003320 <HAL_GPIO_Init+0x2cc>)
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	089b      	lsrs	r3, r3, #2
 800324e:	3302      	adds	r3, #2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	693a      	ldr	r2, [r7, #16]
 8003254:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003256:	4b36      	ldr	r3, [pc, #216]	@ (8003330 <HAL_GPIO_Init+0x2dc>)
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	43da      	mvns	r2, r3
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	4013      	ands	r3, r2
 8003264:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	685a      	ldr	r2, [r3, #4]
 800326a:	2380      	movs	r3, #128	@ 0x80
 800326c:	035b      	lsls	r3, r3, #13
 800326e:	4013      	ands	r3, r2
 8003270:	d003      	beq.n	800327a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8003272:	693a      	ldr	r2, [r7, #16]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	4313      	orrs	r3, r2
 8003278:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800327a:	4b2d      	ldr	r3, [pc, #180]	@ (8003330 <HAL_GPIO_Init+0x2dc>)
 800327c:	693a      	ldr	r2, [r7, #16]
 800327e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003280:	4b2b      	ldr	r3, [pc, #172]	@ (8003330 <HAL_GPIO_Init+0x2dc>)
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	43da      	mvns	r2, r3
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	4013      	ands	r3, r2
 800328e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685a      	ldr	r2, [r3, #4]
 8003294:	2380      	movs	r3, #128	@ 0x80
 8003296:	039b      	lsls	r3, r3, #14
 8003298:	4013      	ands	r3, r2
 800329a:	d003      	beq.n	80032a4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800329c:	693a      	ldr	r2, [r7, #16]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80032a4:	4b22      	ldr	r3, [pc, #136]	@ (8003330 <HAL_GPIO_Init+0x2dc>)
 80032a6:	693a      	ldr	r2, [r7, #16]
 80032a8:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80032aa:	4b21      	ldr	r3, [pc, #132]	@ (8003330 <HAL_GPIO_Init+0x2dc>)
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	43da      	mvns	r2, r3
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	4013      	ands	r3, r2
 80032b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	685a      	ldr	r2, [r3, #4]
 80032be:	2380      	movs	r3, #128	@ 0x80
 80032c0:	029b      	lsls	r3, r3, #10
 80032c2:	4013      	ands	r3, r2
 80032c4:	d003      	beq.n	80032ce <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80032c6:	693a      	ldr	r2, [r7, #16]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80032ce:	4b18      	ldr	r3, [pc, #96]	@ (8003330 <HAL_GPIO_Init+0x2dc>)
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80032d4:	4b16      	ldr	r3, [pc, #88]	@ (8003330 <HAL_GPIO_Init+0x2dc>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	43da      	mvns	r2, r3
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	4013      	ands	r3, r2
 80032e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685a      	ldr	r2, [r3, #4]
 80032e8:	2380      	movs	r3, #128	@ 0x80
 80032ea:	025b      	lsls	r3, r3, #9
 80032ec:	4013      	ands	r3, r2
 80032ee:	d003      	beq.n	80032f8 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80032f0:	693a      	ldr	r2, [r7, #16]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80032f8:	4b0d      	ldr	r3, [pc, #52]	@ (8003330 <HAL_GPIO_Init+0x2dc>)
 80032fa:	693a      	ldr	r2, [r7, #16]
 80032fc:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	3301      	adds	r3, #1
 8003302:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	40da      	lsrs	r2, r3
 800330c:	1e13      	subs	r3, r2, #0
 800330e:	d000      	beq.n	8003312 <HAL_GPIO_Init+0x2be>
 8003310:	e6a8      	b.n	8003064 <HAL_GPIO_Init+0x10>
  } 
}
 8003312:	46c0      	nop			@ (mov r8, r8)
 8003314:	46c0      	nop			@ (mov r8, r8)
 8003316:	46bd      	mov	sp, r7
 8003318:	b006      	add	sp, #24
 800331a:	bd80      	pop	{r7, pc}
 800331c:	40021000 	.word	0x40021000
 8003320:	40010000 	.word	0x40010000
 8003324:	48000400 	.word	0x48000400
 8003328:	48000800 	.word	0x48000800
 800332c:	48000c00 	.word	0x48000c00
 8003330:	40010400 	.word	0x40010400

08003334 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	000a      	movs	r2, r1
 800333e:	1cbb      	adds	r3, r7, #2
 8003340:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	691b      	ldr	r3, [r3, #16]
 8003346:	1cba      	adds	r2, r7, #2
 8003348:	8812      	ldrh	r2, [r2, #0]
 800334a:	4013      	ands	r3, r2
 800334c:	d004      	beq.n	8003358 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800334e:	230f      	movs	r3, #15
 8003350:	18fb      	adds	r3, r7, r3
 8003352:	2201      	movs	r2, #1
 8003354:	701a      	strb	r2, [r3, #0]
 8003356:	e003      	b.n	8003360 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003358:	230f      	movs	r3, #15
 800335a:	18fb      	adds	r3, r7, r3
 800335c:	2200      	movs	r2, #0
 800335e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003360:	230f      	movs	r3, #15
 8003362:	18fb      	adds	r3, r7, r3
 8003364:	781b      	ldrb	r3, [r3, #0]
  }
 8003366:	0018      	movs	r0, r3
 8003368:	46bd      	mov	sp, r7
 800336a:	b004      	add	sp, #16
 800336c:	bd80      	pop	{r7, pc}

0800336e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800336e:	b580      	push	{r7, lr}
 8003370:	b082      	sub	sp, #8
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
 8003376:	0008      	movs	r0, r1
 8003378:	0011      	movs	r1, r2
 800337a:	1cbb      	adds	r3, r7, #2
 800337c:	1c02      	adds	r2, r0, #0
 800337e:	801a      	strh	r2, [r3, #0]
 8003380:	1c7b      	adds	r3, r7, #1
 8003382:	1c0a      	adds	r2, r1, #0
 8003384:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003386:	1c7b      	adds	r3, r7, #1
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d004      	beq.n	8003398 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800338e:	1cbb      	adds	r3, r7, #2
 8003390:	881a      	ldrh	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003396:	e003      	b.n	80033a0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003398:	1cbb      	adds	r3, r7, #2
 800339a:	881a      	ldrh	r2, [r3, #0]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80033a0:	46c0      	nop			@ (mov r8, r8)
 80033a2:	46bd      	mov	sp, r7
 80033a4:	b002      	add	sp, #8
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b088      	sub	sp, #32
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d101      	bne.n	80033ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e301      	b.n	80039be <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2201      	movs	r2, #1
 80033c0:	4013      	ands	r3, r2
 80033c2:	d100      	bne.n	80033c6 <HAL_RCC_OscConfig+0x1e>
 80033c4:	e08d      	b.n	80034e2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80033c6:	4bc3      	ldr	r3, [pc, #780]	@ (80036d4 <HAL_RCC_OscConfig+0x32c>)
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	220c      	movs	r2, #12
 80033cc:	4013      	ands	r3, r2
 80033ce:	2b04      	cmp	r3, #4
 80033d0:	d00e      	beq.n	80033f0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80033d2:	4bc0      	ldr	r3, [pc, #768]	@ (80036d4 <HAL_RCC_OscConfig+0x32c>)
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	220c      	movs	r2, #12
 80033d8:	4013      	ands	r3, r2
 80033da:	2b08      	cmp	r3, #8
 80033dc:	d116      	bne.n	800340c <HAL_RCC_OscConfig+0x64>
 80033de:	4bbd      	ldr	r3, [pc, #756]	@ (80036d4 <HAL_RCC_OscConfig+0x32c>)
 80033e0:	685a      	ldr	r2, [r3, #4]
 80033e2:	2380      	movs	r3, #128	@ 0x80
 80033e4:	025b      	lsls	r3, r3, #9
 80033e6:	401a      	ands	r2, r3
 80033e8:	2380      	movs	r3, #128	@ 0x80
 80033ea:	025b      	lsls	r3, r3, #9
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d10d      	bne.n	800340c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033f0:	4bb8      	ldr	r3, [pc, #736]	@ (80036d4 <HAL_RCC_OscConfig+0x32c>)
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	2380      	movs	r3, #128	@ 0x80
 80033f6:	029b      	lsls	r3, r3, #10
 80033f8:	4013      	ands	r3, r2
 80033fa:	d100      	bne.n	80033fe <HAL_RCC_OscConfig+0x56>
 80033fc:	e070      	b.n	80034e0 <HAL_RCC_OscConfig+0x138>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d000      	beq.n	8003408 <HAL_RCC_OscConfig+0x60>
 8003406:	e06b      	b.n	80034e0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e2d8      	b.n	80039be <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d107      	bne.n	8003424 <HAL_RCC_OscConfig+0x7c>
 8003414:	4baf      	ldr	r3, [pc, #700]	@ (80036d4 <HAL_RCC_OscConfig+0x32c>)
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	4bae      	ldr	r3, [pc, #696]	@ (80036d4 <HAL_RCC_OscConfig+0x32c>)
 800341a:	2180      	movs	r1, #128	@ 0x80
 800341c:	0249      	lsls	r1, r1, #9
 800341e:	430a      	orrs	r2, r1
 8003420:	601a      	str	r2, [r3, #0]
 8003422:	e02f      	b.n	8003484 <HAL_RCC_OscConfig+0xdc>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d10c      	bne.n	8003446 <HAL_RCC_OscConfig+0x9e>
 800342c:	4ba9      	ldr	r3, [pc, #676]	@ (80036d4 <HAL_RCC_OscConfig+0x32c>)
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	4ba8      	ldr	r3, [pc, #672]	@ (80036d4 <HAL_RCC_OscConfig+0x32c>)
 8003432:	49a9      	ldr	r1, [pc, #676]	@ (80036d8 <HAL_RCC_OscConfig+0x330>)
 8003434:	400a      	ands	r2, r1
 8003436:	601a      	str	r2, [r3, #0]
 8003438:	4ba6      	ldr	r3, [pc, #664]	@ (80036d4 <HAL_RCC_OscConfig+0x32c>)
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	4ba5      	ldr	r3, [pc, #660]	@ (80036d4 <HAL_RCC_OscConfig+0x32c>)
 800343e:	49a7      	ldr	r1, [pc, #668]	@ (80036dc <HAL_RCC_OscConfig+0x334>)
 8003440:	400a      	ands	r2, r1
 8003442:	601a      	str	r2, [r3, #0]
 8003444:	e01e      	b.n	8003484 <HAL_RCC_OscConfig+0xdc>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	2b05      	cmp	r3, #5
 800344c:	d10e      	bne.n	800346c <HAL_RCC_OscConfig+0xc4>
 800344e:	4ba1      	ldr	r3, [pc, #644]	@ (80036d4 <HAL_RCC_OscConfig+0x32c>)
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	4ba0      	ldr	r3, [pc, #640]	@ (80036d4 <HAL_RCC_OscConfig+0x32c>)
 8003454:	2180      	movs	r1, #128	@ 0x80
 8003456:	02c9      	lsls	r1, r1, #11
 8003458:	430a      	orrs	r2, r1
 800345a:	601a      	str	r2, [r3, #0]
 800345c:	4b9d      	ldr	r3, [pc, #628]	@ (80036d4 <HAL_RCC_OscConfig+0x32c>)
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	4b9c      	ldr	r3, [pc, #624]	@ (80036d4 <HAL_RCC_OscConfig+0x32c>)
 8003462:	2180      	movs	r1, #128	@ 0x80
 8003464:	0249      	lsls	r1, r1, #9
 8003466:	430a      	orrs	r2, r1
 8003468:	601a      	str	r2, [r3, #0]
 800346a:	e00b      	b.n	8003484 <HAL_RCC_OscConfig+0xdc>
 800346c:	4b99      	ldr	r3, [pc, #612]	@ (80036d4 <HAL_RCC_OscConfig+0x32c>)
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	4b98      	ldr	r3, [pc, #608]	@ (80036d4 <HAL_RCC_OscConfig+0x32c>)
 8003472:	4999      	ldr	r1, [pc, #612]	@ (80036d8 <HAL_RCC_OscConfig+0x330>)
 8003474:	400a      	ands	r2, r1
 8003476:	601a      	str	r2, [r3, #0]
 8003478:	4b96      	ldr	r3, [pc, #600]	@ (80036d4 <HAL_RCC_OscConfig+0x32c>)
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	4b95      	ldr	r3, [pc, #596]	@ (80036d4 <HAL_RCC_OscConfig+0x32c>)
 800347e:	4997      	ldr	r1, [pc, #604]	@ (80036dc <HAL_RCC_OscConfig+0x334>)
 8003480:	400a      	ands	r2, r1
 8003482:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d014      	beq.n	80034b6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800348c:	f7ff f842 	bl	8002514 <HAL_GetTick>
 8003490:	0003      	movs	r3, r0
 8003492:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003494:	e008      	b.n	80034a8 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003496:	f7ff f83d 	bl	8002514 <HAL_GetTick>
 800349a:	0002      	movs	r2, r0
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	2b64      	cmp	r3, #100	@ 0x64
 80034a2:	d901      	bls.n	80034a8 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e28a      	b.n	80039be <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034a8:	4b8a      	ldr	r3, [pc, #552]	@ (80036d4 <HAL_RCC_OscConfig+0x32c>)
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	2380      	movs	r3, #128	@ 0x80
 80034ae:	029b      	lsls	r3, r3, #10
 80034b0:	4013      	ands	r3, r2
 80034b2:	d0f0      	beq.n	8003496 <HAL_RCC_OscConfig+0xee>
 80034b4:	e015      	b.n	80034e2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b6:	f7ff f82d 	bl	8002514 <HAL_GetTick>
 80034ba:	0003      	movs	r3, r0
 80034bc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034be:	e008      	b.n	80034d2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034c0:	f7ff f828 	bl	8002514 <HAL_GetTick>
 80034c4:	0002      	movs	r2, r0
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	2b64      	cmp	r3, #100	@ 0x64
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e275      	b.n	80039be <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034d2:	4b80      	ldr	r3, [pc, #512]	@ (80036d4 <HAL_RCC_OscConfig+0x32c>)
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	2380      	movs	r3, #128	@ 0x80
 80034d8:	029b      	lsls	r3, r3, #10
 80034da:	4013      	ands	r3, r2
 80034dc:	d1f0      	bne.n	80034c0 <HAL_RCC_OscConfig+0x118>
 80034de:	e000      	b.n	80034e2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034e0:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2202      	movs	r2, #2
 80034e8:	4013      	ands	r3, r2
 80034ea:	d100      	bne.n	80034ee <HAL_RCC_OscConfig+0x146>
 80034ec:	e069      	b.n	80035c2 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80034ee:	4b79      	ldr	r3, [pc, #484]	@ (80036d4 <HAL_RCC_OscConfig+0x32c>)
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	220c      	movs	r2, #12
 80034f4:	4013      	ands	r3, r2
 80034f6:	d00b      	beq.n	8003510 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80034f8:	4b76      	ldr	r3, [pc, #472]	@ (80036d4 <HAL_RCC_OscConfig+0x32c>)
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	220c      	movs	r2, #12
 80034fe:	4013      	ands	r3, r2
 8003500:	2b08      	cmp	r3, #8
 8003502:	d11c      	bne.n	800353e <HAL_RCC_OscConfig+0x196>
 8003504:	4b73      	ldr	r3, [pc, #460]	@ (80036d4 <HAL_RCC_OscConfig+0x32c>)
 8003506:	685a      	ldr	r2, [r3, #4]
 8003508:	2380      	movs	r3, #128	@ 0x80
 800350a:	025b      	lsls	r3, r3, #9
 800350c:	4013      	ands	r3, r2
 800350e:	d116      	bne.n	800353e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003510:	4b70      	ldr	r3, [pc, #448]	@ (80036d4 <HAL_RCC_OscConfig+0x32c>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2202      	movs	r2, #2
 8003516:	4013      	ands	r3, r2
 8003518:	d005      	beq.n	8003526 <HAL_RCC_OscConfig+0x17e>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	2b01      	cmp	r3, #1
 8003520:	d001      	beq.n	8003526 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e24b      	b.n	80039be <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003526:	4b6b      	ldr	r3, [pc, #428]	@ (80036d4 <HAL_RCC_OscConfig+0x32c>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	22f8      	movs	r2, #248	@ 0xf8
 800352c:	4393      	bics	r3, r2
 800352e:	0019      	movs	r1, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	00da      	lsls	r2, r3, #3
 8003536:	4b67      	ldr	r3, [pc, #412]	@ (80036d4 <HAL_RCC_OscConfig+0x32c>)
 8003538:	430a      	orrs	r2, r1
 800353a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800353c:	e041      	b.n	80035c2 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d024      	beq.n	8003590 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003546:	4b63      	ldr	r3, [pc, #396]	@ (80036d4 <HAL_RCC_OscConfig+0x32c>)
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	4b62      	ldr	r3, [pc, #392]	@ (80036d4 <HAL_RCC_OscConfig+0x32c>)
 800354c:	2101      	movs	r1, #1
 800354e:	430a      	orrs	r2, r1
 8003550:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003552:	f7fe ffdf 	bl	8002514 <HAL_GetTick>
 8003556:	0003      	movs	r3, r0
 8003558:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800355a:	e008      	b.n	800356e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800355c:	f7fe ffda 	bl	8002514 <HAL_GetTick>
 8003560:	0002      	movs	r2, r0
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b02      	cmp	r3, #2
 8003568:	d901      	bls.n	800356e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e227      	b.n	80039be <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800356e:	4b59      	ldr	r3, [pc, #356]	@ (80036d4 <HAL_RCC_OscConfig+0x32c>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2202      	movs	r2, #2
 8003574:	4013      	ands	r3, r2
 8003576:	d0f1      	beq.n	800355c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003578:	4b56      	ldr	r3, [pc, #344]	@ (80036d4 <HAL_RCC_OscConfig+0x32c>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	22f8      	movs	r2, #248	@ 0xf8
 800357e:	4393      	bics	r3, r2
 8003580:	0019      	movs	r1, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	00da      	lsls	r2, r3, #3
 8003588:	4b52      	ldr	r3, [pc, #328]	@ (80036d4 <HAL_RCC_OscConfig+0x32c>)
 800358a:	430a      	orrs	r2, r1
 800358c:	601a      	str	r2, [r3, #0]
 800358e:	e018      	b.n	80035c2 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003590:	4b50      	ldr	r3, [pc, #320]	@ (80036d4 <HAL_RCC_OscConfig+0x32c>)
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	4b4f      	ldr	r3, [pc, #316]	@ (80036d4 <HAL_RCC_OscConfig+0x32c>)
 8003596:	2101      	movs	r1, #1
 8003598:	438a      	bics	r2, r1
 800359a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800359c:	f7fe ffba 	bl	8002514 <HAL_GetTick>
 80035a0:	0003      	movs	r3, r0
 80035a2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035a4:	e008      	b.n	80035b8 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035a6:	f7fe ffb5 	bl	8002514 <HAL_GetTick>
 80035aa:	0002      	movs	r2, r0
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d901      	bls.n	80035b8 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e202      	b.n	80039be <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035b8:	4b46      	ldr	r3, [pc, #280]	@ (80036d4 <HAL_RCC_OscConfig+0x32c>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2202      	movs	r2, #2
 80035be:	4013      	ands	r3, r2
 80035c0:	d1f1      	bne.n	80035a6 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2208      	movs	r2, #8
 80035c8:	4013      	ands	r3, r2
 80035ca:	d036      	beq.n	800363a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	69db      	ldr	r3, [r3, #28]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d019      	beq.n	8003608 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035d4:	4b3f      	ldr	r3, [pc, #252]	@ (80036d4 <HAL_RCC_OscConfig+0x32c>)
 80035d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80035d8:	4b3e      	ldr	r3, [pc, #248]	@ (80036d4 <HAL_RCC_OscConfig+0x32c>)
 80035da:	2101      	movs	r1, #1
 80035dc:	430a      	orrs	r2, r1
 80035de:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035e0:	f7fe ff98 	bl	8002514 <HAL_GetTick>
 80035e4:	0003      	movs	r3, r0
 80035e6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035e8:	e008      	b.n	80035fc <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035ea:	f7fe ff93 	bl	8002514 <HAL_GetTick>
 80035ee:	0002      	movs	r2, r0
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d901      	bls.n	80035fc <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	e1e0      	b.n	80039be <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035fc:	4b35      	ldr	r3, [pc, #212]	@ (80036d4 <HAL_RCC_OscConfig+0x32c>)
 80035fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003600:	2202      	movs	r2, #2
 8003602:	4013      	ands	r3, r2
 8003604:	d0f1      	beq.n	80035ea <HAL_RCC_OscConfig+0x242>
 8003606:	e018      	b.n	800363a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003608:	4b32      	ldr	r3, [pc, #200]	@ (80036d4 <HAL_RCC_OscConfig+0x32c>)
 800360a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800360c:	4b31      	ldr	r3, [pc, #196]	@ (80036d4 <HAL_RCC_OscConfig+0x32c>)
 800360e:	2101      	movs	r1, #1
 8003610:	438a      	bics	r2, r1
 8003612:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003614:	f7fe ff7e 	bl	8002514 <HAL_GetTick>
 8003618:	0003      	movs	r3, r0
 800361a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800361c:	e008      	b.n	8003630 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800361e:	f7fe ff79 	bl	8002514 <HAL_GetTick>
 8003622:	0002      	movs	r2, r0
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	2b02      	cmp	r3, #2
 800362a:	d901      	bls.n	8003630 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e1c6      	b.n	80039be <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003630:	4b28      	ldr	r3, [pc, #160]	@ (80036d4 <HAL_RCC_OscConfig+0x32c>)
 8003632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003634:	2202      	movs	r2, #2
 8003636:	4013      	ands	r3, r2
 8003638:	d1f1      	bne.n	800361e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2204      	movs	r2, #4
 8003640:	4013      	ands	r3, r2
 8003642:	d100      	bne.n	8003646 <HAL_RCC_OscConfig+0x29e>
 8003644:	e0b4      	b.n	80037b0 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003646:	201f      	movs	r0, #31
 8003648:	183b      	adds	r3, r7, r0
 800364a:	2200      	movs	r2, #0
 800364c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800364e:	4b21      	ldr	r3, [pc, #132]	@ (80036d4 <HAL_RCC_OscConfig+0x32c>)
 8003650:	69da      	ldr	r2, [r3, #28]
 8003652:	2380      	movs	r3, #128	@ 0x80
 8003654:	055b      	lsls	r3, r3, #21
 8003656:	4013      	ands	r3, r2
 8003658:	d110      	bne.n	800367c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800365a:	4b1e      	ldr	r3, [pc, #120]	@ (80036d4 <HAL_RCC_OscConfig+0x32c>)
 800365c:	69da      	ldr	r2, [r3, #28]
 800365e:	4b1d      	ldr	r3, [pc, #116]	@ (80036d4 <HAL_RCC_OscConfig+0x32c>)
 8003660:	2180      	movs	r1, #128	@ 0x80
 8003662:	0549      	lsls	r1, r1, #21
 8003664:	430a      	orrs	r2, r1
 8003666:	61da      	str	r2, [r3, #28]
 8003668:	4b1a      	ldr	r3, [pc, #104]	@ (80036d4 <HAL_RCC_OscConfig+0x32c>)
 800366a:	69da      	ldr	r2, [r3, #28]
 800366c:	2380      	movs	r3, #128	@ 0x80
 800366e:	055b      	lsls	r3, r3, #21
 8003670:	4013      	ands	r3, r2
 8003672:	60fb      	str	r3, [r7, #12]
 8003674:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003676:	183b      	adds	r3, r7, r0
 8003678:	2201      	movs	r2, #1
 800367a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800367c:	4b18      	ldr	r3, [pc, #96]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	2380      	movs	r3, #128	@ 0x80
 8003682:	005b      	lsls	r3, r3, #1
 8003684:	4013      	ands	r3, r2
 8003686:	d11a      	bne.n	80036be <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003688:	4b15      	ldr	r3, [pc, #84]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	4b14      	ldr	r3, [pc, #80]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 800368e:	2180      	movs	r1, #128	@ 0x80
 8003690:	0049      	lsls	r1, r1, #1
 8003692:	430a      	orrs	r2, r1
 8003694:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003696:	f7fe ff3d 	bl	8002514 <HAL_GetTick>
 800369a:	0003      	movs	r3, r0
 800369c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800369e:	e008      	b.n	80036b2 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036a0:	f7fe ff38 	bl	8002514 <HAL_GetTick>
 80036a4:	0002      	movs	r2, r0
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b64      	cmp	r3, #100	@ 0x64
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e185      	b.n	80039be <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036b2:	4b0b      	ldr	r3, [pc, #44]	@ (80036e0 <HAL_RCC_OscConfig+0x338>)
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	2380      	movs	r3, #128	@ 0x80
 80036b8:	005b      	lsls	r3, r3, #1
 80036ba:	4013      	ands	r3, r2
 80036bc:	d0f0      	beq.n	80036a0 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d10e      	bne.n	80036e4 <HAL_RCC_OscConfig+0x33c>
 80036c6:	4b03      	ldr	r3, [pc, #12]	@ (80036d4 <HAL_RCC_OscConfig+0x32c>)
 80036c8:	6a1a      	ldr	r2, [r3, #32]
 80036ca:	4b02      	ldr	r3, [pc, #8]	@ (80036d4 <HAL_RCC_OscConfig+0x32c>)
 80036cc:	2101      	movs	r1, #1
 80036ce:	430a      	orrs	r2, r1
 80036d0:	621a      	str	r2, [r3, #32]
 80036d2:	e035      	b.n	8003740 <HAL_RCC_OscConfig+0x398>
 80036d4:	40021000 	.word	0x40021000
 80036d8:	fffeffff 	.word	0xfffeffff
 80036dc:	fffbffff 	.word	0xfffbffff
 80036e0:	40007000 	.word	0x40007000
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d10c      	bne.n	8003706 <HAL_RCC_OscConfig+0x35e>
 80036ec:	4bb6      	ldr	r3, [pc, #728]	@ (80039c8 <HAL_RCC_OscConfig+0x620>)
 80036ee:	6a1a      	ldr	r2, [r3, #32]
 80036f0:	4bb5      	ldr	r3, [pc, #724]	@ (80039c8 <HAL_RCC_OscConfig+0x620>)
 80036f2:	2101      	movs	r1, #1
 80036f4:	438a      	bics	r2, r1
 80036f6:	621a      	str	r2, [r3, #32]
 80036f8:	4bb3      	ldr	r3, [pc, #716]	@ (80039c8 <HAL_RCC_OscConfig+0x620>)
 80036fa:	6a1a      	ldr	r2, [r3, #32]
 80036fc:	4bb2      	ldr	r3, [pc, #712]	@ (80039c8 <HAL_RCC_OscConfig+0x620>)
 80036fe:	2104      	movs	r1, #4
 8003700:	438a      	bics	r2, r1
 8003702:	621a      	str	r2, [r3, #32]
 8003704:	e01c      	b.n	8003740 <HAL_RCC_OscConfig+0x398>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	2b05      	cmp	r3, #5
 800370c:	d10c      	bne.n	8003728 <HAL_RCC_OscConfig+0x380>
 800370e:	4bae      	ldr	r3, [pc, #696]	@ (80039c8 <HAL_RCC_OscConfig+0x620>)
 8003710:	6a1a      	ldr	r2, [r3, #32]
 8003712:	4bad      	ldr	r3, [pc, #692]	@ (80039c8 <HAL_RCC_OscConfig+0x620>)
 8003714:	2104      	movs	r1, #4
 8003716:	430a      	orrs	r2, r1
 8003718:	621a      	str	r2, [r3, #32]
 800371a:	4bab      	ldr	r3, [pc, #684]	@ (80039c8 <HAL_RCC_OscConfig+0x620>)
 800371c:	6a1a      	ldr	r2, [r3, #32]
 800371e:	4baa      	ldr	r3, [pc, #680]	@ (80039c8 <HAL_RCC_OscConfig+0x620>)
 8003720:	2101      	movs	r1, #1
 8003722:	430a      	orrs	r2, r1
 8003724:	621a      	str	r2, [r3, #32]
 8003726:	e00b      	b.n	8003740 <HAL_RCC_OscConfig+0x398>
 8003728:	4ba7      	ldr	r3, [pc, #668]	@ (80039c8 <HAL_RCC_OscConfig+0x620>)
 800372a:	6a1a      	ldr	r2, [r3, #32]
 800372c:	4ba6      	ldr	r3, [pc, #664]	@ (80039c8 <HAL_RCC_OscConfig+0x620>)
 800372e:	2101      	movs	r1, #1
 8003730:	438a      	bics	r2, r1
 8003732:	621a      	str	r2, [r3, #32]
 8003734:	4ba4      	ldr	r3, [pc, #656]	@ (80039c8 <HAL_RCC_OscConfig+0x620>)
 8003736:	6a1a      	ldr	r2, [r3, #32]
 8003738:	4ba3      	ldr	r3, [pc, #652]	@ (80039c8 <HAL_RCC_OscConfig+0x620>)
 800373a:	2104      	movs	r1, #4
 800373c:	438a      	bics	r2, r1
 800373e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d014      	beq.n	8003772 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003748:	f7fe fee4 	bl	8002514 <HAL_GetTick>
 800374c:	0003      	movs	r3, r0
 800374e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003750:	e009      	b.n	8003766 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003752:	f7fe fedf 	bl	8002514 <HAL_GetTick>
 8003756:	0002      	movs	r2, r0
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	4a9b      	ldr	r2, [pc, #620]	@ (80039cc <HAL_RCC_OscConfig+0x624>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d901      	bls.n	8003766 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e12b      	b.n	80039be <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003766:	4b98      	ldr	r3, [pc, #608]	@ (80039c8 <HAL_RCC_OscConfig+0x620>)
 8003768:	6a1b      	ldr	r3, [r3, #32]
 800376a:	2202      	movs	r2, #2
 800376c:	4013      	ands	r3, r2
 800376e:	d0f0      	beq.n	8003752 <HAL_RCC_OscConfig+0x3aa>
 8003770:	e013      	b.n	800379a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003772:	f7fe fecf 	bl	8002514 <HAL_GetTick>
 8003776:	0003      	movs	r3, r0
 8003778:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800377a:	e009      	b.n	8003790 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800377c:	f7fe feca 	bl	8002514 <HAL_GetTick>
 8003780:	0002      	movs	r2, r0
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	4a91      	ldr	r2, [pc, #580]	@ (80039cc <HAL_RCC_OscConfig+0x624>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d901      	bls.n	8003790 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	e116      	b.n	80039be <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003790:	4b8d      	ldr	r3, [pc, #564]	@ (80039c8 <HAL_RCC_OscConfig+0x620>)
 8003792:	6a1b      	ldr	r3, [r3, #32]
 8003794:	2202      	movs	r2, #2
 8003796:	4013      	ands	r3, r2
 8003798:	d1f0      	bne.n	800377c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800379a:	231f      	movs	r3, #31
 800379c:	18fb      	adds	r3, r7, r3
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d105      	bne.n	80037b0 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037a4:	4b88      	ldr	r3, [pc, #544]	@ (80039c8 <HAL_RCC_OscConfig+0x620>)
 80037a6:	69da      	ldr	r2, [r3, #28]
 80037a8:	4b87      	ldr	r3, [pc, #540]	@ (80039c8 <HAL_RCC_OscConfig+0x620>)
 80037aa:	4989      	ldr	r1, [pc, #548]	@ (80039d0 <HAL_RCC_OscConfig+0x628>)
 80037ac:	400a      	ands	r2, r1
 80037ae:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2210      	movs	r2, #16
 80037b6:	4013      	ands	r3, r2
 80037b8:	d063      	beq.n	8003882 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d12a      	bne.n	8003818 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80037c2:	4b81      	ldr	r3, [pc, #516]	@ (80039c8 <HAL_RCC_OscConfig+0x620>)
 80037c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80037c6:	4b80      	ldr	r3, [pc, #512]	@ (80039c8 <HAL_RCC_OscConfig+0x620>)
 80037c8:	2104      	movs	r1, #4
 80037ca:	430a      	orrs	r2, r1
 80037cc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80037ce:	4b7e      	ldr	r3, [pc, #504]	@ (80039c8 <HAL_RCC_OscConfig+0x620>)
 80037d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80037d2:	4b7d      	ldr	r3, [pc, #500]	@ (80039c8 <HAL_RCC_OscConfig+0x620>)
 80037d4:	2101      	movs	r1, #1
 80037d6:	430a      	orrs	r2, r1
 80037d8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037da:	f7fe fe9b 	bl	8002514 <HAL_GetTick>
 80037de:	0003      	movs	r3, r0
 80037e0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80037e2:	e008      	b.n	80037f6 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80037e4:	f7fe fe96 	bl	8002514 <HAL_GetTick>
 80037e8:	0002      	movs	r2, r0
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e0e3      	b.n	80039be <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80037f6:	4b74      	ldr	r3, [pc, #464]	@ (80039c8 <HAL_RCC_OscConfig+0x620>)
 80037f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037fa:	2202      	movs	r2, #2
 80037fc:	4013      	ands	r3, r2
 80037fe:	d0f1      	beq.n	80037e4 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003800:	4b71      	ldr	r3, [pc, #452]	@ (80039c8 <HAL_RCC_OscConfig+0x620>)
 8003802:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003804:	22f8      	movs	r2, #248	@ 0xf8
 8003806:	4393      	bics	r3, r2
 8003808:	0019      	movs	r1, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	00da      	lsls	r2, r3, #3
 8003810:	4b6d      	ldr	r3, [pc, #436]	@ (80039c8 <HAL_RCC_OscConfig+0x620>)
 8003812:	430a      	orrs	r2, r1
 8003814:	635a      	str	r2, [r3, #52]	@ 0x34
 8003816:	e034      	b.n	8003882 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	695b      	ldr	r3, [r3, #20]
 800381c:	3305      	adds	r3, #5
 800381e:	d111      	bne.n	8003844 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003820:	4b69      	ldr	r3, [pc, #420]	@ (80039c8 <HAL_RCC_OscConfig+0x620>)
 8003822:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003824:	4b68      	ldr	r3, [pc, #416]	@ (80039c8 <HAL_RCC_OscConfig+0x620>)
 8003826:	2104      	movs	r1, #4
 8003828:	438a      	bics	r2, r1
 800382a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800382c:	4b66      	ldr	r3, [pc, #408]	@ (80039c8 <HAL_RCC_OscConfig+0x620>)
 800382e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003830:	22f8      	movs	r2, #248	@ 0xf8
 8003832:	4393      	bics	r3, r2
 8003834:	0019      	movs	r1, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	00da      	lsls	r2, r3, #3
 800383c:	4b62      	ldr	r3, [pc, #392]	@ (80039c8 <HAL_RCC_OscConfig+0x620>)
 800383e:	430a      	orrs	r2, r1
 8003840:	635a      	str	r2, [r3, #52]	@ 0x34
 8003842:	e01e      	b.n	8003882 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003844:	4b60      	ldr	r3, [pc, #384]	@ (80039c8 <HAL_RCC_OscConfig+0x620>)
 8003846:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003848:	4b5f      	ldr	r3, [pc, #380]	@ (80039c8 <HAL_RCC_OscConfig+0x620>)
 800384a:	2104      	movs	r1, #4
 800384c:	430a      	orrs	r2, r1
 800384e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003850:	4b5d      	ldr	r3, [pc, #372]	@ (80039c8 <HAL_RCC_OscConfig+0x620>)
 8003852:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003854:	4b5c      	ldr	r3, [pc, #368]	@ (80039c8 <HAL_RCC_OscConfig+0x620>)
 8003856:	2101      	movs	r1, #1
 8003858:	438a      	bics	r2, r1
 800385a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800385c:	f7fe fe5a 	bl	8002514 <HAL_GetTick>
 8003860:	0003      	movs	r3, r0
 8003862:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003864:	e008      	b.n	8003878 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003866:	f7fe fe55 	bl	8002514 <HAL_GetTick>
 800386a:	0002      	movs	r2, r0
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	2b02      	cmp	r3, #2
 8003872:	d901      	bls.n	8003878 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e0a2      	b.n	80039be <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003878:	4b53      	ldr	r3, [pc, #332]	@ (80039c8 <HAL_RCC_OscConfig+0x620>)
 800387a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800387c:	2202      	movs	r2, #2
 800387e:	4013      	ands	r3, r2
 8003880:	d1f1      	bne.n	8003866 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a1b      	ldr	r3, [r3, #32]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d100      	bne.n	800388c <HAL_RCC_OscConfig+0x4e4>
 800388a:	e097      	b.n	80039bc <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800388c:	4b4e      	ldr	r3, [pc, #312]	@ (80039c8 <HAL_RCC_OscConfig+0x620>)
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	220c      	movs	r2, #12
 8003892:	4013      	ands	r3, r2
 8003894:	2b08      	cmp	r3, #8
 8003896:	d100      	bne.n	800389a <HAL_RCC_OscConfig+0x4f2>
 8003898:	e06b      	b.n	8003972 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a1b      	ldr	r3, [r3, #32]
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d14c      	bne.n	800393c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038a2:	4b49      	ldr	r3, [pc, #292]	@ (80039c8 <HAL_RCC_OscConfig+0x620>)
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	4b48      	ldr	r3, [pc, #288]	@ (80039c8 <HAL_RCC_OscConfig+0x620>)
 80038a8:	494a      	ldr	r1, [pc, #296]	@ (80039d4 <HAL_RCC_OscConfig+0x62c>)
 80038aa:	400a      	ands	r2, r1
 80038ac:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ae:	f7fe fe31 	bl	8002514 <HAL_GetTick>
 80038b2:	0003      	movs	r3, r0
 80038b4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038b6:	e008      	b.n	80038ca <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038b8:	f7fe fe2c 	bl	8002514 <HAL_GetTick>
 80038bc:	0002      	movs	r2, r0
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e079      	b.n	80039be <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038ca:	4b3f      	ldr	r3, [pc, #252]	@ (80039c8 <HAL_RCC_OscConfig+0x620>)
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	2380      	movs	r3, #128	@ 0x80
 80038d0:	049b      	lsls	r3, r3, #18
 80038d2:	4013      	ands	r3, r2
 80038d4:	d1f0      	bne.n	80038b8 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038d6:	4b3c      	ldr	r3, [pc, #240]	@ (80039c8 <HAL_RCC_OscConfig+0x620>)
 80038d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038da:	220f      	movs	r2, #15
 80038dc:	4393      	bics	r3, r2
 80038de:	0019      	movs	r1, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038e4:	4b38      	ldr	r3, [pc, #224]	@ (80039c8 <HAL_RCC_OscConfig+0x620>)
 80038e6:	430a      	orrs	r2, r1
 80038e8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80038ea:	4b37      	ldr	r3, [pc, #220]	@ (80039c8 <HAL_RCC_OscConfig+0x620>)
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	4a3a      	ldr	r2, [pc, #232]	@ (80039d8 <HAL_RCC_OscConfig+0x630>)
 80038f0:	4013      	ands	r3, r2
 80038f2:	0019      	movs	r1, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038fc:	431a      	orrs	r2, r3
 80038fe:	4b32      	ldr	r3, [pc, #200]	@ (80039c8 <HAL_RCC_OscConfig+0x620>)
 8003900:	430a      	orrs	r2, r1
 8003902:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003904:	4b30      	ldr	r3, [pc, #192]	@ (80039c8 <HAL_RCC_OscConfig+0x620>)
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	4b2f      	ldr	r3, [pc, #188]	@ (80039c8 <HAL_RCC_OscConfig+0x620>)
 800390a:	2180      	movs	r1, #128	@ 0x80
 800390c:	0449      	lsls	r1, r1, #17
 800390e:	430a      	orrs	r2, r1
 8003910:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003912:	f7fe fdff 	bl	8002514 <HAL_GetTick>
 8003916:	0003      	movs	r3, r0
 8003918:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800391a:	e008      	b.n	800392e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800391c:	f7fe fdfa 	bl	8002514 <HAL_GetTick>
 8003920:	0002      	movs	r2, r0
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b02      	cmp	r3, #2
 8003928:	d901      	bls.n	800392e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e047      	b.n	80039be <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800392e:	4b26      	ldr	r3, [pc, #152]	@ (80039c8 <HAL_RCC_OscConfig+0x620>)
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	2380      	movs	r3, #128	@ 0x80
 8003934:	049b      	lsls	r3, r3, #18
 8003936:	4013      	ands	r3, r2
 8003938:	d0f0      	beq.n	800391c <HAL_RCC_OscConfig+0x574>
 800393a:	e03f      	b.n	80039bc <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800393c:	4b22      	ldr	r3, [pc, #136]	@ (80039c8 <HAL_RCC_OscConfig+0x620>)
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	4b21      	ldr	r3, [pc, #132]	@ (80039c8 <HAL_RCC_OscConfig+0x620>)
 8003942:	4924      	ldr	r1, [pc, #144]	@ (80039d4 <HAL_RCC_OscConfig+0x62c>)
 8003944:	400a      	ands	r2, r1
 8003946:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003948:	f7fe fde4 	bl	8002514 <HAL_GetTick>
 800394c:	0003      	movs	r3, r0
 800394e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003950:	e008      	b.n	8003964 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003952:	f7fe fddf 	bl	8002514 <HAL_GetTick>
 8003956:	0002      	movs	r2, r0
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	2b02      	cmp	r3, #2
 800395e:	d901      	bls.n	8003964 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e02c      	b.n	80039be <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003964:	4b18      	ldr	r3, [pc, #96]	@ (80039c8 <HAL_RCC_OscConfig+0x620>)
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	2380      	movs	r3, #128	@ 0x80
 800396a:	049b      	lsls	r3, r3, #18
 800396c:	4013      	ands	r3, r2
 800396e:	d1f0      	bne.n	8003952 <HAL_RCC_OscConfig+0x5aa>
 8003970:	e024      	b.n	80039bc <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a1b      	ldr	r3, [r3, #32]
 8003976:	2b01      	cmp	r3, #1
 8003978:	d101      	bne.n	800397e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e01f      	b.n	80039be <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800397e:	4b12      	ldr	r3, [pc, #72]	@ (80039c8 <HAL_RCC_OscConfig+0x620>)
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003984:	4b10      	ldr	r3, [pc, #64]	@ (80039c8 <HAL_RCC_OscConfig+0x620>)
 8003986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003988:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800398a:	697a      	ldr	r2, [r7, #20]
 800398c:	2380      	movs	r3, #128	@ 0x80
 800398e:	025b      	lsls	r3, r3, #9
 8003990:	401a      	ands	r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003996:	429a      	cmp	r2, r3
 8003998:	d10e      	bne.n	80039b8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	220f      	movs	r2, #15
 800399e:	401a      	ands	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d107      	bne.n	80039b8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80039a8:	697a      	ldr	r2, [r7, #20]
 80039aa:	23f0      	movs	r3, #240	@ 0xf0
 80039ac:	039b      	lsls	r3, r3, #14
 80039ae:	401a      	ands	r2, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d001      	beq.n	80039bc <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e000      	b.n	80039be <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	0018      	movs	r0, r3
 80039c0:	46bd      	mov	sp, r7
 80039c2:	b008      	add	sp, #32
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	46c0      	nop			@ (mov r8, r8)
 80039c8:	40021000 	.word	0x40021000
 80039cc:	00001388 	.word	0x00001388
 80039d0:	efffffff 	.word	0xefffffff
 80039d4:	feffffff 	.word	0xfeffffff
 80039d8:	ffc2ffff 	.word	0xffc2ffff

080039dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d101      	bne.n	80039f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e0b3      	b.n	8003b58 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039f0:	4b5b      	ldr	r3, [pc, #364]	@ (8003b60 <HAL_RCC_ClockConfig+0x184>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2201      	movs	r2, #1
 80039f6:	4013      	ands	r3, r2
 80039f8:	683a      	ldr	r2, [r7, #0]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d911      	bls.n	8003a22 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039fe:	4b58      	ldr	r3, [pc, #352]	@ (8003b60 <HAL_RCC_ClockConfig+0x184>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2201      	movs	r2, #1
 8003a04:	4393      	bics	r3, r2
 8003a06:	0019      	movs	r1, r3
 8003a08:	4b55      	ldr	r3, [pc, #340]	@ (8003b60 <HAL_RCC_ClockConfig+0x184>)
 8003a0a:	683a      	ldr	r2, [r7, #0]
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a10:	4b53      	ldr	r3, [pc, #332]	@ (8003b60 <HAL_RCC_ClockConfig+0x184>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2201      	movs	r2, #1
 8003a16:	4013      	ands	r3, r2
 8003a18:	683a      	ldr	r2, [r7, #0]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d001      	beq.n	8003a22 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e09a      	b.n	8003b58 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2202      	movs	r2, #2
 8003a28:	4013      	ands	r3, r2
 8003a2a:	d015      	beq.n	8003a58 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2204      	movs	r2, #4
 8003a32:	4013      	ands	r3, r2
 8003a34:	d006      	beq.n	8003a44 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003a36:	4b4b      	ldr	r3, [pc, #300]	@ (8003b64 <HAL_RCC_ClockConfig+0x188>)
 8003a38:	685a      	ldr	r2, [r3, #4]
 8003a3a:	4b4a      	ldr	r3, [pc, #296]	@ (8003b64 <HAL_RCC_ClockConfig+0x188>)
 8003a3c:	21e0      	movs	r1, #224	@ 0xe0
 8003a3e:	00c9      	lsls	r1, r1, #3
 8003a40:	430a      	orrs	r2, r1
 8003a42:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a44:	4b47      	ldr	r3, [pc, #284]	@ (8003b64 <HAL_RCC_ClockConfig+0x188>)
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	22f0      	movs	r2, #240	@ 0xf0
 8003a4a:	4393      	bics	r3, r2
 8003a4c:	0019      	movs	r1, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	689a      	ldr	r2, [r3, #8]
 8003a52:	4b44      	ldr	r3, [pc, #272]	@ (8003b64 <HAL_RCC_ClockConfig+0x188>)
 8003a54:	430a      	orrs	r2, r1
 8003a56:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	4013      	ands	r3, r2
 8003a60:	d040      	beq.n	8003ae4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d107      	bne.n	8003a7a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a6a:	4b3e      	ldr	r3, [pc, #248]	@ (8003b64 <HAL_RCC_ClockConfig+0x188>)
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	2380      	movs	r3, #128	@ 0x80
 8003a70:	029b      	lsls	r3, r3, #10
 8003a72:	4013      	ands	r3, r2
 8003a74:	d114      	bne.n	8003aa0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e06e      	b.n	8003b58 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d107      	bne.n	8003a92 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a82:	4b38      	ldr	r3, [pc, #224]	@ (8003b64 <HAL_RCC_ClockConfig+0x188>)
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	2380      	movs	r3, #128	@ 0x80
 8003a88:	049b      	lsls	r3, r3, #18
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	d108      	bne.n	8003aa0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e062      	b.n	8003b58 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a92:	4b34      	ldr	r3, [pc, #208]	@ (8003b64 <HAL_RCC_ClockConfig+0x188>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2202      	movs	r2, #2
 8003a98:	4013      	ands	r3, r2
 8003a9a:	d101      	bne.n	8003aa0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e05b      	b.n	8003b58 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003aa0:	4b30      	ldr	r3, [pc, #192]	@ (8003b64 <HAL_RCC_ClockConfig+0x188>)
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	2203      	movs	r2, #3
 8003aa6:	4393      	bics	r3, r2
 8003aa8:	0019      	movs	r1, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685a      	ldr	r2, [r3, #4]
 8003aae:	4b2d      	ldr	r3, [pc, #180]	@ (8003b64 <HAL_RCC_ClockConfig+0x188>)
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ab4:	f7fe fd2e 	bl	8002514 <HAL_GetTick>
 8003ab8:	0003      	movs	r3, r0
 8003aba:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003abc:	e009      	b.n	8003ad2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003abe:	f7fe fd29 	bl	8002514 <HAL_GetTick>
 8003ac2:	0002      	movs	r2, r0
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	4a27      	ldr	r2, [pc, #156]	@ (8003b68 <HAL_RCC_ClockConfig+0x18c>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e042      	b.n	8003b58 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ad2:	4b24      	ldr	r3, [pc, #144]	@ (8003b64 <HAL_RCC_ClockConfig+0x188>)
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	220c      	movs	r2, #12
 8003ad8:	401a      	ands	r2, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d1ec      	bne.n	8003abe <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ae4:	4b1e      	ldr	r3, [pc, #120]	@ (8003b60 <HAL_RCC_ClockConfig+0x184>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	4013      	ands	r3, r2
 8003aec:	683a      	ldr	r2, [r7, #0]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d211      	bcs.n	8003b16 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003af2:	4b1b      	ldr	r3, [pc, #108]	@ (8003b60 <HAL_RCC_ClockConfig+0x184>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2201      	movs	r2, #1
 8003af8:	4393      	bics	r3, r2
 8003afa:	0019      	movs	r1, r3
 8003afc:	4b18      	ldr	r3, [pc, #96]	@ (8003b60 <HAL_RCC_ClockConfig+0x184>)
 8003afe:	683a      	ldr	r2, [r7, #0]
 8003b00:	430a      	orrs	r2, r1
 8003b02:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b04:	4b16      	ldr	r3, [pc, #88]	@ (8003b60 <HAL_RCC_ClockConfig+0x184>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	683a      	ldr	r2, [r7, #0]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d001      	beq.n	8003b16 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e020      	b.n	8003b58 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2204      	movs	r2, #4
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	d009      	beq.n	8003b34 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003b20:	4b10      	ldr	r3, [pc, #64]	@ (8003b64 <HAL_RCC_ClockConfig+0x188>)
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	4a11      	ldr	r2, [pc, #68]	@ (8003b6c <HAL_RCC_ClockConfig+0x190>)
 8003b26:	4013      	ands	r3, r2
 8003b28:	0019      	movs	r1, r3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	68da      	ldr	r2, [r3, #12]
 8003b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8003b64 <HAL_RCC_ClockConfig+0x188>)
 8003b30:	430a      	orrs	r2, r1
 8003b32:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003b34:	f000 f820 	bl	8003b78 <HAL_RCC_GetSysClockFreq>
 8003b38:	0001      	movs	r1, r0
 8003b3a:	4b0a      	ldr	r3, [pc, #40]	@ (8003b64 <HAL_RCC_ClockConfig+0x188>)
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	091b      	lsrs	r3, r3, #4
 8003b40:	220f      	movs	r2, #15
 8003b42:	4013      	ands	r3, r2
 8003b44:	4a0a      	ldr	r2, [pc, #40]	@ (8003b70 <HAL_RCC_ClockConfig+0x194>)
 8003b46:	5cd3      	ldrb	r3, [r2, r3]
 8003b48:	000a      	movs	r2, r1
 8003b4a:	40da      	lsrs	r2, r3
 8003b4c:	4b09      	ldr	r3, [pc, #36]	@ (8003b74 <HAL_RCC_ClockConfig+0x198>)
 8003b4e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003b50:	2000      	movs	r0, #0
 8003b52:	f7fe fc99 	bl	8002488 <HAL_InitTick>
  
  return HAL_OK;
 8003b56:	2300      	movs	r3, #0
}
 8003b58:	0018      	movs	r0, r3
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	b004      	add	sp, #16
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	40022000 	.word	0x40022000
 8003b64:	40021000 	.word	0x40021000
 8003b68:	00001388 	.word	0x00001388
 8003b6c:	fffff8ff 	.word	0xfffff8ff
 8003b70:	08003d74 	.word	0x08003d74
 8003b74:	20000004 	.word	0x20000004

08003b78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b086      	sub	sp, #24
 8003b7c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	60fb      	str	r3, [r7, #12]
 8003b82:	2300      	movs	r3, #0
 8003b84:	60bb      	str	r3, [r7, #8]
 8003b86:	2300      	movs	r3, #0
 8003b88:	617b      	str	r3, [r7, #20]
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003b92:	4b20      	ldr	r3, [pc, #128]	@ (8003c14 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	220c      	movs	r2, #12
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	2b04      	cmp	r3, #4
 8003ba0:	d002      	beq.n	8003ba8 <HAL_RCC_GetSysClockFreq+0x30>
 8003ba2:	2b08      	cmp	r3, #8
 8003ba4:	d003      	beq.n	8003bae <HAL_RCC_GetSysClockFreq+0x36>
 8003ba6:	e02c      	b.n	8003c02 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ba8:	4b1b      	ldr	r3, [pc, #108]	@ (8003c18 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003baa:	613b      	str	r3, [r7, #16]
      break;
 8003bac:	e02c      	b.n	8003c08 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	0c9b      	lsrs	r3, r3, #18
 8003bb2:	220f      	movs	r2, #15
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	4a19      	ldr	r2, [pc, #100]	@ (8003c1c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003bb8:	5cd3      	ldrb	r3, [r2, r3]
 8003bba:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003bbc:	4b15      	ldr	r3, [pc, #84]	@ (8003c14 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bc0:	220f      	movs	r2, #15
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	4a16      	ldr	r2, [pc, #88]	@ (8003c20 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003bc6:	5cd3      	ldrb	r3, [r2, r3]
 8003bc8:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	2380      	movs	r3, #128	@ 0x80
 8003bce:	025b      	lsls	r3, r3, #9
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	d009      	beq.n	8003be8 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003bd4:	68b9      	ldr	r1, [r7, #8]
 8003bd6:	4810      	ldr	r0, [pc, #64]	@ (8003c18 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003bd8:	f7fc fa96 	bl	8000108 <__udivsi3>
 8003bdc:	0003      	movs	r3, r0
 8003bde:	001a      	movs	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4353      	muls	r3, r2
 8003be4:	617b      	str	r3, [r7, #20]
 8003be6:	e009      	b.n	8003bfc <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003be8:	6879      	ldr	r1, [r7, #4]
 8003bea:	000a      	movs	r2, r1
 8003bec:	0152      	lsls	r2, r2, #5
 8003bee:	1a52      	subs	r2, r2, r1
 8003bf0:	0193      	lsls	r3, r2, #6
 8003bf2:	1a9b      	subs	r3, r3, r2
 8003bf4:	00db      	lsls	r3, r3, #3
 8003bf6:	185b      	adds	r3, r3, r1
 8003bf8:	021b      	lsls	r3, r3, #8
 8003bfa:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	613b      	str	r3, [r7, #16]
      break;
 8003c00:	e002      	b.n	8003c08 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c02:	4b05      	ldr	r3, [pc, #20]	@ (8003c18 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003c04:	613b      	str	r3, [r7, #16]
      break;
 8003c06:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003c08:	693b      	ldr	r3, [r7, #16]
}
 8003c0a:	0018      	movs	r0, r3
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	b006      	add	sp, #24
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	46c0      	nop			@ (mov r8, r8)
 8003c14:	40021000 	.word	0x40021000
 8003c18:	007a1200 	.word	0x007a1200
 8003c1c:	08003d84 	.word	0x08003d84
 8003c20:	08003d94 	.word	0x08003d94

08003c24 <memset>:
 8003c24:	0003      	movs	r3, r0
 8003c26:	1882      	adds	r2, r0, r2
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d100      	bne.n	8003c2e <memset+0xa>
 8003c2c:	4770      	bx	lr
 8003c2e:	7019      	strb	r1, [r3, #0]
 8003c30:	3301      	adds	r3, #1
 8003c32:	e7f9      	b.n	8003c28 <memset+0x4>

08003c34 <__libc_init_array>:
 8003c34:	b570      	push	{r4, r5, r6, lr}
 8003c36:	2600      	movs	r6, #0
 8003c38:	4c0c      	ldr	r4, [pc, #48]	@ (8003c6c <__libc_init_array+0x38>)
 8003c3a:	4d0d      	ldr	r5, [pc, #52]	@ (8003c70 <__libc_init_array+0x3c>)
 8003c3c:	1b64      	subs	r4, r4, r5
 8003c3e:	10a4      	asrs	r4, r4, #2
 8003c40:	42a6      	cmp	r6, r4
 8003c42:	d109      	bne.n	8003c58 <__libc_init_array+0x24>
 8003c44:	2600      	movs	r6, #0
 8003c46:	f000 f819 	bl	8003c7c <_init>
 8003c4a:	4c0a      	ldr	r4, [pc, #40]	@ (8003c74 <__libc_init_array+0x40>)
 8003c4c:	4d0a      	ldr	r5, [pc, #40]	@ (8003c78 <__libc_init_array+0x44>)
 8003c4e:	1b64      	subs	r4, r4, r5
 8003c50:	10a4      	asrs	r4, r4, #2
 8003c52:	42a6      	cmp	r6, r4
 8003c54:	d105      	bne.n	8003c62 <__libc_init_array+0x2e>
 8003c56:	bd70      	pop	{r4, r5, r6, pc}
 8003c58:	00b3      	lsls	r3, r6, #2
 8003c5a:	58eb      	ldr	r3, [r5, r3]
 8003c5c:	4798      	blx	r3
 8003c5e:	3601      	adds	r6, #1
 8003c60:	e7ee      	b.n	8003c40 <__libc_init_array+0xc>
 8003c62:	00b3      	lsls	r3, r6, #2
 8003c64:	58eb      	ldr	r3, [r5, r3]
 8003c66:	4798      	blx	r3
 8003c68:	3601      	adds	r6, #1
 8003c6a:	e7f2      	b.n	8003c52 <__libc_init_array+0x1e>
 8003c6c:	08003da4 	.word	0x08003da4
 8003c70:	08003da4 	.word	0x08003da4
 8003c74:	08003da8 	.word	0x08003da8
 8003c78:	08003da4 	.word	0x08003da4

08003c7c <_init>:
 8003c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c7e:	46c0      	nop			@ (mov r8, r8)
 8003c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c82:	bc08      	pop	{r3}
 8003c84:	469e      	mov	lr, r3
 8003c86:	4770      	bx	lr

08003c88 <_fini>:
 8003c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c8a:	46c0      	nop			@ (mov r8, r8)
 8003c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c8e:	bc08      	pop	{r3}
 8003c90:	469e      	mov	lr, r3
 8003c92:	4770      	bx	lr
